<?xml version="1.0" encoding="UTF-8"?>
<!--"This XSLT conversion file is a stand-alone, generated release created from a module based source code.  Any changes to this conversion must be propagated to its original source.
This file is not intended to be edited directly, except in a time critical situation such as a  “sev1” webstar.
Please contact Content Architecture for support and for ensuring the source code is updated as needed and a new stand-alone delivery is released."-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xsltdoc="http://www.lexisnexis.com/xmlstylesheets/documentation/xslt-documentation/1/"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/"
                xmlns:admindoc="urn:x-lexisnexis:content:administrative-document:sharedservices:1"
                xmlns:annot="http://www.lexisnexis.com/xmlschemas/content/shared/annotations/1/"
                xmlns:base="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/"
                xmlns:case="http://www.lexis-nexis.com/glp/case"
                xmlns:case2="http://www.lexisnexis.com/xmlschemas/content/legal/case/1/"
                xmlns:casedigest="http://www.lexisnexis.com/xmlschemas/content/legal/case-digest/1/"
                xmlns:caseinfo="http://www.lexisnexis.com/xmlschemas/content/legal/case-information/1/"
                xmlns:casesum="http://www.lexisnexis.com/xmlschemas/content/legal/case-summary/1/"
                xmlns:ci="http://www.lexis-nexis.com/ci"
                xmlns:classify="http://www.lexisnexis.com/xmlschemas/content/shared/classification/1/"
                xmlns:comm="http://www.lexis-nexis.com/glp/comm"
                xmlns:contact="http://www.lexisnexis.com/xmlschemas/content/shared/contact/1/"
                xmlns:courtcase="http://www.lexisnexis.com/xmlschemas/content/legal/courtcase/1/"
                xmlns:dc="http://purl.org/dc/elements/1.1/"
                xmlns:dig="http://www.lexis-nexis.com/glp/dig"
                xmlns:dita="http://dita.oasis-open.org/architecture/2005/"
                xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/"
                xmlns:doc="http://www.lexisnexis.com/xmlschemas/content/shared/document-level-metadata/1/"
                xmlns:docinfo="http://www.lexis-nexis.com/glp/docinfo"
                xmlns:entity="http://www.lexisnexis.com/xmlschemas/content/shared/identified-entities/1/"
                xmlns:error="urn:x-lexisnexis:conversion:global:error:1"
                xmlns:form="http://www.lexisnexis.com/xmlschemas/content/shared/form/1/"
                xmlns:frm="http://www.lexis-nexis.com/glp/frm"
                xmlns:glp="http://www.lexis-nexis.com/glp"
                xmlns:guid="urn:x-lexisnexis:content:guid:global:1"
                xmlns:in="http://www.lexis-nexis.com/glp/in"
                xmlns:index="urn:x-lexisnexis:content:publicationindex:sharedservices:1"
                xmlns:jrnl="http://www.lexis-nexis.com/glp/jrnl"
                xmlns:jurisinfo="http://www.lexisnexis.com/xmlschemas/content/legal/jurisdiction-info/1/"
                xmlns:leg="http://www.lexis-nexis.com/glp/leg"
                xmlns:legisinfo="http://www.lexisnexis.com/xmlschemas/content/legal/legislation-info/1/"
                xmlns:lnci="http://www.lexisnexis.com/xmlschemas/content/shared/citations/1/"
                xmlns:lncr="http://www.lexis-nexis.com/lncr"
                xmlns:lnf="urn:x-lexisnexis:conversion:global:functions:1"
                xmlns:lnmeta="http://www.lexisnexis.com/xmlschemas/content/shared/lexisnexis-metadata/1/"
                xmlns:lnv="http://www.lexis-nexis.com/lnv"
                xmlns:lnvxe="http://www.lexis-nexis.com/lnvxe"
                xmlns:location="http://www.lexisnexis.com/xmlschemas/content/shared/location/1/"
                xmlns:newsitem="http://www.lexisnexis.com/xmlschemas/content/news/newsitem/1/"
                xmlns:nitf="http://iptc.org/std/NITF/2006-10-18/"
                xmlns:person="http://www.lexisnexis.com/xmlschemas/content/shared/person/1/"
                xmlns:primlaw="http://www.lexisnexis.com/xmlschemas/content/legal/primarylaw/1/"
                xmlns:primlawhist="http://www.lexisnexis.com/xmlschemas/content/legal/primarylaw-history/1/"
                xmlns:proc="http://www.lexisnexis.com/xmlschemas/content/shared/process-elements/1/"
                xmlns:pubfm="http://www.lexisnexis.com/xmlschemas/content/shared/publication-front-matter/1/"
                xmlns:pubinfo="http://www.lexisnexis.com/xmlschemas/content/shared/publication-info/1/"
                xmlns:ref="http://www.lexisnexis.com/xmlschemas/content/shared/reference/1/"
                xmlns:seclaw="http://www.lexisnexis.com/xmlschemas/content/legal/secondary-law/1/"
                xmlns:source_cttr="http://www.lexis-nexis.com/glp/cttr"
                xmlns:source_dict="http://www.lexis-nexis.com/glp/dict"
                xmlns:source_docinfo="http://www.lexis-nexis.com/glp/docinfo"
                xmlns:source_lnci="http://www.lexis-nexis.com/lnci"
                xmlns:topic="urn:x-lexisnexis:content:topic:global:1"
                xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                version="2.0"
                exclude-result-prefixes="#all">
   <xd:doc>
      <xd:desc><!--  this will become the title of the PDF created from the DITA modules (documentation)  -->
         <xd:p>
            <xd:b>UK15 Rosetta COMMENTARYDOC to LxAdv seclaw</xd:b>
         </xd:p>
         <xd:p>This is the driver stylesheet used in transforming ... instance files (... root element) into Lexis Advance ... instance files (... root element).</xd:p>
         <xd:p>Priya Kaushal (priya.kaushal@lexisnexis.com)
		</xd:p>
         <xd:p>20170527</xd:p>
         <xd:p>
            <xd:b>Version History:</xd:b>
         </xd:p>
         <xd:p>1.0 ALPHA: </xd:p>
         <xd:p>Priya Kaushal: 1.0 ALPHA version; first formal release of the stylesheet.</xd:p>
         <xd:p>
            <xd:b>Source: </xd:b>COMMENTARYDOC</xd:p>
         <xd:p>
            <xd:b>Target: </xd:b>\schema_modeling\sharedservices\lexisadvance\rootschemas\seclaw\sch_seclaw.rng version 8.23_PROD</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:output method="xml" indent="no"/>
   <!-- keys necessary to identify id / ID duplicates -->
   <xsl:key name="idTypeValue" match="*[@id]" use="@id"/>
   <xsl:key name="idTypeValue" match="*[@ID]" use="@ID"/>
   <xsl:key name="idTypeValue" match="footnote" use="@fntoken"/>
   <xsl:key name="idTypeValue" match="fnr" use="@fnrtoken"/>
   <!--this key is for footnote matching. -->
   <xsl:key name="fnr-footnote-tokens" match="fnr" use="@fntoken"/>
   <xsl:param name="streamID" as="xs:string" select="'UK15'"/>
   <xsl:param name="inlineobjFilesToSuppress" as="xs:string" select="'UK15'"/>
   <xsl:param name="inlineobjBoilerplateFiles" as="xs:string" select="'UK15'"/>
   <xsl:param name="dpsi" as="xs:string" select=" 'From LBU Manifest File' "/>
   <!--<xsl:param name="inlineobjBoilerplateFiles"/>-->
   <!--<xsl:param name="inlineobjFilesToSuppress" select="('1.gif', '2.gif', '3.gif', '4.gif', '5.gif', 'IconSignalPositive.gif', 'IconSignalNegative.gif', 'IconSignalNeutral.gif', 'IconSignalPossibleNegative.gif', 'IconSignalCiteInfoOnly.gif', 'cbcc.gif', 'leg1.gif', 'mb.gif', 'au_repealed.gif', 'au_exclaim.gif', '1.png', '2.png', '3.png', '4.png', '5.png', 'IconSignalPositive.png', 'IconSignalNegative.png', 'IconSignalNeutral.png', 'IconSignalPossibleNegative.png', 'IconSignalCiteInfoOnly.png', 'cbcc.png', 'leg1.png', 'mb.png', 'au_repealed.png', 'au_exclaim.png')"/>-->
   <xsl:param name="outputSchemaLoc"
              select=" 'http://www.lexisnexis.com/xmlschemas/content/legal/secondary-law/1/ http://www.lexisnexis.com/xmlschemas/content/legal/secondary-law/1/sch_seclaw.xsd' "/>
   <xsl:param name="smi" as="xs:string" select="'From LBU Manifest File'"/>
   <!--**UK15 BODY-PART STARTED 07-06-2017, 1:06 AM **-->
   <xd:doc>
      <xd:desc>
         <xd:ul>
            <xd:li>xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/"</xd:li>
            <!--<li>xmlns:article="urn:x-lexisnexis:content:article:sharedservices:1"</li>-->
            <!--<li>xmlns:caseinfo="http://www.lexisnexis.com/xmlschemas/content/legal/case-information/1/"</li>-->
            <xd:li>xmlns:cfi="http://www.lexisnexis.com/xmlschemas/content/shared/cite-finding-information/1/"</xd:li>
            <xd:li>xmlns:classify="http://www.lexisnexis.com/xmlschemas/content/shared/classification/1/"</xd:li>
            <xd:li>xmlns:contact="http://www.lexisnexis.com/xmlschemas/content/shared/contact/1/"</xd:li>
            <xd:li>xmlns:dc="http://purl.org/dc/elements/1.1/"</xd:li>
            <xd:li>xmlns:dcterms="http://purl.org/dc/terms/"</xd:li>
            <xd:li>xmlns:doc="http://www.lexisnexis.com/xmlschemas/content/shared/document-level-metadata/1/"</xd:li>
            <xd:li>xmlns:entity="http://www.lexisnexis.com/xmlschemas/content/shared/identified-entities/1/"</xd:li>
            <xd:li>xmlns:form="http://www.lexisnexis.com/xmlschemas/content/shared/form/1/"</xd:li>
            <xd:li>xmlns:globalentity="urn:x-lexisnexis:content:identified-entities:global:1"</xd:li>
            <xd:li>xmlns:guid="urn:x-lexisnexis:content:guid:global:1"</xd:li>
            <!--<li>xmlns:jurisinfo="http://www.lexisnexis.com/xmlschemas/content/legal/jurisdiction-info/1/"</li>-->
            <xd:li>xmlns:lnci="http://www.lexisnexis.com/xmlschemas/content/shared/citations/1/"</xd:li>
            <xd:li>xmlns:lndocmeta="http://www.lexisnexis.com/xmlschemas/content/shared/lndocmeta/1/"</xd:li>
            <xd:li>xmlns:lnmeta="http://www.lexisnexis.com/xmlschemas/content/shared/lexisnexis-metadata/1/"</xd:li>
            <xd:li>xmlns:lnsys="http://www.lexisnexis.com/xmlschemas/content/shared/lnsys/1/"</xd:li>
            <xd:li>xmlns:lntbl="http://www.lexisnexis.com/xmlschemas/content/shared/lexisnexis-table-extensions/1/"</xd:li>
            <xd:li>xmlns:location="http://www.lexisnexis.com/xmlschemas/content/shared/location/1/"</xd:li>
            <!--<li>xmlns:newsitem="http://www.lexisnexis.com/xmlschemas/content/news/newsitem/1/"</li>-->
            <!--<li>xmlns:nitf="http://iptc.org/std/NITF/2006-10-18/"</li>-->
            <xd:li>xmlns:person="http://www.lexisnexis.com/xmlschemas/content/shared/person/1/"</xd:li>
            <xd:li>xmlns:proc="http://www.lexisnexis.com/xmlschemas/content/shared/process-elements/1/"</xd:li>
            <xd:li>xmlns:pubinfo="http://www.lexisnexis.com/xmlschemas/content/shared/publication-info/1/"</xd:li>
            <xd:li>xmlns:pubfm="http://www.lexisnexis.com/xmlschemas/content/shared/publication-front-matter/1/"</xd:li>
            <xd:li>xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"</xd:li>
            <xd:li>xmlns:ref="http://www.lexisnexis.com/xmlschemas/content/shared/reference/1/"</xd:li>
            <xd:li>xmlns:seclaw="http://www.lexisnexis.com/xmlschemas/content/legal/secondary-law/1/"</xd:li>
            <xd:li>xmlns:topic="urn:x-lexisnexis:content:topic:global:1"</xd:li>
            <xd:li>xmlns:schemaLocation="http://www.lexisnexis.com/xmlschemas/content/legal/secondary-law/1/
          http://www.lexisnexis.com/xmlschemas/content/legal/secondary-law/1/sch_seclaw.xsd"</xd:li>
         </xd:ul>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15_PracticalGuidance_namespaces.dita  -->
   <!--	<xsl:message>UK15_PracticalGuidance_namespaces.xsl requires manual development!</xsl:message> -->
   <xsl:variable name="lexisAdvNamespaces" as=" element() ">
      <lexisAdvNamespaces>
         <lexisAdvNamespace>xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:admincode="http://www.lexisnexis.com/xmlschemas/content/legal/administrative-code/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:annot="http://www.lexisnexis.com/xmlschemas/content/shared/annotations/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:annotinfo="http://www.lexisnexis.com/xmlschemas/content/shared/annotations-info/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:base="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:classify="http://www.lexisnexis.com/xmlschemas/content/shared/classification/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:contact="http://www.lexisnexis.com/xmlschemas/content/shared/contact/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:courtrule="http://www.lexisnexis.com/xmlschemas/content/legal/courtrule/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:dc="http://purl.org/dc/elements/1.1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:dcterms="http://purl.org/dc/terms/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:doc="http://www.lexisnexis.com/xmlschemas/content/shared/document-level-metadata/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:form="http://www.lexisnexis.com/xmlschemas/content/shared/form/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:index="urn:x-lexisnexis:content:publicationindex:sharedservices:1"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:jurisinfo="http://www.lexisnexis.com/xmlschemas/content/legal/jurisdiction-info/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:legis="http://www.lexisnexis.com/xmlschemas/content/legal/legislation/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:legisinfo="http://www.lexisnexis.com/xmlschemas/content/legal/legislation-info/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:lnci="http://www.lexisnexis.com/xmlschemas/content/shared/citations/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:lndocmeta="http://www.lexisnexis.com/xmlschemas/content/shared/lndocmeta/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:lnmeta="http://www.lexisnexis.com/xmlschemas/content/shared/lexisnexis-metadata/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:location="http://www.lexisnexis.com/xmlschemas/content/shared/location/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:notOutregister="http://www.lexisnexis.com/xmlschemas/content/legal/notOutregister/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:person="http://www.lexisnexis.com/xmlschemas/content/shared/person/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:primlaw="http://www.lexisnexis.com/xmlschemas/content/legal/primarylaw/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:primlawhist="http://www.lexisnexis.com/xmlschemas/content/legal/primarylaw-history/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:primlawinfo="http://www.lexisnexis.com/xmlschemas/content/legal/primarylaw-info/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:proc="http://www.lexisnexis.com/xmlschemas/content/shared/process-elements/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:pubfm="http://www.lexisnexis.com/xmlschemas/content/shared/publication-front-matter/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:pubinfo="http://www.lexisnexis.com/xmlschemas/content/shared/publication-info/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:pubup="http://www.lexisnexis.com/xmlschemas/content/shared/publication-update/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:ref="http://www.lexisnexis.com/xmlschemas/content/shared/reference/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:register="http://www.lexisnexis.com/xmlschemas/content/legal/register/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:registerinfo="http://www.lexisnexis.com/xmlschemas/content/legal/register-info/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:seclaw="http://www.lexisnexis.com/xmlschemas/content/legal/secondary-law/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:statcode="http://www.lexisnexis.com/xmlschemas/content/legal/statutorycode/1/"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:source_cttr="http://www.lexis-nexis.com/glp/cttr"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:xs="http://www.w3.org/2001/XMLSchema"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:topic="urn:x-lexisnexis:content:topic:global:1"</lexisAdvNamespace>
         <lexisAdvNamespace>xmlns:guid="urn:x-lexisnexis:content:guid:global:1"</lexisAdvNamespace>
      </lexisAdvNamespaces>
   </xsl:variable>
   <!-- Updated -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>COMMENTARYDOC</xd:i> becomes <xd:b>seclaw:seclaw</xd:b>
                with the value of <xd:b>@seclawtype</xd:b> set to "practicalguidance".</xd:p>
         <xd:p>
            <xd:b>seclaw:head</xd:b>, <xd:b>seclaw:body</xd:b>, and
                    <xd:b>doc:metadata</xd:b> are created as required children of
                    <xd:b>seclaw:seclaw</xd:b>. In this conversion it is expected that
                    <xd:b>seclaw:head</xd:b> will remain an empty element.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;COMMENTARYDOC&gt; ... &lt;/COMMENTARYDOC&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;seclaw:seclaw seclawtype="practicalguidance" xml:lang="en-GB"&gt;
                    &lt;seclaw:head/&gt; &lt;seclaw:body&gt; ... &lt;/seclaw:body&gt;
                    &lt;doc:metadata&gt; ... &lt;/doc:metadata&gt; &lt;/seclaw:seclaw&gt;
                </xd:pre>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC.dita  -->
   <!--<xsl:message>UK15PG_COMMENTARYDOC.xsl requires manual development!</xsl:message>-->
   <xsl:template match="COMMENTARYDOC"><!--  Original Target XPath:  seclaw:seclaw   -->
      <seclaw:seclaw><!--   output the LA namespace nodes onto the root element.  -->
         <xsl:for-each select="$lexisAdvNamespaces/*">
            <xsl:sort/>
            <xsl:namespace name="{substring-after(substring-before(., '='), ':')}"
                           select="substring-after(translate(., '&#34;', ''), '=')"/>
         </xsl:for-each>
         <!--Create @xsi:schemaLocation based on the global parameter. -->
         <xsl:attribute name="xsi:schemaLocation" select=" $outputSchemaLoc "/>
         <!-- Create seclaw:seclaw/@xml:lang using the global named template that uses doc-lang and doc-country. -->
         <xsl:call-template name="xml_lang"/>
         <!--  Process attributes of root COMMENTARYDOC element. -->
         <xsl:apply-templates select="@*"/>
         <!--Create the required seclaw:seclaw/@seclawtype attribute. -->
         <xsl:variable name="tmpSelector">
            <xsl:value-of select="normalize-space(lower-case(docinfo/docinfo:selector))"/>
         </xsl:variable>
         <xsl:attribute name="seclawtype">
            <xsl:choose>
               <xsl:when test="contains($tmpSelector, 'practicalguidance')">practicalguidance</xsl:when>
               <xsl:otherwise>practicalguidance</xsl:otherwise>
            </xsl:choose>
         </xsl:attribute>
         <seclaw:head/>
         <!-- Rely on the template for comm:body to create the desired seclaw:body. -->
         <!--<xsl:apply-templates select="comm:info" />-->
         <!-- PK: added this -->
         <xsl:apply-templates select="comm:body"/>
         <doc:metadata>
            <xsl:apply-templates select="docinfo"/>
         </doc:metadata>
      </seclaw:seclaw>
   </xsl:template>
   <!-- Updated -->   <!-- Priya Kaushal: Updated -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>xml:lang Instructions</xd:b>
         </xd:p>
         <xd:p>The combination of <xd:i>docinfo/docinfo:doc-lang[@lang]</xd:i> and <xd:i>docinfo/docinfo:doc-country[@iso-cc]</xd:i> becomes
                        <xd:b>{target.root.element}[@xml:lang]</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo:doc-lang lang="en"/&gt; &lt;docinfo:doc-country iso-cc="NZ"/&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;{target.root.elm} xml:lang="en-NZ" ...&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo:doc-lang lang="en"/&gt; &lt;docinfo:doc-country iso-cc="GB"/&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;{target.root.elm} xml:lang="en-GB" ...&gt; </xd:pre>
         <xd:p>
            <xd:b>xml:id Instructions</xd:b>
         </xd:p>
         <xd:p>The attribute <xd:b>xml:id</xd:b> is an W3C standard with a datatype of "ID". Outlined below are some of the cases where the source ID values need to be adjusted to
                    conform to the <xd:b>xml:id</xd:b> standard:</xd:p>
         <xd:p>
            <xd:b>Colon ":" in ID value</xd:b>
         </xd:p>
         <xd:p> When a colon is found within an XML ID replace the colon ":" with an underscore "_" as shown below:</xd:p>
         <xd:pre> &lt;level id="NZSTATUTES_ACTS-A4.SGM_PARA-1925A41:1908A96-EDITORIAL-NOTES" leveltype="comm.chap"&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;primlaw:level id="NZSTATUTES_ACTS-A4.SGM-PARA-1925A41_1908A96-EDITORIAL-NOTES" leveltype="chapter"&gt; </xd:pre>
         <xd:p>
            <xd:b>ID value begins with number</xd:b>
         </xd:p>
         <xd:p>When attribute XML ID value begins with number, then add an underscore "_" as shown below:</xd:p>
         <xd:pre> &lt;level id="475:B005_V2:H1" leveltype="chapter" subdoc="false" toc-caption="PART III THE ADMINISTRATION OF ASSETS"&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;seclaw:level xml:id="_475_B005_V2_H1" leveltype="chapter" includeintoc="false" alternatetoccaption="PART III THE ADMINISTRATION OF ASSETS"&gt; </xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:p>The restrictions and required modifications for <xd:b>xml:id</xd:b> also apply to the following situations:</xd:p>
            <xd:ul>
               <xd:li>The mapping of <xd:i>refpt/@id</xd:i> to <xd:b>ref:anchor/@id</xd:b>
               </xd:li>
               <xd:li>The mapping of <xd:i>footnote/@fntoken</xd:i> to <xd:b>footnote/ref:anchor/@id</xd:b>
               </xd:li>
               <xd:li>The mapping <xd:i>fnr/@fnrtoken</xd:i> to <xd:b>footnote-ref/ref:anchor/@id</xd:b>
               </xd:li>
               <xd:li>The mapping of <xd:i>fnr/@fntoken</xd:i> to <xd:b>foonote-ref/@anchoridref</xd:b>
               </xd:li>
            </xd:ul>
         </xd:p>
         <!--Changes2013-07-16: Instruction narrative edited for language; no changes to mappings, no impact to stylesheets.2013-04-19: Added note about applicability of restrictions and required modifications for xml:id to other scenarios.2012-12-13: Instruction and example update where "ID value begins with number".2012-10-05: Example added for UK content.2012-09-27: Added information for the handling of XML:ID2012-05-23: Added information for the handling of XML:ID2011-12-15: Created.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.doc-lang-and-doc-country-LxAdv-ROOT_xml.lang.dita  -->
   <!-- WPK: this doc-country template is correct and tested -->
   <!--<xsl:template name="parse_id">
		<!-\- This template returns valid ID data type value.  -\->
		<xsl:param name="attr_value" select="."/>
		<xsl:if test="contains('0123456789', substring($attr_value, 1, 1))">
			<xsl:text>_</xsl:text>
		</xsl:if>
		<xsl:value-of select="translate($attr_value, ':', '_')"/>
	</xsl:template>-->
   <!-- WPK: this template is correct and tested -->
   <!--<xsl:template match="@id">
		<!-\- This template creates @xml:id target from @id source.  For any non-specific cases of @id.
                    For specific other use cases of @id, use more specific match, such as "refpt/@id".  -\->
		<xsl:attribute name="xml:id">
			<xsl:call-template name="parse_id">
				<xsl:with-param name="attr_value" select="."/>
			</xsl:call-template>
		</xsl:attribute>
	</xsl:template>-->
   <!-- Vikas Rohilla : Updated the template Removed the double slash	-->
   <!-- 2017-10-04 - MDS:  This should not be used.  Instead use the xml_lang named template -->
   <!--	<xsl:template name="xml_lang_HK">
		<!-\- This template creates @xml:lang from doc-lang and doc-country only for HK stream-\->
		<xsl:attribute name="xml:lang" select="concat(docinfo/docinfo:doc-lang/@lang, '-', docinfo/docinfo:doc-country/@iso-cc)"/>
	</xsl:template>-->
   <!-- WPK: this doc-lang template is correct and tested -->
   <xsl:template match="docinfo:doc-lang/@lang">
      <xsl:value-of select="."/>
   </xsl:template>
   <!-- WPK: this doc-country template is correct and tested -->
   <xsl:template match="docinfo:doc-country/@iso-cc">
      <xsl:value-of select="."/>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>Throughout these instructions, XML character entities are used in both the source and target
						examples to ensure they are easily viewable in a variety of formats. However, please
						keep in mind that <xd:b>
               <xd:i>all XML character entities in the source files must be
								converted to Unicode code points in the target files.</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:p>Certain XML character entities will be interpreted by the ‘browser’ or
							‘Database’ as code, rather than literal (Unicode exact) character. Therefore, we
							should not convert certain xml character entities to Unicode character. Refer
							the below table for your reference:</xd:p>
            <xd:ol>
               <xd:li>
                  <xd:b>XML Character Entity</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>Character name</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>Transformation Output</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b> Remarks </xd:b>
               </xd:li>
               <xd:li> &amp;lt; </xd:li>
               <xd:li> Less-Than Sign </xd:li>
               <xd:li> &amp;lt; </xd:li>
               <xd:li/>
               <xd:li> &amp;gt; </xd:li>
               <xd:li> Greater-Than Sign </xd:li>
               <xd:li> &amp;gt; </xd:li>
               <xd:li/>
               <xd:li> &amp;amp; </xd:li>
               <xd:li> Ampersand </xd:li>
               <xd:li> &amp;amp; </xd:li>
               <xd:li/>
               <xd:li> &amp;apos; </xd:li>
               <xd:li> Apostrophe </xd:li>
               <xd:li> '   </xd:li>
               <xd:li>If part of PCDATA this should be converted
										otherwise left as is in case of attribute value.</xd:li>
               <xd:li> &amp;quot; </xd:li>
               <xd:li> Quotation Mark </xd:li>
               <xd:li> " </xd:li>
               <xd:li>If part of PCDATA this should be converted
										otherwise left as is in case of attribute value.</xd:li>
            </xd:ol>
         </xd:p>
         <!--Changes2013-08-08: This change does not represent a change to
							conversion but rather documentation of the existing behavior.2011-12-22: Created.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_XML_Character_Entities-LxAdv-Unicode.dita  -->
   <!--xsl:template match="*/text()[ contains( . , '&apos;' ) or contains( . , '&quot;' ) ]">
		<xsl:variable name="quoteLiterals" as="xs:string">'"</xsl:variable-->
   <!--  Original Target XPath:  Unicodecodepoints   -->
   <!--xsl:value-of select=" translate( . , '&apos;&quot;' , $quoteLiterals ) "/>

	</xsl:template-->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>Each source element should be converted to its associated target element such that
					the target element will occur in the target document in the same relative order as
					its respective source element did in the source document, so long as <xd:i>the target
						schema does not require a specific order for that target element within that
						target element's parent element</xd:i> (first exception), and <xd:i>there are no other
						instructions regarding the moving of that target element</xd:i> (second exception).
					In other words, when converting elements from the source documents, the order of
					elements as they are encountered in the source documents should in general be
					maintained whenever possible, subject to the two important exceptions mentioned in
					the previous sentence and elaborated below. </xd:p>
         <xd:p>Note that according to this rule, the order of particular target elements within a
					parent target element may be different than the order that these elements are
					listed, noted or otherwise mentioned in these instructions. This includes situations
					when a set of child target elements are specified in these instructions as items in
					a list following instructions regarding the parent target element; the order of the
					items dictates the order that the target elements should occur.</xd:p>
         <xd:p>
            <xd:b>Elaboration regarding first exception:</xd:b> there are ordering constraints imposed
					by the target schema for some elements, requiring that target child elements must
					occur in a certain order within target parent elements, and this order may differ
					from the order of their corresponding source elements in the source documents. In
					this case, the constraints imposed by the target schema must be respected.</xd:p>
         <xd:p>
            <xd:b>Elaboration regarding second exception:</xd:b> there will be occasional scenarios
					when the source elements must not only be converted to particular target elements,
					but must also be shifted to specifically different locations within in the target
					documents. These scenarios will be explicitly mentioned for the source and target
					elements affected and must override the general rule to maintain element order.</xd:p>
         <xd:p>
            <xd:b>Processing Instructions</xd:b>
         </xd:p>
         <xd:p> In the source content there may be <xd:b>processing instructions</xd:b>. For example
					&lt;?page.*?&gt;. If a processing instruction is encountered it should be
					suppressed and not converted into the output.</xd:p>
         <!--Changes2012-01-19: Created. 2012-05-10: Added instruction for Processing Instructions. 2012-05-15: Adjusted the language for the instruction.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_Elements-LxAdv-Maintain_Sequential_Order.dita  -->
   <xsl:template match="processing-instruction()" priority="25"/>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>All significant whitespace characters (i.e. newlines, spaces, tabs, non-breaking spaces, etc. in data content or mixed content in elements) should be preserved. No significant whitespace should be added, removed or altered. In some cases, an element that contains only whitespace in the input may be stripped from the output by specific instruction; in those cases, both the tags and the whitespace should be removed.</xd:p>
         <!--Changes2012-06-07: Created. -->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_whitespace-LxAdv-preserve_whitespace.dita  -->
   <!-- THIS IS INFORMATIONAL ONLY AND NEVER EVER EVER STRIP SPACE FOR EVERY ELEMENT.  -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Suppress empty elements unless:</xd:b>
         </xd:p>
         <xd:ol>
            <xd:li> It results in an invalid document. </xd:li>
            <xd:li> It is expressly exempted. </xd:li>
            <xd:li> It has attributes. </xd:li>
         </xd:ol>
         <xd:p>
            <xd:b>Note: </xd:b>The intent is to suppress meaningless markup (no semantic, formatting or other
					meaning). Not intended to cause re-evaluation of parent elements, i.e. do not go "up
					the tree".</xd:p>
         <xd:p>
            <xd:b>List of elements to suppress if empty</xd:b>
         </xd:p>
         <xd:ul>
            <xd:li>base:aliased-text</xd:li>
            <xd:li>base:altdesig</xd:li>
            <xd:li>base:alttitle</xd:li>
            <xd:li>base:byline</xd:li>
            <xd:li>base:connector</xd:li>
            <xd:li>base:copyright</xd:li>
            <xd:li>base:copyright-holder</xd:li>
            <xd:li>base:copyright-year</xd:li>
            <xd:li>base:credit</xd:li>
            <xd:li>base:currencystatement</xd:li>
            <xd:li>base:date</xd:li>
            <xd:li>base:date-text</xd:li>
            <xd:li>base:defterm</xd:li>
            <xd:li>base:denom</xd:li>
            <xd:li>base:desig</xd:li>
            <xd:li>base:desigrange</xd:li>
            <xd:li>base:emph</xd:li>
            <xd:li>base:formula</xd:li>
            <xd:li>base:h</xd:li>
            <xd:li>base:inlinenote</xd:li>
            <xd:li>base:label</xd:li>
            <xd:li>base:modified-word</xd:li>
            <xd:li>base:money</xd:li>
            <xd:li>base:num</xd:li>
            <xd:li>base:numer</xd:li>
            <xd:li>base:population</xd:li>
            <xd:li>base:redaction</xd:li>
            <xd:li>base:refnum</xd:li>
            <xd:li>base:role</xd:li>
            <xd:li>base:strike</xd:li>
            <xd:li>base:sub</xd:li>
            <xd:li>base:subtitle</xd:li>
            <xd:li>base:sup</xd:li>
            <xd:li>base:text</xd:li>
            <xd:li>base:textitem</xd:li>
            <xd:li>base:time</xd:li>
            <xd:li>base:title</xd:li>
            <xd:li>base:url</xd:li>
            <xd:li>contact:email</xd:li>
            <xd:li>contact:fax</xd:li>
            <xd:li>contact:phone</xd:li>
            <xd:li>doc:bookseqnum</xd:li>
            <xd:li>doc:processes</xd:li>
            <xd:li>location:address.line</xd:li>
            <xd:li>location:borough</xd:li>
            <xd:li>location:city</xd:li>
            <xd:li>location:country</xd:li>
            <xd:li>location:county</xd:li>
            <xd:li>location:location</xd:li>
            <xd:li>location:po-box</xd:li>
            <xd:li>location:post-office-name</xd:li>
            <xd:li>location:postalcode</xd:li>
            <xd:li>location:province</xd:li>
            <xd:li>location:region</xd:li>
            <xd:li>location:state</xd:li>
            <xd:li>location:street</xd:li>
            <xd:li>location:sublocation</xd:li>
            <xd:li>location:territory</xd:li>
            <xd:li>person:contributor</xd:li>
            <xd:li>person:degreetype</xd:li>
            <xd:li>person:employer</xd:li>
            <xd:li>person:fieldofstudy</xd:li>
            <xd:li>person:name.degree</xd:li>
            <xd:li>person:name.discrim</xd:li>
            <xd:li>person:name.family</xd:li>
            <xd:li>person:name.given</xd:li>
            <xd:li>person:name.honorific</xd:li>
            <xd:li>person:name.maiden</xd:li>
            <xd:li>person:name.mid</xd:li>
            <xd:li>person:name.nickname</xd:li>
            <xd:li>person:name.other</xd:li>
            <xd:li>person:name.prefix</xd:li>
            <xd:li>person:name.suffix</xd:li>
            <xd:li>person:name.text</xd:li>
            <xd:li>pubinfo:aggregationname</xd:li>
            <xd:li>pubinfo:edition</xd:li>
            <xd:li>pubinfo:isbn</xd:li>
            <xd:li>pubinfo:issn</xd:li>
            <xd:li>pubinfo:issue</xd:li>
            <xd:li>pubinfo:issuedate</xd:li>
            <xd:li>pubinfo:lccn</xd:li>
            <xd:li>pubinfo:pubdate</xd:li>
            <xd:li>pubinfo:publength</xd:li>
            <xd:li>pubinfo:publicationname</xd:li>
            <xd:li>pubinfo:publicationnum</xd:li>
            <xd:li>pubinfo:publicationsubtitle</xd:li>
            <xd:li>pubinfo:publisher</xd:li>
            <xd:li>pubinfo:pubunit</xd:li>
            <xd:li>pubinfo:relatedpublicationcite</xd:li>
            <xd:li>pubinfo:update</xd:li>
            <xd:li>pubinfo:volume</xd:li>
         </xd:ul>
         <!--Changes2014-01-16: Added list of elements to suppress if empty.2013-10-14: Changed antecedent to singular to match
						instructions.2013-03-28: Created.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_Elements-LxAdv-Empty_Elements.dita  -->
   <!--xsl:template match="	base:aliased-text[ . = '' ][not( @* )] |
										base:altdesig[ . = '' ][not( @* )] |
										base:alttitle[ . = '' ][not( @* )] |
										base:byline[ . = '' ][not( @* )] |
										base:connector[ . = '' ][not( @* )] |
										base:copyright[ . = '' ][not( @* )] |
										base:copyright-holder[ . = '' ][not( @* )] |
										base:copyright-year[ . = '' ][not( @* )] |
										base:credit[ . = '' ][not( @* )] |
										base:currencystatement[ . = '' ][not( @* )] |
										base:date[ . = '' ][not( @* )] |
										base:date-text[ . = '' ][not( @* )] |
										base:defterm[ . = '' ][not( @* )] |
										base:denom[ . = '' ][not( @* )] |
										base:desig[ . = '' ][not( @* )] |
										base:desigrange[ . = '' ][not( @* )] |
										base:emph[ . = '' ][not( @* )] |
										base:formula[ . = '' ][not( @* )] |
										base:h[ . = '' ][not( @* )] |
										base:inlinenote[ . = '' ][not( @* )] |
										base:label[ . = '' ][not( @* )] |
										base:modified-word[ . = '' ][not( @* )] |
										base:money[ . = '' ][not( @* )] |
										base:num[ . = '' ][not( @* )] |
										base:numer[ . = '' ][not( @* )] |
										base:population[ . = '' ][not( @* )] |
										base:redaction[ . = '' ][not( @* )] |
										base:refnum[ . = '' ][not( @* )] |
										base:role[ . = '' ][not( @* )] |
										base:strike[ . = '' ][not( @* )] |
										base:sub[ . = '' ][not( @* )] |
										base:subtitle[ . = '' ][not( @* )] |
										base:sup[ . = '' ][not( @* )] |
										base:text[ . = '' ][not( @* )] |
										base:textitem[ . = '' ][not( @* )] |
										base:time[ . = '' ][not( @* )] |
										base:title[ . = '' ][not( @* )] |
										base:url[ . = '' ][not( @* )] |
										contact:email[ . = '' ][not( @* )] |
										contact:fax[ . = '' ][not( @* )] |
										contact:phone[ . = '' ][not( @* )] |
										doc:bookseqnum[ . = '' ][not( @* )] |
										doc:processes[ . = '' ][not( @* )] |
										location:address.line[ . = '' ][not( @* )] |
										location:borough[ . = '' ][not( @* )] |
										location:city[ . = '' ][not( @* )] |
										location:country[ . = '' ][not( @* )] |
										location:county[ . = '' ][not( @* )] |
										location:location[ . = '' ][not( @* )] |
										location:po-box[ . = '' ][not( @* )] |
										location:post-office-name[ . = '' ][not( @* )] |
										location:postalcode[ . = '' ][not( @* )] |
										location:province[ . = '' ][not( @* )] |
										location:region[ . = '' ][not( @* )] |
										location:state[ . = '' ][not( @* )] |
										location:street[ . = '' ][not( @* )] |
										location:sublocation[ . = '' ][not( @* )] |
										location:territory[ . = '' ][not( @* )] |
										person:contributor[ . = '' ][not( @* )] |
										person:degreetype[ . = '' ][not( @* )] |
										person:employer[ . = '' ][not( @* )] |
										person:fieldofstudy[ . = '' ][not( @* )] |
										person:name.degree[ . = '' ][not( @* )] |
										person:name.discrim[ . = '' ][not( @* )] |
										person:name.family[ . = '' ][not( @* )] |
										person:name.given[ . = '' ][not( @* )] |
										person:name.honorific[ . = '' ][not( @* )] |
										person:name.maiden[ . = '' ][not( @* )] |
										person:name.mid[ . = '' ][not( @* )] |
										person:name.nickname[ . = '' ][not( @* )] |
										person:name.other[ . = '' ][not( @* )] |
										person:name.prefix[ . = '' ][not( @* )] |
										person:name.suffix[ . = '' ][not( @* )] |
										person:name.text[ . = '' ][not( @* )] |
										pubinfo:aggregationname[ . = '' ][not( @* )] |
										pubinfo:edition[ . = '' ][not( @* )] |
										pubinfo:isbn[ . = '' ][not( @* )] |
										pubinfo:issn[ . = '' ][not( @* )] |
										pubinfo:issue[ . = '' ][not( @* )] |
										pubinfo:issuedate[ . = '' ][not( @* )] |
										pubinfo:lccn[ . = '' ][not( @* )] |
										pubinfo:pubdate[ . = '' ][not( @* )] |
										pubinfo:publength[ . = '' ][not( @* )] |
										pubinfo:publicationname[ . = '' ][not( @* )] |
										pubinfo:publicationnum[ . = '' ][not( @* )] |
										pubinfo:publicationsubtitle[ . = '' ][not( @* )] |
										pubinfo:publisher[ . = '' ][not( @* )] |
										pubinfo:pubunit[ . = '' ][not( @* )] |
										pubinfo:relatedpublicationcite[ . = '' ][not( @* )] |
										pubinfo:update[ . = '' ][not( @* )] |
										pubinfo:volume[ . = '' ][not( @* )]"/-->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>All topics in this conversion instruction document contain persistent identifiers.  They will appear
					next to the title for example: 
					<xd:ul>
               <xd:li>case:headnote (id-CA01-d330e3)</xd:li>
               <xd:li>alttitle to alttitle (id-CCCC-d57e3)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>They will take the form of (id<xd:b>-</xd:b>[<xd:i>stream id or common rule</xd:i>]<xd:b>-</xd:b>[<xd:i>unique id</xd:i>]) and have the 
					following characteristics:</xd:p>
         <xd:ul>
            <xd:li>IDs for a specific stream topic e.g. (id-AU01-d730e3) will occur only in a
						single CI document -- AU01 for this example.</xd:li>
            <xd:li>IDs for common reusable topics e.g. (id-CCCC-d57e3) will occur in many CI
						documents according to its reuse. While the ID is unique across all LNI topics, the
						topic itself is repeated along with the ID in numerous CI documents.</xd:li>
         </xd:ul>
         <!--Changes2014-05-02: Created.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_Topic_Identifiers.dita  -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>comm:info</xd:i> becomes
                    <xd:b>seclaw:body/pubfm:pubfm</xd:b> with the value of
                    <xd:b>pubfm:pubfm/@pubfmtype</xd:b> set to "contributor".</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;comm:info&gt; &lt;contrib contribtype="author"&gt; Produced in
                    partnership with &lt;org&gt;&lt;remotelink hrefclass="http"
                    href="lexislegalintelligence.co.uk/lexispsl/tax-experts" newwindow="YES"&gt;Anne
                    Fairpo of Atlas Chambers&lt;/remotelink&gt;&lt;/org&gt;&lt;/contrib&gt;
                    &lt;/comm:info&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;seclaw:body&gt; &lt;pubfm:pubfm pubfmtype="contributor"&gt;
                    &lt;byline&gt; Produced in partnership with &lt;ref:lnlink service="URL"&gt;
                    &lt;ref:marker&gt;Anne Fairpo of Atlas Chambers&lt;/ref:marker&gt;
                    &lt;ref:locator&gt; &lt;ref:locator-key&gt; &lt;ref:key-name name="URL"/&gt;
                    &lt;ref:key-value
                    value="http://lexislegalintelligence.co.uk/lexispsl/tax-experts"/&gt;
                    &lt;/ref:locator-key&gt; &lt;/ref:locator&gt; &lt;/ref:lnlink&gt;&lt;/byline&gt;
                    &lt;/pubfm:pubfm&gt; ... &lt;/seclaw:body&gt; </xd:pre>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_comm.info.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_comm.info.xsl requires manual development!</xsl:message> -->
   <xsl:template match="comm:info"><!--<seclaw:body>

            <xsl:apply-templates select="@* | node()"/>

        </seclaw:body>-->
      <pubfm:pubfm>
         <xsl:attribute name="pubfmtype">contributor</xsl:attribute>
         <xsl:apply-templates select="@* | node()"/>
      </pubfm:pubfm>
   </xsl:template>
   <!-- Updated -->   <!-- Priya Kaushal: Updated -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>contrib</xd:i> becomes <xd:b>pubfm:pubfm/byline</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;comm:info&gt; &lt;contrib contribtype="author"&gt; Produced in
                    partnership with &lt;org&gt;&lt;remotelink hrefclass="http"
                    href="lexislegalintelligence.co.uk/lexispsl/tax-experts" newwindow="YES"&gt;Anne
                    Fairpo of Atlas Chambers&lt;/remotelink&gt;&lt;/org&gt;&lt;/contrib&gt;
                    &lt;/comm:info&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;seclaw:body&gt; &lt;pubfm:pubfm pubfmtype="contributor"&gt;
                    &lt;byline&gt;Produced in partnership with &lt;ref:lnlink service="URL"&gt;
                    &lt;ref:marker&gt;Anne Fairpo of Atlas Chambers&lt;/ref:marker&gt;
                    &lt;ref:locator&gt; &lt;ref:locator-key&gt; &lt;ref:key-name name="URL"/&gt;
                    &lt;ref:key-value
                    value="http://lexislegalintelligence.co.uk/lexispsl/tax-experts"/&gt;
                    &lt;/ref:locator-key&gt; &lt;/ref:locator&gt; &lt;/ref:lnlink&gt;&lt;/byline&gt;
                    &lt;/pubfm:pubfm&gt; ... &lt;/seclaw:body&gt; </xd:pre>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_contrib.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_contrib.xsl requires manual development!</xsl:message> -->
   <xsl:template match="contrib"><!--  Original Target XPath:  pubfm:pubfm/byline   --><!--<pubfm:pubfm>
		    <xsl:attribute name="pubfmtype">contributor</xsl:attribute>-->
      <byline><!--<xsl:apply-templates select="@* | node() except org"/>--><!-- PK: added to remove entity:org from target but commenting now as it is having issues -->
         <xsl:apply-templates select="@* | node()"/>
      </byline>
      <!--</pubfm:pubfm>-->
   </xsl:template>

   <xsl:template match="org[parent::contrib]" priority="25">
      <xsl:apply-templates select="@* | node()"/>
   </xsl:template>

   <xsl:template match="contrib/@contribtype"/>
   <!-- Priya Kaushal: Updated -->   <!--<xsl:include href="../../modules/nonamespace/UK15PG_COMMENTARYDOC_org_remotelink.xsl"/>-->   <!-- Priya Kaushal: Updated -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>comm:body</xd:i> becomes <xd:b>seclaw:body</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;COMMENTARYDOC&gt; ... &lt;comm:body&gt; ... &lt;/comm:body&gt;
                    &lt;/COMMENTARYDOC&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;seclaw:seclaw&gt; ... &lt;seclaw:body&gt; ... &lt;/seclaw:body&gt;
                    ... &lt;/seclaw:seclaw&gt; </xd:pre>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_comm.body.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_comm.body.xsl requires manual development!</xsl:message> -->
   <xsl:template match="comm:body"><!--  Original Target XPath:  seclaw:body   -->
      <seclaw:body>
         <xsl:apply-templates select="/COMMENTARYDOC/comm:info"/>
         <xsl:apply-templates select="@* | node()"/>
      </seclaw:body>
   </xsl:template>
   <!-- Updated -->   <!-- Priya Kaushal: Updated -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>level</xd:i> becomes <xd:b>seclaw:level</xd:b> with the
                value of <xd:i>level/@leveltype</xd:i> becoming the value of
                    <xd:b>seclaw:level/@leveltype</xd:b>. If
                    <xd:i>@leveltype</xd:i> is not present in
                <xd:i>level</xd:i>, then <xd:i>level/@leveltype</xd:i> should be
                set to a value of "topic".</xd:p>
         <xd:p>If <xd:i>level</xd:i> is the child of another <xd:i>level</xd:i>,
                then it should be mapped to the <xd:b>seclaw:bodytext</xd:b> of the parent
                    <xd:b>seclaw:level</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;comm:body&gt; &lt;level leveltype="division"&gt; &lt;heading&gt;
                    &lt;title&gt;Terms of art or special terms&lt;/title&gt; &lt;/heading&gt;
                    &lt;bodytext&gt; &lt;p&gt; &lt;text&gt;This Practice Note deals with contractual
                    terms that are terms of art or that have a special application in particular
                    industries or sectors.&lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt; &lt;level
                    leveltype="section"&gt; &lt;heading&gt; &lt;title&gt;Good faith&lt;/title&gt;
                    &lt;/heading&gt; &lt;bodytext&gt; &lt;p&gt; &lt;text&gt;As there is no
                    statutorily implied term of good faith in English law contracts, there is not a
                    settled precedent or authority to define what good faith is. A common definition
                    is provided under common law in the judgment of Bingham LJ in &lt;emph
                    typestyle="it"&gt;Interfoto Picture Library v Stiletto Visual
                    Programmes&lt;/emph&gt;:&lt;/text&gt; &lt;/p&gt; ... &lt;/bodytext&gt;
                    &lt;/level&gt; ... &lt;/level&gt; &lt;/comm:body&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;seclaw:body&gt; &lt;seclaw:level leveltype="division"&gt;
                    &lt;heading&gt; &lt;title&gt;Terms of art or special terms&lt;/title&gt;
                    &lt;/heading&gt; &lt;seclaw:bodytext&gt; &lt;p&gt; &lt;text&gt;This Practice
                    Note deals with contractual terms that are terms of art or that have a special
                    application in particular industries or sectors.&lt;/text&gt; &lt;/p&gt;
                    &lt;seclaw:level leveltype="section"&gt; &lt;heading&gt; &lt;title&gt;Good
                    faith&lt;/title&gt; &lt;/heading&gt; &lt;seclaw:bodytext&gt; &lt;p&gt;
                    &lt;text&gt;As there is no statutorily implied term of good faith in English law
                    contracts, there is not a settled precedent or authority to define what good
                    faith is. A common definition is provided under common law in the judgment of
                    Bingham LJ in &lt;emph typestyle="it"&gt;Interfoto Picture Library v Stiletto
                    Visual Programmes&lt;/emph&gt;:&lt;/text&gt; &lt;/p&gt; ...
                    &lt;/seclaw:bodytext&gt; &lt;/seclaw:level&gt; ... &lt;/seclaw:bodytext&gt;
                    &lt;/seclaw:level&gt; &lt;/seclaw:body&gt; </xd:pre>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_level.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_level.xsl requires manual development!</xsl:message> -->
   <xsl:template match="level[parent::comm:body]">
      <seclaw:level>
         <xsl:attribute name="leveltype">
            <xsl:value-of select="@leveltype"/>
         </xsl:attribute>
         <xsl:apply-templates select="@* | node() except (level[preceding-sibling::*[1][name() = 'bodytext']])"/>
      </seclaw:level>
   </xsl:template>
   <!-- BRT 11/27/17 - modified template to add [not(preceding-sibling::bodytext[not(./child::references[1]) .... to avoid ambiguity error with that template -->
   <xsl:template match="level[1][parent::level][not(preceding-sibling::bodytext[not(./child::references[1]) or ./child::references[1]/preceding-sibling::node()])]">
      <seclaw:bodytext>
         <xsl:choose>
            <xsl:when test="child::heading/title/refpt">
               <seclaw:level>
                  <xsl:attribute name="leveltype">
                     <xsl:value-of select="@leveltype"/>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="child::heading/title/refpt"/>-->
                  <xsl:apply-templates select="@* | node() except (level[preceding-sibling::bodytext])"/>
               </seclaw:level>
            </xsl:when>
            <xsl:when test="child::heading/title and not(child::heading/title/refpt)">
               <seclaw:level>
                  <xsl:attribute name="leveltype">
                     <xsl:value-of select="@leveltype"/>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="child::heading/title"/>-->
                  <xsl:apply-templates select="@* | node() except (level[preceding-sibling::bodytext])"/>
               </seclaw:level>
            </xsl:when>
            <xsl:when test="child::bodytext/references/heading/title/refpt">
               <seclaw:level>
                  <xsl:attribute name="leveltype">
                     <xsl:value-of select="@leveltype"/>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="child::bodytext/references/heading/title/refpt"/>-->
                  <xsl:apply-templates select="@* | node() except (level[preceding-sibling::bodytext])"/>
               </seclaw:level>
            </xsl:when>
         </xsl:choose>
         <xsl:for-each select="following-sibling::level[1]">
            <xsl:call-template name="following-level"/>
         </xsl:for-each>
      </seclaw:bodytext>
   </xsl:template>

   <xsl:template name="following-level">
      <xsl:choose>
         <xsl:when test="child::heading/title/refpt">
            <seclaw:level>
               <xsl:attribute name="leveltype">
                  <xsl:value-of select="@leveltype"/>
               </xsl:attribute>
               <xsl:apply-templates select="child::heading/title/refpt"/>
               <xsl:apply-templates select="@* | node() except (level[preceding-sibling::bodytext])"/>
            </seclaw:level>
            <xsl:apply-templates select="following-sibling::level[preceding-sibling::*[1][self::level]]"
                                 mode="level_wrapping"/>
         </xsl:when>
         <xsl:when test="child::heading/title and not(child::heading/title/refpt)">
            <seclaw:level>
               <xsl:attribute name="leveltype">
                  <xsl:value-of select="@leveltype"/>
               </xsl:attribute>
               <!--<xsl:apply-templates select="child::heading/title"/>-->
               <xsl:apply-templates select="@* | node() except (level[preceding-sibling::bodytext])"/>
            </seclaw:level>
         </xsl:when>
         <xsl:when test="child::bodytext/references/heading/title/refpt and not(/COMMENTARYDOC/comm:body[1]/level[1]/level[6]/bodytext[1]/references[1])">
            <seclaw:level>
               <xsl:attribute name="leveltype">
                  <xsl:value-of select="@leveltype"/>
               </xsl:attribute>
               <xsl:apply-templates select="child::bodytext/references/heading/title/refpt"/>
               <xsl:apply-templates select="@* | node() except (level[preceding-sibling::bodytext])"/>
            </seclaw:level>
         </xsl:when>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="level" mode="level_wrapping">
      <seclaw:level>
         <xsl:attribute name="leveltype">
            <xsl:value-of select="@leveltype"/>
         </xsl:attribute>
         <xsl:apply-templates select="@* | node()"/>
      </seclaw:level>
   </xsl:template>

   <xsl:template match="@subdoc">
      <xsl:attribute name="includeintoc">
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>

   <xsl:template match="@toc-caption">
      <xsl:attribute name="alternatetoccaption">
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>

   <xsl:template match="level/@leveltype"/>

   <xsl:template match="level[preceding-sibling::level[ancestor::level]]" priority="2"/>

   <xsl:template match="emph[parent::title][child::refpt]">
      <xsl:apply-templates select="node() except refpt"/>
   </xsl:template>
   <!-- Priya Kaushal: Updated -->   <xd:doc>
      <xd:desc>
         <xd:p>When <xd:i>refpt</xd:i> is a child of
                    <xd:i>level/heading/title</xd:i> it should be mapped to
                    <xd:b>ref:anchor</xd:b> as usual, but it should become a child of the
                    <xd:b>seclaw:level</xd:b> to which it belongs.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;level leveltype="division"&gt; &lt;heading&gt;
                    &lt;title&gt;&lt;refpt id="0OM9_100209" type="ext"/&gt;Property and registration
                    fraud&lt;/title&gt; &lt;/heading&gt; &lt;levelprelim&gt; &lt;abstract&gt; ...
                    &lt;/abstract&gt; &lt;/levelprelim&gt; &lt;bodytext&gt; ... &lt;/bodytext&gt;
                    &lt;/level&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;seclaw:level leveltype="division"&gt; &lt;ref:anchor
                    id="_0OM9_100209" anchortype="global"/&gt; &lt;heading&gt; &lt;title&gt;Property
                    and registration fraud&lt;/title&gt; &lt;/heading&gt; &lt;seclaw:prelim&gt;
                    &lt;abstract&gt; &lt;bodytext&gt; ... &lt;/bodytext&gt; &lt;/abstract&gt;
                    &lt;/seclaw:prelim&gt; &lt;seclaw:bodytext&gt; ... &lt;/seclaw:bodytext&gt;
                    &lt;/seclaw:level&gt; </xd:pre>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_refpt.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_refpt.xsl requires manual development!</xsl:message> -->
   <!--  <xsl:template match="refpt">
        <ref:anchor>
            <xsl:apply-templates select="@* | node()"/>
        </ref:anchor>
    </xsl:template>-->
   <!--<xsl:template match="level/heading/title">
        <ref:anchor>
            <xsl:apply-templates select="@* | node()"/>
        </ref:anchor>
    </xsl:template>-->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>levelprelim</xd:i> becomes <xd:b>seclaw:prelim</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;level leveltype="division"&gt; &lt;heading&gt; &lt;title&gt;Search
                    of premises&lt;/title&gt; &lt;/heading&gt; &lt;levelprelim&gt; &lt;abstract&gt;
                    &lt;p&gt; &lt;text&gt;This practice note covers the powers of the police to
                    enter and search premises with or without a warrant under the Police and
                    Criminal Evidence Act 1984 (PACE 1984). It covers the powers of search under
                    PACE 1984, s 32 on arrest, under PACE 1984, s 18, after arrest and search of
                    premises with the owner&amp;#x2019;s consent.&lt;/text&gt; &lt;/p&gt;
                    &lt;/abstract&gt; &lt;/levelprelim&gt; &lt;bodytext&gt; ... &lt;/bodytext&gt;
                    &lt;/level&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;seclaw:level leveltype="division"&gt; &lt;heading&gt;
                    &lt;title&gt;Search of premises&lt;/title&gt; &lt;/heading&gt;
                    &lt;seclaw:prelim&gt; &lt;abstract&gt; &lt;bodytext&gt; &lt;p&gt;
                    &lt;text&gt;This practice note covers the powers of the police to enter and
                    search premises with or without a warrant under the Police and Criminal Evidence
                    Act 1984 (PACE 1984). It covers the powers of search under PACE 1984, s 32 on
                    arrest, under PACE 1984, s 18, after arrest and search of premises with the
                    owner&amp;#x2019;s consent.&lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt;
                    &lt;/abstract&gt; &lt;/seclaw:prelim&gt; &lt;seclaw:bodytext&gt; ...
                    &lt;/seclaw:bodytext&gt; &lt;/seclaw:level&gt; </xd:pre>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_levelprelim.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_levelprelim.xsl requires manual development!</xsl:message> -->
   <xsl:template match="levelprelim">
      <seclaw:prelim>
         <xsl:apply-templates select="@* | node()"/>
      </seclaw:prelim>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>abstract</xd:i> becomes <xd:b>abstract</xd:b>. The content of
                <xd:i>abstract</xd:i> maps to <xd:b>abstract/bodytext</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;level leveltype="division"&gt;
    &lt;heading&gt;
        &lt;title&gt;&lt;refpt id="0OJE_44190" type="ext"/&gt;Compliance&lt;/title&gt;
    &lt;/heading&gt;
    &lt;levelprelim&gt;
        &lt;abstract&gt;
            &lt;p&gt;
                &lt;text&gt;This notes sets out the risks of non-compliance with competition law before
                    giving guidance on how to implement a competition law compliance
                    programme.&lt;/text&gt;
            &lt;/p&gt;
        &lt;/abstract&gt;
    &lt;/levelprelim&gt;
    &lt;bodytext&gt;
        ...
    &lt;/bodytext&gt;
&lt;/level&gt;

           </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;seclaw:level leveltype="division"&gt;
    &lt;heading&gt;
        &lt;title&gt;Compliance&lt;/title&gt;
    &lt;/heading&gt;
    &lt;seclaw:prelim&gt;
        &lt;abstract&gt;
            &lt;bodytext&gt;
                &lt;p&gt;
                &lt;text&gt;This notes sets out the risks of non-compliance with competition law before
                    giving guidance on how to implement a competition law compliance
                    programme.&lt;/text&gt;
            &lt;/p&gt;
            &lt;/bodytext&gt;
        &lt;/abstract&gt;
    &lt;/seclaw:prelim&gt;
    &lt;seclaw:bodytext&gt;
        ...
    &lt;/seclaw:bodytext&gt;
&lt;/seclaw:level&gt;

           </xd:pre>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_abstract.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_abstract.xsl requires manual development!</xsl:message> -->
   <xsl:template match="abstract"><!--  Original Target XPath:  abstract   -->
      <abstract>
         <bodytext>
            <xsl:apply-templates select="@* | node()"/>
         </bodytext>
      </abstract>
   </xsl:template>
   <!--	<xsl:include href="../../modules/nonamespace/UK15PG_COMMENTARYDOC_level_bodytext.xsl"/><!-\- Need to cross check with CI -\-> <!-\- Priya Kaushal: Updated -\->-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>glp:note[notetype="xref"]</xd:i> becomes
                <xd:b>marginnote</xd:b>. The mapping of
                <xd:i>glp:note[notetype="xref"]</xd:i> varies slightly depending on the parent:<xd:ul>
               <xd:li>
                  <xd:i>bodytext/glp:note[notetype="xref"]</xd:i> becomes
                        <xd:b>seclaw:bodytext/p/text/marginnote</xd:b>. Conversion should
                        <xd:b>not</xd:b> create a new <xd:b>p</xd:b> element, but instead place
                    the newly created <xd:b>text/marginnote</xd:b> in
                        <xd:b>p</xd:b> that was mapped from the preceding sibling
                        <xd:i>p</xd:i> of
                    <xd:i>glp:note[notetype="xref"]</xd:i>.</xd:li>
               <xd:li>
                  <xd:i>li/glp:note[notetype="xref"]</xd:i> becomes
                        <xd:b>listitem/bodytext/p/text/marginnote</xd:b>. Conversion
                    should <xd:b>not</xd:b> create a new <xd:b>p</xd:b> element, but instead
                    place the newly created <xd:b>text/marginnote</xd:b> in
                        <xd:b>p</xd:b> that was mapped from the preceding sibling
                        <xd:i>p</xd:i> of
                    <xd:i>glp:note[notetype="xref"]</xd:i>.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>In <xd:b>all</xd:b> situations the children of <xd:b>marginnote</xd:b> should be
            populated as follows:<xd:ul>
               <xd:li>Create the required child <xd:b>marginnote/ref:anchor</xd:b> and
                    populate <xd:b>ref:anchor/@id</xd:b> with a concatenation of the
                    following values separated by "_" (don't include quotation marks):<xd:ul>
                     <xd:li>uk</xd:li>
                     <xd:li>the value in
                                <xd:i>/COMMENTARYDOC/docinfo/docinfo:doc-id</xd:i>
                     </xd:li>
                     <xd:li>a digit, starting with 1 that is incremented by 1 for each occurence of
                                <xd:i>glp:note[notetype="xref"]</xd:i> in a document</xd:li>
                  </xd:ul>
               </xd:li>
               <xd:li>The content of <xd:i>bodytext/glp:note[notetype="xref"]</xd:i> should
                    be placed in <xd:b>marginnote/bodytext</xd:b>.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;bodytext&gt;
    &lt;p&gt;
        &lt;text&gt;In general, the consent of deferred members to a buy-out will usually be required in
            advance to enable trustees to obtain a discharge from the liabilities owed by them to
            the bought-out members.&lt;/text&gt;
    &lt;/p&gt;
    &lt;glp:note notetype="xref"&gt;
        &lt;p nl="0"&gt;
            &lt;text&gt;
                &lt;ci:cite searchtype="LEG-REF" status="valid"&gt;
                    &lt;ci:sesslaw&gt;
                        &lt;ci:sesslawinfo&gt;
                            &lt;ci:sesslawnum num="1993_48a" /&gt;
                            &lt;ci:hierpinpoint&gt;
                                &lt;ci:hierlev label="section" num="12C" /&gt;
                            &lt;/ci:hierpinpoint&gt;
                        &lt;/ci:sesslawinfo&gt;
                        &lt;ci:sesslawref&gt;
                            &lt;ci:standardname normpubcode="UK_ACTS"/&gt;
                        &lt;/ci:sesslawref&gt;
                    &lt;/ci:sesslaw&gt;
                    &lt;ci:content&gt;PSA 1993, ss 12C&lt;/ci:content&gt;
                &lt;/ci:cite&gt;
            &lt;/text&gt;
        &lt;/p&gt;
    &lt;/glp:note&gt;
    ...
&lt;/bodytext&gt;

           </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;seclaw:bodytext&gt;
    &lt;p&gt;
        &lt;text&gt;In general, the consent of deferred members to a buy-out will usually be required in
            advance to enable trustees to obtain a discharge from the liabilities owed by them to
            the bought-out members.&lt;/text&gt;
        &lt;text&gt;
            &lt;marginnote&gt;
                &lt;ref:anchor id="uk_0ON9_156022_1"/&gt;
                &lt;bodytext&gt;
                    &lt;p&gt;
                        &lt;text&gt;
                            &lt;lnci:cite status="valid"&gt;
                                &lt;lnci:sesslaw&gt;
                                    &lt;lnci:sesslawinfo&gt;
                                        &lt;lnci:sesslawnum num="1993_48a"/&gt;
                                        &lt;lnci:hierpinpoint&gt;
                                            &lt;lnci:hierlev label="section" num="12C"/&gt;
                                        &lt;/lnci:hierpinpoint&gt;
                                    &lt;/lnci:sesslawinfo&gt;
                                    &lt;lnci:sesslawref&gt;
                                        &lt;lnci:standardname normpubcode="UK_ACTS"/&gt;
                                    &lt;/lnci:sesslawref&gt;
                                &lt;/lnci:sesslaw&gt;
                                &lt;lnci:content&gt;PSA 1993, ss 12C&lt;/lnci:content&gt;
                            &lt;/lnci:cite&gt;
                        &lt;/text&gt;
                    &lt;/p&gt;
                &lt;/bodytext&gt;
            &lt;/marginnote&gt;
        &lt;/text&gt;
    &lt;/p&gt;
    ...
&lt;/seclaw:bodytext&gt;

           </xd:pre>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_glp.note-xref.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_glp.note-xref.xsl requires manual development!</xsl:message> -->
   <xsl:template match="glp:note[notetype='xref']"><!--  Original Target XPath:  marginnote   -->
      <marginnote>
         <xsl:apply-templates select="@* | node()"/>
      </marginnote>
   </xsl:template>

   <xsl:template match="bodytext/glp:note[notetype='xref']"><!--  Original Target XPath:  seclaw:bodytext/p/text/marginnote   -->
      <seclaw:bodytext>
         <p>
            <text>
               <marginnote>
                  <xsl:apply-templates select="@* | node()"/>
               </marginnote>
            </text>
         </p>
      </seclaw:bodytext>
   </xsl:template>
   <!--<xsl:template match="p">

		<!-\-  Original Target XPath:  text/marginnote   -\->
		<text>
			<marginnote>
				<xsl:apply-templates select="@* | node()"/>
			</marginnote>
		</text>

	</xsl:template>-->
   <xsl:template match="li/glp:note[notetype='xref']"><!--  Original Target XPath:  listitem/bodytext/p/text/marginnote   -->
      <listitem>
         <bodytext>
            <p>
               <text>
                  <marginnote>
                     <xsl:apply-templates select="@* | node()"/>
                  </marginnote>
               </text>
            </p>
         </bodytext>
      </listitem>
   </xsl:template>
   <!--<xsl:template match="/COMMENTARYDOC/docinfo/docinfo:doc-id">

		<!-\-  Original Target XPath:  marginnote/bodytext   -\->
		<marginnote>
			<bodytext>
				<xsl:apply-templates select="@* | node()"/>
			</bodytext>
		</marginnote>

	</xsl:template>-->   <!-- Updated and need to check -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>note[@notetype="xref"]</xd:i> becomes
                        <xd:b>marginnote</xd:b>. The mapping of
                        <xd:i>note[@notetype="xref"]</xd:i> varies slightly depending on
                    the parent:<xd:ul>
               <xd:li>
                  <xd:i>note[@notetype="xref"][ancestor::text]</xd:i> becomes
                                <xd:b>marginnote</xd:b>.</xd:li>
               <xd:li>
                  <xd:i>note[@notetype="xref"][parent::bodytext]</xd:i> becomes
                                <xd:b>seclaw:bodytext/p/text/marginnote</xd:b>. Conversion
                            should <xd:b>not</xd:b> create a new <xd:b>p</xd:b> element, but
                            instead place the newly created <xd:b>text/marginnote</xd:b>
                            in <xd:b>p</xd:b> that was mapped from the preceding sibling
                                <xd:i>p</xd:i> of
                                <xd:i>note[@notetype="xref"]</xd:i>.</xd:li>
               <xd:li>
                  <xd:i>note[@notetype="xref"][parent::li]</xd:i> becomes
                                <xd:b>listitem/bodytext/p/text/marginnote</xd:b>.
                            Conversion should <xd:b>not</xd:b> create a new <xd:b>p</xd:b>
                            element, but instead place the newly created
                                <xd:b>text/marginnote</xd:b> in <xd:b>p</xd:b>
                            that was mapped from the preceding sibling <xd:i>p</xd:i> of
                                <xd:i>note[@notetype="xref"]</xd:i>.</xd:li>
               <xd:li>
                  <xd:i>note[@notetype="xref"][parent::p]</xd:i> becomes
                                <xd:b>text/marginnote</xd:b>.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>In <xd:b>all</xd:b> situations the children of <xd:b>marginnote</xd:b> should
                    be populated as follows:<xd:ul>
               <xd:li>Create the required child <xd:b>marginnote/ref:anchor</xd:b>
                            and populate <xd:b>ref:anchor/@id</xd:b> with a concatenation
                            of the following values separated by "_" (don't include quotation marks):<xd:ul>
                     <xd:li>uk</xd:li>
                     <xd:li>the value in
                                        <xd:i>/COMMENTARYDOC/docinfo/docinfo:doc-id</xd:i>
                     </xd:li>
                     <xd:li>a digit, starting with 1 that is incremented by 1 for each
                                    occurence of <xd:i>note[@notetype="xref"]</xd:i> in a
                                    document</xd:li>
                  </xd:ul>
               </xd:li>
               <xd:li>The content of <xd:i>bodytext/note[@notetype="xref"]</xd:i>
                            should be placed in <xd:b>marginnote/bodytext</xd:b>.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>In all scenarios, if the
                    source contains multiple consecutive
                        <xd:i>note[notetype="xref"]</xd:i> elements, then a single
                        <xd:b>text</xd:b> element is created with a single
                        <xd:b>marginnote</xd:b> element as a child. In other words,
                    multiple consecutive <xd:i>note[notetype="xref"]</xd:i> source
                    elements are merged into a single <xd:b>text/marginnote</xd:b> target
                    element.</xd:p>
         <xd:p>
            <xd:b>Example:
                    <xd:i>note[@notetype="xref"][parent::bodytext]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre> &lt;bodytext&gt; &lt;p&gt; &lt;text&gt;Complainants in cases of sexual
                    assault automatically qualify for special measures unless the witness has
                    expressed a view that no assistance is required.&lt;/text&gt; &lt;/p&gt;
                    &lt;note notetype="xref"&gt; &lt;p&gt; &lt;text&gt; &lt;ci:cite
                    searchtype="LEG-REF" status="valid"&gt; &lt;ci:sesslaw&gt;
                    &lt;ci:sesslawinfo&gt; &lt;ci:sesslawnum num="1999_23a"/&gt;
                    &lt;ci:hierpinpoint&gt; &lt;ci:hierlev label="section" num="17"/&gt;
                    &lt;/ci:hierpinpoint&gt; &lt;/ci:sesslawinfo&gt; &lt;ci:sesslawref&gt;
                    &lt;ci:standardname normpubcode="UK_ACTS"/&gt; &lt;/ci:sesslawref&gt;
                    &lt;/ci:sesslaw&gt; &lt;ci:content&gt;YJCEA 1999, s 17(4)&lt;/ci:content&gt;
                    &lt;/ci:cite&gt; &lt;/text&gt; &lt;/p&gt; &lt;/note&gt; ... &lt;/bodytext&gt; </xd:pre>
         <xd:b>becomes</xd:b>
         <xd:pre> &lt;seclaw:bodytext&gt; &lt;p&gt; &lt;text&gt;Complainants in cases of
                    sexual assault automatically qualify for special measures unless the witness has
                    expressed a view that no assistance is required.&lt;/text&gt; &lt;text&gt;
                    &lt;marginnote&gt; &lt;ref:anchor id="uk_0OL2_146023_51"/&gt; &lt;bodytext&gt;
                    &lt;p&gt; &lt;text&gt; &lt;lnci:cite status="valid"&gt; &lt;lnci:sesslaw&gt;
                    &lt;lnci:sesslawinfo&gt; &lt;lnci:sesslawnum num="1999_23a"/&gt;
                    &lt;lnci:hierpinpoint&gt; &lt;lnci:hierlev label="section" num="17"/&gt;
                    &lt;/lnci:hierpinpoint&gt; &lt;/lnci:sesslawinfo&gt; &lt;lnci:sesslawref&gt;
                    &lt;lnci:standardname normpubcode="UK_ACTS"/&gt; &lt;/lnci:sesslawref&gt;
                    &lt;/lnci:sesslaw&gt; &lt;lnci:content&gt;YJCEA 1999, s
                    17(4)&lt;/lnci:content&gt; &lt;/lnci:cite&gt; &lt;/text&gt; &lt;/p&gt;
                    &lt;/bodytext&gt; &lt;/marginnote&gt; &lt;/text&gt; &lt;/p&gt; ...
                    &lt;/seclaw:bodytext&gt; </xd:pre>
         <xd:p>
            <xd:b>Example:
                    <xd:i>note[@notetype="xref"][ancestor::text]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;text&gt; &lt;emph typestyle="bf"&gt; &lt;note
                    notetype="xref"&gt; &lt;p&gt; &lt;text&gt;&lt;remotelink service="DOC-ID"
                    remotekey1="REFPTID" refpt="07UD_3_ADMIRALTY:HTGUIDES-COURT_17:HTGUIDES-APP"
                    dpsi="07UD"&gt;Admiralty and Commercial Court Guide, Appendix
                    17&lt;/remotelink&gt; &lt;/text&gt; &lt;/p&gt; &lt;/note&gt; Note: E-mail
                    communications with the court, and especially with the listing office are
                    permitted in certain circumstances (see Appendix 17 of the Guide) and are
                    commonly used in Commercial Court cases. Including an address can therefore be
                    helpful. If your firm's policy is not to accept service of documents by e-mail
                    then it is suggested that alongside your e-mail address you insert the wording
                    ‘Service of documents by e-mail not accepted’.&lt;/emph&gt; &lt;/text&gt;
                    &lt;/p&gt; </xd:pre>
         <xd:b>becomes</xd:b>
         <xd:pre> &lt;p&gt; &lt;text&gt; &lt;emph typestyle="bf"&gt;&lt;marginnote&gt;
                    &lt;ref:anchor id="uk_DN_0OKN_129611_18"/&gt; &lt;bodytext&gt; &lt;p&gt;
                    &lt;text&gt;&lt;ref:crossreference crossreferencetype="seeAlso"&gt;
                    &lt;ref:content&gt;Admiralty and Commercial Court Guide, Appendix
                    17&lt;/ref:content&gt; &lt;ref:locator
                    anchoridref="_07UD_3_ADMIRALTY:HTGUIDES-COURT_17:HTGUIDES-APP"&gt;
                    &lt;ref:locator-key&gt; &lt;ref:key-name name="DOC-ID"/&gt; &lt;ref:key-value
                    value="_07UD_07UD_3_ADMIRALTY:HTGUIDES-COURT_17:HTGUIDES-APP"/&gt;
                    &lt;/ref:locator-key&gt; &lt;/ref:locator&gt;
                    &lt;/ref:crossreference&gt;&lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt;
                    &lt;/marginnote&gt;Note: E-mail communications with the court, and especially
                    with the listing office are permitted in certain circumstances (see Appendix 17
                    of the Guide) and are commonly used in Commercial Court cases. Including an
                    address can therefore be helpful. If your firm's policy is not to accept service
                    of documents by e-mail then it is suggested that alongside your e-mail address
                    you insert the wording ‘Service of documents by e-mail not
                    accepted’.&lt;/emph&gt; &lt;/text&gt; &lt;/p&gt; </xd:pre>
         <xd:p>
            <xd:b>Example: <xd:i>note[@notetype="xref"][parent::p]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;text&gt;the steps which it is reasonable for A [&lt;emph
                    typestyle="it"&gt;in this case, a website operator&lt;/emph&gt;] to have to
                    taken include steps for ensuring that in the circumstances concerned the
                    information provided is in an accessible format.&lt;/text&gt; &lt;note
                    notetype="xref"&gt; &lt;p&gt; &lt;text&gt; &lt;ci:cite searchtype="LEG-REF"
                    status="valid"&gt; &lt;ci:sesslaw&gt; &lt;ci:sesslawinfo&gt; &lt;ci:sesslawnum
                    num="2010_15a"/&gt; &lt;ci:hierpinpoint&gt; &lt;ci:hierlev label="section"
                    num="20"/&gt; &lt;/ci:hierpinpoint&gt; &lt;/ci:sesslawinfo&gt;
                    &lt;ci:sesslawref&gt; &lt;ci:standardname normpubcode="UK_ACTS"/&gt;
                    &lt;/ci:sesslawref&gt; &lt;/ci:sesslaw&gt; &lt;ci:content&gt;EqA 2010, s
                    20(3)&lt;/ci:content&gt; &lt;/ci:cite&gt; &lt;/text&gt; &lt;/p&gt; &lt;/note&gt;
                    &lt;/p&gt; </xd:pre>
         <xd:b>becomes</xd:b>
         <xd:pre> &lt;p&gt; &lt;text&gt;the steps which it is reasonable for A [&lt;emph
                    typestyle="it"&gt;in this case, a website operator&lt;/emph&gt;] to have to
                    taken include steps for ensuring that in the circumstances concerned the
                    information provided is in an accessible format.&lt;/text&gt; &lt;text&gt;
                    &lt;marginnote&gt; &lt;ref:anchor id="uk_0ONJ_174344_3"/&gt; &lt;bodytext&gt;
                    &lt;p&gt; &lt;text&gt; &lt;lnci:cite status="valid"&gt; &lt;lnci:sesslaw&gt;
                    &lt;lnci:sesslawinfo&gt; &lt;lnci:sesslawnum num="2010_15a"/&gt;
                    &lt;lnci:hierpinpoint&gt; &lt;lnci:hierlev label="section" num="20"/&gt;
                    &lt;/lnci:hierpinpoint&gt; &lt;/lnci:sesslawinfo&gt; &lt;lnci:sesslawref&gt;
                    &lt;lnci:standardname normpubcode="UK_ACTS"/&gt; &lt;/lnci:sesslawref&gt;
                    &lt;/lnci:sesslaw&gt; &lt;lnci:content&gt;EqA 2010, s 20(6)&lt;/lnci:content&gt;
                    &lt;/lnci:cite&gt; &lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt;
                    &lt;/marginnote&gt; &lt;/text&gt; &lt;/p&gt; </xd:pre>
         <xd:p>
            <xd:b>Multiple Consecutive <xd:i>note</xd:i> Elements</xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt;&lt;text&gt; establishes an overall standard requiring a
                    prospectus to contain the '&lt;emph typestyle="it"&gt;information necessary to
                    enable investors to make an informed assessment&lt;/emph&gt;' of (amongst other
                    things) the '&lt;emph typestyle="it"&gt;financial position&lt;/emph&gt;' and
                    '&lt;emph typestyle="it"&gt;prospects&lt;/emph&gt;' of the issuing company (the
                    &lt;emph typestyle="bf"&gt;Company&lt;/emph&gt;), in a form which is '&lt;emph
                    typestyle="it"&gt;comprehensible and easy to analyse&lt;/emph&gt;',
                    and&lt;/text&gt; &lt;note notetype="xref"&gt; &lt;p&gt; &lt;text&gt; &lt;ci:cite
                    searchtype="LEG-REF" status="valid"&gt; &lt;ci:sesslaw&gt;
                    &lt;ci:sesslawinfo&gt; &lt;ci:sesslawnum num="2000_8a"/&gt;
                    &lt;ci:hierpinpoint&gt; &lt;ci:hierlev label="section" num="87A"/&gt;
                    &lt;/ci:hierpinpoint&gt; &lt;/ci:sesslawinfo&gt; &lt;ci:sesslawref&gt;
                    &lt;ci:standardname normpubcode="UK_ACTS"/&gt; &lt;/ci:sesslawref&gt;
                    &lt;/ci:sesslaw&gt; &lt;ci:content&gt;Financial Services and Markets Act 2000, s
                    87A&lt;/ci:content&gt; &lt;/ci:cite&gt; &lt;/text&gt; &lt;/p&gt; &lt;/note&gt;
                    &lt;note notetype="xref"&gt; &lt;p&gt; &lt;text&gt; &lt;url&gt; &lt;remotelink
                    hrefclass="http"
                    href="eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=OJ:L:2003:345:0064:0089:EN:PDF"
                    newwindow="YES"&gt;based on PD, Article 5(1)&lt;/remotelink&gt; &lt;/url&gt;
                    &lt;/text&gt; &lt;/p&gt; &lt;/note&gt; &lt;note notetype="xref"&gt; &lt;p&gt;
                    &lt;text&gt;Prospectus Rules, &lt;remotelink service="DOC-ID"
                    remotekey1="REFPTID" refpt="0QGU_1_PR:HTBOOK_2.1.1:HTTARGET" dpsi="0QGU"&gt;PR
                    2.1.1&lt;/remotelink&gt; UK&lt;/text&gt; &lt;/p&gt; &lt;/note&gt; &lt;/p&gt; </xd:pre>
         <xd:b>becomes</xd:b>
         <xd:pre> &lt;p&gt;&lt;text&gt; establishes an overall standard requiring a
                    prospectus to contain the '&lt;emph typestyle="it"&gt;information necessary to
                    enable investors to make an informed assessment&lt;/emph&gt;' of (amongst other
                    things) the '&lt;emph typestyle="it"&gt;financial position&lt;/emph&gt;' and
                    '&lt;emph typestyle="it"&gt;prospects&lt;/emph&gt;' of the issuing company (the
                    &lt;emph typestyle="bf"&gt;Company&lt;/emph&gt;), in a form which is '&lt;emph
                    typestyle="it"&gt;comprehensible and easy to analyse&lt;/emph&gt;',
                    and&lt;/text&gt; &lt;text&gt; &lt;marginnote&gt; &lt;ref:anchor
                    id="uk_0OJW_119496_2"/&gt; &lt;bodytext&gt; &lt;p&gt; &lt;text&gt; &lt;lnci:cite
                    status="valid"&gt; &lt;lnci:sesslaw&gt; &lt;lnci:sesslawinfo&gt;
                    &lt;lnci:sesslawnum num="2000_8a"/&gt; &lt;lnci:hierpinpoint&gt;
                    &lt;lnci:hierlev num="87A" label="section"/&gt; &lt;/lnci:hierpinpoint&gt;
                    &lt;/lnci:sesslawinfo&gt; &lt;lnci:sesslawref&gt; &lt;lnci:standardname
                    normpubcode="UK_ACTS"/&gt; &lt;/lnci:sesslawref&gt; &lt;/lnci:sesslaw&gt;
                    &lt;lnci:content&gt;Financial Services and Markets Act 2000, s
                    87A&lt;/lnci:content&gt; &lt;/lnci:cite&gt; &lt;/text&gt; &lt;/p&gt; &lt;p&gt;
                    &lt;text&gt; &lt;ref:lnlink service="URL"&gt; &lt;ref:marker&gt;based on PD,
                    Article 5(1)&lt;/ref:marker&gt; &lt;ref:locator&gt; &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="URL"/&gt; &lt;ref:key-value
                    value="http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=OJ:L:2003:345:0064:0089:EN:PDF"
                    /&gt; &lt;/ref:locator-key&gt; &lt;/ref:locator&gt; &lt;/ref:lnlink&gt;
                    &lt;/text&gt; &lt;/p&gt; &lt;p&gt; &lt;text&gt; Prospectus Rules,
                    &lt;ref:crossreference crossreferencetype="seeAlso"&gt; &lt;ref:content&gt;PR
                    2.1.1&lt;/ref:content&gt; &lt;ref:locator
                    anchoridref="_0QGU_1_PR_HTBOOK_2.1.1_HTTARGET"&gt; &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="DOC-ID"/&gt; &lt;ref:key-value value="0QGU"/&gt;
                    &lt;/ref:locator-key&gt; &lt;/ref:locator&gt; &lt;/ref:crossreference&gt; UK
                    &lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt; &lt;/marginnote&gt; &lt;/text&gt;
                    &lt;/p&gt; </xd:pre>
         <!--Changes2014-04-17: Added A note and example to specify that
                        multiple consecutive note elements are converted to a
                        single marginnote element. (Responds to issue #1389
                        on R4.5 post-initial launch issue list for UK15cs.)2013-07-14: Added directions and example for the
                        scenario when note[@notetype="xref"] is a child of p.2013-05-31: Added directions and example for the
                        scenario when note[@notetype="xref"] is a descendant of text.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_note-xref.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_note-xref.xsl requires manual development!</xsl:message> -->
   <!--<xsl:template match="note[@notetype = 'xref']">

        <!-\-  Original Target XPath:  marginnote   -\->
        <marginnote>

            <xsl:apply-templates select="@* | node()"/>
        </marginnote>

    </xsl:template>-->
   <xsl:template match="note[@notetype = 'xref'][ancestor::text]"><!--  Original Target XPath:  marginnote   -->
      <marginnote>
         <xsl:apply-templates select="@* | node()"/>
      </marginnote>
   </xsl:template>

   <xsl:template match="note[@notetype = 'xref'][parent::bodytext]"><!--  Original Target XPath:  seclaw:bodytext/p/text/marginnote   -->
      <seclaw:bodytext>
         <p>
            <text>
               <marginnote>
                  <xsl:apply-templates select="@* | node()"/>
               </marginnote>
            </text>
         </p>
      </seclaw:bodytext>
   </xsl:template>
   <!-- <xsl:template match="p[not(parent::abstract/parent::levelprelim)]">

        <!-\-  Original Target XPath:  text/marginnote   -\->
        <text>
            <marginnote>
                <xsl:apply-templates select="@* | node()"/>
            </marginnote>
        </text>

    </xsl:template>-->
   <xsl:template match="note[@notetype = 'xref'][parent::li]"><!--  Original Target XPath:  listitem/bodytext/p/text/marginnote   -->
      <listitem>
         <bodytext>
            <p>
               <text>
                  <marginnote>
                     <xsl:apply-templates select="@* | node()"/>
                  </marginnote>
               </text>
            </p>
         </bodytext>
      </listitem>
   </xsl:template>

   <xsl:template match="note[1][@notetype = 'xref'][parent::p]">
      <xsl:variable name="i"
                    select="count(preceding::note[@notetype='xref'][parent::p][not(preceding-sibling::note[@notetype='xref'])]) + 1"/>
      <!--  Original Target XPath:  text/marginnote   -->
      <text>
         <marginnote>
            <ref:anchor>
               <xsl:attribute name="id"><!-- BRT 10/10/17 translate ':' to '_' -->
                  <xsl:value-of select="concat('uk', '_', translate(/COMMENTARYDOC/docinfo/docinfo:doc-id, ':', '_'),'_',$i)"/>
               </xsl:attribute>
            </ref:anchor>
            <xsl:for-each select="p">
               <xsl:call-template name="p"/>
            </xsl:for-each>
            <xsl:for-each select="link">
               <bodytext>
                  <xsl:call-template name="createNoteLnlinkElement">
                     <xsl:with-param name="linkElement">
                        <xsl:copy-of select="self::*"/>
                     </xsl:with-param>
                  </xsl:call-template>
               </bodytext>
               <!--<xsl:apply-templates select="link"/>-->
            </xsl:for-each>
            <!--<xsl:for-each select="following-sibling::note">
                    <xsl:apply-templates select="@* | node() "/>
                </xsl:for-each>-->
            <!--<xsl:apply-templates select="@* | node() "/>-->
         </marginnote>
      </text>
   </xsl:template>

   <xsl:template name="p">
      <bodytext>
         <p>
            <xsl:apply-templates select="@* | node()"/>
         </p>
         <xsl:if test="./parent::note/following-sibling::note">
            <xsl:for-each select="./parent::note/following-sibling::note"><!--<xsl:apply-templates select="@* |node() "/>-->
               <xsl:apply-templates select="node()"/>
            </xsl:for-each>
         </xsl:if>
      </bodytext>
   </xsl:template>
   <!--<xsl:template match="/COMMENTARYDOC/docinfo/docinfo:doc-id">

        <!-\-  Original Target XPath:  marginnote/bodytext   -\->
        <marginnote>
            <bodytext>
                <xsl:apply-templates select="@* | node()"/>
            </bodytext>
        </marginnote>

    </xsl:template>-->
   <xsl:template match="bodytext/note[@notetype = 'xref']"><!--  Original Target XPath:  marginnote/bodytext   -->
      <marginnote>
         <bodytext>
            <xsl:apply-templates select="@* | node()"/>
         </bodytext>
      </marginnote>
   </xsl:template>
   <!--<xsl:template match="note[notetype = 'xref']">

        <!-\-  Original Target XPath:  text   -\->
        <text>
            <xsl:apply-templates select="@* | node()"/>
        </text>

    </xsl:template>-->
   <xsl:template match="note">
      <xsl:if test="not(./@notetype='xref')">
         <marginnote>
            <xsl:apply-templates select="@* | node()"/>
         </marginnote>
      </xsl:if>
      <!--  Original Target XPath:  marginnote   -->
   </xsl:template>

   <xsl:template name="createNoteLnlinkElement">
      <xsl:param name="linkElement"/>
      <ref:lnlink>
         <xsl:attribute name="service" select="'ATTACHMENT'"/>
         <ref:marker role="label">
            <xsl:apply-templates select="$linkElement/link/node()"/>
         </ref:marker>
         <ref:locator>
            <ref:locator-key>
               <ref:key-name name="attachment-key"/>
               <ref:key-value>
                  <xsl:attribute name="value"
                                 select="if($linkElement/link/@dpsi) then concat('[[DPSI:' , $linkElement/link/@dpsi, ']]' , $linkElement/link/@filename) else $linkElement/link/@filename"/>
               </ref:key-value>
            </ref:locator-key>
            <ref:locator-params>
               <proc:param name="attachment-type" value="IMG"/>
               <proc:param name="external-or-local" value="external"/>
               <proc:param name="attachment-server" value="BlobStore"/>
               <proc:param name="attachment-pguid"
                           value="urn:contentItem:0000-0000-0000-0000-00000-00"/>
               <proc:param name="componentseq" value="1"/>
            </ref:locator-params>
         </ref:locator>
      </ref:lnlink>
   </xsl:template>
   <!-- Updated -->   <!--<xsl:include href="../../modules/nonamespace/UK15PG_COMMENTARYDOC_form-frmdivs-clause.xsl"/>-->   <!-- Updated -->   <!-- Priya Kaushal: Commented this -->   <xd:doc>
      <xd:desc>
         <xd:p>When <xd:i>remotelink</xd:i> is a child of
                        <xd:i>bodytext</xd:i>, the target should be wrapped in
                        <xd:b>p/text</xd:b>. In all other respects the standard mapping
                    for <xd:i>remotelink</xd:i> from the General Markup section should be
                    used.</xd:p>
         <xd:pre> &lt;comm:body&gt; &lt;level leveltype="division"
                    id="0OKF_1_DN112663"&gt; &lt;heading&gt; &lt;title&gt;&lt;refpt
                    id="0OKF_1_DN112663" type="ext"/&gt;Parties (drafting notes)&lt;/title&gt;
                    &lt;/heading&gt; &lt;level leveltype="section" id="DN_0OKF_112663_ID0EZD"&gt;
                    &lt;bodytext&gt; &lt;h&gt;Parties&lt;/h&gt; &lt;h&gt; &lt;emph
                    typestyle="it"&gt;Read more about this from Butterworths&lt;/emph&gt; &lt;/h&gt;
                    &lt;remotelink service="DOC-ID" remotekey1="DOC-ID" remotekey2="0OJS_677200"
                    dpsi="0OJS"&gt;Encyclopaedia of Forms and Precedents &amp;gt; BOILERPLATE AND
                    COMMERCIAL CLAUSES vol 4(3) &amp;gt; (B) Commentary &amp;gt; B: BASIC OPERATION
                    OF THE CONTRACT &amp;gt; 3: PARTIES &amp;gt; 3.1 Introduction&lt;/remotelink&gt;
                    &lt;p&gt; &lt;text&gt;The parties clause should clearly and unambiguously
                    identify each party to an agreement, setting out:&lt;/text&gt; &lt;/p&gt; ...
                    &lt;/bodytext&gt; &lt;/level&gt; &lt;/level&gt; &lt;/comm:body&gt; </xd:pre>
         <xd:b>becomes</xd:b>
         <xd:pre> &lt;seclaw:body&gt; &lt;seclaw:level leveltype="division"&gt;
                    &lt;ref:anchor id="_0OKF_1_DN112663"/&gt; &lt;heading&gt; &lt;title&gt;Parties
                    (drafting notes)&lt;/title&gt; &lt;/heading&gt; &lt;seclaw:bodytext&gt;
                    &lt;seclaw:level leveltype="section"&gt; &lt;seclaw:bodytext&gt;
                    &lt;h&gt;Parties&lt;/h&gt; &lt;h&gt; &lt;emph typestyle="it"&gt;Read more about
                    this from Butterworths&lt;/emph&gt; &lt;/h&gt; &lt;p&gt; &lt;text&gt;
                    &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
                    &lt;ref:content&gt;Encyclopaedia of Forms and Precedents &amp;gt; BOILERPLATE
                    AND COMMERCIAL CLAUSES vol 4(3) &amp;gt; (B) Commentary &amp;gt; B: BASIC
                    OPERATION OF THE CONTRACT &amp;gt; 3: PARTIES &amp;gt; 3.1
                    Introduction&lt;/ref:content&gt; &lt;ref:locator&gt; &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="DOC-ID"/&gt; &lt;ref:key-value
                    value="OOJS-0OJS_677200"/&gt; &lt;/ref:locator-key&gt; &lt;/ref:locator&gt;
                    &lt;/ref:crossreference&gt; &lt;/text&gt; &lt;/p&gt; &lt;p&gt; &lt;text&gt;The
                    parties clause should clearly and unambiguously identify each party to an
                    agreement, setting out:&lt;/text&gt; &lt;/p&gt; ... &lt;/seclaw:bodytext&gt;
                    &lt;/seclaw:level&gt; &lt;/seclaw:bodytext&gt; &lt;/seclaw:level&gt;
                    &lt;/seclaw:body&gt; </xd:pre>
         <!--Changes2013-05-31: Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_bodytext_remotelink.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_bodytext_remotelink.xsl requires manual development!</xsl:message> -->
   <!--<xsl:template match="remotelink">

        <!-\-  Original Target XPath:  p/text   -\->
        <p>
            <text>
                <xsl:apply-templates select="@* | node()"/>
            </text>
        </p>

    </xsl:template>-->
   <!--<xsl:template match="bodytext">

        <!-\-  Original Target XPath:  p/text   -\->
        <p>
            <text>
                <xsl:apply-templates select="@* | node()"/>
            </text>
        </p>

    </xsl:template>-->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>references[not(parent::level[@leveltype="related-content-pod" or
                        @leveltype="related-documents-POD"])]</xd:i> becomes
                        <xd:b>ref:relatedrefs</xd:b>.</xd:p>
         <xd:p>With the exception of <xd:i>heading</xd:i>, the target element for
                    every child of <xd:i>references</xd:i> should be mapped inside
                        <xd:b>ref:relatedrefs/bodytext</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>This mapping does not apply if <xd:i>references</xd:i> is a
                    descendant of <xd:i>level[@leveltype="related-content-pod"]</xd:i> or
                        <xd:i>level[@leveltype="related-documents-POD"]</xd:i>. Those
                    scenarios are addressed in their own topics.</xd:p>
         <xd:pre> &lt;level leveltype="section"&gt; ... &lt;bodytext&gt; ...
                    &lt;references&gt; &lt;heading&gt; &lt;title&gt; &lt;emph typestyle="it"&gt;Read
                    more about this from Butterworths&lt;/emph&gt; &lt;/title&gt; &lt;/heading&gt;
                    &lt;p&gt; &lt;text&gt; &lt;remotelink service="DOC-ID" remotekey1="DOCID"
                    remotekey2="0OJA_60369" dpsi="0OJA"&gt;Halsbury's Laws of England &amp;gt;
                    Financial services and institutions (vol 48 (2008) 5th edition, paras
                    1&amp;#x2013;589; volume 49 (2008) 5th edition, paras 590&amp;#x2013;1619;
                    volume 50 (2008) 5th edition, paras 1620&amp;#x2013;2586) &amp;gt; 7. Bills of
                    sale &amp;gt; (1) Introduction &amp;gt; (i) Common Law &amp;gt; 1622. Transfer
                    of existing goods at common law.&lt;/remotelink&gt; &lt;/text&gt; &lt;/p&gt;
                    &lt;/references&gt; &lt;/bodytext&gt; &lt;/level&gt; </xd:pre>
         <xd:b>becomes</xd:b>
         <xd:pre> &lt;seclaw:level leveltype="section"&gt; ... &lt;seclaw:bodytext&gt; ...
                    &lt;ref:relatedrefs&gt; &lt;heading&gt; &lt;title&gt; &lt;emph
                    typestyle="it"&gt;Read more about this from Butterworths&lt;/emph&gt;
                    &lt;/title&gt; &lt;/heading&gt; &lt;bodytext&gt; &lt;p&gt; &lt;text&gt;
                    &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
                    &lt;ref:content&gt;Halsbury's Laws of England &amp;gt; Financial services and
                    institutions (vol 48 (2008) 5th edition, paras 1&amp;#x2013;589; volume 49
                    (2008) 5th edition, paras 590&amp;#x2013;1619; volume 50 (2008) 5th edition,
                    paras 1620&amp;#x2013;2586) &amp;gt; 7. Bills of sale &amp;gt; (1) Introduction
                    &amp;gt; (i) Common Law &amp;gt; 1622. Transfer of existing goods at common
                    law.&lt;/ref:content&gt; &lt;ref:locator&gt; &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="DOC-ID"/&gt; &lt;ref:key-value
                    value="0OJA-0OJA_60369"/&gt; &lt;/ref:locator-key&gt; &lt;/ref:locator&gt;
                    &lt;/ref:crossreference&gt; &lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt;
                    &lt;/ref:relatedrefs&gt; &lt;/seclaw:bodytext&gt; &lt;/seclaw:level&gt;
                </xd:pre>
         <!--Changes2013-06-05: Created.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="references[not(parent::level[@leveltype = 'related-content-pod' or @leveltype = 'related-documents-POD'])]">
      <ref:relatedrefs>
         <xsl:apply-templates select="@* | node()"/>
      </ref:relatedrefs>
   </xsl:template>
   <!--<xsl:template match="heading">
		<ref:relatedrefs>
			<bodytext>
				<xsl:apply-templates select="@* | node()"/>
			</bodytext>
		</ref:relatedrefs>

	</xsl:template>

	<xsl:template match="heading">
		<ref:relatedrefs>
			<bodytext>
				<xsl:apply-templates select="@* | node()"/>
			</bodytext>
		</ref:relatedrefs>

	</xsl:template>

	<xsl:template match="references">
		<ref:relatedrefs>
			<bodytext>
				<xsl:apply-templates select="@* | node()"/>
			</bodytext>
		</ref:relatedrefs>

	</xsl:template>
-->
   <xsl:template match="level[@leveltype = 'related-content-pod']">
      <xsl:apply-templates select="@* | node()"/>
   </xsl:template>

   <xsl:template match="level[@leveltype = 'related-documents-POD']">
      <xsl:apply-templates select="@* | node()"/>
   </xsl:template>
   <!-- Updated -->   <xd:doc>
      <xd:desc>
         <xd:p>When <xd:i>link</xd:i> includes <xd:i>@dpsi</xd:i>, convert
                    as follows:<xd:ul>
               <xd:li>
                  <xd:i>link</xd:i> becomes
                                <xd:b>ref:crossreference</xd:b> with the value of
                                <xd:b>@crossreferencetype</xd:b> set to "seeAlso".
                                <xd:i>@alt-label</xd:i> should be suppressed. The children
                            of <xd:b>ref:crossreference</xd:b> are created as follows:<xd:ul>
                     <xd:li>Create <xd:b>ref:content</xd:b> and populate it with
                                    the content of <xd:i>link</xd:i>.</xd:li>
                     <xd:li>Create <xd:b>ref:locator</xd:b> and populate the
                                    attribute <xd:b>@anchoridref</xd:b> with the value of
                                        <xd:i>link/@refpt</xd:i>. The children of
                                        <xd:b>ref:locator</xd:b> are created as follows:<xd:ul>
                           <xd:li>Create <xd:b>ref:locator-key</xd:b>. The
                                            children of <xd:b>ref:locator-key</xd:b> are
                                            created as follows:<xd:ul>
                                 <xd:li>Create <xd:b>ref:key-name</xd:b> and
                                                  set the value of <xd:b>@name</xd:b> to
                                                  "DOC-ID".</xd:li>
                                 <xd:li>Create <xd:b>ref:key-value</xd:b> and
                                                  populate <xd:b>@value</xd:b> with a
                                                  concatenation of the following values:<xd:ul>
                                       <xd:li>The value of
                                                  <xd:i>link/@dpsi</xd:i>
                                       </xd:li>
                                       <xd:li>A hyphen ("-")</xd:li>
                                       <xd:li>The content of
                                                  <xd:i>docinfo:doc-id</xd:i> after the
                                                  prefix "DN_" has been removed</xd:li>
                                    </xd:ul>
                                 </xd:li>
                              </xd:ul>
                           </xd:li>
                        </xd:ul>
                     </xd:li>
                  </xd:ul>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>ref:locator/@anchoridref</xd:b> that begins with a number must
                    have an underscore added at start. Also apply other identifier data type format
                    as used for <xd:b>xml:id</xd:b> and
                        <xd:b>ref:anchor/@id</xd:b> (e.g. change colon to
                    underscore).</xd:p>
         <xd:p>
            <xd:b>Example</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo:doc-id&gt;DN_0OKO_14153&lt;/docinfo:doc-id&gt; &lt;p&gt;
                    &lt;text&gt;If acting for the Buyer, include the wording in brackets at the
                    start of the clause as otherwise its provisions (in particular the indemnity at
                    Clause &lt;link refpt="ukContentItem497ef600-1c79-4f40-b9af-49c6edce67aa"
                    dpsi="0OKO" alt-label="para" &gt;2.4.4&lt;/link&gt;) do not apply at all unless
                    the individual actually transfers across to the Buyer, which arguably defeats
                    the whole purpose of the clause.&lt;/text&gt; &lt;/p&gt; </xd:pre>
         <xd:b>becomes</xd:b>
         <xd:pre> &lt;p&gt; &lt;text&gt;If acting for the Buyer, include the wording in
                    brackets at the start of the clause as otherwise its provisions (in particular
                    the indemnity at Clause &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
                    &lt;ref:content&gt;2.4.4&lt;/ref:content&gt; &lt;ref:locator
                    anchoridref="ukContentItem497ef600-1c79-4f40-b9af-49c6edce67aa"&gt;
                    &lt;ref:locator-key&gt; &lt;ref:key-name name="DOC-ID"/&gt; &lt;ref:key-value
                    value="0OKO-0OKO_14153"/&gt; &lt;/ref:locator-key&gt; &lt;/ref:locator&gt;
                    &lt;/ref:crossreference&gt;) do not apply at all unless the individual actually
                    transfers across to the Buyer, which arguably defeats the whole purpose of the
                    clause.&lt;/text&gt; &lt;/p&gt; </xd:pre>
         <!--Changes2013-06-21: Created.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="link">
      <xsl:choose>
         <xsl:when test="./parent::note/preceding-sibling::note/parent::p">
            <xsl:call-template name="createLnlinkElement_note">
               <xsl:with-param name="linkElement">
                  <xsl:copy-of select="self::*"/>
               </xsl:with-param>
            </xsl:call-template>
         </xsl:when>
         <xsl:when test="./parent::figure">
            <xsl:call-template name="createLnlinkElement_note">
               <xsl:with-param name="linkElement">
                  <xsl:copy-of select="self::*"/>
               </xsl:with-param>
            </xsl:call-template>
         </xsl:when>
         <xsl:otherwise><!--<ref:crossreference>
                  <xsl:attribute name="crossreferencetype">seeAlso</xsl:attribute>
                  <ref:content>
                      <xsl:apply-templates select="@* | node()"/>
                  </ref:content>
              </ref:crossreference> -->
            <xsl:apply-templates select="@* | node()"/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template name="createLnlinkElement_note">
      <xsl:param name="linkElement"/>
      <ref:lnlink>
         <xsl:attribute name="service" select="'ATTACHMENT'"/>
         <ref:marker role="label">
            <xsl:apply-templates select="$linkElement/link/node()"/>
         </ref:marker>
         <ref:locator>
            <ref:locator-key>
               <ref:key-name name="attachment-key"/>
               <ref:key-value>
                  <xsl:attribute name="value"
                                 select="if($linkElement/link/@dpsi) then concat('[[DPSI:' , $linkElement/link/@dpsi, ']]' , $linkElement/link/@filename) else $linkElement/link/@filename"/>
               </ref:key-value>
            </ref:locator-key>
            <ref:locator-params>
               <proc:param name="attachment-type" value="IMG"/>
               <proc:param name="external-or-local" value="external"/>
               <proc:param name="attachment-server" value="BlobStore"/>
               <proc:param name="attachment-pguid"
                           value="urn:contentItem:0000-0000-0000-0000-00000-00"/>
               <proc:param name="componentseq" value="1"/>
            </ref:locator-params>
         </ref:locator>
      </ref:lnlink>
   </xsl:template>
   <!-- <xsl:template match="@dpsi">
        <ref:crossreference>
            <xsl:apply-templates select="@* | node()"/>
        </ref:crossreference>

    </xsl:template>-->   <!--<xsl:template match="@alt-label">
        <ref:crossreference>
            <xsl:apply-templates select="@* | node()"/>
        </ref:crossreference>

    </xsl:template>-->
   <xsl:template match="link/@refpt">
      <ref:locator>
         <xsl:attribute name="anchoridref"><!--<xsl:apply-templates select="@* | node()"/>--></xsl:attribute>
         <ref:locator-key>
            <ref:key-name>
               <xsl:attribute name="name">DOC-ID</xsl:attribute>
            </ref:key-name>
            <ref:key-value>
               <xsl:attribute name="value"><!--<xsl:value-of select="link/@dpsi"/>-->
                  <xsl:text>-</xsl:text>
                  <!--<xsl:value-of select="link/@dpsi"/>-->
               </xsl:attribute>
            </ref:key-value>
         </ref:locator-key>
      </ref:locator>
   </xsl:template>

   <xsl:template match="link/@dpsi">
      <ref:locator>
         <xsl:attribute name="anchoridref"><!--<xsl:apply-templates select="node()"/>--></xsl:attribute>
      </ref:locator>
   </xsl:template>
   <!--<xsl:template match="docinfo:doc-id">
        <ref:locator>
            <xsl:attribute name="anchoridref">
                <xsl:apply-templates select="node()"/>
            </xsl:attribute>
        </ref:locator>

    </xsl:template>-->   <!-- Updated and need to check ID's-->   <!-- JD: 2017-06-15: this module was nothing but text(); wrapping all in <xd:*> -->   <xd:doc>
      <xd:desc>
         <xd:pre>
    classification/classitem[@classscheme="topic:topicReference"] to
            classify:classification/classify:classitem/topic:topicReference id-CCCC-10516
    
        
            Instructions [common element]
            These instructions are for classification markup identified as
        "topic:topicReference", i.e.
          classification/classitem[@classscheme="topic:topicReference"]. The
        markup usually occurs within docinfo and may also occur within
          levelinfo
        
                classification[@classscheme] becomes
                        classify:classification[@classscheme]. Attribute
                    value most often will be "ln.legal" but there are no dependencies. The value
                    carries through to target regardless of what it is.
                        classitem[@classscheme="topic:topicReference"]
                            becomes
                                classify:classitem[@classscheme="topic:topicReference"]
                                meta/metaitem[@name @value] becomes
                                        meta/metaitem[@name @value]
                                classitem-identifier/classcode[@normval]
                                    becomes topic:topicReference[@guid:guid]
                                
                            
                        
                    
            



        
            Source XML
            

&lt;classification classscheme="ln.legal"&gt;
    &lt;classitem classscheme="topic:topicReference"&gt;
        &lt;meta&gt;
            &lt;metaitem name="appliedby" value="human"/&gt;
        &lt;/meta&gt;
        &lt;classitem-identifier&gt;
            &lt;classcode normval="urn:topic:E5E260FEA5F04281A64F7EFA2FCAF076"/&gt;
        &lt;/classitem-identifier&gt;
    &lt;/classitem&gt;
    &lt;classitem classscheme="topic:topicReference"&gt;
        &lt;meta&gt;
            &lt;metaitem name="appliedby" value="human"/&gt;
        &lt;/meta&gt;
        &lt;classitem-identifier&gt;
            &lt;classcode normval="urn:topic:E5E260FEA5F04281A64F7EFA2FCAF086"/&gt;
        &lt;/classitem-identifier&gt;
    &lt;/classitem&gt;
&lt;/classification&gt;

	       
        
        
            Target XML
            

&lt;classify:classification classscheme="ln.legal"&gt;
    &lt;classify:classitem classscheme="topic:topicReference"&gt;
        &lt;meta&gt;
            &lt;metaitem name="appliedby" value="human"/&gt;
        &lt;/meta&gt;
        &lt;topic:topicReference guid:guid="urn:topic:E5E260FEA5F04281A64F7EFA2FCAF076"/&gt;
    &lt;/classify:classitem&gt;
    &lt;classify:classitem classscheme="topic:topicReference"&gt;
        &lt;meta&gt;
            &lt;metaitem name="appliedby" value="human"/&gt;
        &lt;/meta&gt;
        &lt;topic:topicReference guid:guid="urn:topic:E5E260FEA5F04281A64F7EFA2FCAF086"/&gt;
    &lt;/classify:classitem&gt;
&lt;/classify:classification&gt;

	      
        
        
            Changes
          2015-03-07: Added an indication that this mark-up may also occur within levelinfo (as well as within docinfo as originally stated).
            2014-12-15: New section. Responds to discussion board
                    item for UK11-DA but markup expected for all UK streams and rule will apply for
                    any jurisdiction where the markup occurs. R4.5 Content Issue 2073.
        
			</xd:pre>
      </xd:desc>
   </xd:doc>
   <!-- Vikas Rohilla : Template to mtch the classification   -->
   <!-- BRT 10/10/17 only create classification markuup if there is a topic pguid -->
   <xsl:template match="classification[child::classitem[@classscheme='topic:topicReference']/classitem-identifier/classcode[contains(@normval, 'urn:topic:')]]">
      <classify:classification>
         <xsl:apply-templates select="@* | node()"/>
      </classify:classification>
   </xsl:template>

   <xsl:template match="classitem[@classscheme='topic:topicReference']">
      <classify:classitem>
         <xsl:apply-templates select="@* | node()"/>
      </classify:classitem>
   </xsl:template>

   <xsl:template match="classitem[@classscheme='topic:topicReference']/classitem-identifier">
      <xsl:apply-templates select="@*|node()"/>
   </xsl:template>
   <!-- BRT 10/10/17 process only the topic pguid. The module pguid will throw an error since there can only be one topic:topicRefernece -->
   <xsl:template match="classitem[@classscheme='topic:topicReference']/classitem-identifier/classcode[starts-with(@normval, 'urn:topic:')]">
      <topic:topicReference>
         <xsl:apply-templates select="@normval"/>
      </topic:topicReference>
   </xsl:template>
   <!-- BRT 10/10/17 new template - suppress the module pguid in topic:topicReference -->
   <xsl:template match="classitem[@classscheme='topic:topicReference']/classitem-identifier/classcode[starts-with(@normval, 'urn:krm:')]"/>
   <!-- MDS 2017-11-01 Suppress the entire classification if the classcode should be suppressed. -->
   <xsl:template match="classification[@classscheme='ln.legal'][classitem[@classscheme='topic:topicReference']/classitem-identifier/classcode[starts-with(@normval, 'urn:krm:')]]"/>

   <xsl:template match="classitem[@classscheme='topic:topicReference']/classitem-identifier/classcode/@normval">
      <xsl:attribute name="guid:guid">
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>

   <xsl:template match="classitem[@classscheme='topic:topicReference']/classitem-identifier/classname"/>

   <xsl:template match="classification/@classscheme|classitem/@classscheme">
      <xsl:attribute name="classscheme">
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>

   <xsl:template match="meta">
      <meta>
         <xsl:apply-templates select="@*|node()"/>
      </meta>
   </xsl:template>

   <xsl:template match="metaitem">
      <metaitem>
         <xsl:apply-templates select="@*|node()"/>
      </metaitem>
   </xsl:template>

   <xsl:template match="metaitem/@*">
      <xsl:copy>
         <xsl:value-of select="."/>
      </xsl:copy>
   </xsl:template>
   <!--<xsl:include href="../../modules/nonamespace/UK15PG_COMMENTARYDOC_level_leveltype_related-documents-POD.xsl"/>-->   <!-- Updated -->   <!--<xsl:include href="../../modules/nonamespace/UK15PG_COMMENTARYDOC_level_leveltype_related-content-pod.xsl"/>-->   <!-- Updated and need to check-->   <!--**UK15 BODY-PART END 07-06-2017 3:48 AM**-->   <!-- **UK15 Start Metadata 07-06-2017 3:48 AM  -->   <!-- *****************************************************************************
	this template uses a global $dpsi parameter that should be placed in the 
	stream driver file as:
	
		<xsl:param name="dpsi" as="xs:string" select=" 'From LBU Manifest File' "/>
	
    this parameter can be used in any module in your stream.  Do not add 
    it as a variable or parameter in this file to avoid conflicts.
	*******************************************************************************	
	
	-->   <!--<xsl:variable name="dpsi"/>-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:ul>
               <xd:li>
                  <xd:i>docinfo</xd:i> becomes <xd:b>doc:metadata/doc:docinfo</xd:b>.
								<xd:i>docinfo:dpsi[@id-string]</xd:i>, <xd:i>docinfo[@browseprev]</xd:i>,
								<xd:i>docinfo[@browsenext]</xd:i>, <xd:i>docinfo[@partitionnum]</xd:i>,
								<xd:i>docinfo[@majorrevision]</xd:i>, and <xd:i>docinfo[@excludefromalerts]</xd:i>
							become <xd:b>doc:metadata/doc:docinfo/doc:legacy-metadata</xd:b> with attribute
								<xd:b>doc:legacy-metadata[@metadatasource="lbu-meta"]</xd:b> with child elements: <xd:ul>
                     <xd:li>Create <xd:b>meta</xd:b> and <xd:b>metaitem</xd:b> with attributes
										<xd:b>@name</xd:b> and <xd:b>@value</xd:b>. </xd:li>
                     <xd:li>If document also contains an element <xd:i>docinfo:lbu-meta</xd:i> with child elements
									that are not explicitly dropped, include each metaitem after all of the <xd:i>docinfo</xd:i>
									attributes are placed here. See Example <xd:i>docinfo</xd:i> and
										<xd:i>docinfo:lbu-meta</xd:i> below. </xd:li>
                  </xd:ul>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo partitionnum="2"&gt; &lt;docinfo:dpsi id-string="006F"&gt; .................
					................. &lt;/docinfo&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;doc:metadata&gt; &lt;doc:docinfo doc-content-country="AU"&gt; &lt;dc:metadata&gt; ...... ......
					&lt;/dc:metadata&gt; &lt;doc:legacy-metadata metadatasource="lbu-meta"&gt; &lt;meta&gt; &lt;metaitem
					name="partitionnum" value="2"/&gt; &lt;metaitem name="dpsi" value="006F"/&gt; &lt;/meta&gt;
					&lt;/doc:legacy-metadata&gt; &lt;/doc:docinfo&gt; &lt;/doc:metadata&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo browseprev="true" browsenext="true" majorrevision="false" excludefromalerts="true"&gt;
					................. ................. &lt;/docinfo&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;doc:metadata&gt; &lt;doc:docinfo doc-content-country="AU"&gt; &lt;dc:metadata&gt; ...... ......
					&lt;/dc:metadata&gt; &lt;doc:legacy-metadata metadatasource="lbu-meta"&gt; &lt;meta&gt; &lt;metaitem
					name="browseprev" value="true"/&gt; &lt;metaitem name="browsenext" value="true"/&gt; &lt;metaitem
					name="majorrevision" value="false"/&gt; &lt;metaitem name="excludefromalerts" value="true"/&gt; &lt;/meta&gt;
					&lt;/doc:legacy-metadata&gt; &lt;/doc:docinfo&gt; &lt;/doc:metadata&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo partitionnum="1"&gt; ................. ................. &lt;/docinfo&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;doc:metadata&gt; &lt;doc:docinfo doc-content-country="CA"&gt; &lt;dc:metadata&gt; ...... ......
					&lt;/dc:metadata&gt; &lt;doc:legacy-metadata metadatasource="lbu-meta"&gt; &lt;meta&gt; &lt;metaitem
					name="partitionnum" value="1"/&gt; &lt;/meta&gt; &lt;/doc:legacy-metadata&gt; &lt;/doc:docinfo&gt;
					&lt;/doc:metadata&gt; </xd:pre>
         <xd:p>
            <xd:b>Example docinfo and docinfo:lbu-meta - Target</xd:b>
         </xd:p>
         <xd:pre> &lt;doc:legacy-metadata metadatasource="lbu-meta"&gt; &lt;meta&gt; &lt;metaitem name="browsenext"
					value="false"/&gt; &lt;metaitem name="browseprev" value="false"/&gt; &lt;metaitem name="majorrevision"
					value="false"/&gt; &lt;metaitem name="excludefromalerts" value="true"/&gt; &lt;metaitem name="partitionnum"
					value="COMM1"/&gt; &lt;metaitem name="lbu-sourcename" value="Business Law Emerging Issues"/&gt; &lt;metaitem
					name="document-type" value="Emerging Issue"/&gt; &lt;metaitem name="filename" value="BusLaw_EI_1850.xml"/&gt;
					&lt;/meta&gt; &lt;/doc:legacy-metadata&gt; </xd:pre>
         <xd:p>
            <xd:b>Create Required <xd:b>dc:metadata</xd:b> Element</xd:b>
         </xd:p>
         <xd:p>The element <xd:b>dc:metadata</xd:b> is the first required child element of
						<xd:b>doc:metadata/doc:docinfo</xd:b>. As such, <xd:b>dc:metadata</xd:b> should be
					created immediately after creating <xd:b>doc:metadata/doc:docinfo</xd:b>.</xd:p>
         <xd:p>
            <xd:p>
               <xd:b>Note: </xd:b>
               <xd:p>In addition, as part of workflow processing , ICCE will provide LNI values for each document. This PCDATA
							value will be mapped to the following:</xd:p>
               <xd:ul>
                  <xd:li>
                     <xd:b>dc:identifier[@lnmeta:identifier-scheme="LNI"]</xd:b>
                  </xd:li>
                  <xd:li>
                     <xd:b>dc:identifier[@lnmeta:identifier-scheme="PGUID"]</xd:b>
                  </xd:li>
               </xd:ul>
               <xd:p>The LNI value for <xd:b>dc:identifier[@lnmeta:identifier-scheme="PGUID"]</xd:b>will include the
							"urn:contentItem" namespace prefix.</xd:p>
            </xd:p>
         </xd:p>
         <xd:ul>
            <xd:li>
               <xd:p>Create <xd:b>dc:date[@lnmeta:datetype="conversion-date"]</xd:b>. This element will contain the
							date the output file was created during conversion. </xd:p>
               <xd:p>
                  <xd:b>Note: </xd:b>The format of the content of all <xd:b>dc:date</xd:b> elements must be in
							'YYYY-MM-DD'.</xd:p>
            </xd:li>
         </xd:ul>
         <xd:p>
            <xd:b>LNI Values from ICCE</xd:b>
         </xd:p>
         <xd:pre> &lt;dc:identifier
					lnmeta:identifier-scheme="LNI"&gt;5617-TBH1-67MJ-64K7-00000-00&lt;/dc:identifier&gt; &lt;dc:identifier
					lnmeta:identifier-scheme="PGUID"&gt;urn:contentItem:5617-TBH1-67MJ-64K7-00000-00&lt;/dc:identifier&gt;
				</xd:pre>
         <xd:p>
            <xd:b>dc:date[@lnmeta:datetype="conversion-date"]</xd:b>
         </xd:p>
         <xd:pre> &lt;dc:metadata&gt; ... &lt;dc:date lnmeta:datetype="conversion-date"&gt;2013-08-07&lt;/dc:date&gt;
					... &lt;/dc:metadata&gt; </xd:pre>
         <!--Changes2017-03-15: Added dc:identifier[@lnmeta:identifier-scheme =
							"LNI"] and dc:identifier[@lnmeta:identifier-scheme = "PGUID"] to
						XSLT.2015-04-14: Remove bullet icon in sub nested list for handling Indentation
						isssue.2013-08-09: Added instruction for creating
							dc:date[@lnmeta:datetype="conversion-date"]. Previously, "conversion-date" was
						created only if "load-date" was not present. Going forward, conversion should always create
						"conversion-date". This is not a retroactive change. It should be applied only to streams developed after
						Aug. 9 2013.2013-07-18: Added @excludefromalerts as one of the
							docinfo attributes to carry through. Also added
						@majorrevision to the narrative; already present in a target sample.2013-05-16: Fixed typo updating urn:contentitem to
					urn:contentItem2013-04-08: Removed instructions for 3.5 conversion as no longer applicable and to avoid confusion.2012-11-28: Added instructions for 3.5 conversion and 4.0 conversion.2012-10-05: Added instructions for consolidation of attributes from docinfo and content from lbu-meta from
					source into a single doc:legacy-metadata grouping.2012-09-06: Created. -->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo-LxAdv-doc.metadata_doc.docinfo.dita  -->
   <!-- CSN: Created docinfo and children from base.xsl -->
   <!-- this template processes all the content that goes into doc:docinfo. -->
   <xsl:template match="docinfo">
      <doc:docinfo><!--   add attribute doc-content-country   --><!--Satbir: Added hardcore value inside attribute @doc-country-code only for HK-->
         <xsl:choose>
            <xsl:when test="starts-with($streamID, 'HK')">
               <xsl:attribute name="doc-content-country" select="'HK'"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:call-template name="doc_content_country"/>
            </xsl:otherwise>
         </xsl:choose>
         <dc:metadata>
            <dc:identifier lnmeta:identifier-scheme="LNI">0000-0000-0000-0000-00000-00</dc:identifier>
            <dc:identifier lnmeta:identifier-scheme="PGUID">urn:contentItem:0000-0000-0000-0000-00000-00</dc:identifier>
            <xsl:apply-templates select="docinfo:load-date"/>
            <dc:date lnmeta:datetype="conversion-date">
               <xsl:value-of select="format-date(current-date(), '[Y0001]-[M01]-[D01]')"/>
            </dc:date>
            <xsl:apply-templates select="/COMMENTARYDOC/comm:info/pubdate" mode="dc.metadata"/>
            <!-- PLEASE DO NOT REMOVE UK-SPECIFIC CONDITIONS  -->
            <xsl:if test="starts-with($streamID, 'UK')">
               <xsl:apply-templates select="docinfo:custom-metafields/docinfo:custom-metafield[@name = ('editorialPublishedDate', 'createdDate', 'updatedDate')]"/>
            </xsl:if>
            <!-- 20170623:  MCJ:  Removed AU06 from this list in preference to using modules/docinfo/Rosetta_docinfo.doc-id-LxAdv-dcidentifier_lnmetaidentifier-scheme.xsl. -->
            <!--  WPK 2017-11-06.  Due to webstar, all of the following streams must now use modules\docinfo\Rosetta_docinfo.doc-id-LxAdv-dcidentifier_lnmetaidentifier-scheme.xsl
				http://webstar.reedelsevier.com/WebStarWebApp/incident/viewIncident.do?incTktNum=7041473
				Also, streams need to remove any stream empty template that would conflict, i.e. <xsl:template match=”docinfo:doc=id”/>.  
				<xsl:if test="$streamID = ('AU10', 'AU13', 'AU16', 'AU17', 'AU19-CA', 'NZ14', 'NZ02', 'AU09', 'NZ10','HK09','AU19_CC')">
					<xsl:if test="docinfo:doc-id">
						<dc:identifier lnmeta:identifier-scheme="DOC-ID">
							<xsl:value-of select="docinfo:doc-id"/>
						</dc:identifier>
					</xsl:if>
				</xsl:if>
				
				<xsl:if test="$streamID=('NZ07-DN', 'NZ07DC','AU14','NZ08')">
					<xsl:if test="docinfo:doc-id">
						<dc:identifier lnmeta:identifier-scheme="DOC-ID">
							<xsl:value-of select="docinfo:dpsi/@id-string"/>
							<xsl:text>-</xsl:text>
							<xsl:value-of select="docinfo:doc-id"/>
						</dc:identifier>
					</xsl:if>
				</xsl:if>
				-->
            <!-- Sudhanshu Srivastava: Added condition for CA03 to convert leg:officialname,leg:num to dc:title -->
            <xsl:if test="$streamID = 'CA03'">
               <xsl:choose>
                  <xsl:when test="following-sibling::source_cttr:body/leg:info/leg:officialname">
                     <xsl:apply-templates select="following-sibling::source_cttr:body/leg:info/leg:officialname"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:apply-templates select="following-sibling::source_cttr:body/case:headnote/case:info/case:casename"
                                          mode="dc.title"/>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:if>
            <xsl:apply-templates select="docinfo:doc-heading | docinfo:doc-id"/>
            <!-- JD: 2017-10-10: VSTS Bug 352379: use docinfo:doc-heading for dc:title for UK01 -->
            <!-- CN: 2017-10-13: VSTS Bug 352379: use docinfo:doc-heading for dc:title added UK02 and UK04 -->
            <xsl:if test="$streamID = ('UK01','UK02','UK04')">
               <dc:title>
                  <xsl:value-of select="/CASEDOC/docinfo/docinfo:doc-heading"/>
               </dc:title>
            </xsl:if>
            <!-- JD: UK01-UK04: case:casename to dc:title (id-CCCC-10531) -->
            <!--
				<xsl:if test="$streamID = ('UK02','UK04')">
				  <dc:title>
  				  <xsl:value-of select="concat(/CASEDOC/case:body/case:headnote/case:info/case:casename, ' ',/CASEDOC/case:body/case:headnote/case:info/case:reportercite/ci:cite[@type='cite4thisdoc']/ci:content)"/>
				  </dc:title>
				</xsl:if>
				-->
            <!-- CN: 2017-10-13: VSTS Bug 352379: use docinfo:doc-heading for dc:title for UK03 -->
            <xsl:if test="$streamID='UK03'">
               <dc:title>
                  <xsl:value-of select="/DIGESTDOC/docinfo/docinfo:doc-heading"/>
               </dc:title>
            </xsl:if>
            <!-- same as above, but different mode name -->
            <!--<xsl:if test="$streamID = ('UK04')">
					<xsl:apply-templates select="/CASEDOC/case:body/case:headnote/case:info/case:casename[$streamID='UK04']" mode="title"/>
				</xsl:if>-->
            <!-- JD: UK05: case:casename to dc:title (id-UK05-27824) -->
            <xsl:if test="$streamID = 'UK05'">
               <xsl:apply-templates select="/CITATORDOC/source_cttr:body/case:headnote/case:info/case:casename | /CITATORDOC/source_cttr:body/case2:headnote/case2:info/case2:casename"
                                    mode="dc.metadata"/>
            </xsl:if>
            <xsl:apply-templates select="docinfo:authorattribution"/>
            <!--  @@@ TODO:  update DITA to match this code!!!  -->
            <!-- Awantika: Removed /CASEDOC/case:body/case:headnote/case:info/case:courtinfo/case:juris from apply templates as this was creating unnecessary content(hkhk) mapping needs to be converted to <dc:coverage> in HK03 -->
            <xsl:choose>
               <xsl:when test="starts-with($streamID, 'CA08')">
                  <xsl:apply-templates select="         /CASEDOC/case:body/case:headnote/case:info/case:courtinfo/case:juris |         /CITATORDOC/source_cttr:body/case:headnote/case:info/case:courtinfo/case:juris"
                                       mode="metadata"/>
               </xsl:when>
               <xsl:when test="$streamID = ('CA01', 'CA03', 'CA02CC','CA02DC', 'CA06', 'CA05', 'CA04', 'CA07','UK03','UK07','UK06', 'NZ07DN','NZ13')"/>
               <xsl:when test="$streamID='AU12'">
                  <xsl:apply-templates select="/DIGESTDOC/dig:body/dig:info/leg:info/leg:juris"
                                       mode="metadata"/>
               </xsl:when>
               <xsl:when test="$streamID='NZ10'">
                  <xsl:apply-templates select="/LEGDOC/leg:body/leg:info/leg:juris" mode="metadata"/>
               </xsl:when>
               <xsl:when test="$streamID='CA19'">
                  <xsl:apply-templates select="/CASEDOC/case:body/case:headnote/case:info/case:courtinfo/case:juris"
                                       mode="metadata"/>
               </xsl:when>
               <xsl:otherwise><!--*********************
							Paul:  for AU08 this otherwise clause is applicable as is unedited.
							It creates dc:coverage/location:state because I have a stream specific "metadata" mode template for leg:juris.
							I've changed nothing here.  just noting that i'm leveraging this for AU08 court orders too.
							***************************--><!-- Awantika: added xpath /CITATORDOC/source_cttr:body/leg:info/leg:juris for AU20 --><!--Satbir: Added Xpath "/DIGESTDOC/dig:body/dig:info/case:info/case:courtinfo/case:juris" for NZ07DC--><!--Satbir: Mentioned first position for jursi handling "case:courtinfo[1]/case:juris" because juris comes twicely--><!-- Awantika:2017-10-17- Added not(streamID='AU01') to /CASEDOC/case:body/case:headnote/case:info/case:courtinfo[1]/case:juris as this was creating data outside identifier. --><!-- Awantika:2017-10-31- Removed not(streamID='AU01') to /CASEDOC/case:body/case:headnote/case:info/case:courtinfo[1]/case:juris data given was for NZ so changed back for AU01 -->
                  <xsl:apply-templates select="         /CASEDOC/case:body/case:headnote/case:info/case:courtinfo[1]/case:juris |         /LEGDOC/leg:body/leg:info/leg:juris | /CITATORDOC/source_cttr:body/leg:info/leg:juris |         /CITATORDOC/source_cttr:body/case:headnote/case:info/case:courtinfo/case:juris |         /CITATORDOC/source_cttr:body/case2:headnote/case2:info/case2:courtinfo/case2:juris | /DIGESTDOC/dig:body/dig:info/case:info/case:courtinfo/case:juris"
                                       mode="metadata"/>
               </xsl:otherwise>
            </xsl:choose>
            <!-- Awantika: case:juris will also be converted to <dc:coverage> in HK03  -->
            <!--<xsl:if test="/CASEDOC/case:body/case:headnote/case:info/case:courtinfo/case:juris and $streamID = 'HK03'">
					<dc:coverage>
						<location:country>
							<xsl:attribute name="codescheme">
								<xsl:text>ISO-3166-1</xsl:text>
							</xsl:attribute>
							<xsl:attribute name="countrycode">
								<xsl:text>HK</xsl:text>
							</xsl:attribute>
						</location:country>
					</dc:coverage>
				</xsl:if>-->
            <xsl:apply-templates select="/COMMENTARYDOC/comm:info [$streamID='USLPA']"
                                 mode="person_contributor"/>
            <xsl:if test="$streamID=('UK06','UK07')">
               <dc:coverage>
                  <location:country>
                     <xsl:attribute name="codescheme">
                        <xsl:text>ISO-3166-1</xsl:text>
                     </xsl:attribute>
                     <xsl:attribute name="countrycode">
                        <xsl:text>GB</xsl:text>
                     </xsl:attribute>
                  </location:country>
               </dc:coverage>
            </xsl:if>
         </dc:metadata>
         <xsl:apply-templates select="docinfo:versioninfo[@hasotherversions='true'][$streamID='CA05']"
                              mode="doc_version"/>
         <xsl:apply-templates select="/LEGDOC/docinfo/docinfo:custom-metafields/docinfo:custom-metafield[@name = 'actFirstDoc'][contains(upper-case(.), 'TRUE')][$streamID='CA05']"
                              mode="firstActDoc"/>
         <xsl:apply-templates select="/COMMENTARYDOC/comm:info/classification [$streamID='USLPA']"
                              mode="metadata_classification"/>
         <xsl:apply-templates select="docinfo:custom-metafields [$streamID='USLPA']"
                              mode="metadata_custom"/>
         <!-- Sudhanshu Srivastava:
			     Created on - 28-06-2017.
			     Comments : The below condition will create classify:classification inside doc:docinfo based on if input source having (docinfo:custom-metafield name="is-first-document-in-enactment") or (docinfo:custom-metafield name="is-last-document-in-enactment").
			-->
         <xsl:if test="($streamID=('UK06','UK07')) and (docinfo:custom-metafields/docinfo:custom-metafield[@name='is-first-document-in-enactment'] or docinfo:custom-metafields/docinfo:custom-metafield[@name='is-last-document-in-enactment'])">
            <classify:classification classscheme="actDocumentOrder">
               <xsl:apply-templates select="docinfo:custom-metafields/docinfo:custom-metafield[@name='is-first-document-in-enactment']"
                                    mode="isfirstdocumentinenactment"/>
               <xsl:apply-templates select="docinfo:custom-metafields/docinfo:custom-metafield[@name='is-last-document-in-enactment']"
                                    mode="islastdocumentinenactment"/>
            </classify:classification>
         </xsl:if>
         <!-- MDS - 2017-06-27 - For NZ07DN -->
         <xsl:if test="$streamID='NZ07-DN'">
            <xsl:apply-templates select="/DIGESTDOC/dig:body/dig:info/jrnl:articleinfo/pubnote[remotelink]"/>
         </xsl:if>
         <!-- process that belong in doc:docinfo -->
         <!--  @@@ TODO:  update DITA to match this code!!!  -->
         <!-- Sudhanshu Srivastava: in CA13 stream , i have no need to transform here 'docinfo:hier', so i am making changes for sequencing of 
			docinfo:heir-->
         <xsl:if test="not($streamID = 'CA13')">
            <xsl:apply-templates select="docinfo:hier"/>
         </xsl:if>
         <!-- Priya Kaushal : Added below for the stream UK15 -->
         <xsl:apply-templates select="classification[$streamID='UK15']"/>
         <!--	<xsl:if test = "$streamID='UK15'">
				<xsl:if test="./classification">
					<classify:classification>
						<xsl:attribute name="classscheme">
							<xsl:value-of select="./classification/@classscheme"/>
						</xsl:attribute>
						<xsl:for-each select="./classification/classitem">
							<classify:classitem>
								<xsl:attribute name="classscheme">
									<xsl:value-of select="./classification/classitem/@classscheme"/>
								</xsl:attribute>
								<meta>
									<metaitem name="appliedby" value="human"/>
								</meta>
								<topic:topicReference xmlns:topic="urn:x-lexisnexis:content:topic:global:1"
									xmlns:guid="urn:x-lexisnexis:content:guid:global:1">
									<xsl:attribute name="guid:guid">
									<xsl:value-of select="./classitem-identifier/classcode/@normval"/>
								</xsl:attribute>
								</topic:topicReference>
							</classify:classitem>
						</xsl:for-each>
						
						</classify:classification>	
				</xsl:if>				
			</xsl:if>
			-->
         <xsl:apply-templates select="//case:reportercite[$streamID=('CA01','CA04')]"
                              mode="docrelated-content"/>
         <!-- Vikas Rohilla : Added for the stream CA01 -->
         <xsl:apply-templates select="//refnum[@refnumtype = 'UCN'][$streamID = ('CA01', 'CA02CC', 'CA02DC', 'CA19', 'CA02DS','CA04')]"
                              mode="docinfoMember"/>
         <xsl:apply-templates select="docinfo:doc-id[$streamID='CA03']" mode="membership"/>
         <xsl:apply-templates select="docinfo:bookseqnum"/>
         <xsl:apply-templates select="docinfo:alt-renditions"/>
         <!-- Awantika: Added for UK11 -->
         <xsl:choose>
            <xsl:when test="$streamID='UK11DA'">
               <xsl:apply-templates select="following-sibling::dig:body/dig:info/dig:subject[@display-name='Jurisdiction']"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:apply-templates select="//dig:body/dig:info/dig:subject"/>
            </xsl:otherwise>
         </xsl:choose>
         <xsl:call-template name="legacy-metadata"/>
         <!-- Sudhanshu Srivastava : transforming 'docinfo:hier' here for making sequence correct for CA13 stream. -->
         <xsl:if test="$streamID = 'CA13'">
            <xsl:apply-templates select="docinfo:hier"/>
         </xsl:if>
         <xsl:if test="$streamID = 'CA03' and following-sibling::source_cttr:body/leg:info/leg:relatedleg">
            <xsl:apply-templates select="following-sibling::source_cttr:body/leg:info/leg:relatedleg"
                                 mode="relatedcon"/>
         </xsl:if>
         <xsl:apply-templates select="docinfo:topiccodes"/>
         <xsl:apply-templates select="//case:headnote/case:length"/>
         <xsl:apply-templates select="docinfo:assoc-links"/>
         <!-- Sudhanshu added an applied template for  -->
         <xsl:apply-templates select="docinfo:changemanagementcode"/>
         <!-- process all docinfo:selector elements in the same wrapper -->
         <xsl:if test="docinfo:selector">
            <classify:classification classscheme="selector">
               <xsl:apply-templates select="docinfo:selector"/>
            </classify:classification>
         </xsl:if>
         <!-- CSN - 2017/09/26 - added parenthesis so this classification does not show up in every stream -->
         <xsl:if test="$streamID='AU18' and (parent::LEGDOC[@legtype='misc-inst'] or contains(child::docinfo:selector/text(), 'misc-inst'))">
            <classify:classification classscheme="au.admindoctype">
               <classify:classitem>
                  <classify:classitem-identifier>
                     <classify:classname>
                        <xsl:text>miscellaneous-instrument</xsl:text>
                     </classify:classname>
                  </classify:classitem-identifier>
               </classify:classitem>
            </classify:classification>
         </xsl:if>
         <!-- CSN 2017-11-15 Added UK18 to accomodate docinfo/classification needed for Quantum Stub documents. VSTS Bug 402801. -->
         <xsl:apply-templates select="classification[$streamID=('UK13','UK18')]"/>
         <xsl:apply-templates select="docinfo:topiccodes[$streamID='NZ10']"/>
         <xsl:apply-templates select="/LEGDOC/@legtype[$streamID='NZ12']" mode="NZClassify"/>
         <xsl:if test="/COMMENTARYDOC/docinfo/docinfo:lbu-meta/docinfo:metaitem[@name = 'PA-PGUID' or @name = 'TOPIC-PGUID' or @name = 'SUB-TOPIC-PGUID']">
            <classify:classification-grp classscheme="ln.indexing-terms">
               <classify:classification classscheme="ln.legal">
                  <xsl:apply-templates select="/COMMENTARYDOC/docinfo/docinfo:lbu-meta/docinfo:metaitem[@name = 'PA-PGUID' or @name = 'TOPIC-PGUID' or @name = 'SUB-TOPIC-PGUID']"
                                       mode="classify"/>
               </classify:classification>
            </classify:classification-grp>
         </xsl:if>
         <!-- PLEASE DO NOT REMOVE UK-SPECIFIC CONDITIONS  -->
         <xsl:if test="starts-with($streamID, 'UK') and (@majorrevision or @excludefromalerts or docinfo:custom-metafields/docinfo:custom-metafield[@name = ('important', 'highlightFrequency', 'inEditorialReview', 'resultType', 'word-toc', 'isDocBuilderAvailable', 'isCorePrecedent')])">
            <xsl:apply-templates select="." mode="UKClassify"/>
         </xsl:if>
         <xsl:if test="//page">
            <xsl:variable name="pageList" select="//page"/>
            <doc:pagination>
               <xsl:for-each-group select="$pageList" group-by="@reporter">
                  <doc:pagination-scheme>
                     <xsl:if test="@reporter!=''">
                        <xsl:attribute name="page-scheme">
                           <xsl:value-of select="translate(@reporter,' ','_')"/>
                        </xsl:attribute>
                     </xsl:if>
                     <xsl:attribute name="page-scheme-type">reporter-abbreviation</xsl:attribute>
                  </doc:pagination-scheme>
               </xsl:for-each-group>
            </doc:pagination>
         </xsl:if>
         <xsl:apply-templates select="/LEGDOC/@legtype[$streamID = ('AU19LA', 'AU15')]"
                              mode="AUClassify"/>
         <xsl:apply-templates select="docinfo:currencystatement"/>
         <xsl:apply-templates select="docinfo:keywords[$streamID = 'UK15_DS']"/>
         <!--pawan: added to create  classify:classification[@classscheme="keywords"] from docinfo:keywords-->
         <xsl:apply-templates select="docinfo:lbu-indexing-terms"/>
         <xsl:apply-templates select="docinfo:lbu-subj"/>
         <xsl:apply-templates select="docinfo:lbu-juris"/>
         <xsl:apply-templates select="docinfo:overview"/>
         <xsl:apply-templates select="docinfo:versioninfo[$streamID != 'CA05']"/>
         <!-- Vikas Rohilla : Apply template for the streamID UK11DA					-->
         <!-- Awantika: Apply template for UK11DN -->
         <xsl:apply-templates select="classification[$streamID=('UK11DA','UK11DN','UK03')]"/>
         <!-- Vikas Rohilla : Updated the template for the highlight becomes doc:overview -->
         <xsl:apply-templates select="//dig:info/highlight[not(preceding-sibling::highlight)][$streamID = 'CA14']"
                              mode="doc-overview"/>
         <xsl:apply-templates select="//row/entry[@colname = 'col1'][matches(., 'SUBJECTS/SUJETS:') or matches(., 'Subjects\\Sujets:')][$streamID = 'CA11']"
                              mode="highlights"/>
         <xsl:apply-templates select="docinfo:custom-metafields/docinfo:custom-metafield[@name = 'actFirstDoc'][contains(., 'true')][($streamID = 'CA06') or ($streamID = 'CA07')or ($streamID = 'CA08')]"
                              mode="classify"/>
         <xsl:apply-templates select="docinfo:custom-metafields/docinfo:custom-metafield[@name='act-id' or @searchtype='act-id'][($streamID = 'CA08') or ($streamID = 'CA07')]"
                              mode="doc_membership"/>
         <xsl:apply-templates select="docinfo:versioninfo/docinfo:versionbranch[$streamID = ('CA05', 'CA06', 'CA08')]"
                              mode="member"/>
         <xsl:apply-templates select="docinfo:custom-metafields/docinfo:custom-metafield[@name = 'act-id'][$streamID = ('CA06')]"
                              mode="membership"/>
         <xsl:apply-templates select="following::ci:content[$streamID = ('CA06','CA05', 'CA08', 'CA07')]"
                              mode="doc-related"/>
         <xsl:apply-templates select="following::leg:num[not(starts-with(.,'solsak'))][$streamID = ('CA08')]"
                              mode="doc_related_content"/>
         <xsl:apply-templates select="following::leg:officialnum[1][not(child::ci:cite)][not(preceding-sibling::leg:num[child::ci:cite])][$streamID = ('CA05', 'CA07', 'CA08','CA06')]"
                              mode="doc_related_content_officialnum"/>
         <xsl:apply-templates select="/LEGDOC/leg:body[child::leg:level][$streamID = ('CA06', 'CA07', 'CA08')]"
                              mode="metadata"/>
         <xsl:apply-templates select="/LEGDOC/leg:body[$streamID = ('CA05')]"
                              mode="doc_overview_bills"/>
         <xsl:apply-templates select="/COMMENTARYDOC/comm:body[$streamID = 'CA10']"
                              mode="overviewmeta"/>
         <xsl:apply-templates select="/COMMENTARYDOC/comm:body[$streamID = 'CA09']"
                              mode="doc_overview"/>
         <xsl:apply-templates select="/COMMENTARYDOC/docinfo/relationshipmetadata[$streamID='UK14']"/>
         <xsl:apply-templates select="//note[@notetype = 'other']/remotelink[contains(., '[version anglaise]') or contains(., '[French Version]')][$streamID = 'CA02DS']"
                              mode="doc-related_content"/>
         <xsl:apply-templates select="//jrnl:body[$streamID = 'CA15']" mode="doc_overview"/>
         <!-- Awantika: Applied template for note scnario in AU20 -->
         <xsl:apply-templates select="//CITATORDOC/source_cttr:body/leg:info/note[@notetype = 'xref' and (@id = 'SCAP4' or 'SCAI4')]"/>
         <xsl:apply-templates select="docinfo:leginclude[$streamID = ('UK06','UK07')]"/>
      </doc:docinfo>
   </xsl:template>

   <xsl:template name="legacy-metadata"><!-- don't create doc:legacy-metadata unless at least one of the following is present -->
      <xsl:if test="docinfo:dpsi | /CITATORDOC/@citatordoctype | /CITATORDOC/@fullcourt | /CITATORDOC/@notannotated | /CITATORDOC/@shortannot | /CITATORDOC/@unreported | @browseprev | @browsenext | @partitionnum | @majorrevision | @excludefromalerts | @excludefromtoc | @id-string | docinfo:custom-metafields | //leg:info/leg:hier | docinfo:lbu-meta | docinfo:subtype | perjudge">
         <doc:legacy-metadata metadatasource="lbu-meta">
            <meta>
               <xsl:for-each select="/*[1]/docinfo[1]/@excludefromtoc">
                  <metaitem>
                     <xsl:attribute name="name">
                        <xsl:text>excludefromtoc</xsl:text>
                     </xsl:attribute>
                     <xsl:attribute name="value">
                        <xsl:value-of select="."/>
                     </xsl:attribute>
                  </metaitem>
               </xsl:for-each>
               <xsl:choose><!--			Vikas Rohilla : updated the and condition			-->
                  <xsl:when test="docinfo:dpsi[@id-string] and not(./docinfo:lbu-meta/docinfo:metaitem[upper-case(@name) = 'DPSI'])">
                     <xsl:apply-templates select="docinfo:dpsi"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:call-template name="findDPSI"/>
                  </xsl:otherwise>
               </xsl:choose>
               <!-- Awantika: metaitem mapping for case:courtcode in HK03. SP: also using this for CA19. Sudhanshu : Added  -->
               <xsl:if test="//case:courtcode[$streamID = ('HK03', 'CA19', 'CA02CC', 'CA01' ,'NZ03', 'AU13', 'UK01', 'UK03', 'NZ07-DN', 'NZ07DC' , 'AU07' , 'NZ17CC', 'AU09','HK09','MY01')]">
                  <metaitem>
                     <xsl:attribute name="name">
                        <xsl:text>case:courtcode</xsl:text>
                     </xsl:attribute>
                     <xsl:attribute name="value">
                        <xsl:value-of select="//case:courtcode/text()"/>
                     </xsl:attribute>
                  </metaitem>
                  <!-- Awantika: instruction ends -->
               </xsl:if>
               <!-- Awantika: Added metaitem for UK11DN for alert:alertReference and topic:topicReference-->
               <!-- BRT 10/3/17: commented this out in favor of the code on line 680 -->
               <!--xsl:if test="/DIGESTDOC/docinfo/classification[child::classitem[@classscheme='alert:alertReference']/classitem-identifier/classname['ModuleID']][$streamID = ('UK11DN','UK03','UK11DA')]">
						<metaitem>
							<xsl:attribute name="name">
								<xsl:text>MODULE-CURRENTNESS-ALERT</xsl:text>
							</xsl:attribute>
							<xsl:attribute name="value">
								<xsl:value-of select="/DIGESTDOC/docinfo/classification/classitem[@classscheme='alert:alertReference']/classitem-identifier[child::classname['ModuleID']]/classcode/@normval"/>
							</xsl:attribute>
						</metaitem>
					</xsl:if-->
               <!-- BRT 10/3/17 commented out, use alert code as model for @classscheme='topic:topicReference' further down -->
               <!--xsl:if test="/DIGESTDOC/docinfo/classification[child::classitem[@classscheme='topic:topicReference']/classitem-identifier/classname['ModuleID']][$streamID = 'UK11DN']">
						<metaitem>
							<xsl:attribute name="name">
								<xsl:text>MODULE-PGUID</xsl:text>
							</xsl:attribute>
							<xsl:attribute name="value">
								<xsl:value-of select="/DIGESTDOC/docinfo/classification/classitem[@classscheme='topic:topicReference']/classitem-identifier[child::classname['ModuleID']]/classcode/@normval"/>
							</xsl:attribute>
						</metaitem>
					</xsl:if-->
               <!-- JD: 20170526: added for UK05
					"PLEASE NOTE that the element doc:legacy-metadata needs to be created only for case:courtcode occurring within
					case:headnote/case:info/case:courtinfo. There is NO NEED to create doc:legacy-metadata for all other occurrences, eg.,
					cttr:annot/case:info/case:courtinfo."
					-->
               <xsl:if test="/CITATORDOC/source_cttr:body/case:headnote/case:info/case:courtinfo/case:courtcode[$streamID = 'UK05']">
                  <metaitem>
                     <xsl:attribute name="name">
                        <xsl:text>case:courtcode</xsl:text>
                     </xsl:attribute>
                     <xsl:attribute name="value">
                        <xsl:value-of select="/CITATORDOC/source_cttr:body/case:headnote/case:info/case:courtinfo/case:courtcode/text()"/>
                     </xsl:attribute>
                  </metaitem>
               </xsl:if>
               <xsl:apply-templates select="//case:info/case:reportercite/@ln.user-displayed[$streamID='AU07']"
                                    mode="metadata"/>
               <!-- JD: end add for UK05 -->
               <xsl:apply-templates select="/CITATORDOC/@citatordoctype | /CITATORDOC/@fullcourt | /CITATORDOC/@notannotated | /CITATORDOC/@shortannot | /CITATORDOC/@unreported | @browseprev | @browsenext | @partitionnum | @majorrevision | @excludefromalerts | @id-string"/>
               <xsl:apply-templates select="docinfo:custom-metafields [not($streamID='USLPA')]"/>
               <xsl:if test="not($streamID = 'CA05')">
                  <xsl:apply-templates select="//leg:info/leg:hier"/>
               </xsl:if>
               <xsl:apply-templates select="docinfo:lbu-meta"/>
               <xsl:apply-templates select="docinfo:subtype"/>
               <!-- Vikas Rohilla	: Apply templates added for the streamID CA02DC -->
               <xsl:apply-templates select="//case:courtcode[$streamID = ('CA02DC', 'CA02DS')]"
                                    mode="meta_item"/>
               <xsl:apply-templates select="//classification[@rendition and @classscheme][$streamID = 'CA02DC']"
                                    mode="meta-item"/>
               <xsl:call-template name="perjudge"/>
               <!--<xsl:apply-templates select="//case:courtinfo/case:courtcode" mode="metadata"/>-->
               <xsl:if test="$streamID = ('HK08', 'AU02')">
                  <xsl:apply-templates select="//case:headnote/case:info/case:courtinfo/case:courtcode"
                                       mode="metadata"/>
               </xsl:if>
            </meta>
         </doc:legacy-metadata>
         <xsl:if test="$streamID='USLPA'">
            <xsl:apply-templates select="docinfo:custom-metafields"/>
         </xsl:if>
         <!-- Awantika: Need to create two legacy metadata one isdefault one is with @metadatasource="tracking-timestamp". 
				1. For all documents, the conversion should add a date-timestamp in the format YYYYMMDDHHMMSS using doc:legacymetadata@
metadatasource="tracking-timestamp"/meta containing meta/metaitem@name="conversiontimestamp"@
value="YYYYMMDDHHMMSS"
				2. If optional docinfo:custom-metafields/docinfo:custom-metafield[@name="lbu-publish-timestamp"] exists, create doc:legacymetadata[@
metadatasource="tracking-timestamp"] and add child meta/metaitem[@name="lbu-publish-timestamp"]
[@value="YYYYMMDDHHMMSS"] -->
         <xsl:if test="$streamID='AU20'">
            <doc:legacy-metadata metadatasource="tracking-timestamp">
               <meta>
                  <metaitem>
                     <xsl:attribute name="name">
                        <xsl:text>conversion-timestamp</xsl:text>
                     </xsl:attribute>
                     <xsl:attribute name="value">
                        <xsl:choose>
                           <xsl:when test="docinfo:custom-metafields/docinfo:custom-metafield[@name='lbu-publish-timestamp']">
                              <xsl:value-of select="concat(docinfo:custom-metafields/docinfo:custom-metafield[@name='lbu-publish-timestamp'],format-dateTime(current-dateTime(),'[H01][m01][s]'))"/>
                           </xsl:when>
                           <xsl:otherwise>
                              <xsl:value-of select="format-dateTime(current-dateTime(),'[Y0001][M01][D01][H01][m01][s]')"/>
                           </xsl:otherwise>
                        </xsl:choose>
                     </xsl:attribute>
                  </metaitem>
                  <xsl:if test="docinfo:custom-metafields/docinfo:custom-metafield[@name='lbu-publish-timestamp']">
                     <metaitem>
                        <xsl:attribute name="name">
                           <xsl:text>lbu-publish-timestamp</xsl:text>
                        </xsl:attribute>
                        <xsl:attribute name="value">
                           <xsl:value-of select="docinfo:custom-metafields/docinfo:custom-metafield[@name='lbu-publish-timestamp']"/>
                        </xsl:attribute>
                     </metaitem>
                  </xsl:if>
               </meta>
            </doc:legacy-metadata>
         </xsl:if>
      </xsl:if>
      <!-- Brad Thacker: corrected metaitem for classitem[@classscheme='topic:topicReference'] UK15CS, UK15ds, UK12cs, UK11dn -->
      <xsl:for-each select="/*/docinfo/classification/classitem[@classscheme='topic:topicReference'][classitem-identifier/classname['ModuleID']]">
         <xsl:if test="$streamID=('UK11DN','UK12', 'UK15')">
            <doc:legacy-metadata metadatasource="lbu-meta">
               <meta>
                  <metaitem>
                     <xsl:attribute name="name">
                        <xsl:text>MODULE-PGUID</xsl:text>
                     </xsl:attribute>
                     <xsl:attribute name="value">
                        <xsl:value-of select="./classitem-identifier[child::classname['ModuleID']]/classcode/@normval"/>
                     </xsl:attribute>
                  </metaitem>
                  <!-- BRT: comment out for now - don't need topic pguids in shared services (yet) -->
                  <!--xsl:for-each select="./classitem-identifier/classcode">
							<xsl:if test="contains(./@normval, 'urn:topic:')">
								<metaitem>
									<xsl:attribute name="name">
										<xsl:text>TOPIC-CURRENTNESS-ALERT</xsl:text>
									</xsl:attribute>
									<xsl:attribute name="value">
										<xsl:value-of select="./@normval"/>
									</xsl:attribute>
								</metaitem>
							</xsl:if>
						</xsl:for-each-->
               </meta>
            </doc:legacy-metadata>
         </xsl:if>
      </xsl:for-each>
      <!-- Rohan Borkar: modifications end-->
      <!-- Rohan Borkar: corrected metaitem for UK11DA for alert:alertReference -->
      <xsl:for-each select="/DIGESTDOC/docinfo/classification/classitem[@classscheme='alert:alertReference']">
         <xsl:if test="$streamID=('UK11DN','UK03','UK11DA')">
            <doc:legacy-metadata metadatasource="lbu-meta">
               <meta>
                  <metaitem>
                     <xsl:attribute name="name">
                        <xsl:text>MODULE-CURRENTNESS-ALERT</xsl:text>
                     </xsl:attribute>
                     <xsl:attribute name="value">
                        <xsl:value-of select="./classitem-identifier[child::classname['ModuleID']]/classcode/@normval"/>
                     </xsl:attribute>
                  </metaitem>
                  <xsl:for-each select="./classitem-identifier/classcode">
                     <xsl:if test="contains(./@normval, 'urn:topic:')">
                        <metaitem>
                           <xsl:attribute name="name">
                              <xsl:text>TOPIC-CURRENTNESS-ALERT</xsl:text>
                           </xsl:attribute>
                           <xsl:attribute name="value">
                              <xsl:value-of select="./@normval"/>
                           </xsl:attribute>
                        </metaitem>
                     </xsl:if>
                  </xsl:for-each>
               </meta>
            </doc:legacy-metadata>
         </xsl:if>
      </xsl:for-each>
      <!-- Rohan Borkar: modifications end-->
      <xsl:if test="$streamID=('AU13','HK09')">
         <doc:legacy-metadata metadatasource="rosetta">
            <meta>
               <xsl:for-each select="/CASEDOC/case:body/case:headnote/case:info/case:courtinfo/case:courtcode">
                  <metaitem>
                     <xsl:attribute name="name">case:courtcode</xsl:attribute>
                     <xsl:attribute name="value" select="."/>
                  </metaitem>
               </xsl:for-each>
            </meta>
         </doc:legacy-metadata>
      </xsl:if>
   </xsl:template>
   <!-- JD: 20170524: adding this template (called above) -->
   <xsl:template match="docinfo:dpsi">
      <metaitem name="dpsi" value="{@id-string}"/>
   </xsl:template>
   <!-- person[@searchtype="JUDGES"] -->
   <xsl:template name="perjudge"><!-- JD: 2017-07-14: added 'judge'; probably a data error from UK XSLT development -->
      <xsl:if test="//person[@searchtype = ('JUDGES','judge')]">
         <metaitem name="JUDGES"
                   value="{//person[ @searchtype = ('JUDGES','judge') ]/name.text}"/>
      </xsl:if>
   </xsl:template>

   <xsl:template match="/CITATORDOC/@citatordoctype | /CITATORDOC/@fullcourt | /CITATORDOC/@notannotated | /CITATORDOC/@shortannot | /CITATORDOC/@unreported | @browseprev | @browsenext | @partitionnum | @majorrevision | @excludefromalerts | @id-string">
      <metaitem name="{name()}" value="{.}"/>
   </xsl:template>

   <xsl:template name="findDPSI">
      <xsl:choose><!--	**************************************************************  
		Vikas Rohilla : Commented this part because findDPSI templete called in the docinfo
		template and after using the double dot (..) current element becomes
		the CASEDOC and the docinfo:lbu-meta never find in the CASEDOC. 
		and after match the conversion is skip becauese it is created by the 
		docinfo:metaitem template.
		**************************************************************--><!--	<xsl:when test="../docinfo:lbu-meta/docinfo:metaitem[@name='DPSI']">
				<metaitem xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
					<xsl:attribute name="name">dpsi</xsl:attribute>
					<xsl:attribute name="value" select="../docinfo:lbu-meta/docinfo:metaitem[@name='DPSI']/@value"/>
				</metaitem>
			</xsl:when>--><!-- Vikas Rohilla : replaced double dot(..) with the single dot (.)  -->
         <xsl:when test="./docinfo:lbu-meta/docinfo:metaitem[upper-case(@name) = 'DPSI']"/>
         <xsl:otherwise>
            <metaitem>
               <xsl:attribute name="name">dpsi</xsl:attribute>
               <xsl:attribute name="value" select="$dpsi"/>
            </metaitem>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="comm:info/pubdate" mode="dc.metadata">
      <xsl:apply-templates mode="dc.metadata"/>
   </xsl:template>

   <xsl:template match="case:headnote/case:info/case:casename | case2:headnote/case2:info/case2:casename"
                 mode="dc.metadata"><!--  Original Target XPath:  dc:metadata/dc:title   -->
      <dc:title>
         <xsl:apply-templates select="@* | node()" mode="dc.metadata"/>
      </dc:title>
   </xsl:template>

   <xsl:template match="comm:info/pubdate/date" mode="dc.metadata">
      <dc:date lnmeta:datetype="pubdate">
         <xsl:value-of select="@year"/>
         <xsl:text>-</xsl:text>
         <xsl:value-of select="@month"/>
         <xsl:text>-</xsl:text>
         <xsl:value-of select="@day"/>
      </dc:date>
   </xsl:template>

   <xsl:template match="docinfo:lbu-meta/docinfo:metaitem[@name = 'PA-PGUID' or @name = 'TOPIC-PGUID' or @name = 'SUB-TOPIC-PGUID']"
                 priority="2"
                 mode="classify">
      <classify:classitem>
         <meta>
            <metaitem name="appliedby" value="human"/>
         </meta>
         <topic:topicReference guid:guid="{@value}"/>
      </classify:classitem>
   </xsl:template>

   <xsl:template match="docinfo:versionbranch" priority="2" mode="member">
      <doc:membership>
         <ref:groupid group-type="variants-1">
            <ref:resourceid>
               <xsl:attribute name="ref:resourcekey">
                  <xsl:text>urn:cldi-1:</xsl:text>
                  <xsl:value-of select="translate(translate(translate(translate(@value,'          (&#x9; ',''),'          &#x9;) ',''),'          ,&#x9; ',''),'          ''&#x9; ','')"/>
               </xsl:attribute>
            </ref:resourceid>
         </ref:groupid>
      </doc:membership>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:overview</xd:i> becomes <xd:b>doc:overview</xd:b>, with
          child <xd:b>doc:overview/bodytext</xd:b> created to hold the converted
            <xd:i>docinfo:overview</xd:i> content.</xd:p>
         <xd:p>If <xd:i>docinfo:overview</xd:i> has attribute <xd:i>@type</xd:i>
          then retain and carry into the target xml <xd:b>doc:overview/@type</xd:b> as
          shown below.</xd:p>
         <xd:p>(i.e <xd:i>docinfo:overview type="extracted"</xd:i> becomes
            <xd:b>doc:overview type="extracted"</xd:b>).</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>Conversion needs to suppress <xd:i>docinfo:overview</xd:i> when it's the
          child of <xd:i>leg:levelinfo</xd:i> and <xd:i>levelinfo</xd:i>. This
          will be applicable to all <xd:b>Pacific Content Streams</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo&gt; &lt;docinfo:overview type="editorial"&gt; &lt;p&gt;
          &lt;text&gt;This is a document transactional overview sample for AU05 Commentary Form
          content type/stream. It is indicative text only and not a sample of actual text that will
          be included but used here to identify the particular element used for this
          purpose.&lt;/text&gt; &lt;/p&gt; &lt;/docinfo:overview&gt; &lt;/docinfo&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;doc:docinfo&gt; &lt;doc:overview type="editorial"&gt; &lt;bodytext&gt;
          &lt;p&gt; &lt;text&gt;This is a document transactional overview sample for AU05 Commentary
          Form content type/stream. It is indicative text only and not a sample of actual text that
          will be included but used here to identify the particular element used for this
          purpose.&lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt; &lt;/doc:overview&gt;
          &lt;/doc:docinfo&gt; </xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>
               <xd:i>For UK streams</xd:i>
            </xd:b>: If input documents is having
          <xd:i>docinfo:overview@type</xd:i> markup with attribute value "<xd:i>abstract</xd:i>"
        then conversion needs to mapped <xd:b>doc:overview@type="abstract"</xd:b> in
        NewLexis target. Refer input and target examples;</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo&gt; &lt;docinfo:overview type="abstract"&gt; &lt;p&gt;
          &lt;text&gt;VAT – default surcharge – reasonable excuse – dismissal of key employee –
          reliance on another person&lt;/text&gt; &lt;/p&gt; &lt;/docinfo:overview&gt;
          &lt;/docinfo&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;doc:docinfo&gt; &lt;doc:overview type="abstract"&gt; &lt;bodytext&gt;
          &lt;p&gt; &lt;text&gt;VAT – default surcharge – reasonable excuse – dismissal of key
          employee – reliance on another person&lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt;
          &lt;/doc:overview&gt; &lt;/doc:docinfo&gt; </xd:pre>
         <!--Changes2013-04-10:  Created2013-06-25: added to AU and NZ ditamap for content
            enrichment2013-09-16: Instruction added for suppressing
              docinfo:overview when it is child of
              leg:levelinfo and levelinfo.Affects all
            Pacific content streams. WebTeam # is 234193.2013-09-16: WebTeam #233318 created for pacific
            content stream inorder to suppress docinfo:overview with in
              leg:levelinfo and levelinfo.2014-08-04: added to UK05 ditamap.2014-10-21: added to UK09 ditamap.2014-11-04: Clarification only: added text to explicitly
            indicate that the child doc:overview/bodytext should be created.
            Not a change to instructions.2015-09-08: Added the handling of new attribute value
              "abstract" inside the docinfo:overview@type markup for
            UK streams and it should be mapped with
              doc:overview@type="abstract". R4.5 Content Issue List
            #2391.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.overview-LxAdv-docinfo.overview.dita  -->
   <!-- CSN: Added docinfo:overview from base.xsl. -->
   <xsl:template match="docinfo:overview">
      <xsl:choose>
         <xsl:when test="(parent::levelinfo or parent::leg:levelinfo) and (//docinfo:doc-country/@iso-cc = 'NZ' or //docinfo:doc-country/@iso-cc = 'AU')"/>
         <xsl:otherwise>
            <xsl:element name="doc:overview">
               <xsl:attribute name="type">
                  <xsl:value-of select="@type"/>
               </xsl:attribute>
               <xsl:choose>
                  <xsl:when test="bodytext">
                     <xsl:apply-templates select="node()"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <bodytext>
                        <xsl:apply-templates select="node()"/>
                     </bodytext>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:element>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!-- Priya Kaushal: included this module -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>About This Module: These are special rules for UK streams. The conversions
                described here are <xd:i>in addition to</xd:i> the conversions described in <xd:a href="Rosetta_docinfo-LxAdv-doc.metadata_doc.docinfo.dita">"<xd:i>docinfo</xd:i> to
                        <xd:b>doc:metadata/doc:docinfo</xd:b>
                (id-CCCC-10282)"</xd:a>
         </xd:p>
         <xd:p>These are rules for mapping certain attributes on source element
                    <xd:i>docinfo</xd:i>. The attributes may not be present in every
                stream. If present, the rules below apply.</xd:p>
         <xd:p>Source: <xd:i>docinfo</xd:i> attributes - <xd:ul>
               <xd:li>
                  <xd:i>@majorrevision</xd:i>
               </xd:li>
               <xd:li>
                  <xd:i>@excludefromalerts</xd:i>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>Target: Each attribute and its value becomes <xd:b>metaitem[@name
                    @value]</xd:b> within <xd:b>classify:classification</xd:b>
                markup. As follows:</xd:p>
         <xd:p>Within <xd:b>doc:metadata/doc:docinfo</xd:b> -<xd:ul>
               <xd:li>Create
                            <xd:b>classify:classification[@classscheme="uk-functional-information"]/classify:classitem</xd:b>.
                        The <xd:b>@classscheme</xd:b> value is hard coded.<xd:ul>
                     <xd:li>Create <xd:b>meta</xd:b>
                        <xd:ul>
                           <xd:li>For each input attribute, create <xd:b>metaitem[@name
                                            @value]</xd:b>
                           </xd:li>
                        </xd:ul>
                     </xd:li>
                     <xd:li>Create
                                    <xd:b>classify:classitem-identifier/classify:classcode[@normval="functional-parameters"]</xd:b>.
                                The <xd:b>@normval</xd:b> value is hard coded.</xd:li>
                  </xd:ul>
               </xd:li>
            </xd:ul>
            <xd:p>
               <xd:b>Note: </xd:b>Create only one container
                        <xd:b>classify:classification[@classscheme="uk-functional-information"]/classify:classitem</xd:b>.
                    The container holds the items described above and may also hold mappings from
                    elsewhere in the same source file.</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo majorrevision="true" excludefromalerts="false" partitionnum="DIG1"&gt;
	    .................
&lt;/docinfo&gt;

&lt;!-- The last attribute, @partitionnum, is an example of an attribute not included in these special rules and so not present in target --&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;doc:metadata&gt;
    &lt;doc:docinfo doc-content-country="GB"&gt;
        &lt;dc:metadata&gt;
            ...... 
        &lt;/dc:metadata&gt;
        &lt;classify:classification classscheme="uk-functional-information"&gt;
            &lt;classify:classitem&gt;
                &lt;meta&gt;
                    &lt;metaitem name="majorrevision" value="true"/&gt;
                    &lt;metaitem name="excludefromalerts" value="false"/&gt;
                &lt;/meta&gt;
                &lt;classify:classitem-identifier&gt;
                    &lt;classify:classcode normval="functional-parameters"/&gt;
                &lt;/classify:classitem-identifier&gt;
            &lt;/classify:classitem&gt;
        &lt;/classify:classification&gt;
    &lt;/doc:docinfo&gt;
&lt;/doc:metadata&gt;

	</xd:pre>
         <!--Changes2016-06-17: Created. New rules.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_UK_docinfo-LxAdv-doc.docinfo_classify.classification.dita  -->
   <xsl:template match="docinfo" mode="UKClassify">
      <classify:classification classscheme="uk-functional-information">
         <classify:classitem>
            <meta>
               <xsl:apply-templates select="@majorrevision | @excludefromalerts |                          docinfo:custom-metafields/docinfo:custom-metafield[@name=('important', 'highlightFrequency', 'inEditorialReview', 'resultType', 'word-toc' , 'isDocBuilderAvailable', 'isCorePrecedent')]"/>
               <xsl:apply-templates select="docinfo:lbu-meta[$streamID='UK14']/docinfo:metaitem[@name=('alternative-title-formal','alternative-title-acronym','alternative-title-popular')]"/>
            </meta>
            <classify:classitem-identifier>
               <classify:classcode normval="functional-parameters"/>
            </classify:classitem-identifier>
         </classify:classitem>
      </classify:classification>
   </xsl:template>

   <xsl:template match="docinfo/@majorrevision | docinfo/@excludefromalerts">
      <metaitem>
         <xsl:attribute name="name" select="name(.)"/>
         <xsl:attribute name="value" select="."/>
      </metaitem>
   </xsl:template>
   <!-- WPK 2017-11-28.  All UK items related to functional information markup.  		
        This note is replicated in each of the 3 modules (but not in the 2 default "pass through" behavior modules) listed below for clarity.
        <targetxml>doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"]</targetxml>

        Module: \svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\docinfo\Rosetta_docinfo.lbu-meta-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta-scheme.xsl
        <lnpid>id-CCCC-10300</lnpid>
        this is the default "pass through" or non-classification behavior for lbu-meta not as functional information but as <doc:legacy-metadata metadatasource="lbu-meta">
        this is for items that either aren't converted to uk-functional-information.  technically the uk functional information items are ALSO
        passed through here additionally.
        
        Module: \svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\docinfo/Rosetta_UK_docinfo.custom-metafields-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta.meta.metaitem.xsl
		<lnpid>id-CCCC-10485</lnpid></title>
        this is the default "pass through" or non-classification behavior for custom-metafields not as functional information but as <doc:legacy-metadata metadatasource="lbu-meta">
        this is for items that either aren't converted to uk-functional-information.  technically the uk functional information items are ALSO
        passed through here additionally.
        
        Module: \svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_UK_docinfo-LxAdv-doc.docinfo_classify.classification.xsl
        <lnpid>id-CCCC-10546</lnpid>
        <targetxml>doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"]</targetxml>
        documentation and code for functional information classification markup, but only these use cases:
        	<p>Source: <sourcexml>docinfo</sourcexml> attributes - <ul>
                        <li><sourcexml>@majorrevision</sourcexml></li>
                        <li><sourcexml>@excludefromalerts</sourcexml></li>
                    </ul></p>
        This creates the <classification> wrapper for all uk functional information use cases.
        <xsl:template match="docinfo" mode="UKClassify">

        Module: \svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\docinfo\Rosetta_UK_docinfo.lbu-meta-LxAdv-doc.docinfo_classify.classification.xsl
        <lnpid>id-CCCC-10548</lnpid></title>
        <targetxml>doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"]</targetxml>
        documentation and code (the <metaitem> within the classification wrapper) for these use cases only
            <p>Source: <ul>
                    <li><sourcexml>docinfo:metaitem[@name="alternative-title-formal" @value=""]</sourcexml></li>
                    <li><sourcexml>docinfo:metaitem[@name="alternative-title-acronym"  @value=""]</sourcexml></li>
                    <li><sourcexml>docinfo:metaitem[@name="alternative-title-popular"  @value=""]</sourcexml></li>
                </ul></p>

        Module: \svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\docinfo\Rosetta_UK_docinfo.custom-metafields-LxAdv-dc.date_or_doc.docinfo_classify.classification.xsl
        <lnpid>id-CCCC-10547</lnpid></title>
        <targetxml>doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"]</targetxml>
        documentation and code (the <metaitem> within the classification wrapper)for functional information classification markup, but only these use cases:
           <p>Source: <ul>
                    <li><sourcexml>docinfo:custom-metafield[@name="editorialPublishedDate"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="createdDate"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="updatedDate"]</sourcexml></li>
                </ul></p>

                <p>Source: <ul>
                    <li><sourcexml>docinfo:custom-metafield[@name="important"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="highlightFrequency"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="inEditorialReview"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="resultType"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="word-toc"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="isDocBuilderAvailable"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="isCorePrecedent"]</sourcexml></li>
                    <!-/- McNally June 16 2016: The next one, filterType, might be wanted in future. No initial requirement so commented-out. -/->
                    <!-/-<li><sourcexml>docinfo:custom-metafield[@name="filterType"]</sourcexml></li>-/->
                </ul></p>
        -->   <!--   docinfo:alt-renditions/docinfo:alt-rendition to
            doc:alt-renditions/doc:alt-rendition
        id-CCCC-10283
    
        
            Instructions [common element]
            This topic is used in numerous conversion instructions for several LBUs. It is a
                shared topic rather than duplicated to ensure consistency and accuracy. The xml
                snippets contained in this topic reflect markup needed for the Apollo image handling
                application. The UK is the first LBU to move from Apollo to the Blobstore
                application for image handling. Therefore, if this is a UK conversion instruction
                document, please refer to the following topics for correct image handling markup.
                    lnlink[@service="ATTACHMENT"] to
                            ref:lnlink[@service="ATTACHMENT"] for BLOBSTORE
                        images (id-CCCC-10542)
                    inlineobject to
                            ref:inlineobject for BLOBSTORE images
                        (id-CCCC-10540)
                    link[@filename] to
                            ref:lnlink[@service="ATTACHMENT"] for BLOBSTORE
                        images (id-CCCC-10541)
                
            docinfo:alt-renditions becomes
                    doc:alt-renditions with these children: 
                    docinfo:alt-renditions/docinfo:alt-rendition becomes
                            doc:alt-renditions/doc:alt-rendition with
                            @key and child as follows: 
                            docinfo:alt-renditions/docinfo:alt-rendition/link
                                becomes
                                    doc:alt-renditions/doc:alt-rendition/ref:lnlink[@service="ATTACHMENT"].
                                    For conversion of link, please see
                                    the topic "link to
                                            ref.lnlink/@service="ATTACHMENT"".
                            
                            docinfo:alt-renditions/docinfo:alt-rendition/lnlink
                                becomes
                                    doc:alt-renditions/doc:alt-rendition/ref:lnlink[@service="ATTACHMENT"].
                                    For conversion of lnlink, please
                                    see the topic .
                            
                        
                    
                
                For UK06 Laws/Acts/Bills/Measures and UK07 Regulation place the text of
                        leg:officialname in
                        doc:alt-renditions/doc:alt-rendition/ref:lnlink/ref:marker
                    instead of the source text as used within
                        docinfo:alt-renditions/docinfo:alt-rendition/link
            
        
        
            Source XML 1
            
            
&lt;docinfo:alt-renditions&gt;
 &lt;docinfo:alt-rendition key="fulltext"&gt;
  &lt;link alttext="pdf version" filename="VIC_ACT_1998-25.pdf" type="pdf"&gt;PDF version of this Act&lt;/link&gt;
 &lt;/docinfo:alt-rendition&gt;
&lt;/docinfo:alt-renditions&gt;

            
        
        
            Target XML 1
            
            
&lt;doc:alt-renditions&gt;
 &lt;doc:alt-rendition key="fulltext"&gt;
  &lt;ref:lnlink service="ATTACHMENT"&gt;
   &lt;ref:marker role="label"&gt;PDF version of this Act&lt;/ref:marker&gt;
   &lt;ref:locator&gt;
    &lt;ref:locator-key&gt;
     &lt;ref:key-name name="attachment-key"/&gt;
     &lt;ref:key-value value="X-Y-VIC-ACT-1998-25"/&gt; 
     &lt;!-\- X and Y are LNI and SMI values obtained from CSSM -\-&gt;
    &lt;/ref:locator-key&gt;
    &lt;ref:locator-params&gt;
     &lt;proc:param name="componentseq" value="1"/&gt;
     &lt;proc:param name="attachment-type" value="PDF"/&gt;
     &lt;proc:param name="attachment-smi" value=""/&gt;
     &lt;!-\- @value populated with SMI obtained from CSSM -\-&gt;
     &lt;!-\- This @value assignment is done by conversion program -\-&gt;
    &lt;/ref:locator-params&gt;
   &lt;/ref:locator&gt;
  &lt;/ref:lnlink&gt;
 &lt;/doc:alt-rendition&gt;
&lt;/doc:alt-renditions&gt;

            
        
        
            Source XML 2
            
            
&lt;docinfo:alt-renditions&gt;
 &lt;docinfo:alt-rendition key="fulltext"&gt;
  &lt;link alttext="pdf version" filename="VIC_ACT_1998-25.pdf" type="pdf"&gt;PDF version of this Act&lt;/link&gt;
 &lt;/docinfo:alt-rendition&gt;
&lt;/docinfo:alt-renditions&gt;
&lt;!-\- ETC. -\-&gt;
&lt;leg:officialname&gt;&lt;emph typestyle="bf"&gt;Commons Act 1236&lt;/emph&gt;&lt;/leg:officialname&gt;
                
            
        
        
            Target XML 2
            
            
&lt;legisinfo:officialtitle&gt;Commons Act 1236&lt;/legisinfo:officialtitle&gt;
&lt;!-\- ETC. -\-&gt;
&lt;doc:alt-renditions&gt;
 &lt;doc:alt-rendition key="fulltext"&gt;
  &lt;ref:lnlink service="ATTACHMENT"&gt;
   &lt;ref:marker role="label"&gt;Commons Act 1236&lt;/ref:marker&gt;
    &lt;ref:locator&gt;
     &lt;ref:locator-key&gt;
      &lt;ref:key-name name="attachment-key"/&gt;
      &lt;ref:key-value value="X-Y-VIC-ACT-1998-25"/&gt;
      &lt;!-\- X and Y are LNI and SMI values obtained from CSSM -\-&gt;
     &lt;/ref:locator-key&gt;
     &lt;ref:locator-params&gt;
      &lt;proc:param name="componentseq" value="1"/&gt;
      &lt;proc:param name="attachment-type" value="PDF"/&gt;
      &lt;proc:param name="attachment-smi" value=""/&gt;
      &lt;!-\- @value populated with SMI obtained from CSSM -\-&gt;
      &lt;!-\- This @value assignment is done by conversion program -\-&gt;
     &lt;/ref:locator-params&gt;
    &lt;/ref:locator&gt;
   &lt;/ref:lnlink&gt;
  &lt;/doc:alt-rendition&gt;
&lt;/doc:alt-renditions&gt;
                
            
        
        
            Source XML 3
            
            
&lt;docinfo:alt-renditions&gt;
  &lt;docinfo:alt-rendition key="fulltext"&gt;
    &lt;lnlink service="ATTACHMENT" status="valid"&gt;
      &lt;marker role="content"&gt;PDF Format&lt;/marker&gt;
      &lt;api-params&gt;
        &lt;param name="attachment-key" value="application_for_apportionment-xxxx-xxxx-xxxxx-xx"/&gt;
        &lt;param name="attachment-type" value="pdf"/&gt;
        &lt;param name="attachment-smi" value="4364"/&gt;
        &lt;param name="componentseq" value="1"/&gt;
      &lt;/api-params&gt;
    &lt;/lnlink&gt;
  &lt;/docinfo:alt-rendition&gt;
&lt;/docinfo:alt-renditions&gt;
                
            
        
        
            Target XML 3
            
            
&lt;doc:alt-renditions&gt;
 &lt;doc:alt-rendition key="fulltext"&gt;
  &lt;ref:lnlink service="ATTACHMENT"&gt;
   &lt;ref:marker role="content"&gt;PDF Format&lt;/ref:marker&gt;
    &lt;ref:locator&gt;
     &lt;ref:locator-key&gt;
      &lt;ref:key-name name="attachment-key"/&gt;
      &lt;ref:key-value value="application_for_apportionment-xxxx-xxxx-xxxxx-xx"/&gt;
     &lt;/ref:locator-key&gt;
     &lt;ref:locator-params&gt;
      &lt;proc:param name="componentseq" value="1"/&gt;
      &lt;proc:param name="attachment-type" value="PDF"/&gt;
      &lt;proc:param name="attachment-smi" value="4364"/&gt;
     &lt;/ref:locator-params&gt;
    &lt;/ref:locator&gt;
   &lt;/ref:lnlink&gt;
  &lt;/doc:alt-rendition&gt;
&lt;/doc:alt-renditions&gt;
                
            
        
        
        
            Changes
            2016-07-29: Added Note about xml snippets that illustrate
                    image handling. Note summarizes move from Apollo to Blobstore application. UK is
                    first LBU to move to Blobstore.
            2013-12-17: Added instruction and example for
                        docinfo:alt-rendition/lnlink. (Webteam
                #247307)
            2013-05-01: Updated instructions and target example per
                    latest Apollo markup.
            2013-02-26: Updated target example per project
                    requirement.
            2012-10-29: Added instruction and example for UK06
                    Laws/Acts/Bills/Measures and UK07 Regulation place the text of
                        leg:officialname in
                        doc:alt-renditions/doc:alt-rendition/ref:lnlink/ref:marker
                    (Webteam #243521)
            2012-10-26: Changed to reflect recent requirements for attachment-type links.
            2012-09-06: Created.-->   <!--Vikas Rohilla : Template to match docinfo:alt-renditions and create doc:alt-renditions  -->
   <xsl:template match="docinfo:alt-renditions">
      <xsl:element name="doc:alt-renditions">
         <xsl:apply-templates select="@* | node()"/>
      </xsl:element>
   </xsl:template>
   <!--Vikas Rohilla : Template to match docinfo:alt-rendition and create doc:alt-rendition  -->
   <xsl:template match="docinfo:alt-rendition">
      <xsl:element name="doc:alt-rendition">
         <xsl:apply-templates select="@* | node()"/>
      </xsl:element>
   </xsl:template>

   <xsl:template match="docinfo:alt-rendition/@key">
      <xsl:attribute name="key" select="."/>
   </xsl:template>
   <!--<xsl:include href="../../modules/nonamespace/UK15PG_COMMENTARYDOC_alt.rendition-ref.marker.xsl"/>-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a shared
        topic rather than duplicated to ensure consistency and accuracy. The xml snippets contained
        in this topic reflect markup needed for the Apollo image handling application. The UK is the
        first LBU to move from Apollo to the Blobstore application for image handling. Therefore, if
        this is a UK conversion instruction document, please refer to the following topics for
        correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
              <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE images
            (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to <xd:b>ref:inlineobject</xd:b> for
            BLOBSTORE images (id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
              <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE images
            (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:assoc-links</xd:i> becomes
          <xd:b>doc:related-content</xd:b>. Attribute
          <xd:i>@assoc-content</xd:i> is suppressed.</xd:p>
         <xd:p>
            <xd:i>docinfo:assoc-links-grp</xd:i> becomes
          <xd:b>doc:related-content-grp</xd:b>, and its descendents are processed as
        follows: <xd:ul>
               <xd:li>If present, <xd:i>docinfo:assoc-resource</xd:i> becomes
              <xd:b>ref:relatedresourceref/ref:relatedresourceid</xd:b>. Copy the value of
              <xd:i>@assoc-resourceid</xd:i> to
            <xd:b>@ref:resourcekey</xd:b>
               </xd:li>
               <xd:li>The target value of <xd:b>doc:related-content-grp/@grptype</xd:b> depends on
            the existing attrribute in the source: <xd:ul>
                     <xd:li>If <xd:i>docinfo:assoc-links-grp/@assoc-content</xd:i> exists, it
                becomes <xd:b>@grptype</xd:b>.</xd:li>
                     <xd:li>Otherwise, <xd:i>docinfo:assoc-links-grp/@display-name</xd:i> becomes
                  <xd:b>@grptype</xd:b>.</xd:li>
                  </xd:ul>
               </xd:li>
               <xd:li>
                  <xd:i>heading/title</xd:i> becomes
            <xd:b>heading/title</xd:b>.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>The children below may occur within either level,
          <xd:i>docinfo:assoc-links</xd:i> or
          <xd:i>docinfo:assoc-links-grp</xd:i>, and convert as follows:</xd:p>
         <xd:p>
            <xd:ul>
               <xd:li>With one exception, <xd:i>text</xd:i> becomes
              <xd:b>doc:related-content-item/doc:related-content-desc/p/text</xd:b>. The
            exception to this rule is if and only if the only children of
              <xd:i>text</xd:i> are one or more <xd:i>link</xd:i> elements; in
            this case see the rule for <xd:i>link</xd:i> below and example #4.</xd:li>
               <xd:li>
                  <xd:p>
                     <xd:i>link</xd:i> becomes
                <xd:b>doc:related-content-item/doc:related-content-link/ref:lnlink[@service="ATTACHMENT"]</xd:b>.</xd:p>
                  <xd:p>In addtion to this conversion being performed if the <xd:i>link</xd:i>
              element is a child of <xd:i>docinfo:assoc-links</xd:i> or
                <xd:i>docinfo:assoc-links-grp</xd:i>, it is also done when the only
              children of <xd:i>text</xd:i> are one or more
              <xd:i>link</xd:i>elements. That is, if and only if <xd:b>all</xd:b> of a
                <xd:i>text/link</xd:i> element's other siblings are also
                <xd:i>link</xd:i> elements. In the <xd:i>text</xd:i> scenario,
              the start-tag and end-tag (but not the content) of <xd:i>text</xd:i> are
              dropped (see example #4). If there are multiple <xd:i>link</xd:i> elements,
              then multiple <xd:b>doc:related-content-item</xd:b> and children are
              created, one for each <xd:i>link</xd:i> element.</xd:p>
                  <xd:p>For details about converting <xd:i>link</xd:i> to
                <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> see
                <xd:i>link</xd:i> rules in the General Markup section.</xd:p>
               </xd:li>
               <xd:li>
                  <xd:i>remotelink[@service="QUERY"]</xd:i> is suppressed. If nothing else is
            present then also suppress the parent. <xd:p>
                     <xd:b>Note: </xd:b>
                     <xd:p>
                        <xd:b>This Note is applicable to CA03, and
                  CA05-CA08 only</xd:b> If we have XPath
                  <xd:i>docinfo:assoc-links-grp/remotelink[@service="QUERY"]</xd:i> or
                  <xd:i>docinfo:assoc-links/remotelink[@service="QUERY"]</xd:i>then we
                don't need to suppress it from target but in certain condition for that
                stream-wise.</xd:p>
                     <xd:ul>
                        <xd:li>
                           <xd:b>For CA06 and CA07</xd:b> If document is having
                    <xd:i>remotelink[@service="QUERY"]</xd:i> under the
                    <xd:i>docinfo:assoc-links-grp[assoc-content="enabling"] </xd:i>and
                    <xd:i>remotelink</xd:i> comes with attributes
                    <xd:i>@remotekey1</xd:i> with the start value <xd:b>"DOCINFO(XXXX)"</xd:b>
                  and <xd:i>@remotekey2</xd:i> comes with value <xd:b>All Canadian
                    Statutes</xd:b> then it should be mapped with
                    <xd:b>doc:related-content/doc:related-content-grp/doc:related-content-item[@content-type="enablingLeg"]/ref:relatedresourceref/ref:relatedresourceid/ref:resourcekey="urn:leg-id-1:XXXX"</xd:b>
                  where <xd:b>XXXX</xd:b> will be taken from source attribute
                    <xd:i>remotekey1</xd:i> Refer Example 7.</xd:li>
                        <xd:li>
                           <xd:b>For CA05 and CA08</xd:b> If document is having
                    <xd:i>remotelink[@service="QUERY"]</xd:i> under the
                    <xd:i>docinfo:assoc-links</xd:i> or
                    <xd:i>docinfo:assoc-links-grp</xd:i> and
                    <xd:i>remotelink</xd:i> comes with attributes
                    <xd:i>@remotekey2="All Canadian Regulations"</xd:i> then it should be
                  mapped with
                    <xd:b>doc:related-content/doc:related-content-grp[@grptype="subordinateLeg"]/doc:related-content-item[@content-type="subordinateLeg"]/ref:relatedresourceref/ref:relatedresourceid/ref:resourcekey="urn:leg-id-1:XXXX"</xd:b>
                  where <xd:b>XXXX</xd:b> will be taken from source attribute
                    <xd:i>remotekey1</xd:i> Refer Example 8.</xd:li>
                        <xd:li>
                           <xd:b>For CA05 - CA08</xd:b> Conversion Needs to split multiple <xd:b>ORs</xd:b> into a
                  separate <xd:b>doc:related-content-item</xd:b>. Refer <xd:b>Example 9</xd:b>
                  for CA06-CA07 streams. </xd:li>
                        <xd:li>
                           <xd:b>For CA06 and CA07</xd:b>
                           <xd:i>docinfo:assoc-links-grp/@assoc-content="enabling"</xd:i> should
                  map with <xd:b>doc:related-content-grp/@grptype="enablingLeg"</xd:b>.
                  Any heading found inside
                    "<xd:i>docinfo:assoc-links-grp/remotelink</xd:i>" then it should be
                  mapped with <xd:b>@doc:related-content-grp/heading/title</xd:b>. Refer
                  Example 9.</xd:li>
                        <xd:li>
                           <xd:b>For CA03</xd:b> If document is having
                    <xd:i>remotelink[@service="QUERY"]</xd:i> and
                    <xd:i>remotelink</xd:i> comes with attributes
                    <xd:i>@remotekey1</xd:i> with the value <xd:b>"REFNUM(XXXX)"</xd:b> and
                    <xd:i>@remotekey2</xd:i> contains <xd:b>"All Canadian Summaries"</xd:b> then
                  it should be mapped with
                    <xd:b>doc:related-content/doc:related-content-grp/doc:related-content-item[@content-type="caseSummaries"]/ref:relatedresourceref/ref:relatedresourceid/ref:resourcekey="urn:ucn-1:XXXX"</xd:b>
                  where <xd:b>XXXX</xd:b> will be taken from source attribute
                    <xd:i>remotekey1</xd:i>. Any bilingual headings should be retained
                  along with their associated <xd:b>@xml:lang</xd:b>. Refer Example 10.
                </xd:li>
                     </xd:ul>
                  </xd:p>
               </xd:li>
               <xd:li>
                  <xd:i>remotelink[@service="DOC-ID"]</xd:i> becomes
              <xd:b>doc:related-content-item/doc:related-content-link/ref:lnlink[@service="DOCUMENT"]</xd:b>.
            If the parent <xd:i>docinfo:assoc-links</xd:i> contains
              <xd:i>@assoc-content="external-content-location"</xd:i>, then add
              <xd:b>@content-type="external-content-location"]</xd:b> to
              <xd:b>doc:related-content-item</xd:b>. Create the following child elements: <xd:ul>
                     <xd:li>Create <xd:b>ref:marker</xd:b> to capture the PCDATA of
                  <xd:i>remotelink</xd:i>.</xd:li>
                     <xd:li>Create <xd:b>ref:locator</xd:b> and populate it as follows: <xd:ul>
                           <xd:li>Create <xd:b>ref:locator-key</xd:b> and populate it as follows: <xd:ul>
                                 <xd:li>If <xd:i>@remotekey1="DOC-ID"</xd:i> then <xd:ul>
                                       <xd:li>
                                          <xd:b>ref:key-name/@name</xd:b> will have the value
                            "DOC-ID".</xd:li>
                                       <xd:li>
                                          <xd:b>key-value/@value</xd:b> will be the value of
                              <xd:i>@dpsi</xd:i> followed by hyphen and concatenated with
                              <xd:i>@refpt</xd:i> or <xd:i>@remotekey2</xd:i>,
                            which ever is present (if both are present, use
                              <xd:i>@remotekey2</xd:i>).</xd:li>
                                    </xd:ul>
                                 </xd:li>
                                 <xd:li>If <xd:i>@remotekey1="REFPTID"</xd:i> then <xd:ul>
                                       <xd:li>
                                          <xd:b>ref:key-name/@name</xd:b> will have the value
                            "DOC-ID".</xd:li>
                                       <xd:li>
                                          <xd:b>ref:key-value/@value</xd:b> will be the value of
                              <xd:i>@dpsi</xd:i> followed by hyphen and concatenated with
                              <xd:i>@docidref</xd:i>.</xd:li>
                                       <xd:li>Create <xd:b>ref:locator/@anchoridref</xd:b> with value from
                              <xd:i>@refpt</xd:i> or <xd:i>@remotekey2</xd:i>,
                            which ever is present (if both are present, use
                            <xd:i>@refpt</xd:i>).</xd:li>
                                    </xd:ul>
                                 </xd:li>
                              </xd:ul>
                           </xd:li>
                        </xd:ul>
                        <xd:p>
                           <xd:b>Note: </xd:b>If <xd:i>remotelink/@dpsi</xd:i> is not present, use value from
                    <xd:i>docinfo:dpsi/@id-string</xd:i> or capture value from the LBU
                  manifest file.</xd:p>
                        <xd:p>
                           <xd:b>Note: </xd:b>
                           <xd:b>ref:locator/@anchoridref</xd:b> that begins with a number must
                  have an underscore added at start. Also apply other identifier data type format as
                  used for <xd:b>xml:id</xd:b> and <xd:b>ref:anchor/@id</xd:b>
                  (e.g. change colon to underscore). Refer to the section titled "Identifiers to ID Data Type - 
                  Handling Pattern Restrictions", if that section exists in this CI.</xd:p>
                     </xd:li>
                  </xd:ul>
               </xd:li>
               <xd:li>
                  <xd:i>remotelink[@href]</xd:i> becomes
              <xd:b>doc:related-content-item/doc:related-content-link/ref:lnlink[@service="URL"]</xd:b>.
            If the parent <xd:i>docinfo:assoc-links</xd:i> contains
              <xd:i>@assoc-content="external-content-location"</xd:i>, then add
              <xd:b>@content-type="external-content-location"]</xd:b> to
              <xd:b>doc:related-content-item</xd:b>. <xd:p>For details on converting
                <xd:i>remotelink[@href]</xd:i> to <xd:b>ref:lnlink</xd:b> see
                <xd:i>remotelink</xd:i> rules in General Markup section.</xd:p>
               </xd:li>
               <xd:li>
                  <xd:p>
                     <xd:i>lnlink[@service="QUERYLINK"]</xd:i> becomes
                <xd:b>doc:related-content-item/doc:related-content-link/ref:lnlink</xd:b>
              which is populated as follows: <xd:ul>
                        <xd:li>
                           <xd:i>lnlink[@service="QUERYLINK"]</xd:i> becomes
                    <xd:b>ref:lnlink[@service="QUERYLINK"]</xd:b>
                        </xd:li>
                        <xd:li>
                           <xd:i>lnlink/marker</xd:i> becomes
                    <xd:b>ref:lnlink/ref:marker</xd:b>
                        </xd:li>
                        <xd:li>Create <xd:b>ref:locator</xd:b> and populate it as follows: <xd:ul>
                              <xd:li>Create <xd:b>ref:locator-key</xd:b> and populate it as follows: <xd:ul>
                                    <xd:li>
                                       <xd:i>lnlink/key-name[@name="queryTemplatePGUID"]</xd:i>
                          becomes
                            <xd:b>ref:locator/ref:locator-key/ref:key-name[@name="queryTemplatePGUID"].</xd:b>
                                    </xd:li>
                                    <xd:li>
                                       <xd:i>lnlink/key-value/@value</xd:i> becomes
                            <xd:b>ref:locator/ref:locator-key/ref:key-value/@value</xd:b>
                                    </xd:li>
                                 </xd:ul>
                              </xd:li>
                              <xd:li>
                                 <xd:i>lnlink/api-params</xd:i> becomes
                        <xd:b>ref:locator/ref:locator-params</xd:b>, and the children are
                      mapped as follows: <xd:ul>
                                    <xd:li>For each <xd:i>api-params/param</xd:i> element, create a
                          corresponding <xd:b>proc:param</xd:b> and populate the
                          attributes: <xd:ul>
                                          <xd:li>
                                             <xd:i>param/@name</xd:i> becomes
                                <xd:b>proc:param/@name</xd:b>
                                          </xd:li>
                                          <xd:li>
                                             <xd:i>param/@value</xd:i> becomes
                                <xd:b>proc:param/@value</xd:b>
                                          </xd:li>
                                       </xd:ul>
                                    </xd:li>
                                 </xd:ul>
                              </xd:li>
                           </xd:ul>
                        </xd:li>
                     </xd:ul>
                  </xd:p>
               </xd:li>
               <xd:li>
                  <xd:p>
                     <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> becomes
                <xd:b>doc:related-content-item/doc:related-content-link/ref:lnlink</xd:b>
              which is populated as follows: See example 6 for more clarification.<xd:ul>
                        <xd:li>
                           <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> becomes
                    <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b>
                        </xd:li>
                        <xd:li>
                           <xd:i>lnlink/marker</xd:i> becomes
                    <xd:b>ref:lnlink/ref:marker</xd:b>
                        </xd:li>
                        <xd:li>Create <xd:b>ref:locator</xd:b> and populate it as follows: <xd:ul>
                              <xd:li>Create <xd:b>ref:locator-key</xd:b> and populate it as follows: <xd:ul>
                                    <xd:li>
                                       <xd:i>lnlink/api-params/param/@name="attachment-key"</xd:i>
                          becomes
                            <xd:b>ref:locator/ref:locator-key/ref:key-name/@name="attachment-key"</xd:b>.</xd:li>
                                    <xd:li>
                                       <xd:i>lnlink/api-params/param/@value</xd:i> becomes
                            <xd:b>ref:locator/ref:locator-key/ref:key-value/@value</xd:b>
                                       <xd:p>
                                          <xd:b>Note: </xd:b>Conversion final output will be
                              <xd:b>ref:key-value/@value="{LNI}-{SMI}-{X}"</xd:b> where as
                            {X} is the <xd:i>lnlink/api-params/param/@value</xd:i> as
                            described above and prepend {LNI} and {SMI} are not literal values, they
                            show where the LNI and SMI values obtained from CSSM should be output.
                            See the Example 6</xd:p>
                                    </xd:li>
                                 </xd:ul>
                              </xd:li>
                              <xd:li>
                                 <xd:i>lnlink/api-params</xd:i> becomes
                        <xd:b>ref:locator/ref:locator-params</xd:b>, and the children are
                      mapped as follows: <xd:ul>
                                    <xd:li>For each <xd:i>api-params/param</xd:i> element, create a
                          corresponding <xd:b>proc:param</xd:b> and populate the
                          attributes: <xd:ul>
                                          <xd:li>
                                             <xd:i>param/@name</xd:i> becomes
                                <xd:b>proc:param/@name</xd:b>
                                          </xd:li>
                                          <xd:li>
                                             <xd:i>param/@value</xd:i> becomes
                                <xd:b>proc:param/@value</xd:b>
                                          </xd:li>
                                       </xd:ul>
                                       <xd:p>
                                          <xd:b>Note: </xd:b>Also create the below markup in the target document while
                            conversion</xd:p>
                                       <xd:ul>
                                          <xd:li>
                                             <xd:b>proc:param/@name="attachment-smi"</xd:b> and
                                <xd:b>proc:param/@value="{SMI}"</xd:b>
                                             <xd:p>
                                                <xd:b>Note: </xd:b>@value populated with SMI obtained from CSSM. This @value
                                assignment is done by conversion program</xd:p>
                                          </xd:li>
                                       </xd:ul>
                                    </xd:li>
                                 </xd:ul>
                              </xd:li>
                           </xd:ul>
                        </xd:li>
                     </xd:ul>
                  </xd:p>
               </xd:li>
               <xd:li>
                  <xd:p>
                     <xd:i>lnlink[@service="TRAVERSE"]</xd:i> becomes
                <xd:b>doc:related-content-item/doc:related-content-link/ref:lnlink[@service="TRAVERSE"]</xd:b>.
              If the parent <xd:i>docinfo:assoc-links</xd:i> contains
                <xd:i>@assoc-content="external-content-location"</xd:i>, then add
                <xd:b>@content-type="external-content-location"]</xd:b> to
                <xd:b>doc:related-content-item</xd:b>.</xd:p>
                  <xd:p>For details on converting <xd:i>lnlink[@service="TRAVERSE"]</xd:i> to
                <xd:b>ref:lnlink[@service="TRAVERSE"] </xd:b> see
                <xd:i>lnlink[@service="TRAVERSE"]</xd:i> rules in General Markup
              section.</xd:p>
               </xd:li>
               <xd:li>
                  <xd:p>
                     <xd:i>lnlink[@service="URL"]</xd:i> becomes
                <xd:b>doc:related-content-item/doc:related-content-link/ref:lnlink[@service="URL"]</xd:b>.
              If the parent <xd:i>docinfo:assoc-links</xd:i> contains
                <xd:i>@assoc-content="external-content-location"</xd:i>, then add
                <xd:b>@content-type="external-content-location"]</xd:b> to
                <xd:b>doc:related-content-item</xd:b>.</xd:p>
                  <xd:p>For details on converting <xd:i>lnlink[@service="URL"]</xd:i> to
                <xd:b>ref:lnlink[@service="URL"] </xd:b> see
                <xd:i>lnlink[@service="URL"]</xd:i> rules in General Markup section.</xd:p>
               </xd:li>
               <xd:li>
                  <xd:i>ci:cite</xd:i> becomes
              <xd:b>doc:related-content-item/doc:related-content-link/ref:lnlink[@service="TRAVERSE"]</xd:b>.
            If the parent <xd:i>docinfo:assoc-links</xd:i> contains
              <xd:i>@assoc-content="external-content-location"</xd:i>, then add
              <xd:b>@content-type="external-content-location"]</xd:b> to
              <xd:b>doc:related-content-item</xd:b>. Create the following child elements: <xd:ul>
                     <xd:li> Create <xd:b>ref:marker</xd:b> to capture the PCDATA of
                  <xd:i>ci:cite/ci:content</xd:i>.</xd:li>
                     <xd:li>
                        <xd:b>ref:locator/ref:locator-key/ref:key-name/@name</xd:b> will have
                the value "normcite".</xd:li>
                     <xd:li>
                        <xd:b>ref:locator/ref:locator-key/key-value/@value</xd:b> will be the
                value of <xd:i>ci:cite/ci:content</xd:i>.</xd:li>
                     <xd:li>Create
                  <xd:b>ref:locator/ref:locator-params/proc:param[@name="normprotocol"]</xd:b>.
                If <xd:i>ci:cite/@normprotocol</xd:i> is present, create the attribute
                  <xd:b>proc:param/@value</xd:b> and copy the value of
                  <xd:i>normprotocol</xd:i>; otherwise, add
                  <xd:b>@value="lexsee"</xd:b>. This line is hard coded.</xd:li>
                     <xd:li>If <xd:i>docinfo:doc-country/@iso-cc</xd:i> exists, create
                  <xd:b>ref:locator/ref:locator-params/proc:param[@name="countrycode"]</xd:b>
                with the attribute <xd:b>@value</xd:b>. The <xd:b>@value</xd:b>
                value is from <xd:i>docinfo:doc-country/@iso-cc</xd:i>.</xd:li>
                  </xd:ul>
               </xd:li>
            </xd:ul>
         </xd:p>
         <!-- McNally Apr 3 2014. The following special rule is moved to separate AU-NZ module. Commenting-out for now; can delete when we want -->
         <!--<section>
   <p><b><u>Special Rule for AU and NZ</u></b></p>
   <p>Usual rule is that each rosetta child (<sourcexml>text</sourcexml>,
     <sourcexml>remotelink</sourcexml>, <sourcexml>ci:cite</sourcexml>) maps to its own
     <targetxml>doc:related-content-item</targetxml>, as described above. For AU and NZ streams, a
    special merge is required, as follows: If rosetta linking element
     (<sourcexml>remotelink</sourcexml> or <sourcexml>ci:cite</sourcexml>) is immediately followed
    by <sourcexml>text</sourcexml>, then map the linking element (<sourcexml>remotelink</sourcexml>
    or <sourcexml>ci:cite</sourcexml>) and <sourcexml>text</sourcexml> to a single
     <targetxml>doc:related-content-item</targetxml>. See Example 4.</p>
  </section>-->
         <xd:p>
            <xd:b>Source XML 1</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:assoc-links&gt;
 &lt;remotelink alttext="Find related journals" cmd="f:exp" remotekey1="LEG-REF(Flood and Water Management Act 2010 OR FWMA 2010 w/3 s 48 OR ss 48 OR section 48 OR sections 48) OR &amp;quot;Flood and Water Management Act 2010&amp;quot; OR FWMA 2010 w/3 LEG-REF(s 48 OR ss 48 OR section 48 OR sections 48)" remotekey2="All Subscribed Journals Sources" service="QUERY"&gt;Find related journals&lt;/remotelink&gt;
 &lt;remotelink service="DOC-ID" remotekey1="REFPTID" refpt="786617_SL" dpsi="02o0" docidref="ABC123"&gt;Find related subordinate legislation&lt;/remotelink&gt;
&lt;/docinfo:assoc-links&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML 1</xd:b>
         </xd:p>
         <xd:pre>

&lt;doc:related-content&gt;
 &lt;doc:related-content-item&gt;
  &lt;doc:related-content-link&gt;
   &lt;ref:lnlink service="DOCUMENT"&gt;
    &lt;ref:marker&gt; Find related subordinate legislation &lt;/ref:marker&gt;
    &lt;ref:locator anchoridref="_786617_SL "&gt;
     &lt;ref:locator-key&gt;
      &lt;ref:key-name name="DOC-ID"/&gt;
      &lt;ref:key-value value="02o0-ABC123"/&gt;
     &lt;/ref:locator-key&gt;
    &lt;/ref:locator&gt;    
   &lt;/ref:lnlink&gt;
  &lt;/doc:related-content-link&gt;
 &lt;/doc:related-content-item&gt;
&lt;/doc:related-content&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Source XML 2</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:assoc-links assoc-content="related-content-pod"&gt;
 &lt;docinfo:assoc-links-grp assoc-content="related-documents"&gt;
  &lt;heading&gt;
   &lt;title&gt;Related Documents&lt;/title&gt;
  &lt;/heading&gt;
  &lt;remotelink service="DOC-ID" remotekey1="DOC-ID" remotekey2="0ONJ_151450"  dpsi="0ONJ"&gt;Transferring patent rights&lt;/remotelink&gt;
 &lt;/docinfo:assoc-links-grp&gt;
 &lt;docinfo:assoc-links-grp assoc-content="related-legislation"&gt;
  &lt;heading&gt;
   &lt;title&gt;Related Legislation&lt;/title&gt;
  &lt;/heading&gt;
  &lt;text&gt;Primary statute: 
   &lt;ci:cite searchtype="LEG-REF" status="valid"&gt;
    &lt;ci:sesslaw&gt;
     &lt;ci:sesslawinfo&gt;
      &lt;ci:sesslawnum num="1977_37a_Title"/&gt;
     &lt;/ci:sesslawinfo&gt;
     &lt;ci:sesslawref&gt;
      &lt;ci:standardname normpubcode="UK_ACTS"/&gt;
     &lt;/ci:sesslawref&gt;
    &lt;/ci:sesslaw&gt;
    &lt;ci:content&gt;Patents Act 1977&lt;/ci:content&gt;
   &lt;/ci:cite&gt;
  &lt;/text&gt;
 &lt;/docinfo:assoc-links-grp&gt;
&lt;/docinfo:assoc-links&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML 2</xd:b>
         </xd:p>
         <xd:pre>

&lt;doc:related-content&gt;
 &lt;doc:related-content-grp grptype="related-documents"&gt;
  &lt;heading&gt;
   &lt;title&gt;Related Documents&lt;/title&gt;
  &lt;/heading&gt;
  &lt;doc:related-content-item&gt;
   &lt;doc:related-content-link&gt;
    &lt;ref:lnlink service="DOCUMENT"&gt;
     &lt;ref:marker&gt;Transferring patent rights&lt;/ref:marker&gt;
     &lt;ref:locator&gt;
      &lt;ref:locator-key&gt;
       &lt;ref:key-name name="DOC-ID"/&gt;
       &lt;ref:key-value value="0ONJ-0ONJ_151450"/&gt;
      &lt;/ref:locator-key&gt;
     &lt;/ref:locator&gt;
    &lt;/ref:lnlink&gt;
   &lt;/doc:related-content-link&gt;
  &lt;/doc:related-content-item&gt;
 &lt;/doc:related-content-grp&gt;
 &lt;doc:related-content-grp grptype="related-legislation"&gt;
  &lt;heading&gt;
   &lt;title&gt;Related Legislation&lt;/title&gt;
  &lt;/heading&gt;
  &lt;doc:related-content-item&gt;
   &lt;doc:related-content-desc&gt;
    &lt;p&gt;
     &lt;text&gt;Primary statute: 
      &lt;lnci:cite status="valid"&gt;
       &lt;lnci:sesslaw&gt;
        &lt;lnci:sesslawinfo&gt;
         &lt;lnci:sesslawnum num="1977_37a_Title"/&gt;
        &lt;/lnci:sesslawinfo&gt;
        &lt;lnci:sesslawref&gt;
         &lt;lnci:standardname normpubcode="UK_ACTS"/&gt;
        &lt;/lnci:sesslawref&gt;
       &lt;/lnci:sesslaw&gt;
       &lt;lnci:content&gt;Patents Act 1977&lt;/lnci:content&gt;
      &lt;/lnci:cite&gt;
     &lt;/text&gt;
    &lt;/p&gt;
   &lt;/doc:related-content-desc&gt;
  &lt;/doc:related-content-item&gt;
 &lt;/doc:related-content-grp&gt;
&lt;/doc:related-content&gt;

            </xd:pre>
         <!-- McNally Apr 3 2014. Example 3 expanded to include ci:cite.  Done to illustrate general mapping; avoid confusion with separate module for AU-NZ use case.  -->
         <xd:p>
            <xd:b>Source XML 3</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:assoc-links&gt;
 &lt;remotelink alttext="Latest Times Law Reports" href="www.timesonline.co.uk/TGD/lexisDisplay/0,,,00.html" hrefclass="http"&gt;Latest Times Law Reports&lt;/remotelink&gt;
  &lt;ci:cite searchtype="BOOK-REF"&gt;
   &lt;ci:content&gt;Data technologies and patents (2012) 18 MCN 5&lt;/ci:content&gt;
  &lt;/ci:cite&gt;
&lt;/docinfo:assoc-links&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML 3</xd:b>
         </xd:p>
         <xd:pre>

&lt;doc:related-content&gt;
 &lt;doc:related-content-item&gt;
  &lt;doc:related-content-link&gt;
   &lt;ref:lnlink service="URL"&gt;
    &lt;ref:marker&gt;Latest Times Law Reports&lt;/ref:marker&gt;
    &lt;ref:locator&gt;
     &lt;ref:locator-key&gt;
      &lt;ref:key-name name="URL"/&gt;
      &lt;ref:key-value value="http://www.timesonline.co.uk/TGD/lexisDisplay/0,,,00.html"/&gt;
     &lt;/ref:locator-key&gt;
    &lt;/ref:locator&gt;
   &lt;/ref:lnlink&gt;
  &lt;/doc:related-content-link&gt;
 &lt;/doc:related-content-item&gt;
 &lt;doc:related-content-item&gt;
  &lt;doc:related-content-link&gt;
   &lt;ref:lnlink service="TRAVERSE"&gt;
    &lt;ref:marker role="label"&gt;Data technologies and patents (2012) 18 MCN 5&lt;/ref:marker&gt;
    &lt;ref:locator&gt;
     &lt;ref:locator-key&gt;
      &lt;ref:key-name name="normcite"/&gt;
      &lt;ref:key-value value="Data technologies and patents (2012) 18 MCN 5"/&gt;
     &lt;/ref:locator-key&gt;
     &lt;ref:locator-params&gt;
      &lt;proc:param name="normprotocol" value="lexsee"/&gt;
      &lt;proc:param name="countrycode" value="GB"/&gt;
     &lt;/ref:locator-params&gt;
    &lt;/ref:locator&gt;
   &lt;/ref:lnlink&gt;
  &lt;/doc:related-content-link&gt;
 &lt;/doc:related-content-item&gt;
&lt;/doc:related-content&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Source XML 4, showing a <xd:i>text</xd:i> element containing only a
          <xd:i>link</xd:i> child element</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:assoc-links-grp assoc-content="related-documents"&gt;
  &lt;heading&gt;
    &lt;title&gt;Related documents&lt;/title&gt;
  &lt;/heading&gt;
  &lt;remotelink service="DOC-ID" remotekey1="REFPTID" newwindow="YES" refpt="0OLB_258264"
    dpsi="0OLB" status="invalid" docidref="e60348a7-cc9b-4d43-468b-55a207cd7f00"&gt;Serving the claim form—method, address, deemed service and dispensing with service&lt;/remotelink&gt;
  &lt;text searchtype="figure"&gt;
    &lt;link filename="EXT_DR_List of authorised government departments for service.pdf"
      alttext="EXT_DR_List of authorised government departments for service.pdf" type="pdf"
      &gt;List of authorised government departments for service&lt;/link&gt;
  &lt;/text&gt;
&lt;/docinfo:assoc-links-grp&gt;
&lt;/docinfo:assoc-links&gt;

     </xd:pre>
         <xd:p>
            <xd:b>Target XML 4</xd:b>
         </xd:p>
         <xd:pre>

&lt;doc:related-content&gt;
  &lt;doc:related-content-grp grptype="related-documents"&gt;
    &lt;heading&gt;
      &lt;title&gt;Related documents&lt;/title&gt;
    &lt;/heading&gt;
    &lt;doc:related-content-item&gt;
      &lt;doc:related-content-link&gt;
        &lt;ref:lnlink service="DOCUMENT"&gt;
          &lt;ref:marker&gt;Serving the claim form—method, address, deemed service and
    dispensing with service&lt;/ref:marker&gt;
          &lt;ref:locator anchoridref="0OLB_258264"&gt;
            &lt;ref:locator-key&gt;
              &lt;ref:key-name name="DOC-ID"/&gt;
              &lt;ref:key-value value="0OLB-e60348a7-cc9b-4d43-468b-55a207cd7f00"/&gt;
            &lt;/ref:locator-key&gt;
          &lt;/ref:locator&gt;
        &lt;/ref:lnlink&gt;
      &lt;/doc:related-content-link&gt;
    &lt;/doc:related-content-item&gt;
    &lt;doc:related-content-item&gt;
      &lt;doc:related-content-link&gt;
        &lt;ref:lnlink service="ATTACHMENT"&gt;
          &lt;ref:marker role="label"&gt;List of authorised government departments for service&lt;/ref:marker&gt;
          &lt;ref:locator&gt;
            &lt;ref:locator-key&gt;
              &lt;ref:key-name name="attachment-key"/&gt;
              &lt;ref:key-value value="{LNI}-{SMI}-EXT_DR_List of authorised government departments for service"/&gt;
              &lt;!-- 
                  The {LNI} and {SMI} are not literal values, 
                  they show where the LNI and SMI values 
                  obtained from CSSM should be output. 
              --&gt;
            &lt;/ref:locator-key&gt;
            &lt;ref:locator-params&gt;
              &lt;proc:param name="componentseq" value="1"/&gt;
              &lt;proc:param name="attachment-type" value="PDF"/&gt;
              &lt;proc:param name="attachment-smi" value=""/&gt;
              &lt;!-- proc:param/@value is set to the SMI value obtained from CSSM. --&gt;
              &lt;!-- This @value assignment is done by the conversion program. --&gt;
            &lt;/ref:locator-params&gt;
          &lt;/ref:locator&gt;
        &lt;/ref:lnlink&gt;
      &lt;/doc:related-content-link&gt;
    &lt;/doc:related-content-item&gt;
  &lt;/doc:related-content-grp&gt;
&lt;/doc:related-content&gt;

     </xd:pre>
         <xd:p>
            <xd:b>Source XML 5 - <xd:i>lnlink[@service="QUERYLINK"]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:assoc-links&gt;
&lt;docinfo:assoc-links-grp display-name="VALUE_PROVIDED_BY_CONTENTEDITOR"&gt;
  &lt;heading&gt;
    &lt;title&gt;Query Links&lt;/title&gt;
  &lt;/heading&gt;
 &lt;lnlink service="QUERYLINK"&gt;
    &lt;key-name name="queryTemplatePGUID"/&gt;
    &lt;key-value value="urn:queryTemplate:1119"/&gt;    
    &lt;marker&gt;Other Tax documents&lt;/marker&gt;
    &lt;api-params&gt;
        &lt;param name="queryParameter1" value="CA $#$ US"/&gt; 
        &lt;param name="queryParameter2" value="MA"/&gt; 
        &lt;param name="queryParameter3" value="-60"/&gt; 
    &lt;/api-params&gt;
&lt;/lnlink&gt;
&lt;/docinfo:assoc-links-grp&gt;
&lt;/docinfo:assoc-links&gt;

     </xd:pre>
         <xd:p>
            <xd:b>Target XML 5</xd:b>
         </xd:p>
         <xd:pre>

&lt;doc:related-content&gt;
  &lt;doc:related-content-grp grptype="VALUE_PROVIDED_BY_CONTENTEDITOR"&gt;
    &lt;heading&gt;
      &lt;title&gt;Query Links&lt;/title&gt;
    &lt;/heading&gt;
    &lt;doc:related-content-item&gt;
      &lt;doc:related-content-link&gt;
         &lt;ref:lnlink service="QUERYLINK"&gt;
                &lt;ref:marker&gt;Other Tax documents&lt;/ref:marker&gt;
                &lt;ref:locator&gt;
                  &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="queryTemplatePGUID"/&gt;
                    &lt;ref:key-value value="urn:queryTemplate:1119"/&gt;
                  &lt;/ref:locator-key&gt;
                  &lt;ref:locator-params&gt;
                    &lt;proc:param name="queryParameter1" value="CA $#$ US"/&gt;
                    &lt;proc:param name="queryParameter2" value="MA"/&gt;
                    &lt;proc:param name="queryParameter3" value="-60"/&gt;
                  &lt;/ref:locator-params&gt;
                &lt;/ref:locator&gt;
              &lt;/ref:lnlink&gt;
      &lt;/doc:related-content-link&gt;
    &lt;/doc:related-content-item&gt;
  &lt;/doc:related-content-grp&gt;
&lt;/doc:related-content&gt;

     </xd:pre>
         <xd:p>
            <xd:b>Source XML 6 - <xd:i>lnlink[@service="ATTACHMENT"]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
&lt;docinfo:assoc-links&gt;
    &lt;docinfo:assoc-links-grp assoc-content="related-documents"&gt;
        &lt;heading&gt;
            &lt;title&gt;Related Documents&lt;/title&gt;
        &lt;/heading&gt;
        &lt;lnlink service="ATTACHMENT"&gt;
            &lt;marker&gt;See PDF rendition&lt;/marker&gt;
            &lt;api-params&gt;
                &lt;param name="attachment-key" value="RSCS_14905_CURRENT-0001"/&gt;
                &lt;param name="attachment-type" value="PDF"/&gt;
                &lt;param name="componentseq" value="1"/&gt;
            &lt;/api-params&gt;
        &lt;/lnlink&gt;
    &lt;/docinfo:assoc-links-grp&gt;
&lt;/docinfo:assoc-links&gt;
     </xd:pre>
         <xd:p>
            <xd:b>Target XML 6</xd:b>
         </xd:p>
         <xd:pre>
&lt;doc:related-content-grp grptype="related-documents"&gt;
    &lt;heading&gt;
        &lt;title&gt;Related documents&lt;/title&gt;
    &lt;/heading&gt;
    &lt;doc:related-content-item&gt;
        &lt;doc:related-content-link&gt;
            &lt;ref:lnlink service="ATTACHMENT"&gt;
                &lt;ref:marker role="label"&gt;See PDF rendition&lt;/ref:marker&gt;
                &lt;ref:locator&gt;
                    &lt;ref:locator-key&gt;
                        &lt;ref:key-name name="attachment-key"/&gt;
                        &lt;ref:key-value value="{LNI}-{SMI}-RSCS_14905_CURRENT-0001"/&gt;
                        &lt;!-- 
                  The {LNI} and {SMI} are not literal values, 
                  they show where the LNI and SMI values 
                  obtained from CSSM should be output. 
              --&gt;
                    &lt;/ref:locator-key&gt;
                    &lt;ref:locator-params&gt;
                        &lt;proc:param name="componentseq" value="1"/&gt;
                        &lt;proc:param name="attachment-type" value="PDF"/&gt;
                        &lt;proc:param name="attachment-smi" value="{SMI}"/&gt;
                        &lt;!-- proc:param/@value is set to the SMI value obtained from CSSM. --&gt;
                        &lt;!-- This @value assignment is done by the conversion program. --&gt;
                    &lt;/ref:locator-params&gt;
                &lt;/ref:locator&gt;
            &lt;/ref:lnlink&gt;
        &lt;/doc:related-content-link&gt;
    &lt;/doc:related-content-item&gt;
&lt;/doc:related-content-grp&gt;
     </xd:pre>
         <xd:p>
            <xd:b>Source XML 7 - CA06-CA07
          <xd:i>docinfo:assoc-links-grp/remotelink[@service="QUERY"]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
        
&lt;docinfo:assoc-links&gt;
  &lt;docinfo:assoc-links-grp assoc-content="enabling"&gt;
      &lt;heading&gt;
        &lt;title&gt;Enabling Act&lt;/title&gt;
      &lt;/heading&gt;
      &lt;remotelink remotekey1="DOCINFO(2cb2cdcca9bdd55a897d897ac67f7e39)" remotekey2="All Canadian Statutes" service="QUERY"&gt;Enabling Act&lt;/remotelink&gt;
  &lt;/docinfo:assoc-links-grp&gt;
&lt;/docinfo:assoc-links&gt;

        
      </xd:pre>
         <xd:p>
            <xd:b>Target XML 7 -
          CA06-CA07<xd:i>docinfo:assoc-links-grp/remotelink[@service="QUERY"]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
    
&lt;doc:related-content&gt;
  &lt;doc:related-content-grp grptype="enablingLeg"&gt;
     &lt;heading&gt;
       &lt;title&gt;Enabling Act&lt;/title&gt;
     &lt;/heading&gt;
     &lt;doc:related-content-item content-type="enablingLeg"&gt;
        &lt;ref:relatedresourceref&gt;
            &lt;ref:relatedresourceid ref:resourcekey="urn:leg-id-1:2cb2cdcca9bdd55a897d897ac67f7e39"/&gt;
        &lt;/ref:relatedresourceref&gt;
     &lt;/doc:related-content-item&gt;
  &lt;/doc:related-content-grp&gt;
&lt;/doc:related-content&gt;
    
 </xd:pre>
         <xd:p>
            <xd:b>Source XML 8 - CA05
          <xd:i>docinfo:assoc-links/remotelink[@service="QUERY"]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
&lt;docinfo:assoc-links&gt;
    &lt;remotelink remotekey1="DOCINFO(5eff46c7fc603910e15eb944d97c13c0)"
        remotekey2="All Canadian Regulations" service="QUERY"&gt;Link to regulations enabled by this
        act&lt;/remotelink&gt;
&lt;/docinfo:assoc-links&gt;
      </xd:pre>
         <xd:p>
            <xd:b>Target XML 8 - CA05
          <xd:i>docinfo:assoc-links/remotelink[@service="QUERY"]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
&lt;doc:related-content&gt;
    &lt;doc:related-content-grp grptype="subordinateLeg"&gt;
      &lt;doc:related-content-item content-type="subordinateLeg"&gt;
        &lt;ref:relatedresourceref&gt;
            &lt;ref:relatedresourceid ref:resourcekey="urn:leg-id-1:5eff46c7fc603910e15eb944d97c13c0"/&gt;
        &lt;/ref:relatedresourceref&gt;
    &lt;/doc:related-content-item&gt;
  &lt;/doc:related-content-grp&gt;
&lt;/doc:related-content&gt;
 </xd:pre>
         <xd:p>
            <xd:b>Source XML 9 (CA06-CA07)</xd:b>
         </xd:p>
         <xd:pre>
        
&lt;docinfo:assoc-links&gt;
            &lt;docinfo:assoc-links-grp assoc-content="enabling"&gt;
                &lt;heading/&gt;
                &lt;remotelink
                    remotekey1="DOCINFO(2ccc2826b445aebac6f6b3f8013e7931) 
                    OR DOCINFO(2ccc2826b445aebac6f6b3f8013e7932) 
                    OR DOCINFO(2ccc2826b445aebac6f6b3f8013e7933) 
                    ....
                    OR DOCINFO(2ccc2826b445aebac6f6b3f8013e7939)"
                    remotekey2="All Canadian Statutes" service="QUERY"&gt;Enabling Act&lt;/remotelink&gt;
          &lt;/docinfo:assoc-links-grp&gt;
&lt;/docinfo:assoc-links&gt;
        
      </xd:pre>
         <xd:p>
            <xd:b>Target XML 9 (CA06-CA07)</xd:b>
         </xd:p>
         <xd:pre>
        
&lt;doc:related-content&gt;
  &lt;doc:related-content-grp grptype="enablingLeg"&gt;
         &lt;heading&gt;
		  &lt;title&gt;Enabling Act&lt;/title&gt;
	  &lt;/heading&gt;
     &lt;doc:related-content-item content-type="enablingLeg"&gt;
        &lt;ref:relatedresourceref&gt;
            &lt;ref:relatedresourceid ref:resourcekey="urn:leg-id-1:2ccc2826b445aebac6f6b3f8013e7931"/&gt;
        &lt;/ref:relatedresourceref&gt;
     &lt;/doc:related-content-item&gt;
     &lt;doc:related-content-item content-type="enablingLeg"&gt;
        &lt;ref:relatedresourceref&gt;
            &lt;ref:relatedresourceid ref:resourcekey="urn:leg-id-1:2ccc2826b445aebac6f6b3f8013e7932"/&gt;
        &lt;/ref:relatedresourceref&gt;
     &lt;/doc:related-content-item&gt;
          &lt;doc:related-content-item content-type="enablingLeg"&gt;
        &lt;ref:relatedresourceref&gt;
            &lt;ref:relatedresourceid ref:resourcekey="urn:leg-id-1:2ccc2826b445aebac6f6b3f8013e7933"/&gt;
        &lt;/ref:relatedresourceref&gt;
     &lt;/doc:related-content-item&gt;
     ....
     &lt;doc:related-content-item content-type="enablingLeg"&gt;
        &lt;ref:relatedresourceref&gt;
            &lt;ref:relatedresourceid ref:resourcekey="urn:leg-id-1:2ccc2826b445aebac6f6b3f8013e7939"/&gt;
        &lt;/ref:relatedresourceref&gt;
     &lt;/doc:related-content-item&gt;
  &lt;/doc:related-content-grp&gt;
&lt;/doc:related-content&gt;
        
      </xd:pre>
         <xd:p>
            <xd:b>Source XML 10 (CA03)</xd:b>
         </xd:p>
         <xd:pre>
        
    &lt;docinfo:assoc-links&gt;
      &lt;remotelink service="QUERY" remotekey1="REFNUM(01704997)" remotekey2="All Canadian Summaries (Netletters, Digests, Summaries)" xml:lang="en-CA"&gt;Find case digests&lt;/remotelink&gt;
      &lt;remotelink service="QUERY" remotekey1="REFNUM(01704997)" remotekey2="All Canadian Summaries (Netletters, Digests, Summaries)" xml:lang="fr-CA"&gt;Résumés jurisprudentiels&lt;/remotelink&gt;
    &lt;/docinfo:assoc-links&gt;
        
      </xd:pre>
         <!--CA03 note: doc:related-content-grp/@grptype we set to the same as doc:related-content-item@content-type: enablingLeg | subordinateLeg | caseSummaries | quantums-->
         <xd:p>
            <xd:b>Target XML 10 (CA03)</xd:b>
         </xd:p>
         <xd:pre>
        
&lt;doc:related-content&gt;
  &lt;doc:related-content-grp grptype="caseSummaries"&gt;
	  &lt;heading&gt;
		  &lt;title xml:lang="en-CA"&gt;Find case digests&lt;/title&gt;
		  &lt;title xml:lang="fr-CA"&gt;Résumés jurisprudentiels&lt;/title&gt;
	  &lt;/heading&gt;
     &lt;doc:related-content-item content-type="caseSummaries"&gt;
        &lt;ref:relatedresourceref&gt;
            &lt;ref:relatedresourceid ref:resourcekey="urn:ucn-1:01704997"/&gt;
        &lt;/ref:relatedresourceref&gt;
     &lt;/doc:related-content-item&gt;
  &lt;/doc:related-content-grp&gt;
&lt;/doc:related-content&gt;
        
      </xd:pre>
         <xd:p>
            <xd:b>Source XML 11 (LPA)</xd:b>
         </xd:p>
         <xd:pre>
        
&lt;docinfo:assoc-links&gt;
	&lt;docinfo:assoc-links-grp assoc-content="related-documents" content-type="form"&gt;
		&lt;docinfo:assoc-resource assoc-resourcename="BusLaw" assoc-resourceid="urn:krm:ABCDEABCDEABCDEABCDEABCDE3ABCDE1"/&gt;
		&lt;lnlink service="TRAVERSE"&gt;
			&lt;key-name name="normcite"/&gt;
			&lt;key-value value="LexisNexis Forms Form 219-8.22-7"/&gt;
			&lt;marker role="label"&gt;Notice of Commencement Of Case Under Chapter 11 of the Bankruptcy Code, Meeting of Creditors, and Deadlines--Chapter 11 Corporation/Partnership Case; Official Form 9F &lt;/marker&gt;
		&lt;/lnlink&gt;
		&lt;remotelink dpsi="0N5M" remotekey1="DOC-ID" remotekey2="0N5M_157408" service="DOC-ID"&gt;Exhibit A to Official Form 1&lt;/remotelink&gt;
		&lt;remotelink href="http://www.justice.gov/ust/index.htm" newwindow="YES" service="SEARCH" status="valid"&gt;Official Website of the U.S. Trustee Program&lt;/remotelink&gt;
	&lt;/docinfo:assoc-links-grp&gt;
	&lt;docinfo:assoc-links-grp assoc-content="related-documents" content-type="case"&gt;
		&lt;docinfo:assoc-resource assoc-resourcename="IP" assoc-resourceid="urn:krm:ABCDEABCDEABCDEABCDEABCDE3ABCDE2"/&gt;
		&lt;lnlink service="TRAVERSE"&gt;
			&lt;key-name name="normcite"/&gt;
			&lt;key-value value="2012 U.S. Bankr. Ct. Motions LEXIS 1246"/&gt;
			&lt;marker role="label"&gt;2012 U.S. Bankr. Ct. Motions LEXIS 1246 (Bankr. N.D. Ill.)&lt;/marker&gt;
		&lt;/lnlink&gt;
		&lt;remotelink dpsi="0N5N" remotekey1="DOC-ID" remotekey2="0N5N-0N5N_157355" service="DOC-ID"&gt;Emergency Motion for Joint Administration of Chapter 11 Cases&lt;/remotelink&gt;
		&lt;remotelink href="http://www.uscourts.gov/RulesAndPolicies/FederalRulemaking/LocalCourtRules/USBankruptcyCourts.htm" newwindow="YES" service="SEARCH" status="valid"&gt;Official Website of the Federal Judiciary&lt;/remotelink&gt;
	&lt;/docinfo:assoc-links-grp&gt;
&lt;/docinfo:assoc-links&gt;
        
      </xd:pre>
         <xd:p>
            <xd:b>Target XML 11 (LPA)</xd:b>
         </xd:p>
         <xd:pre>
        
&lt;doc:related-content&gt;
	&lt;doc:related-content-grp grptype="related-documents"&gt;
		&lt;ref:relatedresourceref&gt;
			&lt;ref:relatedresourceid ref:resourcekey="urn:krm:ABCDEABCDEABCDEABCDEABCDE3ABCDE1"/&gt;
		&lt;/ref:relatedresourceref&gt;
		&lt;doc:related-content-item&gt;
			&lt;doc:related-content-link&gt;
				&lt;ref:lnlink service="TRAVERSE"&gt;
					&lt;ref:marker role="label"&gt;Notice of Commencement Of Case Under Chapter 11 of the Bankruptcy Code, Meeting of Creditors, and Deadlines--Chapter 11 Corporation/Partnership Case; Official Form 9F &lt;/ref:marker&gt;
					&lt;ref:locator&gt;
						&lt;ref:locator-key&gt;
							&lt;ref:key-name name="normcite"/&gt;
							&lt;ref:key-value value="LexisNexis Forms Form 219-8.22-7"/&gt;
						&lt;/ref:locator-key&gt;
						&lt;ref:locator-params&gt;
							&lt;proc:param name="normprotocol" value="lexsee"/&gt;
						&lt;/ref:locator-params&gt;
					&lt;/ref:locator&gt;
				&lt;/ref:lnlink&gt;
			&lt;/doc:related-content-link&gt;
		&lt;/doc:related-content-item&gt;
		&lt;doc:related-content-item&gt;
			&lt;doc:related-content-link&gt;
				&lt;ref:lnlink service="DOCUMENT"&gt;
					&lt;ref:marker&gt;Exhibit A to Official Form 1&lt;/ref:marker&gt;
					&lt;ref:locator&gt;
						&lt;ref:locator-key&gt;
							&lt;ref:key-name name="DOC-ID"/&gt;
							&lt;ref:key-value value="0N5M-0N5M_157408"/&gt;
						&lt;/ref:locator-key&gt;
					&lt;/ref:locator&gt;
				&lt;/ref:lnlink&gt;
			&lt;/doc:related-content-link&gt;
		&lt;/doc:related-content-item&gt;
		&lt;doc:related-content-item&gt;
			&lt;doc:related-content-link&gt;
				&lt;ref:lnlink service="URL"&gt;
					&lt;ref:marker&gt;Official Website of the U.S. Trustee Program&lt;/ref:marker&gt;
					&lt;ref:locator&gt;
						&lt;ref:locator-key&gt;
							&lt;ref:key-name name="URL"/&gt;
							&lt;ref:key-value value="http://www.justice.gov/ust/index.htm"/&gt;
						&lt;/ref:locator-key&gt;
					&lt;/ref:locator&gt;
				&lt;/ref:lnlink&gt;
			&lt;/doc:related-content-link&gt;
		&lt;/doc:related-content-item&gt;
	&lt;/doc:related-content-grp&gt;
	&lt;doc:related-content-grp grptype="related-documents"&gt;
		&lt;ref:relatedresourceref&gt;
			&lt;ref:relatedresourceid ref:resourcekey="urn:krm:ABCDEABCDEABCDEABCDEABCDE3ABCDE2"/&gt;
		&lt;/ref:relatedresourceref&gt;
		&lt;doc:related-content-item&gt;
			&lt;doc:related-content-link&gt;
				&lt;ref:lnlink service="TRAVERSE"&gt;
					&lt;ref:marker role="label"&gt;2012 U.S. Bankr. Ct. Motions LEXIS 1246 (Bankr. N.D. Ill.)&lt;/ref:marker&gt;
					&lt;ref:locator&gt;
						&lt;ref:locator-key&gt;
							&lt;ref:key-name name="normcite"/&gt;
							&lt;ref:key-value value="2012 U.S. Bankr. Ct. Motions LEXIS 1246"/&gt;
						&lt;/ref:locator-key&gt;
						&lt;ref:locator-params&gt;
							&lt;proc:param name="normprotocol" value="lexsee"/&gt;
						&lt;/ref:locator-params&gt;
					&lt;/ref:locator&gt;
				&lt;/ref:lnlink&gt;
			&lt;/doc:related-content-link&gt;
		&lt;/doc:related-content-item&gt;
		&lt;doc:related-content-item&gt;
			&lt;doc:related-content-link&gt;
				&lt;ref:lnlink service="DOCUMENT"&gt;
					&lt;ref:marker&gt;Emergency Motion for Joint Administration of Chapter 11 Cases&lt;/ref:marker&gt;
					&lt;ref:locator&gt;
						&lt;ref:locator-key&gt;
							&lt;ref:key-name name="DOC-ID"/&gt;
							&lt;ref:key-value value="0N5N-0N5N_157355"/&gt;
						&lt;/ref:locator-key&gt;
					&lt;/ref:locator&gt;
				&lt;/ref:lnlink&gt;
			&lt;/doc:related-content-link&gt;
		&lt;/doc:related-content-item&gt;
		&lt;doc:related-content-item&gt;
			&lt;doc:related-content-link&gt;
				&lt;ref:lnlink service="URL"&gt;
					&lt;ref:marker&gt;Official Website of the Federal Judiciary&lt;/ref:marker&gt;
					&lt;ref:locator&gt;
						&lt;ref:locator-key&gt;
							&lt;ref:key-name name="URL"/&gt;
							&lt;ref:key-value value="http://www.uscourts.gov/RulesAndPolicies/FederalRulemaking/LocalCourtRules/USBankruptcyCourts.htm"/&gt;
						&lt;/ref:locator-key&gt;
					&lt;/ref:locator&gt;
				&lt;/ref:lnlink&gt;
			&lt;/doc:related-content-link&gt;
		&lt;/doc:related-content-item&gt;
	&lt;/doc:related-content-grp&gt;
&lt;/doc:related-content&gt;
        
      </xd:pre>
         <!-- McNally Apr 3 2014. Removing Example 4 to avoid confusion with separate module for AU-NZ use case. -->
         <!--        <example>
            <title>Source XML 4</title>
            <codeblock>
            <![CDATA[
                <docinfo:assoc-links>
                    <docinfo:assoc-links-grp>
                        <heading>
                            <title>Related Content</title>
                        </heading>
                        <remotelink dpsi="0084" remotekey1="REFPTID" service="DOC-ID" refpt="PCL.C19">Chapter 19
                            Debt Finance</remotelink>
                            <text>Ford's Principles of Corporations Law</text>
                        <remotelink dpsi="0KKU" remotekey1="REFPTID" service="DOC-ID" refpt="0KKU_72492">Overall
                            results and consequences of the PPSA</remotelink>
                        <text>LexisNexis Practical Guidance, Family module</text>
                        <remotelink href="www.familycourt.gov.au" hrefclass="http" newwindow="YES">Family Court of
                            Australia</remotelink>
                    </docinfo:assoc-links-grp>
                </docinfo:assoc-links>
             ]]>
	   </codeblock>
        </example>

        <example>
            <title>Target XML 4</title>
            <codeblock>
<![CDATA[
 <doc:related-content>
                 <doc:related-content-grp grptype="related-content">
                     <heading><title>Related Content</title></heading>
                     <doc:related-content-item>
                     <doc:related-content-link>
                         <ref:lnlink service="DOCUMENT">
                             <ref:marker>Chapter 19 Debt Finance</ref:marker>
                             <ref:locator>
                                 <ref:locator-key>
                                     <ref:key-name name="DOC-ID"/>
                                     <ref:key-value value="0084-PCL.C19"/>
                                 </ref:locator-key>
                             </ref:locator>
                         </ref:lnlink>
                     </doc:related-content-link>
                     </doc:related-content-item>
                     <doc:related-content-item>
                         <doc:related-content-desc>
                             <p><text>Ford's Principles of Corporations Law</text></p>
                         </doc:related-content-desc>
                     </doc:related-content-item>
                     <doc:related-content-item>
                         <doc:related-content-link>
                             <ref:lnlink service="DOCUMENT">
                                 <ref:marker>Overall
                                 results and consequences of the PPSA</ref:marker>
                                 <ref:locator>
                                     <ref:locator-key>
                                         <ref:key-name name="DOC-ID"/>
                                         <ref:key-value value="0KKU-0KKU_72492"/>
                                     </ref:locator-key>
                                 </ref:locator>
                             </ref:lnlink>
                         </doc:related-content-link>
                     </doc:related-content-item>
                     <doc:related-content-item>
                         <doc:related-content-desc>
                             <p><text>LexisNexis Practical Guidance, Family module</text></p>
                         </doc:related-content-desc>
                     </doc:related-content-item>
                     <doc:related-content-item>
                         <doc:related-content-link>
                             <ref:lnlink service="URL">
                                 <ref:marker>Family Court of Australia</ref:marker>
                                 <ref:locator>
                                     <ref:locator-key>
                                       <ref:key-name name="URL"/>
                                       <ref:key-value value="http://www.familycourt.gov.au"/>
                                     </ref:locator-key>
                                 </ref:locator>
                             </ref:lnlink>
                         </doc:related-content-link>
                     </doc:related-content-item>
                </doc:related-content-grp>
                ]]>
	   </codeblock>
	   </example>-->
         <!-- McNally Apr 3 2014. Removing Example 5 to avoid confusion with separate module for AU-NZ use case. -->
         <!--  <example>
   <title>Source XML 5 :
    <sourcexml>docinfo:assoc-links/docinfo:assoc-links-grp/ci:cite</sourcexml></title>
   <codeblock>
<![CDATA[
<docinfo:assoc-links>
 <docinfo:assoc-links-grp>  
  <heading><title>Related Content</title></heading>
  <remotelink dpsi="008D" remotekey1="DOC-ID" service="DOC-ID" refpt="PIL.OV">Overview of Insurance</remotelink>
  <text>Kelly &amp; Ball Principles of Insurance Law</text>
  <remotelink dpsi="0384" remotekey1="DOC-ID" service="DOC-ID" refpt="PFI.ICA.ICA">Insurance Contracts Act 1984</remotelink>
  <text>Australian Insurance Law Annotated</text>
  <ci:cite searchtype="BOOK-REF">
   <ci:content>The central role of insurance in modern society and in the development of the law (2013) 24 ILJ 1</ci:content>
  </ci:cite>
  <text>Insurance Law Journal</text>
 </docinfo:assoc-links-grp>
</docinfo:assoc-links>]]>
            </codeblock>
  </example>
  <example>
   <title>Target XML 5 :
    <sourcexml>docinfo:assoc-links/docinfo:assoc-links-grp/ci:cite</sourcexml></title>
   <codeblock>
<![CDATA[
<doc:related-content>
 <doc:related-content-grp> 
  <heading><title>Related Content</title></heading>
  <doc:related-content-item>
    <doc:related-content-link>
     <ref:lnlink service="DOCUMENT">
      <ref:marker>Overview of Insurance</ref:marker>
      <ref:locator>
       <ref:locator-key>
        <ref:key-name name="DOC-ID"/>
        <ref:key-value value="008D-PIL.OV"/>
       </ref:locator-key>
      </ref:locator>
     </ref:lnlink>
    </doc:related-content-link>
    <doc:related-content-desc>
     <p><text>Kelly &amp; Ball Principles of Insurance Law</text></p>
    </doc:related-content-desc>
  </doc:related-content-item>
  <doc:related-content-item>
    <doc:related-content-link>
     <ref:lnlink service="DOCUMENT">
      <ref:marker>Insurance Contracts Act 1984</ref:marker>
      <ref:locator>
       <ref:locator-key>
        <ref:key-name name="DOC-ID"/>
        <ref:key-value value="0384-PFI.ICA.ICA"/>
       </ref:locator-key>
      </ref:locator>
     </ref:lnlink>
    </doc:related-content-link>
    <doc:related-content-desc>
     <p><text>Australian Insurance Law Annotated</text></p>
    </doc:related-content-desc>
  </doc:related-content-item>
  <doc:related-content-item>
    <doc:related-content-link>
     <ref:lnlink service="TRAVERSE">
      <ref:marker role="label">The central role of insurance in modern society and in the development of the law (2013) 24 ILJ 1</ref:marker>
      <ref:locator>
       <ref:locator-key>
        <ref:key-name name="normcite"/>
        <ref:key-value value="The central role of insurance in modern society and in the development of the law (2013) 24 ILJ 1"/>
       </ref:locator-key>
       <ref:locator-params>
        <proc:param name="normprotocol" value="lexsee"/>
        <proc:param name="countrycode" value="AU"/>
       </ref:locator-params>
      </ref:locator>
     </ref:lnlink>
    </doc:related-content-link>
    <doc:related-content-desc>
     <p><text>Insurance Law Journal</text></p>
    </doc:related-content-desc>
  </doc:related-content-item>
 </doc:related-content-grp>
</doc:related-content>]]>                
            </codeblock>
  </example>-->
         <!--Changes2016-11-16: Added to note regarding applying any rules related to 
        @anchoridref, referring specifically to section for "Identifiers to ID Data Type - 
        Handling Pattern Restrictions".2016-07-29: Added Note about xml snippets that illustrate image
          handling. Note summarizes move from Apollo to Blobstore application. UK is first LBU to
          move to Blobstore.2015-09-11: Added instruction for handling of
            lnlink[@service="URL"] inside
            docinfo:assoc-links or
            docinfo:assoc-links-grp.2015-09-11: Correction to target XPATHs for
            lnlink[@service="QUERYLINK"],
            lnlink[@service="ATTACHMENT"], and
            lnlink[@service="TRAVERSE"] to add
            doc:related-content-item/doc:related-content-link before the
          existing ref:lnlink element in the XPATH.2015-09-03: Added instruction for handling of
            lnlink[@service="TRAVERSE"] inside
            docinfo:assoc-links or
            docinfo:assoc-links-grp.2015-09-03: Added
            doc:related-content-item/@content-type="external-content-location"
          when the parent
            docinfo:assoc-links[@assoc-content="external-content-location"]
          exists, for children: remotelink[@service="DOC-ID"],
            remotelink[@href],
            lnlink[@service="TRAVERSE"] and
          ci:cite.2015-09-03: Minor correction to bullet heading text for
          children of docinfo:assoc-links or
            docinfo:assoc-links-grp to change from
            lnlink/@service="QUERYLINK" to be
            lnlink[@service="QUERYLINK"] and
            lnlink/@service="ATTACHMENT" to be
            lnlink[@service="ATTACHMENT"].2015-07-16: Updated conversion for handling of
            ci:cite/@normprotocol,
            proc:param[@name="countrycode"]; added instructions for
            docinfo:assoc-resource.2015-05-22: Clarification. Not a new rule or target. Within
          rules handling remotelink[@service="DOC-ID"], added statement to
          create containing elements ref:locator/ref:locator-key which hold
            ref:key-name and ref:key-value. The xpath
          is controlled by schema and so conversions have been correct. CI examples were correct.
          The narrative rule is now explicit. R4.5 Content Issue 2326.2015-01-19: For CA05 - CA08- Updated Instruction and
          included "related-content-grp" markup inside the target Example
            8 for conversion of QUERY link to doc:related-content.2015-01-15: For CA03- Convert the QUERY link to
          doc:related-content. Refer Example 10. R4.5 RFA #2099.2015-01-13: For CA05 - CA08 Conversion Needs to split
          multiple ORs into a separate doc:related-content-item. Refer
          Example 92015-01-02: Added
            docinfo:assoc-links/remotelink[@service="QUERY"] and
            docinfo:assoc-links-grp/remotelink[@service="QUERY"] to generate
            doc:related-content markup. Applicable on CA05.2014-12-19: Updated target mapping for CA05 for handling
            docinfo:assoc-links/remotelink[@service="QUERY"]. Applicable on
          CA05.2014-12-17: Added a Note for CA05, CA06, CA07 and CA08
          for handling docinfo:assoc-links-grp/remotelink[@service="QUERY"]
           R4.5 issue #2088 and #2068.2014-09-16: Added a note to create
            proc:param/@name="attachment-smi" and
            proc:param/@value as these was there in the snippet but was
          missing in instruction and also added a note in to simplify in output
            ref:key-value/@value2014-08-21: Added instructions and an example for converting
            lnlink[@service="ATTACHMENT"] to
            ref:lnlink. Applicable on CA05-CA08.2014-06-18: Corrected minor typos in
            lnlink[@service="QUERYLINK"] instructions.2014-06-13: Added instructions and an example for converting
            lnlink[@service="QUERYLINK"] to
          ref:lnlink.2014-04-28: Clarified instructions regarding
            link elements and added an example (#4) illustrating the special
            text/link conversion. No mapping rules where changed or
          added.2014-04-21: Added an instruction to handle
            link elements. These can potentially occur in any future UK data
          and will be present in stream UK21fl when those documents become available later in
          2014.2014-04-03: Illustrative changes. Examples modified. Mapping
          for ci:cite added to Example 3. Former Examples 4 and 5 removed to
          avoid confusion with special AU-NZ use case described in a separate module. R4.5 Content
          issue #1125, for AU-NZ, has prompted the changes for this general module.2014-03-25: Added rule and example for
            docinfo:assoc-links/docinfo:assoc-links-grp/ci:cite. R4.5 Content
          issue #11252013-07-19: Added rule mapping attribute
            remotelink[@service="DOC-ID"] to
            ref:lnlink[@service="DOCUMENT"].2013-04-12: This module was changed from UK specific to
          applicable to all LBUs2013-04-10: An example for related content Source and Target
          XML 42013-03-28:  Added rules for
            docinfo:assoc-links-grp and for child
          text.2013-01-22:  Added mapping instruction for
            docinfo:assoc-links/remotelink @href.2012-12-05:  Example added for Canada content stream.2012-10-15:  Made some Kraken related changes.2012-10-08: Created.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita  -->
   <!-- begin debug code -->
   <!--<xsl:param name="streamID" select="'CA07'"/>
  
  <xsl:include href="../../modules/nonamespace/Rosetta_identifier-LxAdv-ID_data_type-HandlingPatternRestrictions.xsl"/> 
  
  <xsl:template match="heading">
    <xsl:copy-of select="."/>
  </xsl:template>-->
   <!-- end debug code -->
   <!-- Awantika:use of variable for AU20 -->
   <xsl:template match="docinfo:assoc-links">
      <xsl:if test="child::*[not(self::remotelink[@service='QUERY'])] or $streamID=('CA03', 'CA05', 'CA06', 'CA07', 'CA08')">
         <doc:related-content>
            <xsl:apply-templates select="@* | node()"/>
         </doc:related-content>
      </xsl:if>
   </xsl:template>

   <xsl:template match="docinfo:assoc-links/@assoc-content"/>
   <!-- JL: to match DT, suppressing docinfo:assoc-links/@display-name -->
   <xsl:template match="docinfo:assoc-links/@display-name"/>

   <xsl:template match="docinfo:assoc-links-grp">
      <doc:related-content-grp>
         <xsl:apply-templates select="@* | node()"/>
         <!-- Awantika-2017-10-13: creating empty doc:related-content-item which is required child element for docinfo:assoc-links-grp
      Input data is coming with empty text the module created for docinfo:assoc-links-grp/text is not recognising the empty text and therefore 
      making the file invalid-->
         <!-- 2017-10-24 - MDS: Added 'UK11DA' streamID to test. -->
         <xsl:if test="$streamID=('UK11DN' , 'UK11DA') and child::text[not(preceding-sibling::* except heading and following-sibling::*)]=''">
            <doc:related-content-item/>
         </xsl:if>
      </doc:related-content-grp>
   </xsl:template>

   <xsl:template match="docinfo:assoc-links-grp/@assoc-content">
      <xsl:attribute name="grptype">
         <xsl:choose>
            <xsl:when test="(starts-with($streamID,'CA06') or starts-with($streamID ,'CA07')) and .='enabling'            and parent::docinfo:assoc-links-grp/remotelink[@service='QUERY'][starts-with(@remotekey1 , 'DOCINFO(')][@remotekey2[.='All Canadian Statutes']]">
               <xsl:text>enablingLeg</xsl:text>
            </xsl:when>
            <xsl:when test="(starts-with($streamID , 'CA05') or starts-with($streamID , 'CA08')) and parent::docinfo:assoc-links-grp/remotelink[@service='QUERY'][starts-with(@remotekey1 , 'DOCINFO(')][@remotekey2[.='All Canadian Regulations']]">
               <xsl:text>subordinateLeg</xsl:text>
            </xsl:when>
            <xsl:when test="starts-with($streamID , 'CA03') and parent::docinfo:assoc-links-grp/remotelink[@service='QUERY'][starts-with(@remotekey1 , 'REFNUM(')][@remotekey2='All Canadian Summaries']">
               <xsl:text>caseSummaries</xsl:text>
            </xsl:when>
            <xsl:otherwise>
               <xsl:value-of select="."/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:attribute>
   </xsl:template>

   <xsl:template match="docinfo:assoc-links-grp/@display-name">
      <xsl:if test="not(parent::docinfo:assoc-links-grp[@assoc-content])">
         <xsl:attribute name="grptype">
            <xsl:value-of select="."/>
         </xsl:attribute>
      </xsl:if>
   </xsl:template>

   <xsl:template match="docinfo:assoc-links-grp/@content-type"/>

   <xsl:template match="docinfo:assoc-resource"><!--  Original Target XPath:  ref:relatedresourceref/ref:relatedresourceid   -->
      <ref:relatedresourceref>
         <ref:relatedresourceid>
            <xsl:apply-templates select="@* | node()"/>
         </ref:relatedresourceid>
      </ref:relatedresourceref>
   </xsl:template>

   <xsl:template match="docinfo:assoc-resource/@assoc-resourceid">
      <xsl:attribute name="ref:resourcekey">
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>

   <xsl:template match="docinfo:assoc-resource/@assoc-resourcename"/>
   <!-- <xsl:template match="docinfo:assoc-links/text | docinfo:assoc-links-grp/text">
    <xsl:choose>
      <xsl:when test="child::link and not(child::*[not(self::link)]) and not(text())">
        <xsl:apply-templates select="link"/>
      </xsl:when>
        <xsl:otherwise>
          <doc:related-content-item>
            <doc:related-content-desc>
              <p xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
                <text xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
                  <xsl:apply-templates select="@* | node()"/>
                </text>
              </p>
            </doc:related-content-desc>
          </doc:related-content-item>
        </xsl:otherwise>     
    </xsl:choose>    
  </xsl:template>-->   <!-- 12/12/17 backed out 'priority="5" -->   <!-- BRT 12/7/17 W*7065778 added priority='5' docinfo:assoc-links-grp/text was getting triggered somewhere else (couldn't find the template)-->
   <xsl:template match="docinfo:assoc-links/text | docinfo:assoc-links-grp/text"><!-- BRT 12/12/17 backed out code to normalize the text --><!-- BRT 11/27/17 added processing to normlize the space in text nodes to avoid false positives --><!-- xsl:variable name="text">
      <xsl:for-each select="text()">
        <xsl:value-of select="normalize-space(.)"/>
      </xsl:for-each>
    </xsl:variable-->
      <xsl:choose><!-- BRT 12/12/17 backed out change: 'and not(text())' to  and $text =''" --><!-- BRT change 'and not(text())' to  and $text =''" -->
         <xsl:when test="child::link and not(child::*[not(self::link)]) and not(text())">
            <xsl:apply-templates select="link"/>
         </xsl:when>
         <!-- Awantika: remotelink[@service="DOC-ID"] becomes doc:related-content-item/doc:related-content-link/
ref:lnlink[@service="DOCUMENT"]. Added this for UK11DN -->
         <xsl:when test="(./remotelink or ./url/remotelink)and $streamID=('UK11DN','UK11DA')">
            <xsl:apply-templates select="@* | node()"/>
         </xsl:when>
         <!-- Priya Kaushal: Added below code for UK 15 -->
         <xsl:when test="(./remotelink or ./url/remotelink) and $streamID=('UK15')">
            <doc:related-content-item>
               <doc:related-content-desc>
                  <p>
                     <text>
                        <xsl:apply-templates select="remotelink | url/remotelink"/>
                     </text>
                  </p>
               </doc:related-content-desc>
            </doc:related-content-item>
         </xsl:when>
         <!-- Awantika: when condition for UK11DN -->
         <xsl:when test="$streamID='UK11DN' and child::link">
            <xsl:apply-templates select="node() except emph"/>
         </xsl:when>
         <xsl:otherwise>
            <doc:related-content-item>
               <doc:related-content-desc>
                  <p>
                     <text>
                        <xsl:apply-templates select="@* | node()"/>
                     </text>
                  </p>
               </doc:related-content-desc>
            </doc:related-content-item>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="link[parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp or parent::text[parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp]]">
      <doc:related-content-item>
         <doc:related-content-link>
            <ref:lnlink service="ATTACHMENT">
               <ref:marker>
                  <xsl:apply-templates/>
               </ref:marker>
               <ref:locator>
                  <ref:locator-key>
                     <ref:key-name name="attachment-key"/>
                     <ref:key-value>
                        <xsl:attribute name="value">
                           <xsl:choose>
                              <xsl:when test="@smi">
                                 <xsl:value-of select="substring-before(@filename, '.')"/>
                              </xsl:when>
                              <xsl:otherwise>
                                 <xsl:value-of select="substring-before(@filename, '.')"/>
                              </xsl:otherwise>
                           </xsl:choose>
                        </xsl:attribute>
                     </ref:key-value>
                  </ref:locator-key>
                  <ref:locator-params><!-- 2017-10-04 - MDS: Added choose statement to test for stream ID to match modified monolithic in HK06 
            JL: 2017-10-06 added same for HK01-->
                     <xsl:choose>
                        <xsl:when test="$streamID=('HK06' , 'HK01')">
                           <proc:param name="attachment-type" value="IMG"/>
                           <proc:param name="external-or-local" value="external"/>
                           <proc:param name="attachment-server" value="BlobStore"/>
                           <proc:param name="attachment-pguid"
                                       value="urn:contentItem:0000-0000-0000-0000-00000-00"/>
                           <proc:param name="componentseq" value="1"/>
                        </xsl:when>
                        <xsl:otherwise>
                           <proc:param name="componentseq" value="1"/>
                           <proc:param>
                              <xsl:attribute name="name">attachment-type</xsl:attribute>
                              <xsl:attribute name="value">
                                 <xsl:apply-templates select="@type"/>
                              </xsl:attribute>
                           </proc:param>
                           <proc:param>
                              <xsl:attribute name="name">attachment-smi</xsl:attribute>
                              <xsl:attribute name="value">
                                 <xsl:value-of select="@smi"/>
                              </xsl:attribute>
                           </proc:param>
                        </xsl:otherwise>
                     </xsl:choose>
                  </ref:locator-params>
               </ref:locator>
            </ref:lnlink>
         </doc:related-content-link>
      </doc:related-content-item>
   </xsl:template>
   <!-- MDS 2017-04-07 - Declared in Rosetta_link-LxAdv-ref.lnlink.xsl -->   <!--<xsl:template match="link/@type">
    <xsl:choose>
      <xsl:when test=".=('para','page', 'ed-pnum','refpt','logo')">
        <xsl:message>attachment-type is invalid, cannot be determined.</xsl:message>
      </xsl:when>
      <xsl:when test=".=('pdf' , 'pdf-fillable')">PDF</xsl:when>
      <xsl:when test=".='hotdoc-nonfillable'">hotdoc</xsl:when>
      <xsl:otherwise><xsl:value-of select="."/></xsl:otherwise>
    </xsl:choose>
  </xsl:template>-->
   <xsl:template match="remotelink[@service='QUERY'][ancestor::docinfo:assoc-links][$streamID=('CA03', 'CA05', 'CA06', 'CA07', 'CA08')]">
      <xsl:choose>
         <xsl:when test="(starts-with($streamID,'CA06') or starts-with($streamID ,'CA07')) and parent::docinfo:assoc-links-grp[@assoc-content='enabling']          and starts-with(@remotekey1 , 'DOCINFO(') and @remotekey2='All Canadian Statutes'">
            <xsl:call-template name="makeRelatedresourceref">
               <xsl:with-param name="contentType" select="'enablingLeg'"/>
            </xsl:call-template>
         </xsl:when>
         <xsl:when test="(starts-with($streamID , 'CA05') or starts-with($streamID , 'CA08')) and starts-with(@remotekey1 , 'DOCINFO(') and @remotekey2='All Canadian Regulations'">
            <xsl:call-template name="makeRelatedresourceref">
               <xsl:with-param name="contentType" select="'subordinateLeg'"/>
            </xsl:call-template>
         </xsl:when>
         <xsl:when test="starts-with(@remotekey1 , 'REFNUM(') and contains(@remotekey2,'All Canadian Summaries') and $streamID='CA03' and not(preceding-sibling::*[1][self::remotelink])">
            <doc:related-content-grp grptype="caseSummaries">
               <heading>
                  <title xml:lang="en-CA">
                     <xsl:value-of select="."/>
                  </title>
                  <title xml:lang="fr-CA">
                     <xsl:value-of select="following-sibling::remotelink"/>
                  </title>
               </heading>
               <doc:related-content-item content-type="caseSummaries">
                  <ref:relatedresourceref>
                     <ref:relatedresourceid>
                        <xsl:attribute name="ref:resourcekey">
                           <xsl:value-of select="concat('urn:ucn-1:' , substring-before(substring-after(@remotekey1 , 'REFNUM(') , ')'))"/>
                        </xsl:attribute>
                     </ref:relatedresourceid>
                  </ref:relatedresourceref>
               </doc:related-content-item>
            </doc:related-content-grp>
         </xsl:when>
         <!-- otherwise we do nothing for remotelink service QUERY -->
      </xsl:choose>
   </xsl:template>

   <xsl:template name="makeRelatedresourceref">
      <xsl:param name="contentType"/>
      <xsl:for-each select="tokenize(@remotekey1 , '\s+OR\s+')">
         <doc:related-content-item>
            <xsl:attribute name="content-type" select="$contentType"/>
            <ref:relatedresourceref>
               <ref:relatedresourceid>
                  <xsl:attribute name="ref:resourcekey">
                     <xsl:value-of select="concat('urn:leg-id-1:', substring-before(substring-after(. , 'DOCINFO(') , ')'))"/>
                  </xsl:attribute>
               </ref:relatedresourceid>
            </ref:relatedresourceref>
         </doc:related-content-item>
      </xsl:for-each>
   </xsl:template>

   <xsl:template match="remotelink[@service='DOC-ID'][parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp]">
      <doc:related-content-item>
         <xsl:if test="parent::docinfo:assoc-links[@assoc-content='external-content-location']">
            <xsl:attribute name="content-type">external-content-location</xsl:attribute>
         </xsl:if>
         <doc:related-content-link>
            <ref:lnlink>
               <xsl:attribute name="service">DOCUMENT</xsl:attribute>
               <ref:marker>
                  <xsl:apply-templates/>
               </ref:marker>
               <ref:locator>
                  <xsl:if test="@remotekey1='REFPTID' and (@refpt or @remotekey2)">
                     <xsl:attribute name="anchoridref">
                        <xsl:choose>
                           <xsl:when test="@refpt">
                              <xsl:for-each select="@refpt">
                                 <xsl:call-template name="normalizeIdString"/>
                              </xsl:for-each>
                           </xsl:when>
                           <xsl:otherwise>
                              <xsl:for-each select="@remotekey2">
                                 <xsl:call-template name="normalizeIdString"/>
                              </xsl:for-each>
                           </xsl:otherwise>
                        </xsl:choose>
                     </xsl:attribute>
                  </xsl:if>
                  <ref:locator-key>
                     <xsl:choose>
                        <xsl:when test="@remotekey1='DOC-ID'">
                           <ref:key-name name="DOC-ID"/>
                           <ref:key-value>
                              <xsl:attribute name="value">
                                 <xsl:value-of select="@dpsi"/>
                                 <xsl:text>-</xsl:text>
                                 <xsl:value-of select="if (@remotekey2) then @remotekey2 else @refpt"/>
                              </xsl:attribute>
                           </ref:key-value>
                        </xsl:when>
                        <xsl:when test="@remotekey1='REFPTID'">
                           <ref:key-name name="DOC-ID"/>
                           <ref:key-value>
                              <xsl:attribute name="value">
                                 <xsl:value-of select="if (@dpsi) then @dpsi else //docinfo/docinfo:dpsi/@id-string"/>
                                 <xsl:text>-</xsl:text>
                                 <xsl:value-of select="@docidref"/>
                              </xsl:attribute>
                           </ref:key-value>
                        </xsl:when>
                     </xsl:choose>
                  </ref:locator-key>
               </ref:locator>
            </ref:lnlink>
         </doc:related-content-link>
      </doc:related-content-item>
   </xsl:template>

   <xsl:template match="remotelink[@href][parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp]"
                 priority="25">
      <doc:related-content-item>
         <xsl:if test="parent::docinfo:assoc-links[@assoc-content='external-content-location']">
            <xsl:attribute name="content-type">external-content-location</xsl:attribute>
         </xsl:if>
         <doc:related-content-link>
            <ref:lnlink service="URL">
               <ref:marker>
                  <xsl:value-of select="."/>
               </ref:marker>
               <ref:locator>
                  <ref:locator-key>
                     <ref:key-name name="URL"/>
                     <ref:key-value>
                        <xsl:attribute name="value">
                           <xsl:value-of select="if (@hrefclass) then concat(@hrefclass, '://' , @href) else @href"/>
                        </xsl:attribute>
                     </ref:key-value>
                  </ref:locator-key>
               </ref:locator>
            </ref:lnlink>
         </doc:related-content-link>
         <xsl:apply-templates select="following-sibling::text[1][$streamID!='UK14']"/>
      </doc:related-content-item>
      <xsl:apply-templates select="following-sibling::*[1][self::text][$streamID='UK14']"/>
   </xsl:template>
   <!-- from other module: If the data content of the remotelink does not start with one of the previous listed
          text sequences, <sourcexml>remotelink</sourcexml> becomes
            <targetxml>ref:lnlink</targetxml> and is populated as follows:<ul>
            <li>The <targetxml>ref:lnlink/@service</targetxml> attribute is set to "URL".</li>
            <li>Element <targetxml>ref:lnlink/ref:marker</targetxml> is created and the content of
                <sourcexml>remotelink</sourcexml> becomes the content of child
                <targetxml>ref:lnlink/ref:marker</targetxml>. Any descendant element is converted
              according to instructions for that element in the section <i>General Mark-Up</i>.</li>
            <li>The child <targetxml>ref:lnlink/ref:locator</targetxml> is created, and within it
              the child <targetxml>ref:lnlink/ref:locator/ref:locator-key</targetxml> is created,
              and within it the children
                <targetxml>ref:lnlink/ref:locator/ref:locator-key/ref:key-name</targetxml> and
                <targetxml>ref:lnlink/ref:locator/ref:locator-key/ref:key-value</targetxml> are
              created.</li>
            <li>The <targetxml>ref:key-name/@name</targetxml> attribute is set to "URL".</li>
            <li>If the <sourcexml>remotelink/@hrefclass</sourcexml> attribute is present,
                <targetxml>ref:key-value/@value</targetxml> is set to the combined value of
                <sourcexml>remotelink/@hrefclass</sourcexml>, followed by "://", followed by the
              value of <sourcexml>remotelink/@href</sourcexml>.</li>
            <li>If the <sourcexml>remotelink/@hrefclass</sourcexml> attribute is <b>not</b> present,
                <targetxml>ref:key-value/@value</targetxml> is set to the value of
                <sourcexml>remotelink/@href</sourcexml>.</li> -->
   <xsl:template match="lnlink[@service='QUERYLINK'][parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp]">
      <doc:related-content-item>
         <doc:related-content-link>
            <ref:lnlink service="QUERYLINK">
               <xsl:apply-templates select="marker"/>
               <ref:locator>
                  <ref:locator-key>
                     <ref:key-name>
                        <xsl:attribute name="name">
                           <xsl:value-of select="key-name[@name='queryTemplatePGUID']/@name"/>
                        </xsl:attribute>
                     </ref:key-name>
                     <ref:key-value>
                        <xsl:attribute name="value">
                           <xsl:value-of select="key-value/@value"/>
                        </xsl:attribute>
                     </ref:key-value>
                  </ref:locator-key>
                  <xsl:apply-templates select="api-params"/>
               </ref:locator>
            </ref:lnlink>
         </doc:related-content-link>
      </doc:related-content-item>
   </xsl:template>

   <xsl:template match="lnlink/marker">
      <ref:marker>
         <xsl:apply-templates select="@*|node()"/>
      </ref:marker>
   </xsl:template>

   <xsl:template match="lnlink/marker/@role">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="api-params">
      <ref:locator-params>
         <xsl:apply-templates/>
         <xsl:if test="parent::lnlink[@service='ATTACHMENT']">
            <proc:param>
               <xsl:attribute name="name">attachment-smi</xsl:attribute>
               <xsl:attribute name="value"/>
               <xsl:message>need SMI from CSSM? Is this a parameter?</xsl:message>
            </proc:param>
         </xsl:if>
      </ref:locator-params>
   </xsl:template>

   <xsl:template match="param">
      <xsl:if test="@name!='attachment-key'">
         <xsl:choose><!-- Awantika: For AU20 one more param needs to be created with the name targetcontentType value practicalguidance -->
            <xsl:when test="$streamID='AU20'">
               <xsl:if test="not(following-sibling::param)">
                  <proc:param>
                     <xsl:attribute name="name">
                        <xsl:text>targetContentType</xsl:text>
                     </xsl:attribute>
                     <xsl:attribute name="value">
                        <xsl:text>practicalguidance</xsl:text>
                     </xsl:attribute>
                  </proc:param>
               </xsl:if>
               <xsl:variable name="docinfoidtext" select="/*/docinfo/docinfo:doc-id/text()"/>
               <!-- Awantika: Need to create only proc:param for topiccode in AU20 for the specific condition -->
               <xsl:if test="$streamID='AU20' and contains(lower-case($docinfoidtext),'analytics') and ancestor::source_cttr:annotations[@annotgroup='LPG']">
                  <xsl:choose>
                     <xsl:when test="@name[.='topiccode']">
                        <proc:param>
                           <xsl:attribute name="name">
                              <xsl:text>topiccode</xsl:text>
                           </xsl:attribute>
                           <xsl:attribute name="value">
                              <xsl:value-of select="@value"/>
                           </xsl:attribute>
                        </proc:param>
                     </xsl:when>
                     <xsl:otherwise/>
                  </xsl:choose>
               </xsl:if>
            </xsl:when>
            <xsl:otherwise>
               <proc:param>
                  <xsl:apply-templates select="@name | @value"/>
               </proc:param>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:if>
   </xsl:template>

   <xsl:template match="param/@name | param/@value">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="lnlink[@service='ATTACHMENT'][parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp]">
      <doc:related-content-item>
         <doc:related-content-link>
            <ref:lnlink service="ATTACHMENT">
               <xsl:apply-templates select="marker"/>
               <ref:locator>
                  <ref:locator-key>
                     <ref:key-name>
                        <xsl:attribute name="name">attachment-key</xsl:attribute>
                     </ref:key-name>
                     <ref:key-value>
                        <xsl:attribute name="value">
                           <xsl:value-of select="api-params/param[@name='attachment-key']/@value"/>
                        </xsl:attribute>
                     </ref:key-value>
                  </ref:locator-key>
                  <xsl:apply-templates select="api-params"/>
               </ref:locator>
            </ref:lnlink>
         </doc:related-content-link>
      </doc:related-content-item>
   </xsl:template>

   <xsl:template match="lnlink[@service='TRAVERSE'][parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp]">
      <doc:related-content-item>
         <xsl:if test="parent::docinfo:assoc-links[@assoc-content='external-content-location']">
            <xsl:attribute name="content-type">external-content-location</xsl:attribute>
         </xsl:if>
         <doc:related-content-link>
            <ref:lnlink service="TRAVERSE">
               <xsl:apply-templates select="marker"/>
               <ref:locator>
                  <ref:locator-key>
                     <ref:key-name>
                        <xsl:attribute name="name">
                           <xsl:value-of select="key-name/@name"/>
                        </xsl:attribute>
                     </ref:key-name>
                     <ref:key-value>
                        <xsl:attribute name="value">
                           <xsl:value-of select="key-value/@value"/>
                        </xsl:attribute>
                     </ref:key-value>
                  </ref:locator-key>
                  <ref:locator-params>
                     <xsl:choose>
                        <xsl:when test="api-params/param[@name='normprotocol']">
                           <xsl:apply-templates select="api-params/param[@name='normprotocol']"/>
                        </xsl:when>
                        <xsl:otherwise>
                           <proc:param name="normprotocol" value="lexsee"/>
                        </xsl:otherwise>
                     </xsl:choose>
                     <xsl:apply-templates select="api-params/param[@name!='normprotocol']"/>
                  </ref:locator-params>
               </ref:locator>
            </ref:lnlink>
         </doc:related-content-link>
      </doc:related-content-item>
   </xsl:template>

   <xsl:template match="lnlink/@status"/>

   <xsl:template match="lnlink[@service='URL'][parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp]">
      <doc:related-content-item>
         <xsl:if test="parent::docinfo:assoc-links[@assoc-content='external-content-location']">
            <xsl:attribute name="content-type">external-content-location</xsl:attribute>
         </xsl:if>
         <doc:related-content-link>
            <ref:lnlink service="URL">
               <xsl:apply-templates select="marker"/>
               <ref:locator>
                  <xsl:choose>
                     <xsl:when test="api-params/param[@name='URL']">
                        <ref:locator-key>
                           <ref:key-name name="URL"/>
                           <ref:key-value>
                              <xsl:attribute name="value">
                                 <xsl:value-of select="api-params/param[@name='URL']/@value"/>
                              </xsl:attribute>
                           </ref:key-value>
                        </ref:locator-key>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:apply-templates select="api-params"/>
                     </xsl:otherwise>
                  </xsl:choose>
               </ref:locator>
            </ref:lnlink>
         </doc:related-content-link>
      </doc:related-content-item>
   </xsl:template>

   <xsl:template match="ci:cite[parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp]">
      <doc:related-content-item>
         <xsl:if test="parent::docinfo:assoc-links[@assoc-content='external-content-location']">
            <xsl:attribute name="content-type">external-content-location</xsl:attribute>
         </xsl:if>
         <doc:related-content-link>
            <ref:lnlink service="TRAVERSE">
               <ref:marker role="label">
                  <xsl:value-of select="ci:content"/>
               </ref:marker>
               <ref:locator>
                  <ref:locator-key>
                     <ref:key-name>
                        <xsl:attribute name="name">normcite</xsl:attribute>
                     </ref:key-name>
                     <ref:key-value>
                        <xsl:attribute name="value">
                           <xsl:value-of select="ci:content"/>
                        </xsl:attribute>
                     </ref:key-value>
                  </ref:locator-key>
                  <ref:locator-params>
                     <xsl:choose>
                        <xsl:when test="api-params/param[@name='normprotocol']">
                           <xsl:apply-templates select="api-params/param[@name='normprotocol']"/>
                        </xsl:when>
                        <xsl:otherwise>
                           <proc:param name="normprotocol" value="lexsee"/>
                        </xsl:otherwise>
                     </xsl:choose>
                     <xsl:if test="//docinfo/docinfo:doc-country/@iso-cc">
                        <proc:param>
                           <xsl:attribute name="name">countrycode</xsl:attribute>
                           <xsl:attribute name="value">
                              <xsl:value-of select="//docinfo/docinfo:doc-country/@iso-cc"/>
                           </xsl:attribute>
                        </proc:param>
                     </xsl:if>
                  </ref:locator-params>
               </ref:locator>
            </ref:lnlink>
         </doc:related-content-link>
      </doc:related-content-item>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>This is an LBU-supplied, unsigned numeric value that indicates the relative position of a document and must be unique within a source. 
					<xd:i>docinfo:bookseqnum</xd:i> becomes <xd:b>doc:bookseqnum</xd:b>.
				</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
		
		&lt;docinfo:bookseqnum&gt;273181624&lt;/docinfo:bookseqnum&gt;
		
			</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
		
		&lt;doc:bookseqnum&gt;273181624&lt;/doc:bookseqnum&gt;
		
			</xd:pre>
         <!--Changes2012-09-06: Created.
				-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.bookseqnum-LxAdv-doc.bookseqnum.dita  -->
   <xsl:template match="docinfo:bookseqnum[not( normalize-space( . ) = '' )]"><!--  Original Target XPath:  doc:bookseqnum   -->
      <doc:bookseqnum>
         <xsl:apply-templates select="@* | node()"/>
      </doc:bookseqnum>
   </xsl:template>
   <!--    From Rosetta_Elements-LxAdv-Empty_Elements.dita / .xsl   -->
   <xsl:template match="docinfo:bookseqnum[ normalize-space( . ) = '' ]"/>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>The source element<xd:i>docinfo:currencystatement</xd:i> becomes <xd:b>doc:docinfo/currencystatment</xd:b>. </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>Conversion needs to suppress <xd:i>docinfo:currencystatement</xd:i> when it's the child of <xd:i>leg:levelinfo</xd:i> and  <xd:i>levelinfo</xd:i>. This will be applicable to all <xd:b>Pacific Content Streams</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
            
                &lt;docinfo:currencystatement&gt;Consolidated as in force on &lt;date&gt;10 September 2012&lt;/date&gt;&lt;/docinfo:currencystatement&gt;
            
	       </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
            
                &lt;doc:docinfo&gt;
                    &lt;currencystatement&gt;Consolidated as in force on &lt;date&gt;10 September 2012&lt;/date&gt;&lt;/currencystatement&gt;
                &lt;/doc:docinfo&gt;
            
	      </xd:pre>
         <!--Changes2013-04-09: Created2013-06-25: added to AU and NZ ditamap for content enrichment2013-09-16: Instruction added for suppressing docinfo:currencystatement when it is child of leg:levelinfo and  levelinfo.Affects all Pacific content streams. WebTeam # is 234193.2013-09-16: WebTeam #233318 created for pacific content stream inorder to suppress docinfo:currencystatement with in leg:levelinfo and levelinfo.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="docinfo:currencystatement[not(parent::leg:levelinfo | parent::levelinfo)]"><!--  Original Target XPath:  doc:docinfo/currencystatement   -->
      <currencystatement>
         <xsl:apply-templates select="@* | node()"/>
      </currencystatement>
   </xsl:template>

   <xsl:template match="leg:levelinfo/docinfo:currencystatement | leg:levelinfo/docinfo:currencystatement/contrib | levelinfo/docinfo:currencystatement"/>
   <xd:doc>
      <title xmlns="">
         <sourcexml>docinfo:custom-metafields</sourcexml> to
            <targetxml>doc:legacy-metadata[@metadatasource="lbu-meta"]/meta/metaitem</targetxml>
         <lnpid>id-CCCC-10485</lnpid>
      </title>
      <body xmlns="">
         <section>
            <title>Instructions <i>[common element]</i>
            </title>
            <p>
               <sourcexml>docinfo:custom-metafields/docinfo:custom-metafield</sourcexml> becomes
                    <targetxml>doc:legacy-metadata[@metadatasource="lbu-meta"]/meta/metaitem/@value</targetxml>.
                    The <sourcexml>docinfo:custom-metafield/@name</sourcexml> or
                    <sourcexml>docinfo:custom-metafield/@searchtype</sourcexml> attribute becomes
                    <targetxml>metaitem/@name</targetxml>, which ever is present. If
                    <sourcexml>docinfo:custom-metafield/@name</sourcexml> and
                    <sourcexml>docinfo:custom-metafield/@searchtype</sourcexml> are both present,
                    <sourcexml>docinfo:custom-metafield/@searchtype</sourcexml> is dropped and
                    <sourcexml>docinfo:custom-metafield/@name</sourcexml> becomes
                    <targetxml>metaitem/@name</targetxml>.</p>
            <p>If <sourcexml>docinfo:custom-metafield</sourcexml> has no content, then the
                    <targetxml>metaitem/@value</targetxml> attribute is set to an empty string.</p>
            <note>The <targetxml>doc:legacy-metadata[@metadatasource="lbu-meta"]/meta</targetxml>
                    container will only be created once for all its child mappings to
                    <targetxml>metaitem</targetxml>. This includes values mapped from elsewhere in
                    the same source file.</note>
         </section>
         <example>
            <title>Source XML</title>
            <codeblock>
                    
&lt;docinfo:custom-metafields&gt;
    &lt;docinfo:custom-metafield name="importance-rating"&gt;0&lt;/docinfo:custom-metafield&gt;
    &lt;docinfo:custom-metafield name="date"/&gt;
    &lt;docinfo:custom-metafield searchtype="JURIS-CLASSIFY"&gt;England and Wales&lt;/docinfo:custom-metafield&gt;
&lt;/docinfo:custom-metafields&gt;

                </codeblock>
         </example>
         <example>
            <title>Target XML</title>
            <codeblock>
                    
&lt;doc:legacy-metadata metadatasource="lbu-meta"&gt;
    &lt;meta&gt;
        &lt;metaitem name="lbu-sourcename" value="Journal"/&gt;
        &lt;metaitem name="partitionnum" value="CITE1"/&gt;
        ...
        &lt;metaitem name="importance-rating" value="0"/&gt;
        &lt;metaitem name="date" value=""/&gt;
        &lt;metaitem name="JURIS-CLASSIFY" value="England and Wales"/&gt;        
        ...
    &lt;/meta&gt;
&lt;/doc:legacy-metadata&gt;

                </codeblock>
         </example>
         <note>
            <p>
               <b>For UK Cases:</b>
            </p>
            <p>If the value of
                    <sourcexml>docinfo:custom-metafields/docinfo:custom-metafield/@name="jurisdiction"</sourcexml>
                    is "European" then conversion needs also map it with
                    <targetxml>jurisinfo:courtinfo/jurisinfo:jurisdiction/jurisinfo:system.</targetxml>
                    and <targetxml>dc:metadata/dc:coverage/location:region</targetxml> with
                    <targetxml>location:region</targetxml>
               <targetxml>@regioncode='EU'</targetxml> and value 'Europe'</p>
         </note>
         <example>
            <title>Source XML</title>
            <codeblock>
                    
&lt;docinfo:custom-metafields&gt;
....
        &lt;docinfo:custom-metafield name="jurisdiction"&gt;European&lt;/docinfo:custom-metafield&gt;
....
&lt;/docinfo:custom-metafields&gt;                

                </codeblock>
         </example>
         <example>
            <title>Target XML</title>
            <codeblock>
                    
&lt;jurisinfo:jurisdiction&gt;
    &lt;jurisinfo:system&gt;European&lt;/jurisinfo:system&gt;
&lt;/jurisinfo:jurisdiction&gt;

&lt;dc:metadata&gt;
    &lt;dc:coverage&gt;
        &lt;location:region regioncode="EU"&gt;Europe&lt;/location:region&gt;
    &lt;/dc:coverage&gt;
&lt;/dc:metadata&gt;

&lt;doc:legacy-metadata metadatasource="lbu-meta"&gt;
    &lt;meta&gt;
....
        &lt;metaitem name="jurisdiction" value="European"/&gt;      
....
    &lt;/meta&gt;
&lt;/doc:legacy-metadata&gt;

                </codeblock>
         </example>
         <section>
            <note>These are special rules for UK06 and UK07 streams. The conversions described here
                    are <u>in addition to</u> the conversions described in <xref href="Rosetta_docinfo.lbu-meta-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta-scheme.dita">"<sourcexml>docinfo:lbu-meta</sourcexml> to
                        <targetxml>doc:legacy-metadata[@metadatasource="lbu-meta"]</targetxml>
                        (id-CCCC-10300)"</xref>. Following rules are to identify the first and last
                    document of an Act. The instances are identified through the
                    <sourcexml>@name</sourcexml> attribute in
                    <sourcexml>docinfo:custom-metafield</sourcexml>. The items may not be present in
                    every stream. If present, the rules below apply.<p>Source: <ul>
                     <li>If
                            <sourcexml>docinfo:custom-metafields/docinfo:custom-metafield[@name="is-first-document-in-enactment"]</sourcexml>
                            and #PCDATA as <sourcexml>"true | false"</sourcexml> then within
                            <targetxml>doc:metadata/doc:docinfo</targetxml> create
                            <targetxml>classify:classification[@classscheme="actDocumentOrder"]/classify:classitem</targetxml>.
                            The <targetxml>@classscheme</targetxml> value is hard coded. <ul>
                           <li> Create
                                    <targetxml>classify:classitem-identifier/classify:classcode[@normval]</targetxml>.
                                    The <targetxml>@normval</targetxml> value is taken from #PCDATA
                                    source. i.e. <sourcexml>true | false</sourcexml>
                           </li>
                           <li> Create
                                    <targetxml>classify:classitem-identifier/classify:classname</targetxml>.
                                    The value will be <targetxml>firstLegisItem</targetxml> which is
                                    hard coded. Also,</li>
                           <li> Create
                                    <targetxml>doc:hier/proc:processinginfo[@process="LAToCBuilder"]/proc:param[@name="firstLegisItem"
                                        @value="true | false"]</targetxml>
                           </li>
                        </ul>
                     </li>
                  </ul>
                  <ul>
                     <li>If
                            <sourcexml>docinfo:custom-metafields/docinfo:custom-metafield[@name="is-last-document-in-enactment"]</sourcexml>
                            and #PCDATA as <sourcexml>"true | false"</sourcexml> then within
                            <targetxml>doc:metadata/doc:docinfo</targetxml> and create
                            <targetxml>classify:classification[@classscheme="actDocumentOrder"]/classify:classitem</targetxml>.
                            The <targetxml>@classscheme</targetxml> value is hard coded. <ul>
                           <li> Create
                                    <targetxml>classify:classitem-identifier/classify:classcode[@normval]</targetxml>.
                                    The <targetxml>@normval</targetxml> value is taken from source
                                    <sourcexml>true | false</sourcexml>
                           </li>
                           <li> Create
                                    <targetxml>classify:classitem-identifier/classify:classname</targetxml>.
                                    The value will be <targetxml>lastLegisItem</targetxml> which is
                                    hard coded.</li>
                           <li> Create
                                    <targetxml>doc:hier/proc:processinginfo[@process="LAToCBuilder"]/proc:param[@name="lastLegisItem"
                                        @value="true | false"]</targetxml>
                           </li>
                        </ul>
                     </li>
                  </ul>
               </p>
            </note>
         </section>
         <example>
            <title>Source XML</title>
            <codeblock>
                    
&lt;docinfo&gt;
    &lt;docinfo:custom-metafields&gt;
        &lt;docinfo:custom-metafield name="is-first-document-in-enactment"&gt;true&lt;/docinfo:custom-metafield&gt;
        
        &lt;docinfo:custom-metafield name="is-last-document-in-enactment"&gt;true&lt;/docinfo:custom-metafield&gt;
    &lt;/docinfo:custom-metafields&gt;
&lt;/docinfo&gt;

                </codeblock>
         </example>
         <example>
            <title>Target XML</title>
            <codeblock>
                    &lt;doc:metadata&gt;
    &lt;doc:docinfo&gt;
        &lt;classify:classification classscheme="actDocumentOrder"&gt;
            &lt;classify:classitem&gt;
                &lt;classify:classitem-identifier&gt;
                    &lt;classify:classcode normval="true"/&gt;
                    &lt;classify:classname&gt;firstLegisItem&lt;/classify:classname&gt;
                &lt;/classify:classitem-identifier&gt;
            &lt;/classify:classitem&gt;
            ...
        &lt;/classify:classification&gt;
        ...
    &lt;/doc:docinfo&gt;
&lt;/doc:metadata&gt;

&lt;!---- OR-----&gt;

&lt;doc:metadata&gt;
    &lt;doc:docinfo&gt;
        &lt;classify:classification classscheme="actDocumentOrder"&gt;
            
            &lt;classify:classitem&gt;
                &lt;classify:classitem-identifier&gt;
                    &lt;classify:classcode normval="true"/&gt;
                    &lt;classify:classname&gt;lastLegisItem&lt;/classify:classname&gt;
                &lt;/classify:classitem-identifier&gt;
            &lt;/classify:classitem&gt;
        &lt;/classify:classification&gt;
    &lt;/doc:docinfo&gt;
&lt;/doc:metadata&gt;

                    <b>And Create</b>
                    
                    &lt;doc:hier&gt;
                    
                    &lt;proc:processinginfo process="LAToCBuilder"&gt;
                    
                    &lt;proc:param name="firstLegisItem" value="true"/&gt;
                    
                    &lt;/proc:processinginfo&gt;
                    
                    &lt;!-- ... --&gt;
                    
                    &lt;/doc:hier&gt;
                    
                    &lt;!----- OR -----&gt;
                    
                    &lt;doc:hier&gt;
                    
                    &lt;proc:processinginfo process="LAToCBuilder"&gt;
                    
                    &lt;proc:param name="lastLegisItem" value="true"/&gt;
                    
                    &lt;/proc:processinginfo&gt;
                    
                    &lt;!-- ... --&gt;
                    
                    &lt;/doc:hier&gt;	</codeblock>
         </example>
         <section>
            <title>Changes</title>
            <p>2013-01-09: <ph id="change_20130109_rj">Created.</ph>
            </p>
            <p>2013-01-25: <ph id="change_20130125_1_jg">Added instruction to handle
                    <sourcexml>docinfo:custom-metafield/@searchtype</sourcexml> attribute, and
                    provided an example.</ph>
            </p>
            <p>2013-01-25: <ph id="change_20130125_2_jg">Added instruction to handle the scenario
                    when <sourcexml>docinfo:custom-metafield</sourcexml> content is empty, and
                    provided an example.</ph>
            </p>
            <p>2013-11-20: <ph id="change_20131120_SSX">Added instruction to handle
                    <sourcexml>docinfo:custom-metafields/docinfo:custom-metafield/@name="jurisdiction"</sourcexml>
                    is "European" Webteam # 239816 </ph>
            </p>
            <p>2017-01-04-: <ph id="change_20170104_AS">Updated
                    <sourcexml>docinfo:custom-metafield"</sourcexml> for
                    "is-first-document-in-enactment" or "is-last-document-in-enactment". VSTS
                    #162173</ph>
            </p>
            <p>2017-01-12-: <ph id="change_20170112_AS">Updated
                    <sourcexml>docinfo:custom-metafield"</sourcexml> for
                    "is-first-document-in-enactment" or "is-last-document-in-enactment". VSTS
                    #162173</ph>
            </p>
         </section>
      </body>
   </xd:doc>
   <xsl:template match="docinfo:custom-metafields">
      <xsl:apply-templates select="docinfo:custom-metafield" mode="legacyMetadata"/>
   </xsl:template>
   <!-- Awantika: For AU20 we need not to process the metafields as they are being mapped in head section -->
   <xsl:template match="docinfo:custom-metafield" mode="legacyMetadata">
      <xsl:choose>
         <xsl:when test="$streamID='AU20'"/>
         <xsl:otherwise>
            <metaitem>
               <xsl:attribute name="name">
                  <xsl:choose>
                     <xsl:when test="@name">
                        <xsl:value-of select="@name"/>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:value-of select="@searchtype"/>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:attribute>
               <xsl:attribute name="value"><!-- JD: changed from "." to "normalize-space(.)", to change output like
            		<metaitem name="COURT-CLASSIFY" value="Queens Bench&#xA;&#x9;&#x9;&#x9;&#x9;Division"/>
            		to
            		<metaitem name="COURT-CLASSIFY" value="Queens Bench Division"/>
            		-->
                  <xsl:value-of select="normalize-space(.)"/>
               </xsl:attribute>
            </metaitem>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="docinfo:custom-metafields/docinfo:custom-metafield[@name='jurisdiction']"
                 mode="metadata">
      <xsl:if test=".='European'">
         <dc:coverage>
            <location:region regioncode="EU">Europe</location:region>
         </dc:coverage>
      </xsl:if>
   </xsl:template>

   <xsl:template match="docinfo:custom-metafields/docinfo:custom-metafield[@name='jurisdiction'][$streamID=('UK01' , 'UK02' , 'UK03', 'UK04')]"
                 mode="jurisdiction">
      <xsl:if test=".='European'">
         <jurisinfo:jurisdiction>
            <jurisinfo:system>European</jurisinfo:system>
         </jurisinfo:jurisdiction>
      </xsl:if>
   </xsl:template>
   <xd:doc>
      <title xmlns="">(UK) <sourcexml>docinfo:custom-metafield</sourcexml> to <targetxml>dc:date</targetxml> or
            <targetxml>doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"]</targetxml>
         <lnpid>id-CCCC-10547</lnpid>
      </title>
      <body xmlns="">
         <section>
            <title>Instructions <i>[common element]</i>
            </title>
            <note>About This Module: These are special rules for UK streams. The conversions
                    described here are <u>in addition to</u> the conversions described in <xref href="Rosetta_UK_docinfo.custom-metafields-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta.meta.metaitem.dita">"<sourcexml>docinfo:custom-metafields</sourcexml> to
                        <targetxml>doc:legacy-metadata[@metadatasource="lbu-meta"]/meta/metaitem</targetxml>
                        (id-CCCC-10485)"</xref>
            </note>
            <p>These are rules for mapping certain instances of the source element
                    <sourcexml>docinfo:custom-metafield</sourcexml>. The instances are identified
                    through the <sourcexml>@name</sourcexml> attribute. The items may not be present in
                    every stream. If present, the rules below apply. The rules are grouped by
                    target.</p>
            <p>
               <b>
                  <u>Mapping to <targetxml>dc:date</targetxml>
                  </u>
               </b>
            </p>
            <p>Source: <ul>
                  <li>
                     <sourcexml>docinfo:custom-metafield[@name="editorialPublishedDate"]</sourcexml>
                  </li>
                  <li>
                     <sourcexml>docinfo:custom-metafield[@name="createdDate"]</sourcexml>
                  </li>
                  <li>
                     <sourcexml>docinfo:custom-metafield[@name="updatedDate"]</sourcexml>
                  </li>
               </ul>
            </p>
            <p>Target:
                    <targetxml>doc:metadata/doc:docinfo/dc:metadata/dc:date[@lnmeta:datetype]</targetxml>.
                    Where <sourcexml>@name</sourcexml> value becomes
                    <targetxml>@lnmeta:datetype</targetxml>value. And content of source element
                    becomes content of target.</p>
            <p>
               <b>
                  <u>Mapping to <targetxml>classify:classification</targetxml>
                  </u>
               </b>
            </p>
            <p>Source: <ul>
                  <li>
                     <sourcexml>docinfo:custom-metafield[@name="important"]</sourcexml>
                  </li>
                  <li>
                     <sourcexml>docinfo:custom-metafield[@name="highlightFrequency"]</sourcexml>
                  </li>
                  <li>
                     <sourcexml>docinfo:custom-metafield[@name="inEditorialReview"]</sourcexml>
                  </li>
                  <li>
                     <sourcexml>docinfo:custom-metafield[@name="resultType"]</sourcexml>
                  </li>
                  <li>
                     <sourcexml>docinfo:custom-metafield[@name="word-toc"]</sourcexml>
                  </li>
                  <li>
                     <sourcexml>docinfo:custom-metafield[@name="isDocBuilderAvailable"]</sourcexml>
                  </li>
                  <li>
                     <sourcexml>docinfo:custom-metafield[@name="isCorePrecedent"]</sourcexml>
                  </li>
                  <!-- McNally June 16 2016: The next one, filterType, might be wanted in future. No initial requirement so commented-out. -->
                  <!--<li><sourcexml>docinfo:custom-metafield[@name="filterType"]</sourcexml></li>-->
               </ul>
            </p>
            <p>Target: Each source item becomes <targetxml>metaitem[@name @value]</targetxml> within
                    <targetxml>classify:classification</targetxml> markup. As follows:</p>
            <p>Within <targetxml>doc:metadata/doc:docinfo</targetxml> -<ul>
                  <li>Create
                        <targetxml>classify:classification[@classscheme="uk-functional-information"]/classify:classitem</targetxml>.
                        The <targetxml>@classscheme</targetxml> value is hard coded.<ul>
                        <li>Create <targetxml>meta</targetxml>
                           <ul>
                              <li>For each <sourcexml>docinfo:custom-metafield</sourcexml>
                                    specified above, create <targetxml>metaitem[@name
                                        @value]</targetxml>. Where <sourcexml>@name</sourcexml>
                                    value becomes <targetxml>@name</targetxml> value. And
                                    content of source element becomes
                                    <targetxml>@value</targetxml> value.</li>
                           </ul>
                        </li>
                        <li>Create
                                <targetxml>classify:classitem-identifier/classify:classcode[@normval="functional-parameters"]</targetxml>.
                                The <targetxml>@normval</targetxml> value is hard coded.</li>
                     </ul>
                  </li>
               </ul>
               <note>Create only one container
                    <targetxml>classify:classification[@classscheme="uk-functional-information"]/classify:classitem</targetxml>.
                    The container holds the items described above and may also hold mappings from
                    elsewhere in the same source file.</note>
            </p>
            <p>
               <note>This rule is applicable for specific instance of the source element
                        <sourcexml>docinfo:custom-metafield</sourcexml>. The instances are
                        identified through the <sourcexml>@name</sourcexml> attribute with value
                        "<sourcexml>containsAppealTracker</sourcexml>" and the target attribute
                        value should be all lower case (<targetxml>true</targetxml> or
                        <targetxml>false</targetxml>). This item may not be present in every UK
                        streams. If present then rule will be apply.</note>
            </p>
         </section>
         <example>
            <title>Source XML</title>
            <codeblock>
                    
&lt;docinfo&gt;
    &lt;docinfo:custom-metafields&gt;
        &lt;docinfo:custom-metafield name="important"&gt;true&lt;/docinfo:custom-metafield&gt;
        &lt;docinfo:custom-metafield name="inEditorialReview"&gt;yes&lt;/docinfo:custom-metafield&gt;
        &lt;docinfo:custom-metafield name="editorialPublishedDate"&gt;2010-02-17&lt;/docinfo:custom-metafield&gt;
        &lt;docinfo:custom-metafield name="createdDate"&gt;2016-01-04&lt;/docinfo:custom-metafield&gt;
        &lt;docinfo:custom-metafield name="updatedDate"&gt;2016-03-06&lt;/docinfo:custom-metafield&gt;
        &lt;docinfo:custom-metafield name="highlightFrequency"&gt;Weekly&lt;/docinfo:custom-metafield&gt;
        &lt;docinfo:custom-metafield name="resultType"&gt;Precedents&lt;/docinfo:custom-metafield&gt;
        &lt;docinfo:custom-metafield name="containsAppealTracker"&gt;false&lt;/docinfo:custom-metafield&gt;
        &lt;docinfo:custom-metafield name="word-toc"&gt;yes&lt;/docinfo:custom-metafield&gt;
        &lt;docinfo:custom-metafield name="hostDB"&gt;PAM&lt;/docinfo:custom-metafield&gt;
        &lt;docinfo:custom-metafield name="isDocBuilderAvailable"&gt;true&lt;/docinfo:custom-metafield&gt;
        &lt;docinfo:custom-metafield name="isCorePrecedent"&gt;true&lt;/docinfo:custom-metafield&gt;
    &lt;/docinfo:custom-metafields&gt;
&lt;/docinfo&gt;

&lt;!-- The item above, @name="hostDB", is an example of an item not included in these special rules and so not present in target --&gt;

                </codeblock>
         </example>
         <example>
            <title>Target XML</title>
            <codeblock>
                    
&lt;doc:metadata&gt;
    &lt;doc:docinfo doc-content-country="GB"&gt;
        &lt;dc:metadata&gt;
            &lt;dc:date lnmeta:datetype="editorialPublishedDate"&gt;2010-02-17&lt;/dc:date&gt;
            &lt;dc:date lnmeta:datetype="createdDate"&gt;2016-01-04&lt;/dc:date&gt;
            &lt;dc:date lnmeta:datetype="updatedDate"&gt;2016-03-06&lt;/dc:date&gt;
        &lt;/dc:metadata&gt;
        &lt;classify:classification classscheme="uk-functional-information"&gt;
            &lt;classify:classitem&gt;
                &lt;meta&gt;
                    &lt;metaitem name="important" value="true"/&gt;
                    &lt;metaitem name="inEditorialReview" value="yes"/&gt;
                    &lt;metaitem name="highlightFrequency" value="Weekly"/&gt;
                    &lt;metaitem name="resultType" value="Precedents"/&gt;
                    &lt;metaitem name="containsAppealTracker" value="false"/&gt;
                    &lt;metaitem name="word-toc" value="yes"/&gt;
                    &lt;metaitem name="isDocBuilderAvailable" value="true"/&gt;
                    &lt;metaitem name="isCorePrecedent" value="true"/&gt;
                &lt;/meta&gt;
                &lt;classify:classitem-identifier&gt;
                    &lt;classify:classcode normval="functional-parameters"/&gt;
                &lt;/classify:classitem-identifier&gt;
            &lt;/classify:classitem&gt;
        &lt;/classify:classification&gt;
    &lt;/doc:docinfo&gt;
&lt;/doc:metadata&gt;

                </codeblock>
         </example>
         <section>
            <title>Changes</title>
            <p>2017-01-31: <ph id="change_20170131_jm">Added rule for "isCorePrecedent"; and updated the
                    example.</ph>
            </p>
            <p>2016-11-30: <ph id="change_20161130_AS">Added rule for "isDocBuilderAvailable"; and
                    updated the example.</ph> VSTS #143964</p>
            <p>2016-10-04: <ph id="change_20161004_jm">Added rule for "word-toc"; and updated the
                    example.</ph>
            </p>
            <p>2016-09-08: <ph id="change_20160908_SS">Added rule for attribute
                    <sourcexml>@name</sourcexml> with value "<u>containsAppealTracker</u>"; and
                    updated the example.</ph>
            </p>
            <p>2016-07-26: <ph id="change_20160726_jm">Added rule for "resultType"; and updated the
                    example.</ph>
            </p>
            <p>2016-07-13: <ph id="change_20160713_JCG">Added rules for "createdDate",
                    "updatedDate", and "inEditorialReview"; and updated the example.</ph>
            </p>
            <p>2016-06-17: <ph id="change_20160617_jm">Created. New rules.</ph>
            </p>
         </section>
      </body>
   </xd:doc>
   <!-- output as child of dc:metadata -->
   <xsl:template match="docinfo:custom-metafields/docinfo:custom-metafield[@name=('editorialPublishedDate' , 'createdDate' , 'updatedDate')]"><!-- Awantika: For UK streams above conditions need to be fulfilled in order to create multiple dc:date.
        Due to <xsl:if test="not(normalize-space(@value)='')"> it was not doing so, as @value does not come in docinfo:custom-metafield
        therefore commenting this out.-->
      <xsl:if test="not(normalize-space(.)='')">
         <dc:date>
            <xsl:attribute name="lnmeta:datetype" select="@name"/>
            <xsl:choose>
               <xsl:when test="matches(. , '\d{8}')">
                  <xsl:value-of select="concat(substring(. , 1, 4) , '-' , substring(. , 5, 2) , '-' , substring(. , 7, 2))"/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:value-of select="."/>
               </xsl:otherwise>
            </xsl:choose>
         </dc:date>
      </xsl:if>
   </xsl:template>
   <!-- output as uk functional information -->   <!-- WPK 2017-11-28.  All UK items related to functional information markup.  		
        This note is replicated in each of the 3 modules (but not in the 2 default "pass through" behavior modules) listed below for clarity.
        <targetxml>doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"]</targetxml>

        Module: \svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\docinfo\Rosetta_docinfo.lbu-meta-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta-scheme.xsl
        <lnpid>id-CCCC-10300</lnpid>
        this is the default "pass through" or non-classification behavior for lbu-meta not as functional information but as <doc:legacy-metadata metadatasource="lbu-meta">
        this is for items that either aren't converted to uk-functional-information.  technically the uk functional information items are ALSO
        passed through here additionally.
        
        Module: \svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\docinfo/Rosetta_UK_docinfo.custom-metafields-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta.meta.metaitem.xsl
		<lnpid>id-CCCC-10485</lnpid></title>
        this is the default "pass through" or non-classification behavior for custom-metafields not as functional information but as <doc:legacy-metadata metadatasource="lbu-meta">
        this is for items that either aren't converted to uk-functional-information.  technically the uk functional information items are ALSO
        passed through here additionally.
        
        Module: \svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_UK_docinfo-LxAdv-doc.docinfo_classify.classification.xsl
        <lnpid>id-CCCC-10546</lnpid>
        <targetxml>doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"]</targetxml>
        documentation and code for functional information classification markup, but only these use cases:
        	<p>Source: <sourcexml>docinfo</sourcexml> attributes - <ul>
                        <li><sourcexml>@majorrevision</sourcexml></li>
                        <li><sourcexml>@excludefromalerts</sourcexml></li>
                    </ul></p>
        This creates the <classification> wrapper for all uk functional information use cases.
        <xsl:template match="docinfo" mode="UKClassify">

        Module: \svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\docinfo\Rosetta_UK_docinfo.lbu-meta-LxAdv-doc.docinfo_classify.classification.xsl
        <lnpid>id-CCCC-10548</lnpid></title>
        <targetxml>doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"]</targetxml>
        documentation and code (the <metaitem> within the classification wrapper) for these use cases only
            <p>Source: <ul>
                    <li><sourcexml>docinfo:metaitem[@name="alternative-title-formal" @value=""]</sourcexml></li>
                    <li><sourcexml>docinfo:metaitem[@name="alternative-title-acronym"  @value=""]</sourcexml></li>
                    <li><sourcexml>docinfo:metaitem[@name="alternative-title-popular"  @value=""]</sourcexml></li>
                </ul></p>

        Module: \svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\docinfo\Rosetta_UK_docinfo.custom-metafields-LxAdv-dc.date_or_doc.docinfo_classify.classification.xsl
        <lnpid>id-CCCC-10547</lnpid></title>
        <targetxml>doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"]</targetxml>
        documentation and code (the <metaitem> within the classification wrapper)for functional information classification markup, but only these use cases:
           <p>Source: <ul>
                    <li><sourcexml>docinfo:custom-metafield[@name="editorialPublishedDate"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="createdDate"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="updatedDate"]</sourcexml></li>
                </ul></p>

                <p>Source: <ul>
                    <li><sourcexml>docinfo:custom-metafield[@name="important"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="highlightFrequency"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="inEditorialReview"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="resultType"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="word-toc"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="isDocBuilderAvailable"]</sourcexml></li>
                    <li><sourcexml>docinfo:custom-metafield[@name="isCorePrecedent"]</sourcexml></li>
                    <!-/- McNally June 16 2016: The next one, filterType, might be wanted in future. No initial requirement so commented-out. -/->
                    <!-/-<li><sourcexml>docinfo:custom-metafield[@name="filterType"]</sourcexml></li>-/->
                </ul></p>
        -->
   <xsl:template match=" docinfo:custom-metafield[@name='important'] | docinfo:custom-metafield[@name='highlightFrequency'] |          docinfo:custom-metafield[@name='inEditorialReview'] | docinfo:custom-metafield[@name='resultType'] |         docinfo:custom-metafield[@name='word-toc'] | docinfo:custom-metafield[@name='isDocBuilderAvailable'] |          docinfo:custom-metafield[@name='isCorePrecedent']">
      <metaitem>
         <xsl:attribute name="name" select="@name"/>
         <xsl:attribute name="value" select="."/>
      </metaitem>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:doc-country[@iso-cc]</xd:i> becomes <xd:b>doc:docinfo[@doc-content-country]</xd:b>. </xd:p>
         <xd:p>If <xd:i>docinfo:doc-country[@iso-cc="AU"]</xd:i>, check the value of <xd:i>case:headnote/case:info/case:courtinfo//case:juris</xd:i>. If
						<xd:i>case:juris="NZ"</xd:i>, set <xd:b>doc:docinfo[@doc-content-country="NZ"]</xd:b>.<xd:p>
               <xd:b>Note: </xd:b>@doc-content-country is required.</xd:p>
            <xd:p>
               <xd:b>Note: </xd:b>
               <xd:i>docinfo:doc-country[@iso-cc]</xd:i> is used to specify the country in the source document and also becomes part of <xd:b>@xml:id</xd:b> as described in
						the instructions for <xd:a href="Rosetta_docinfo.doc-lang-and-doc-country-LxAdv-ROOT_xml.lang.dita">Target @xml:lang</xd:a>.</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
	&lt;docinfo&gt;
			  ....
		   &lt;docinfo:doc-country iso-cc="AU"/&gt;
		   ....
		   &lt;/docinfo&gt;


		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;doc:docinfo doc-content-country="AU"&gt;
         ...
        &lt;/doc:docinfo&gt;


		</xd:pre>
         <xd:p>
            <xd:b>Source XML - AU example with case:juris="NZ"</xd:b>
         </xd:p>
         <xd:pre>


&lt;CITATORDOC&gt;
 &lt;docinfo&gt;
   ....
   &lt;docinfo:doc-country iso-cc="AU"/&gt;
    ....
 &lt;/docinfo&gt;
 &lt;cttr:body&gt;
    &lt;case:headnote&gt;
        &lt;case:info&gt;
        ...........
            &lt;case:courtinfo&gt;
            .........
                 &lt;case:juris ln.user-displayed="false"&gt;NZ&lt;/case:juris&gt;
            &lt;/case:courtinfo&gt;
        &lt;/case:info&gt;
    &lt;/case:headnote&gt;
  &lt;/cttr:body&gt;
&lt;/CITATORDOC&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML - AU example with case:juris="NZ" </xd:b>
         </xd:p>
         <xd:pre>
&lt;doc:docinfo doc-content-country="NZ"&gt;
         ...
        &lt;/doc:docinfo&gt;


		</xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;docinfo&gt;
          ....
       &lt;docinfo:doc-country iso-cc="CA"/&gt;
       ....
       &lt;/docinfo&gt;


		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;doc:docinfo doc-content-country="CA"&gt;
         ...
        &lt;/doc:docinfo&gt;


		</xd:pre>
         <xd:p>
            <xd:b>Source XML - Example for UK Content</xd:b>
         </xd:p>
         <xd:pre>
&lt;docinfo&gt;
          ....
       &lt;docinfo:doc-country iso-cc="GB"/&gt;
       ....
       &lt;/docinfo&gt;


		</xd:pre>
         <xd:p>
            <xd:b>Target XML - Example for UK Content</xd:b>
         </xd:p>
         <xd:pre>
&lt;doc:docinfo doc-content-country="GB"&gt;
         ...
        &lt;/doc:docinfo&gt;


				</xd:pre>
         <!--Changes2014-11-13: Example added for AU content with case:juris="NZ".2012-10-05: Example added for UK content.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.doc-country_iso-cc-LxAdv-doc.docinfo_doc-content-country.dita  -->
   <xsl:template name="doc_content_country"><!-- This template creates @doc-content-country from doc-country 
                    however there is an NZ special case --><!-- 2017-10-03 - MDS: Added handling for $streamID starts with 'HK' --><!-- Awantika: 2017-10-11: added streamID HK in else to replace AU(which is given in input) -->
      <xsl:attribute name="doc-content-country"
                     select=" if (//docinfo:doc-country/@iso-cc = 'AU' or ($streamID='AU08')) then                       if (//case:headnote/case:info/case:courtinfo//case:juris = 'NZ') then                        'NZ'                       else                                             if(starts-with($streamID, 'HK'))then 'HK' else 'AU'                        else                         if(starts-with($streamID, 'HK')) then                           if (//docinfo:doc-country/@iso-cc) then //docinfo:doc-country/@iso-cc                          else 'HK'                         else                         //docinfo:doc-country/@iso-cc "/>
   </xsl:template>
   <!--  un-comment out the following template rule to perform unit testing via XSpec file   -->   <!--xsl:template match="docinfo">
		<test>
			<xsl:call-template name="doc_content_country"/>
		</test>
	</xsl:template-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:doc-heading</xd:i> becomes
						<xd:b>dc:metadata/dc:title</xd:b>. </xd:p>
         <xd:p>Exceptional scenario for CA Indices: When <xd:i>docinfo:doc-heading</xd:i>
					contains word <xd:b>TITLE: </xd:b> or <xd:b>NAME: </xd:b> or <xd:b>SITE: </xd:b> or <xd:b>SUBJECT: </xd:b>
					or <xd:b>RULE: </xd:b> or <xd:b>STATUTE: </xd:b> then conversion should drop the word <xd:b>TITLE:
					</xd:b> or <xd:b>NAME: </xd:b> or <xd:b>SITE: </xd:b> or <xd:b>SUBJECT: </xd:b> or <xd:b>RULE: </xd:b> or
					<xd:b>STATUTE: </xd:b> from conversion.</xd:p>
         <xd:p>Exceptional scenario for AU Legislative Citator: When <xd:i>docinfo:doc-heading</xd:i>
					contains text <xd:b>Overview Tab for </xd:b> then conversion should drop the this text 
					<xd:b>Overview Tab for </xd:b> from conversion.</xd:p>
         <xd:p>Exceptional scenario for US Lexis Practice Advisor (LPA): 
					In addition to the standard mapping above, perform the following mappings. An example has been added 
					below. With this addition, the target output document will always contain three 
					<xd:b>dc:title</xd:b> elements; the one created above without any attributes, as well as 
					the two below with a <xd:b>@lnmeta:titlepurpose</xd:b> attribute:
					<xd:ul>
               <xd:li>
                  <xd:i>docinfo:doc-heading</xd:i> also maps to become 
							<xd:b>dc:metadata/dc:title[@lnmeta:titlepurpose='resultDisplayList']</xd:b>.</xd:li>
               <xd:li>If <xd:i>docinfo:doc-heading</xd:i> ends with a string enclosed by parentheses 
							(e.g. "Patent License Agreement (Pro-Licensee)"), remove 
							the parentheses and the enclosed text, remove any trailing spaces in the remaining text, and 
							the remaining text becomes the content of a new  
							<xd:b>dc:metadata/dc:title[@lnmeta:titlepurpose='download']</xd:b> element. 
							If <xd:i>docinfo:doc-heading</xd:i> does not end with a string inside parentheses, 
							map <xd:i>docinfo:doc-heading</xd:i>, with all of its text content, to a new 
							<xd:b>dc:metadata/dc:title[@lnmeta:titlepurpose='download']</xd:b> element.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:doc-heading&gt;PART�1&amp;#x2014;PRELIMINARY&lt;/docinfo:doc-heading&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;dc:title&gt;PART�1&amp;#x2014;PRELIMINARY&lt;/dc:title&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:doc-heading&gt;West Energy Ltd. (Re), [2007] A.E.U.B.D. No. 57&lt;/docinfo:doc-heading&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;dc:title&gt;West Energy Ltd. (Re), [2007] A.E.U.B.D. No. 57&lt;/dc:title&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Source XML - Example for UK Content</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:doc-heading&gt;In re B (Children) (Care Proceedings: Standard of Proof) (CAFCASS intervening) - [2009] AC 11&lt;/docinfo:doc-heading&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML - Example for UK Content</xd:b>
         </xd:p>
         <xd:pre>

&lt;dc:title&gt;In re B (Children) (Care Proceedings: Standard of Proof) (CAFCASS intervening) - [2009] AC 11&lt;/dc:title&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>If <xd:i>emph</xd:i> is child of <xd:i>docinfo:doc-heading</xd:i>
				then suppress <xd:i>emph</xd:i> element and retain its content in
					<xd:b>dc:title</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>For Canada Contents:</xd:b> if <xd:i>nl</xd:i> is child of
					<xd:i>docinfo:doc-heading</xd:i>, then replace it with single space
				character. For furter details please see the following example.</xd:p>
         <xd:p>
            <xd:b>Source XML- From CAN</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:doc-heading&gt;90F32&lt;nl/&gt;Memorandum of Argument of the Applicant&lt;/docinfo:doc-heading&gt;
            
			</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;dc:title&gt;90F32 Memorandum of Argument of the Applicant&lt;/dc:title&gt;
            
			</xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>Exception Scenario for Canada CA14:</xd:b>
            <xd:p>Trademarks and related marks: When (TM)
					or (R) occur in <xd:i>docinfo:doc-heading</xd:i>, convert to unicode code
					point as follows:</xd:p>
            <xd:p>
               <xd:b>(TM)</xd:b> becomes &amp;#8482;
					<xd:b>(R)</xd:b> becomes &amp;#174;</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Source XML- From CA14</xd:b>
         </xd:p>
         <xd:pre>
&lt;docinfo:doc-heading&gt;Alan D. Gold's NetLetter(TM), Monday, November 24, 2008 - Issue 615&lt;/docinfo:doc-heading&gt;            
			</xd:pre>
         <xd:p>
            <xd:b>Target XML for CA14</xd:b>
         </xd:p>
         <xd:pre>

&lt;dc:title&gt;Alan D. Gold's NetLetter&amp;#8482;, Monday, November 24, 2008 - Issue 615&lt;/dc:title&gt;
            
			</xd:pre>
         <xd:p>
            <xd:b>Source XML for US LPA Forms</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:doc-heading&gt;Patent License Agreement (Pro-Licensee)&lt;/docinfo:doc-heading&gt;
          					
					 </xd:pre>
         <xd:p>
            <xd:b>Target XML for US LPA Forms</xd:b>
         </xd:p>
         <xd:pre>
   
&lt;dc:metadata&gt;
	&lt;dc:title&gt;Patent License Agreement (Pro-Licensee)&lt;/dc:title&gt;
	&lt;dc:title lnmeta:titlepurpose="resultDisplayList"&gt;Patent License Agreement (Pro-Licensee)&lt;/dc:title&gt;
	&lt;dc:title lnmeta:titlepurpose="download"&gt;Patent License Agreement&lt;/dc:title&gt;
	...
&lt;/dc:metadata&gt;
 
             </xd:pre>
         <!--Changes2017-04-03: US LPA 2016 enhancements: Changes for treatment of 
					parenthesis containing form types for Title Parenthetical feature requirements for Forms 
					Enhancements. Change is to support content in forms (PCTs 275 and 305), but should be implemented 
					for all US LPA conversions. Added additional mapping of docinfo:doc-heading to 
					dc:metadata/dc:title[@lnmeta:titlepurpose='resultDisplayList'] for search results, 
					and to dc:metadata/dc:title[@lnmeta:titlepurpose='download'] for form 
					download. Also added an example.2015-12-04: Added exception for AU Legislative Citator to 
					drop text Overview Tab for  from conversion.2015-09-06: Modified only the special rule for CA14
						trademarks. No longer mapping (MC) to entity, the unicode code point is not
						currently supported. The pcdata (MC) is retained instead. RFA 145. CA14
						only.2015-05-05: Added note to convert (TM), (R), and (MC) to
						unicode code points. DB # 45. Applicable to CA14.2014-02-11: Updated note when emph
						is child of docinfo:doc-heading then suppress
							emph element and retain its content in
							dc:title, These instructions apply immediately to
						CA12.2013-10-18: Updated Instruction when
							docinfo:doc-heading contains word RULE: " or
							STATUTE: .2013-09-03: Updated Instruction when
							docinfo:doc-heading contains word "TITLE: " or
							NAME:  or SITE:  or SUBJECT:.2013-08-01: For Canada Content streams: Added a
						note and examples, when docinfo:doc-heading contains
							nl as a child element.2013-07-30: Added Instruction when
							docinfo:doc-heading contains word "TITLE: " or
							NAME: .2012-12-06: Added note for emph with
						docinfo:doc-heading.2012-10-05: Added example for UK Content.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.doc-heading-LxAdv-dc.title.dita  -->
   <xsl:template match="docinfo:doc-heading"><!-- these are used as regexes  -->
      <xsl:param name="docHeadingStringsToRemove"
                 as="xs:string*"
                 select="if ($streamID = 'CA11') then ( 'TITLE:' , 'NAME:' , 'SITE:' , 'SUBJECT:' , 'RULE:' , 'STATUTE:' ) else if ($streamID = 'CA15') then ('TITLE/TITRE:' , 'TITRE/TITLE:','CITED/CITÉ:','CITÉ/CITED:','CITE/CITED:','CITED:','TITLE:' , 'TITRE:')  else  'Overview Tab for' "/>
      <xsl:variable name="outputText" as="xs:string*">
         <xsl:apply-templates/>
      </xsl:variable>
      <!--  Original Target XPath:  dc:title   -->
      <dc:title><!--  remove any occurrence of $docHeadingStringsToRemove strings but assume case sensitive; also replace (TM) and (R) with the trademark and copyright characters, respectively, all depending on streamID   -->
         <xsl:choose>
            <xsl:when test=" $streamID = ( 'CA11' , 'AU20', 'CA15' ) ">
               <xsl:sequence select=" lnf:removeSequenceOfStrings( string-join( $outputText , '' ) , $docHeadingStringsToRemove , false() ) "/>
            </xsl:when>
            <xsl:when test=" $streamID = 'CA14' ">
               <xsl:sequence select="replace( replace( string-join( $outputText , '' ) , '\(TM\)' , '™' ) , '\(R\)' , '®' )"/>
            </xsl:when>
            <xsl:when test="$streamID = 'CA06' or $streamID = 'CA12' or $streamID = 'CA10'or $streamID = 'CA09'">
               <xsl:value-of select="."/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:apply-templates select="@* | node()"/>
            </xsl:otherwise>
         </xsl:choose>
      </dc:title>
      <xsl:if test="$streamID='USLPA'">
         <dc:title>
            <xsl:attribute name="lnmeta:titlepurpose">
               <xsl:text>resultDisplayList</xsl:text>
            </xsl:attribute>
            <xsl:apply-templates select="@* | node()"/>
         </dc:title>
         <dc:title>
            <xsl:attribute name="lnmeta:titlepurpose">
               <xsl:text>download</xsl:text>
            </xsl:attribute>
            <xsl:apply-templates select="@* | node()"/>
         </dc:title>
      </xsl:if>
   </xsl:template>

   <xsl:template match="docinfo:doc-heading/emph"><!--  Original Target XPath:  dc:title   --><!--  emph is pass-through when under doc-heading   -->
      <xsl:apply-templates select="@* | node()"/>
   </xsl:template>

   <xsl:template match="docinfo:doc-heading/nl"><!--  Original Target XPath:  dc:title   --><!--  @SBy:  nl becomes a space when under doc-heading; implemented for ***all*** streamIDs, not just Canada Contents...   -->
      <xsl:text> </xsl:text>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>Identifies the normalization scheme (e.g. URI, LNI, ISSN, et al.) used for the
					identifier. <xd:i>docinfo:doc-id</xd:i> becomes
						<xd:b>dc:metadata/dc:identifier[@lnmeta:identifier-scheme]</xd:b>.
					Also capture  <xd:i>docinfo:dpsi[@id-string]</xd:i>  and prepend the
					value, followed by hyphen, to create globally unique identifier. </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:p>If <xd:i>docinfo:dpsi[@id-string]</xd:i> is not present, the dpsi value
					must be captured from one of the following sources:</xd:p>
            <xd:ul>
               <xd:li>The value in
								<xd:i>docinfo/docinfo:lbu-meta/docinfo:metaitem[@name="DPSI"]/@value</xd:i>
               </xd:li>
               <xd:li>The value in
							<xd:i>docinfo/docinfo:custom-metafields/docinfo:custom-metafield[@name="dpsi"]</xd:i>
               </xd:li>
               <xd:li>The LBU manifest file</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:dpsi id-string="008P"/&gt;
&lt;docinfo:doc-id&gt;VIC_ACT_1998-25_PT1&lt;/docinfo:doc-id&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;dc:identifier lnmeta:identifier-scheme="DOC-ID"&gt;008P-VIC_ACT_1998-25_PT1&lt;/dc:identifier&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:dpsi id-string="0062"/&gt;
&lt;docinfo:doc-id&gt;CA00000005222733&lt;/docinfo:doc-id&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;dc:identifier lnmeta:identifier-scheme="DOC-ID"&gt;0062-CA00000005222733&lt;/dc:identifier&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Source XML - Example for UK content</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:doc-id&gt;5B323030395D2D312D41432E3131&lt;/docinfo:doc-id&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML - Example for UK content</xd:b>
         </xd:p>
         <xd:pre>

&lt;dc:identifier lnmeta:identifier-scheme="DOC-ID"&gt;0GNE-5B323030395D2D312D41432E3131&lt;/dc:identifier&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>In the above example <xd:b>0GNE</xd:b> is the dpsi value, which will be captured from LBU
				manifest file.</xd:p>
         <xd:p>
            <xd:b>Source XML - Example for CA content with the dpsi value in
						<xd:i>docinfo/docinfo:lbu-meta/docinfo:metaitem[@name="DPSI"]/@value</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo&gt;
    ...
    &lt;docinfo:doc-id&gt;CA00000000450962&lt;/docinfo:doc-id&gt;
    ...
    &lt;docinfo:lbu-meta&gt;
        &lt;docinfo:metaitem name="SRCNAME" value="ACFH"/&gt;
        &lt;docinfo:metaitem name="SRCDOCNO" value="00018000"/&gt;
        &lt;docinfo:metaitem name="DPSI" value="03MN"/&gt;
    &lt;/docinfo:lbu-meta&gt;
    ...
&lt;/docinfo&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML - Example for CA content</xd:b>
         </xd:p>
         <xd:pre>

&lt;dc:identifier lnmeta:identifier-scheme="DOC-ID"&gt;03MN-CA00000000450962&lt;/dc:identifier&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Source XML - Example for CA content with the dpsi value in
						<xd:i>docinfo/docinfo:custom-metafields/docinfo:custom-metafield[@name="dpsi"]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo&gt;
    ...
    &lt;docinfo:doc-id&gt;474&lt;/docinfo:doc-id&gt;
    ...
    &lt;docinfo:custom-metafields&gt;
         &lt;docinfo:custom-metafield name="dpsi"&gt;03EX&lt;/docinfo:custom-metafield&gt;
    &lt;/docinfo:custom-metafields&gt;
    ...
&lt;/docinfo&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML - Example for CA content</xd:b>
         </xd:p>
         <xd:pre>

&lt;dc:identifier lnmeta:identifier-scheme="DOC-ID"&gt;03EX-474&lt;/dc:identifier&gt;

		</xd:pre>
         <!--Changes2014-06-23: Note and Example removed - For CA05 Acts and
						Bills- Mapping in dc:identifier for act-no and chunk-no. Db issue #14642014-05-21:For CA05 Acts and Bills- Mapping in dc:identifier for act-no and chunk-no.. Db issue #1464 2013-03-20: Updated the information on handling the
						situation when docinfo:dpsi[@id-string] is absent with
						instructions to get the dpsi from
							docinfo/docinfo:custom-metafields/docinfo:custom-metafield[@name="dpsi"].2012-10-05: Example added for UK content.2012-12-04: Added a note and updated target example for UK content.2012-12-20: Updated the information on handling the situation when
						docinfo:dpsi[@id-string] is absent with instructions to
					get the dpsi from
						docinfo/docinfo:lbu-meta/docinfo:metaitem[@name="DPSI"]/@value
					if possible. Added an example of CA content with the dpsi in
						docinfo/docinfo:lbu-meta/docinfo:metaitem[@name="DPSI"]/@value.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.doc-id-LxAdv-dcidentifier_lnmetaidentifier-scheme.dita  -->
   <xsl:template match="docinfo:doc-id"><!--  Original Target XPath:  dc:identifier[@lnmeta:identifier-scheme]   -->
      <dc:identifier lnmeta:identifier-scheme="DOC-ID">
         <xsl:choose>
            <xsl:when test="../docinfo:dpsi/@id-string">
               <xsl:value-of select="../docinfo:dpsi/@id-string"/>
            </xsl:when>
            <xsl:when test="../docinfo:dpsi">
               <xsl:value-of select="../docinfo:dpsi"/>
            </xsl:when>
            <xsl:when test="..//docinfo:custom-metafield[ lower-case(@name) = 'dpsi' ]">
               <xsl:value-of select="..//docinfo:custom-metafield[ lower-case(@name) = 'dpsi' ]"/>
            </xsl:when>
            <!-- Vikas Rohilla : updated for the docinfo:metaitem dpsi				-->
            <xsl:when test="..//docinfo:metaitem[ lower-case(@name) = 'dpsi' ]">
               <xsl:value-of select="..//docinfo:metaitem[ lower-case(@name) = 'dpsi' ]/@value"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:value-of select="$dpsi"/>
            </xsl:otherwise>
         </xsl:choose>
         <xsl:text>-</xsl:text>
         <xsl:apply-templates/>
      </dc:identifier>
      <xsl:if test="$streamID=('AU16', 'AU17', 'AU19CA', 'NZ02', 'NZ07-DN', 'NZ14')">
         <xsl:choose>
            <xsl:when test="ends-with(., 'CTHLEG_') or ends-with(., '_CTH') or starts-with(., 'CTHLEG_')">
               <dc:coverage>
                  <location:country codescheme="ISO-3166-1" countrycode="AU">AU</location:country>
               </dc:coverage>
            </xsl:when>
            <xsl:when test="ends-with(., 'NSWLEG_') or ends-with(., '_NSW') or starts-with(., 'NSWLEG_')">
               <dc:coverage>
                  <location:state codescheme="ISO-3166-2" statecode="AU-NS">NSW</location:state>
               </dc:coverage>
            </xsl:when>
            <xsl:when test="ends-with(., 'QLDLEG_') or ends-with(., '_QLD') or starts-with(., 'QLDLEG_')">
               <dc:coverage>
                  <location:state codescheme="ISO-3166-2" statecode="AU-QL">QLD</location:state>
               </dc:coverage>
            </xsl:when>
            <xsl:when test="ends-with(., 'SALEG_') or ends-with(., '_SA') or starts-with(., 'SALEG_')">
               <dc:coverage>
                  <location:state codescheme="ISO-3166-2" statecode="AU-SA">SA</location:state>
               </dc:coverage>
            </xsl:when>
            <xsl:when test="ends-with(., 'TASLEG_') or ends-with(., '_TAS') or starts-with(., 'TASLEG_')">
               <dc:coverage>
                  <location:state codescheme="ISO-3166-2" statecode="AU-TS">TAS</location:state>
               </dc:coverage>
            </xsl:when>
            <xsl:when test="ends-with(., 'VICLEG_') or ends-with(., '_VIC') or starts-with(., 'VICLEG_')">
               <dc:coverage>
                  <location:state codescheme="ISO-3166-2" statecode="AU-VI">VIC</location:state>
               </dc:coverage>
            </xsl:when>
            <xsl:when test="ends-with(., 'WALEG_') or ends-with(., '_WA') or starts-with(., 'WALEG_')">
               <dc:coverage>
                  <location:state codescheme="ISO-3166-2" statecode="AU-WA">WA</location:state>
               </dc:coverage>
            </xsl:when>
            <xsl:when test="ends-with(., 'NTLEG_') or ends-with(., '_NT') or starts-with(., 'NTLEG_')">
               <dc:coverage>
                  <location:state codescheme="ISO-3166-2" statecode="AU-NT">NT</location:state>
               </dc:coverage>
            </xsl:when>
            <xsl:when test="ends-with(., 'ACTLEG_') or ends-with(., '_ACT') or starts-with(., 'ACTLEG_')">
               <dc:coverage>
                  <location:state codescheme="ISO-3166-2" statecode="AU-CT">ACT</location:state>
               </dc:coverage>
            </xsl:when>
            <xsl:otherwise/>
         </xsl:choose>
      </xsl:if>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>Since <xd:b>dc:language</xd:b> is not used, <xd:i>docinfo:doc-lang[@lang]</xd:i> only becomes part of <xd:b>@xml:lang</xd:b> as described in <xd:a href="Rosetta_docinfo.doc-lang-and-doc-country-LxAdv-ROOT_xml.lang.dita">Target @xml:lang</xd:a> and is otherwise suppressed. </xd:p>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.doc-lang-LxAdv-ROOT_xmllang.dita  -->
   <xsl:template name="xml_lang"><!-- This template creates @xml:lang from doc-lang and doc-country 
                    however there is an NZ special case --><!-- 2017-10-03 - MDS: Added handling for $streamID starts with 'HK' -->
      <xsl:attribute name="xml:lang"
                     select=" concat(  //docinfo:doc-lang/@lang ,                     '-' ,                     if (//docinfo:doc-country/@iso-cc = 'AU' or ($streamID='AU08')) then                      if (//case:headnote/case:info/case:courtinfo//case:juris = 'NZ') then                       'NZ'                      else                       'AU'                     else                       if(starts-with($streamID, 'HK')) then                         if (//docinfo:doc-country/@iso-cc) then //docinfo:doc-country/@iso-cc                        else 'HK'                       else                      //docinfo:doc-country/@iso-cc                    ) "/>
   </xsl:template>
   <!--  un-comment out the following template rule to perform unit testing via XSpec file   -->   <!--xsl:template match="docinfo">
		<test>
			<xsl:call-template name="xml_lang"/>
		</test>
	</xsl:template-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:dpsi[@id-string]</xd:i> becomes <xd:b>doc:metadata/doc:docinfo/doc:legacy-metadata[@metadatasource="lbu-meta"]/meta/metaitem</xd:b>
					with attributes <xd:b>@name="dpsi"</xd:b> and <xd:b>@value</xd:b> set to <xd:i>@id-string</xd:i>. Note that only one <xd:b>meta</xd:b> is created for the various <xd:b>metaitem</xd:b> child elements that are created
					while processing <xd:i>docinfo</xd:i> and <xd:i>docinfo:dpsi</xd:i>. For more information, see the
					instructions for <xd:a href="Rosetta_docinfo-LxAdv-doc.metadata_doc.docinfo.dita">docinfo</xd:a>.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:i>@id-string</xd:i> value is also used in mapping
								for <xd:b>docinfo:doc-id</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>If <xd:i>docinfo:dpsi[@id-string]</xd:i> is not present,
								the dpsi value must be captured from one of the following sources: <xd:ul>
               <xd:li>The value in <xd:i>docinfo/docinfo:lbu-meta/docinfo:metaitem[@name="DPSI"]/@value</xd:i>
               </xd:li>
               <xd:li>The LBU manifest file</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML with no attributes on docinfo</xd:b>
         </xd:p>
         <xd:pre>

	&lt;docinfo&gt;
		&lt;docinfo:dpsi id-string="008P"/&gt;
		.................
		.................
	&lt;/docinfo&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;doc:docinfo doc-content-country="AU"&gt;
  &lt;doc:legacy-metadata metadatasource="lbu-meta"&gt;
	&lt;meta&gt;
	  &lt;metaitem name="dpsi" value="008P"/&gt;
	&lt;/meta&gt;
  &lt;/doc:legacy-metadata&gt;
	.................
	.................
&lt;/docinfo&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML with an attribute on docinfo</xd:b>
         </xd:p>
         <xd:pre>

    &lt;docinfo partitionnum="2"&gt;
		&lt;docinfo:dpsi id-string="006F"&gt;
		.................
		.................
	&lt;/docinfo&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;doc:docinfo doc-content-country="AU"&gt;
  &lt;doc:legacy-metadata metadatasource="lbu-meta"&gt;
	&lt;meta&gt;
		 &lt;metaitem name="partitionnum" value="2"/&gt; 
		&lt;metaitem name="dpsi" value="006F"/&gt;
	&lt;/meta&gt;
  &lt;/doc:legacy-metadata&gt;
	.................
	.................
&lt;/docinfo&gt;


	</xd:pre>
         <!--Changes2012-12-20: Updated the information on handling the situation when
					docinfo:dpsi[@id-string] is absent with
					instructions to get the dpsi from docinfo/docinfo:lbu-meta/docinfo:metaitem[@name="DPSI"]/@value if
					possible.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="docinfo:dpsi[@id-string]">
      <metaitem>
         <xsl:attribute name="name">dpsi</xsl:attribute>
         <xsl:attribute name="value" select="@id-string"/>
      </metaitem>
   </xsl:template>
   <!-- docinfo/docinfo:lbu-meta/docinfo:metaitem[@name="DPSI"]/@value -->
   <xsl:template match="docinfo:dpsi[not(@id-string) and ../docinfo:lbu-meta/docinfo:metaitem[@name='DPSI']]">
      <metaitem>
         <xsl:attribute name="name">dpsi</xsl:attribute>
         <xsl:attribute name="value"
                        select="../docinfo:lbu-meta/docinfo:metaitem[@name='DPSI']/@value"/>
      </metaitem>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:hier</xd:i> becomes <xd:b>doc:hier</xd:b>, with
					these children: <xd:ul>
               <xd:li>
                  <xd:i>docinfo:hier/docinfo:hierlev</xd:i> becomes
								<xd:b>doc:hier/doc:hierlev</xd:b>. </xd:li>
               <xd:li>
                  <xd:i>docinfo:hier/docinfo:hierlev/heading</xd:i> becomes
								<xd:b>doc:hier/doc:hierlev/heading</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>docinfo:hier/docinfo:hierlev/heading/title</xd:i>
							becomes <xd:b>doc:hier/doc:hierlev/heading/title</xd:b>
               </xd:li>
            </xd:ul>
            <xd:p>
               <xd:b>Note: </xd:b>The attribute <xd:i>@role</xd:i> is suppressed. The nesting
						level of a <xd:b>doc:hierlev</xd:b> determines its role in the
						hierarchy.</xd:p>
            <xd:p>
               <xd:b>Note: </xd:b>if <xd:i>nl</xd:i> is coming as child of
							<xd:i>docinfo:hierlev/heading/title</xd:i> then it should be
						replaced by a white space in the target -<xd:b> Applicable for CA06-CA07 </xd:b>
            </xd:p>
            <xd:p>
               <xd:b>Note: </xd:b>
               <xd:b> Applicable for CA05-CA08: </xd:b> Attribute
							<xd:i>docinfo:hierlev/@exclude-from-displayunits="true"</xd:i>
						should be converted into attribute
							<xd:b>doc:hier/@includeintoc="false"</xd:b>.</xd:p>
            <xd:p>
               <xd:b>Note: </xd:b>
               <xd:b>Applicable for CA09:</xd:b>
               <xd:i>title</xd:i> may contain <xd:i>num</xd:i>.
						Suppress <xd:i>num</xd:i> tag but output content. For example:
							<xd:i>&lt;docinfo:hier&gt;&lt;docinfo:hierlev&gt;&lt;heading&gt;&lt;title&gt;&lt;num&gt;</xd:i>6F1<xd:i>&lt;/num&gt;</xd:i>
						Appellant Form
							(A1)<xd:i>&lt;/title&gt;&lt;/heading&gt;&lt;/docinfo:hierlev&gt;&lt;/docinfo:hier&gt;</xd:i>
						becomes
							<xd:b>&lt;doc:hier&gt;&lt;doc:hierlev&gt;&lt;heading&gt;&lt;title&gt;</xd:b>6F1
						Appellant Form
							(A1)<xd:b>&lt;/title&gt;&lt;/heading&gt;&lt;/doc:hierlev&gt;&lt;/doc:hier&gt;</xd:b>
            </xd:p>
            <xd:p>
               <xd:b>Note: </xd:b>Suppress <xd:i>inlineobject</xd:i> if it's found within
							<xd:i>docinfo:hierlev</xd:i> element. i.e,
							<xd:i>/docinfo/docinfo:hier/docinfo:hierlev/docinfo:hierlev/docinfo:hierlev/heading/inlineobject</xd:i>,
							<xd:i>/docinfo/docinfo:hier/docinfo:hierlev/docinfo:hierlev/docinfo:hierlev/heading/subtitle/inlineobject</xd:i>
						and
							<xd:i>/docinfo/docinfo:hier/docinfo:hierlev/docinfo:hierlev/docinfo:hierlev/heading/title/inlineobject</xd:i>.</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo:hier&gt; &lt;docinfo:hierlev role="ancestor"&gt;
					&lt;heading&gt; &lt;title&gt;Victoria Acts&lt;/title&gt; &lt;/heading&gt;
					&lt;docinfo:hierlev role="ancestor"&gt; &lt;heading&gt;
					&lt;title&gt;E&lt;/title&gt; &lt;/heading&gt; &lt;docinfo:hierlev
					role="ancestor"&gt; &lt;heading&gt; &lt;title&gt;EL&lt;/title&gt;
					&lt;/heading&gt; &lt;docinfo:hierlev role="ancestor"&gt; &lt;heading&gt;
					&lt;title&gt;ELECTRICITY SAFETY ACT 1998&lt;/title&gt; &lt;/heading&gt;
					&lt;docinfo:hierlev role="me"&gt; &lt;heading&gt; &lt;title&gt;ELECTRICITY
					SAFETY ACT 1998�&lt;/title&gt; &lt;/heading&gt; &lt;/docinfo:hierlev&gt;
					&lt;/docinfo:hierlev&gt; &lt;/docinfo:hierlev&gt; &lt;/docinfo:hierlev&gt;
					&lt;/docinfo:hierlev&gt; &lt;/docinfo:hier&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;doc:hier&gt; &lt;doc:hierlev&gt; &lt;heading&gt;
					&lt;title&gt;Victoria Acts&lt;/title&gt; &lt;/heading&gt; &lt;doc:hierlev&gt;
					&lt;heading&gt; &lt;title&gt;E&lt;/title&gt; &lt;/heading&gt;
					&lt;doc:hierlev&gt; &lt;heading&gt; &lt;title&gt;EL&lt;/title&gt;
					&lt;/heading&gt; &lt;doc:hierlev&gt; &lt;heading&gt; &lt;title&gt;ELECTRICITY
					SAFETY ACT 1998&lt;/title&gt; &lt;/heading&gt; &lt;doc:hierlev&gt;
					&lt;heading&gt; &lt;title&gt;ELECTRICITY SAFETY ACT 1998�&lt;/title&gt;
					&lt;/heading&gt; &lt;/doc:hierlev&gt; &lt;/doc:hierlev&gt; &lt;/doc:hierlev&gt;
					&lt;/doc:hierlev&gt; &lt;/doc:hierlev&gt; &lt;/doc:hier&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML <xd:i>nl</xd:i> as child of
						<xd:i>docinfo:hierlev/heading/title</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo:hier&gt; &lt;docinfo:hierlev role="ancestor"&gt;
					&lt;heading&gt; &lt;title&gt;Young Offenders Act (Canada)&lt;/title&gt;
					&lt;/heading&gt; &lt;docinfo:hierlev role="ancestor"&gt; &lt;heading&gt;
					&lt;title&gt;RULES OF YOUTH COURT REGULATION&lt;/title&gt; &lt;/heading&gt;
					&lt;docinfo:hierlev role="ancestor"&gt; &lt;heading&gt;
					&lt;title&gt;SCHEDULE&lt;/title&gt; &lt;/heading&gt; &lt;docinfo:hierlev
					role="me"&gt; &lt;heading&gt; &lt;title&gt;ROVINCIAL COURT OF
					ALBERTA&lt;nl/&gt;FORM 100&lt;nl/&gt;IN THE YOUTH DIVISION OF THE PROVINCIAL
					COURT OF ALBERTA&lt;nl/&gt;NOTICE OF APPLICATION &lt;/title&gt; &lt;/heading&gt;
					&lt;/docinfo:hierlev&gt; &lt;/docinfo:hierlev&gt; &lt;/docinfo:hierlev&gt;
					&lt;/docinfo:hierlev&gt; &lt;/docinfo:hier&gt; </xd:pre>
         <xd:p>
            <xd:b>
               <xd:b>Target XML</xd:b>
               <xd:i>nl</xd:i> as child of
						<xd:i>docinfo:hierlev/heading/title</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre> &lt;doc:hier&gt; &lt;doc:hierlev&gt; &lt;heading&gt; &lt;title&gt;Young
					Offenders Act (Canada)&lt;/title&gt; &lt;/heading&gt; &lt;doc:hierlev&gt;
					&lt;heading&gt; &lt;title&gt;RULES OF YOUTH COURT REGULATION&lt;/title&gt;
					&lt;/heading&gt; &lt;doc:hierlev&gt; &lt;heading&gt;
					&lt;title&gt;SCHEDULE&lt;/title&gt; &lt;/heading&gt; &lt;doc:hierlev&gt;
					&lt;heading&gt; &lt;title&gt;ROVINCIAL COURT OF ALBERTA FORM 100 IN THE YOUTH
					DIVISION OF THE PROVINCIAL COURT OF ALBERTA NOTICE OF APPLICATION &lt;/title&gt;
					&lt;/heading&gt; &lt;/doc:hierlev&gt; &lt;/doc:hierlev&gt; &lt;/doc:hierlev&gt;
					&lt;/doc:hierlev&gt; &lt;/doc:hierlev&gt; </xd:pre>
         <!--Changes2015-03-25: Added note with rule for
							title/num. Suppress num
						tag but output content. Applicable for CA09 only. RFA 2249.2015-01-23: Added note to convert
							docinfo:hierlev/@exclude-from-displayunits="true"
						into doc:hier/@includeintoc="false". Applicable
					for CA05-CA08, RFA #21412015-01-13: Added a note to repalce
							nl to a white space when
							nl is coming as child of
							docinfo:hierlev/heading/title Applicable for
					CA06-CA07 , RFA #2108-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.hier-LxAdv-doc.hier.dita  -->
   <xsl:variable name="Title_Dpsi_Code_CA05">
      <codes>
         <code key="0U95" value="Statutes"/>
         <code key="0U9A" value="Former Statutes"/>
         <code key="0U9S" value="Statutes"/>
         <code key="0U9V" value="Statutes"/>
         <code key="0U9X" value="Former Statutes"/>
         <code key="0UA4" value="Statutes"/>
         <code key="0UA6" value="Former Statutes"/>
         <code key="0UAN" value="Statutes"/>
         <code key="0UAP" value="Former Statutes"/>
         <code key="0UCM" value="Statutes"/>
         <code key="0UCO" value="Former Statutes"/>
         <code key="0UCV" value="Statutes"/>
         <code key="0UCX" value="Former Statutes"/>
         <code key="0UD9" value="Statutes"/>
         <code key="0UDB" value="Former Statutes"/>
         <code key="0UDF" value="Employment Insurance Statutes"/>
         <code key="0UDL" value="Statutes"/>
         <code key="0UDM" value="Statutes"/>
         <code key="0UDT" value="Employment Standards Statutes"/>
         <code key="0UDV" value="Employment Standards Former Statutes"/>
         <code key="0UEE" value="Statutes"/>
         <code key="0UEF" value="Former Statutes"/>
         <code key="0UFB" value="Human Rights/Equity Issues"/> Statutes"/&gt;
			<code key="0UFD" value="Human Rights/Equity Issues"/> Former Statutes"/&gt;
			<code key="0UFT" value="Statutes"/>
         <code key="0UHJ" value="Statutes"/>
         <code key="0UHL" value="Former Statutes"/>
         <code key="0UI1" value="Labour Relations Statutes"/>
         <code key="0UI3" value="Labour Relations Former Statutes"/>
         <code key="0UJ2" value="Statutes"/>
         <code key="0UJ3" value="Former Statutes"/>
         <code key="0UJ8" value="Statutes"/>
         <code key="0UJ9" value="Former Statutes"/>
         <code key="0UN0" value="Lois"/>
         <code key="0UN5" value="Lois"/>
         <code key="0UNO" value="Lois"/>
         <code key="0UNZ" value="Lois"/>
         <code key="0UOD" value="Lois"/>
         <code key="0UOJ" value="Lois"/>
         <code key="0UOS" value="Lois"/>
         <code key="0UPV" value="Statutes"/>
         <code key="0UPX" value="Former Statutes"/>
         <code key="0US1" value="Former Statutes"/>
         <code key="0US6" value="Lois"/>
         <code key="0USC" value="Archives - Lois"/>
         <code key="0UTB" value="Lois"/>
         <code key="0UVY" value="Acts"/>
         <code key="0USN" value="Former Acts"/>
      </codes>
   </xsl:variable>
   <xsl:variable name="Title_Dpsi_Code_CA10">
      <codes>
         <code key="0U91" value="Commentary"/>
         <code key="0U9L" value="Commentary"/>
         <code key="0U9M" value="Commentary"/>
         <code key="0UA0" value="Commentary"/>
         <code key="0UAK" value="Commentary"/>
         <code key="0UB1" value="Employment Insurance Commentary"/>
         <code key="0UCG" value="Commentary"/>
         <code key="0UCI" value="Commentary"/>
         <code key="0UCS" value="Commentary"/>
         <code key="0UDE" value="Editorial Board &amp; Case Comments"/>
         <code key="0UDJ" value="Commentary"/>
         <code key="0UDQ" value="Topical Index to Summaries"/>
         <code key="0UEB" value="Commentary"/>
         <code key="0UFA" value="Human Rights/Equity Issues Commentary"/>
         <code key="0UFQ" value="Commentary"/>
         <code key="0UHE" value="Commentary"/>
         <code key="0UHG" value="Bulletins and Social Security Agreements"/>
         <code key="0UHU" value="Employment Standards Commentary"/>
         <code key="0UHZ" value="Labour Relations Commentary"/>
         <code key="0UJ0" value="Commentary"/>
         <code key="0UJ4" value="Commentary"/>
         <code key="0UMX" value="Commentaires, Index et Abréviations"/>
         <code key="0UN3" value="Commentaires, Index et Abréviations"/>
         <code key="0UNN" value="Commentaires, bibliographies et index"/>
         <code key="0UNY" value="Commentaires, Index et Abréviations"/>
         <code key="0UO5" value="Commentaires, Index et Tables"/>
         <code key="0UOI" value="Commentaires, Index et Abréviations"/>
         <code key="0UOM" value="Modèles de procédures"/>
         <code key="0UOR" value="Commentaires, Index, Abréviations et Adresses"/>
         <code key="0UPT" value="Commentary"/>
         <code key="0US5" value="Équipe de rédaction, tables, grilles et index"/>
         <code key="0USQ" value="Jurisprudence - Annotations de Dubois et Schneider"/>
         <code key="0UTA" value="Commentaires et Indexes"/>
         <code key="0V21" value="MFDA Staff Notices"/>
         <code key="0V2H" value="Montreal Stock Exchange Charter &amp; List of Fees"/>
         <code key="0V5X" value="Quantum of Damages Table"/>
         <code key="0V5Y" value="Code Citator"/>
         <code key="0VNX" value="Securities Commissions"/>
      </codes>
   </xsl:variable>
   <xsl:variable name="Title_Dpsi_Code">
      <codes>
         <code key="0U96" value="Regulations"/>
         <code key="0U9B" value="Former Regulations"/>
         <code key="0U9T" value="Regulations"/>
         <code key="0U9W" value="Regulations"/>
         <code key="0U9Y" value="Former Regulations"/>
         <code key="0UA5" value="Regulations"/>
         <code key="0UA7" value="Former Regulations"/>
         <code key="0UAO" value="Regulations"/>
         <code key="0UAQ" value="Former Regulations"/>
         <code key="0UCN" value="Regulations"/>
         <code key="0UCP" value="Former Regulations"/>
         <code key="0UCW" value="Regulations"/>
         <code key="0UCY" value="Former Regulations"/>
         <code key="0UDA" value="Regulations"/>
         <code key="0UDC" value="Former Regulations"/>
         <code key="0UDG" value="Employment Insurance Regulations"/>
         <code key="0UDN" value="Regulations"/>
         <code key="0UDO" value="Regulations"/>
         <code key="0UDU" value="Employment Standards Regulations"/>
         <code key="0UEG" value="Regulations"/>
         <code key="0UEJ" value="Employment Standards Former Regulations"/>
         <code key="0UFC" value="Human Rights/Equity Issues Regulations"/>
         <code key="0UFE" value="Human Rights/Equity Issues Former Regulations"/>
         <code key="0UFU" value="Regulations"/>
         <code key="0UHK" value="Regulations"/>
         <code key="0UHM" value="Former Regulations"/>
         <code key="0UI2" value="Labour Relations Regulations"/>
         <code key="0UI4" value="Labour Relations Former Regulations"/>
         <code key="0UJA" value="Regulations"/>
         <code key="0UJB" value="Former Regulations"/>
         <code key="0UN6" value="Règlements"/>
         <code key="0UNP" value="Règlements"/>
         <code key="0UOE" value="Règlements"/>
         <code key="0UOK" value="Règlements"/>
         <code key="0UOT" value="Règlements"/>
         <code key="0UOV" value="Archives - Règlements"/>
         <code key="0UPW" value="Regulations"/>
         <code key="0UPY" value="Former Regulations"/>
         <code key="0US7" value="Règlements"/>
         <code key="0USD" value="Archives - Règlements"/>
         <code key="0USP" value="Former Regulations"/>
         <code key="0UTC" value="Règlements"/>
         <code key="0UVZ" value="Regulations"/>
         <code key="0VNX" value="Securities Commissions"/>
         <code key="0U98" value="CSA Regulatory Documents"/>
         <code key="0USA" value="Règles de pratique"/>
         <code key="0UW1" value="Codes of Practice"/>
         <code key="0V1Y" value="Universal Market Integrity Rules and Policies"/>
         <code key="0V22" value="MFDA By-laws, Rules and Policies"/>
         <code key="0V24" value="ICE Futures Canada Inc. Rules"/>
         <code key="0V26" value="NASDAQ Marketplace Rules"/>
         <code key="0V28" value="CNSX Rules, Policies and Notices"/>
         <code key="0V2A" value="TSX Rule Book and Policies"/>
         <code key="0V2B" value="TSX Venture Exchange Rules and Policies"/>
         <code key="0V2F" value="NEX Policies"/>
         <code key="0V2I"
               value="Montreal Stock Exchange Rules, Policies, Guidelines and Fees"/>
         <code key="0U9C" value="Forms"/>
         <code key="0U9R" value="Forms"/>
         <code key="0UAR" value="Forms"/>
         <code key="0UCU" value="Forms"/>
         <code key="0UCZ" value="Forms &amp; Precedents"/>
         <code key="0UDS" value="Employment Standards Forms"/>
         <code key="0UDW" value="Government and Agency Documents"/>
         <code key="0UEH" value="Forms"/>
         <code key="0UHF" value="Government and Agency Documents"/>
         <code key="0UI0" value="Labour Relations Forms"/>
         <code key="0UJC" value="Forms"/>
         <code key="0UOA" value="Formulaires"/>
         <code key="0UQ0" value="Forms"/>
         <code key="0USW" value="Formulaires"/>
         <code key="0V20"
               value="IIROC &amp; Market Integrity Notices, Guides, and Updates"/>
         <code key="0V23" value="MFDA Forms"/>
         <code key="0V25" value="ICE Futures Canada Inc. Annexes"/>
         <code key="0V29" value="CNSX Forms"/>
         <code key="0V2D"
               value="TSX Venture Exchange Corporate Finance Manual Appendices and Forms"/>
         <code key="0V2G" value="NEX Forms and Appendices"/>
         <code key="0V2J" value="Montreal Stock Exchange Forms"/>
         <!-- CA01 Start		-->
         <code key="0UW2" value="Cases"/>
         <code key="0UXQ" value="Cases"/>
         <code key="0UXS" value="Cases"/>
         <code key="0UXT" value="Summaries (Appeals &amp; Cases)"/>
         <code key="0UXU" value="Cases"/>
         <code key="0UXV" value="Cases"/>
         <code key="0UXW" value="Cases"/>
         <code key="0UXX" value="Cases"/>
         <code key="0UXZ" value="Cases"/>
         <code key="0UY0" value="Cases"/>
         <code key="0UY1" value="Cases"/>
         <code key="0UY3" value="Cases"/>
         <code key="0UY4" value="Jurisprudence - Texte intégraux et résumés archivés"/>
         <code key="0UY6" value="Jurisprudence"/>
         <code key="0UY7" value="Résumés de jurisprudence"/>
         <code key="0UY8" value="Jurisprudence sélectionnée"/>
         <code key="0UY9" value="Jurisprudence - Textes intégraux"/>
         <code key="0UYC" value="Cases"/>
         <code key="0V45" value="Cases"/>
         <code key="0V47" value="Cases"/>
         <code key="0V48" value="Cases"/>
         <code key="0V49" value="Cases"/>
         <!-- CA01 End		-->
      </codes>
   </xsl:variable>
   <xsl:key name="dpsititle" match="*:code" use="string(@key)"/>
   <xsl:template match="docinfo:hier"><!--  Original Target XPath:  doc:hier   -->
      <doc:hier>
         <xsl:if test="$streamID = ('CA05', 'CA06', 'CA07', 'CA08')">
            <xsl:if test="child::docinfo:hierlev/@exclude-from-displayunits = 'true'">
               <xsl:attribute name="includeintoc">
                  <xsl:text>false</xsl:text>
               </xsl:attribute>
            </xsl:if>
         </xsl:if>
         <!--  @SBy:  process the first descendant docinfo:hierlev/@exclude-from-displayunits where that attribute is true.  So if this attribute appears on any docinfo:hierlev and is true, then @includeintoc will be set to false  -->
         <!-- UK06 Requires indicators of first and last  -->
         <xsl:if test="$streamID = ('UK06','UK07')">
            <proc:processinginfo>
               <xsl:attribute name="process">LAToCBuilder</xsl:attribute>
               <xsl:choose>
                  <xsl:when test="/LEGDOC/docinfo/docinfo:custom-metafields/docinfo:custom-metafield[@name='is-first-document-in-enactment'] = 'true'">
                     <proc:param name="firstLegisItem" value="true"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <proc:param name="firstLegisItem" value="false"/>
                  </xsl:otherwise>
               </xsl:choose>
               <xsl:choose>
                  <xsl:when test="/LEGDOC/docinfo/docinfo:custom-metafields/docinfo:custom-metafield[@name='is-last-document-in-enactment'] = 'true'">
                     <proc:param name="lastLegisItem" value="true"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <proc:param name="lastLegisItem" value="false"/>
                  </xsl:otherwise>
               </xsl:choose>
            </proc:processinginfo>
         </xsl:if>
         <!--			<xsl:if test=" $streamID = ( 'CA06' , 'CA07' , 'CA08' ) ">
				<xsl:apply-templates select="descendant::docinfo:hierlev[ @exclude-from-displayunits = 'true' ][1]/@exclude-from-displayunits"/>
			</xsl:if>-->
         <xsl:apply-templates select="@* | node()"/>
      </doc:hier>
   </xsl:template>
   <!-- @Vikas Gupta: Template to match the docinfo:hier for the $streamID ='CA06','CA07','CA08' 	-->
   <xsl:template match="docinfo:hier[$streamID = ('CA05','CA06', 'CA07', 'CA08', 'CA10')]"><!--  Original Target XPath:  doc:hier   -->
      <xsl:variable name="dpsi_value">
         <xsl:value-of select="//docinfo:custom-metafield[@name = 'dpsi']"/>
      </xsl:variable>
      <xsl:variable name="dpsi_value_CA10">
         <xsl:value-of select="substring(/COMMENTARYDOC/docinfo/docinfo:doc-id,1,4)"/>
      </xsl:variable>
      <doc:hier><!--  @SBy:  process the first descendant docinfo:hierlev/@exclude-from-displayunits where that attribute is true.  So if this attribute appears on any docinfo:hierlev and is true, then @includeintoc will be set to false  -->
         <xsl:choose>
            <xsl:when test="($dpsi_value = $Title_Dpsi_Code//@key) and $streamID!=('CA06', 'CA07', 'CA08')">
               <doc:hierlev>
                  <heading>
                     <title>
                        <xsl:value-of select="key('dpsititle', //docinfo:custom-metafield[@name = 'dpsi'], $Title_Dpsi_Code)/@value"/>
                     </title>
                  </heading>
                  <xsl:apply-templates select="descendant::docinfo:hierlev[@exclude-from-displayunits = 'true'][1]/@exclude-from-displayunits"/>
                  <xsl:apply-templates select="@* | node()"/>
               </doc:hierlev>
            </xsl:when>
            <xsl:when test="($dpsi_value = $Title_Dpsi_Code_CA05//@key) and $streamID='CA05'">
               <doc:hierlev>
                  <heading>
                     <title>
                        <xsl:value-of select="key('dpsititle', //docinfo:custom-metafield[@name = 'dpsi'], $Title_Dpsi_Code_CA05)/@value"/>
                     </title>
                  </heading>
                  <xsl:apply-templates select="descendant::docinfo:hierlev[@exclude-from-displayunits = 'true'][1]/@exclude-from-displayunits"/>
                  <xsl:apply-templates select="@* | node()"/>
               </doc:hierlev>
            </xsl:when>
            <xsl:when test="($dpsi_value = $Title_Dpsi_Code_CA10//@key or $dpsi_value_CA10=$Title_Dpsi_Code_CA10//@key) and $streamID='CA10'">
               <doc:hierlev>
                  <heading>
                     <title>
                        <xsl:value-of select="key('dpsititle', substring(/COMMENTARYDOC/docinfo/docinfo:doc-id,1,4), $Title_Dpsi_Code_CA10)/@value"/>
                     </title>
                  </heading>
                  <xsl:apply-templates select="descendant::docinfo:hierlev[@exclude-from-displayunits = 'true'][1]/@exclude-from-displayunits"/>
                  <xsl:apply-templates select="@* | node()"/>
               </doc:hierlev>
            </xsl:when>
            <xsl:otherwise>
               <xsl:apply-templates select="descendant::docinfo:hierlev[@exclude-from-displayunits = 'true'][1]/@exclude-from-displayunits"/>
               <xsl:apply-templates select="@* | node()"/>
            </xsl:otherwise>
         </xsl:choose>
      </doc:hier>
   </xsl:template>
   <!-- @Vikas Rohilla: Template to match the docinfo:hier for the $streamID ='CA01' 	-->
   <xsl:template match="docinfo:hier[$streamID = 'CA01']">
      <xsl:variable name="dpsi_value">
         <xsl:value-of select="$dpsi"/>
      </xsl:variable>
      <doc:hier>
         <xsl:choose>
            <xsl:when test="$dpsi_value = $Title_Dpsi_Code//@key">
               <doc:hierlev>
                  <heading>
                     <title>
                        <xsl:value-of select="key('dpsititle', $dpsi_value, $Title_Dpsi_Code)/@value"/>
                     </title>
                  </heading>
                  <xsl:apply-templates select="node() | @*"/>
               </doc:hierlev>
            </xsl:when>
            <xsl:otherwise>
               <xsl:apply-templates select="node() | @*"/>
            </xsl:otherwise>
         </xsl:choose>
      </doc:hier>
   </xsl:template>

   <xsl:template match="docinfo:hier[$streamID = 'CA09']">
      <xsl:variable name="dpsi_value">
         <xsl:value-of select="$dpsi"/>
      </xsl:variable>
      <doc:hier>
         <xsl:choose>
            <xsl:when test="$dpsi_value = $Title_Dpsi_Code//@key">
               <doc:hierlev>
                  <heading>
                     <title>
                        <xsl:value-of select="key('dpsititle', $dpsi_value, $Title_Dpsi_Code)/@value"/>
                     </title>
                  </heading>
                  <xsl:apply-templates select="@* | node()"/>
               </doc:hierlev>
            </xsl:when>
            <xsl:otherwise>
               <xsl:apply-templates select="@* | node()"/>
            </xsl:otherwise>
         </xsl:choose>
      </doc:hier>
   </xsl:template>

   <xsl:template match="docinfo:hierlev"><!--  Original Target XPath:  doc:hier/doc:hierlev   -->
      <doc:hierlev><!--  @SBy:  @exclude-from-displayunits already taken care of in creating doc:hier/@includeintoc   -->
         <xsl:apply-templates select="@* except @exclude-from-displayunits"/>
         <xsl:apply-templates select="node()"/>
         <xsl:apply-templates select="following-sibling::*[1][self::docinfo:hierlev]"
                              mode="hierlevSibling"/>
      </doc:hierlev>
   </xsl:template>

   <xsl:template match="docinfo:hierlev[preceding-sibling::docinfo:hierlev]"
                 mode="hierlevSibling">
      <doc:hierlev>
         <xsl:apply-templates select="@* except @exclude-from-displayunits"/>
         <xsl:apply-templates select="node()"/>
         <xsl:apply-templates select="*[1][self::docinfo:hierlev]" mode="hierlevSibling"/>
      </doc:hierlev>
   </xsl:template>

   <xsl:template match="docinfo:hierlev[preceding-sibling::docinfo:hierlev]"/>
   <!-- Sudhanshu Srivastava : Handling attribute @display-name for UK06 -->
   <xsl:template match="docinfo:hierlev/@display-name[$streamID = ('UK06','UK07')]">
      <xsl:if test=". = 'act'">
         <xsl:attribute name="leveltype" select="'act'"/>
      </xsl:if>
      <xsl:if test=". = 'SI'">
         <xsl:attribute name="leveltype" select="'instrument'"/>
      </xsl:if>
      <xsl:if test=". = 'measure'">
         <xsl:attribute name="leveltype" select="'measure'"/>
      </xsl:if>
   </xsl:template>
   <!--			***		@SBy:  These requirements are covered via other modules:      ***

			<li><sourcexml>docinfo:hier/docinfo:hierlev/heading</sourcexml> becomes
					<targetxml>doc:hier/doc:hierlev/heading</targetxml>
			</li>
			<li><sourcexml>docinfo:hier/docinfo:hierlev/heading/title</sourcexml> becomes
					<targetxml>doc:hier/doc:hierlev/heading/title</targetxml>
			</li>  
	-->
   <xsl:template match="docinfo:hierlev/@role"/>

   <xsl:template match="docinfo:hierlev/heading/title/nl[$streamID = ('CA06', 'CA07')]"><!--  @SBy:  note that otherwise nl will become proc:nl which is permitted within title   -->
      <xsl:text> </xsl:text>
   </xsl:template>

   <xsl:template match="docinfo:hierlev/@exclude-from-displayunits[. = 'true']"><!--  Original Target XPath:  doc:hier/@includeintoc="false"   -->
      <xsl:attribute name="includeintoc" select="'false'"/>
   </xsl:template>
   <!--xsl:template match="docinfo:hierlev/@exclude-from-displayunits[ . != 'true' ]"/-->
   <xsl:template match="docinfo:hierlev/heading/title/num[$streamID = 'CA09']"><!--  @SBy:  note that otherwise num will become num which is permitted within title   --><!--  Original Target XPath:  doc:hierdoc:hierlevheadingtitle   -->
      <xsl:apply-templates select="@* | node()"/>
   </xsl:template>
   <!-- Sudhanshu Srivastava: create template for handling docinfo:hierlev for CA13. -->
   <xsl:template match="docinfo:hierlev[$streamID = 'CA13']/heading">
      <heading>
         <xsl:apply-templates select="@* | node()"/>
      </heading>
   </xsl:template>

   <xsl:template match="docinfo:hierlev[$streamID = 'CA13']/heading/title">
      <title>
         <xsl:apply-templates select="@* | node()"/>
      </title>
   </xsl:template>

   <xsl:template match="inlineobject[ancestor::docinfo:hierlev]"/>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:lbu-indexing-terms/docinfo:lbu-subj</xd:i> becomes 
		    <xd:b>classify:classification[@classscheme="lbu-subj"]/classify:classitem/classify:classitem-identifier/classify:classcode[@normval]</xd:b>. 
		    The content of <xd:i>docinfo:lbu-subj</xd:i> becomes the value for <xd:b>classify:classcode[@normval]</xd:b>.
		</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:lbu-indexing-terms&gt;
    &lt;docinfo:lbu-subj&gt;lawnow160&lt;/docinfo:lbu-subj&gt;
&lt;/docinfo:lbu-indexing-terms            

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;classify:classification classscheme="lbu-subj"&gt;
    &lt;classify:classitem&gt;
        &lt;classify:classitem-identifier&gt;
            &lt;classify:classcode normval="lawnow160"/&gt;
        &lt;/classify:classitem-identifier&gt;
    &lt;/classify:classitem&gt;
&lt;/classify:classification&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>If source document having multiple <xd:i>docinfo:lbu-subj</xd:i> within <xd:i>docinfo:lbu-indexing-terms</xd:i>, then each subsequent occurrence of the element  <xd:i>docinfo:lbu-subj</xd:i> will <xd:b>becomes</xd:b>
            <xd:b>classify:classitem/classify:classitem-identifier/classify:classcode[@normval]</xd:b> element.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:lbu-indexing-terms&gt;
    &lt;docinfo:lbu-subj&gt;lawnowl60&lt;/docinfo:lbu-subj&gt;
    &lt;docinfo:lbu-subj&gt;lawnow295&lt;/docinfo:lbu-subj&gt;
&lt;/docinfo:lbu-indexing-terms&gt;            

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;classify:classification classscheme="lbu-subj"&gt;
    &lt;classify:classitem&gt;
        &lt;classify:classitem-identifier&gt;
            &lt;classify:classcode normval="lawnow160"/&gt;
        &lt;/classify:classitem-identifier&gt;
    &lt;/classify:classitem&gt;
    &lt;classify:classitem&gt;
        &lt;classify:classitem-identifier&gt;
            &lt;classify:classcode normval="lawnow295"/&gt;
        &lt;/classify:classitem-identifier&gt;
    &lt;/classify:classitem&gt;
&lt;/classify:classification&gt;

	</xd:pre>
         <!--Changes2012-08-30: Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.lbu-indexing-terms-LxAdv-classify.classification_classscheme_lbu-subj-scheme.dita  -->
   <!--<xsl:message>Rosetta_docinfo.lbu-indexing-terms-LxAdv-classify.classification_classscheme_lbu-subj-scheme.xsl requires manual development!</xsl:message> -->
   <!-- CSN: Added docinfo:lbu-indexing-terms from base.xsl. -->
   <xsl:template match="docinfo:lbu-indexing-terms">
      <xsl:if test="child::docinfo:lbu-juris">
         <xsl:element name="classify:classification">
            <xsl:attribute name="classscheme">docinfo:lbu-juris</xsl:attribute>
            <xsl:apply-templates select="child::docinfo:lbu-juris"/>
         </xsl:element>
      </xsl:if>
      <xsl:if test="child::docinfo:lbu-subj">
         <xsl:element name="classify:classification">
            <xsl:attribute name="classscheme">lbu-subj</xsl:attribute>
            <xsl:apply-templates select="child::docinfo:lbu-subj"/>
         </xsl:element>
      </xsl:if>
   </xsl:template>

   <xsl:template match="docinfo:lbu-subj">
      <xsl:element name="classify:classitem">
         <xsl:element name="classify:classitem-identifier">
            <xsl:element name="classify:classcode">
               <xsl:attribute name="normval">
                  <xsl:value-of select="."/>
               </xsl:attribute>
            </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>

   <xsl:template match="docinfo:lbu-juris[not($streamID='CA01')]">
      <xsl:element name="classify:classitem">
         <xsl:element name="classify:classitem-identifier">
            <xsl:element name="classify:classcode">
               <xsl:attribute name="normval">
                  <xsl:value-of select="."/>
               </xsl:attribute>
            </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <!-- Vikas Rohilla : Updated as per the $streamID CA01    -->
   <xsl:template match="docinfo:lbu-juris[$streamID='CA01'][.!='CA' or .!='UK' or .!='NZ']">
      <xsl:element name="classify:classitem">
         <xsl:element name="classify:classitem-identifier">
            <xsl:element name="classify:classname">
               <xsl:value-of select="."/>
            </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <!--Vikas Rohilla : -->   <!--******************************************************************************* 
    No need to Include already Handeled in Rosetta_docinfo.lbu-indexing-terms-LxAdv-classify.classification_classscheme_lbu-subj-scheme.xsl
    *******************************************************************************-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>docinfo:lbu-juris</xd:i> becomes
                    <xd:b>classify:classification@classscheme="docinfo:lbu-juris"/classify:classitem/classify:classitem-identifier/classify:classcode@normval="nz"</xd:b>
         </xd:p>
         <xd:pre>
            
&lt;docinfo:lbu-juris&gt;nz&lt;/docinfo:lbu-juris&gt;


<xd:b>Becomes</xd:b>


&lt;classify:classification classscheme="docinfo:lbu-juris"&gt;
    &lt;classify:classitem&gt;
        &lt;classify:classitem-identifier&gt;
            &lt;classify:classcode normval="nz"/&gt;
        &lt;/classify:classitem-identifier&gt;
    &lt;/classify:classitem&gt;
&lt;/classify:classification&gt;

        </xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>In all CANADA streams, if <xd:i>docinfo:lbu-juris</xd:i> contains the
                value other than country code like <xd:i>CA, UK and NZ</xd:i>, then
                conversion will convert <xd:i>docinfo:lbu-juris</xd:i> to
                    <xd:b>classify:classification@classscheme="docinfo:lbu-juris"/classify:classitem/classify:classitem-identifier/classify:classname</xd:b>.
                Please see below input and output examples for more details.</xd:p>
         <xd:pre>

&lt;docinfo:lbu-juris&gt;CICIV2290&lt;/docinfo:lbu-juris&gt;
&lt;docinfo:lbu-juris&gt;CIFAM4595&lt;/docinfo:lbu-juris&gt;
&lt;docinfo:lbu-juris&gt;CIFAM4650&lt;/docinfo:lbu-juris&gt;
&lt;docinfo:lbu-juris&gt;CIFAM4620&lt;/docinfo:lbu-juris&gt;
&lt;docinfo:lbu-juris&gt;CIFAM4870&lt;/docinfo:lbu-juris&gt;


<xd:b>Becomes</xd:b>
            

&lt;classify:classification classscheme="docinfo:lbu-juris"&gt;
    &lt;classify:classitem&gt;
        &lt;classify:classitem-identifier&gt;
            &lt;classify:classname&gt;CICIV2290&lt;/classify:classname&gt;
        &lt;/classify:classitem-identifier&gt;
    &lt;/classify:classitem&gt;
    &lt;classify:classitem&gt;
        &lt;classify:classitem-identifier&gt;
            &lt;classify:classname&gt;CIFAM4595&lt;/classify:classname&gt;
        &lt;/classify:classitem-identifier&gt;
    &lt;/classify:classitem&gt;
    &lt;classify:classitem&gt;
        &lt;classify:classitem-identifier&gt;
            &lt;classify:classname&gt;CIFAM4650&lt;/classify:classname&gt;
        &lt;/classify:classitem-identifier&gt;
    &lt;/classify:classitem&gt;
    &lt;classify:classitem&gt;
        &lt;classify:classitem-identifier&gt;
            &lt;classify:classname&gt;CIFAM4620&lt;/classify:classname&gt;
        &lt;/classify:classitem-identifier&gt;
    &lt;/classify:classitem&gt;
    &lt;classify:classitem&gt;
        &lt;classify:classitem-identifier&gt;
            &lt;classify:classname&gt;CIFAM4870&lt;/classify:classname&gt;
        &lt;/classify:classitem-identifier&gt;
    &lt;/classify:classitem&gt;
&lt;/classify:classification&gt;
            
</xd:pre>
         <!--Changes2014-08-11: Added a special scenario for all Canada
                        streams to handle docinfo:lbu-juris to
                            classify:classification@classscheme="docinfo:lbu-juris"/classify:classitem/classify:classitem-identifier/classify:classname.
                        Db P4 issue #3052014-01-19: Added a special scenario for handling
                            docinfo:lbu-juris along with input and output
                        examples for CANADA CA02 contents ONLY.2012-10-05: Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.lbu.juris-LxAdv-classify.classification_classscheme_docinfolbu-juris.dita  -->
   <!-- 20170516:  MCJ:  Turning into a do-nothing module. -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:lbu-meta</xd:i> becomes
						<xd:b>doc:legacy-metadata[@metadatasource="lbu-meta"]</xd:b>.
						<xd:i>docinfo:metaitem</xd:i> becomes
						<xd:b>meta/metaitem</xd:b>. The source attribute
						<xd:i>@name</xd:i> becomes <xd:b>metaitem[@name]</xd:b> and
						<xd:i>@value</xd:i> becomes <xd:b>metaitem[@value]</xd:b>. </xd:p>
         <xd:p>
            <xd:i>docinfo:metaitem</xd:i> should be dropped if the attribute
						<xd:i>@name</xd:i> has any of the following drop list values: <xd:ul>
               <xd:li>
                  <xd:i>@name="date"</xd:i>
               </xd:li>
               <xd:li>
                  <xd:i>@name="juris"</xd:i>
               </xd:li>
               <xd:li>
                  <xd:i>@name="court"</xd:i>
               </xd:li>
               <xd:li>
                  <xd:i>@name="country"</xd:i>
               </xd:li>
               <xd:li>
                  <xd:i>@name="parent-filename"</xd:i>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML 1</xd:b>
         </xd:p>
         <xd:pre>
	&lt;docinfo&gt;
	&lt;docinfo:lbu-meta&gt;
		&lt;docinfo:metaitem name="date" value="18810104"/&gt;
		&lt;docinfo:metaitem name="country" value="2"/&gt;
		&lt;docinfo:metaitem name="court" value="2"/&gt;
		&lt;docinfo:metaitem name="date" value="18810104"/&gt;
		&lt;docinfo:metaitem name="juris" value="9"/&gt;
		&lt;docinfo:metaitem name="court" value="1"/&gt;
		&lt;docinfo:metaitem name="country" value="2"/&gt;
		&lt;docinfo:metaitem name="lbu-sourcename" value="New Zealand Law Reports"/&gt;
		&lt;docinfo:metaitem name="parent-docid" value="1NZLR_CA_1"/&gt;
		&lt;docinfo:metaitem name="parent-filename" value="1NZLR_CA_00001.xml"/&gt;
	&lt;/docinfo:lbu-meta&gt;&lt;/docinfo&gt;
	
		</xd:pre>
         <xd:p>
            <xd:b>Target XML 1</xd:b>
         </xd:p>
         <xd:pre>
	&lt;doc:metadata&gt;
	&lt;doc:docinfo&gt;
		&lt;doc:legacy-metadata metadatasource="lbu-meta"&gt;
			&lt;meta&gt;
			   &lt;metaitem name="lbu-sourcename" value="New Zealand Law Reports"/&gt;
			   &lt;metaitem name="parent-docid" value="1NZLR_CA_1"/&gt;
			&lt;/meta&gt;
		&lt;/doc:legacy-metadata&gt;
	&lt;/doc:docinfo&gt;&lt;/doc:metadata&gt;
	
		</xd:pre>
         <xd:p>
            <xd:b>Source XML 2</xd:b>
         </xd:p>
         <xd:pre>
	&lt;docinfo&gt;
	&lt;docinfo:lbu-meta&gt;
	&lt;docinfo:metaitem name="SRCNAME" value="AGAA"&gt;&lt;/docinfo:metaitem&gt;
	&lt;docinfo:metaitem name="SRCDOCNO" value="00000008"&gt;&lt;/docinfo:metaitem&gt;
	&lt;docinfo:metaitem name="DPSI" value="03EN"&gt;&lt;/docinfo:metaitem&gt;
	&lt;/docinfo:lbu-meta&gt;
	&lt;/docinfo&gt;
	
		</xd:pre>
         <xd:p>
            <xd:b>Target XML 2</xd:b>
         </xd:p>
         <xd:pre>
	&lt;doc:metadata&gt;
	&lt;doc:docinfo&gt;
		&lt;doc:legacy-metadata metadatasource="lbu-meta"&gt;
			&lt;meta&gt;
			   &lt;metaitem name="SRCNAME" value="AGAA"/&gt;
			   &lt;metaitem name="SRCDOCNO" value="00000008"/&gt;
			   &lt;metaitem name="DPSI" value="03EN"/&gt;
			&lt;/meta&gt;
		&lt;/doc:legacy-metadata&gt;
	&lt;/doc:docinfo&gt;&lt;/doc:metadata&gt;
	
		</xd:pre>
         <xd:p>
            <xd:b>Source XML 3</xd:b>
         </xd:p>
         <xd:pre>
	&lt;docinfo&gt;
	&lt;docinfo:lbu-meta&gt;
	&lt;docinfo:metaitem name="QLDB" value="sb99"&gt;&lt;/docinfo:metaitem&gt;
	&lt;/docinfo:lbu-meta&gt;
	&lt;/docinfo&gt;
	
		</xd:pre>
         <xd:p>
            <xd:b>Target XML 3</xd:b>
         </xd:p>
         <xd:pre>
	&lt;doc:metadata&gt;
	&lt;doc:docinfo&gt;
		&lt;doc:legacy-metadata metadatasource="lbu-meta"&gt;
			&lt;meta&gt;
			   &lt;metaitem name="QLDB" value="sb99"/&gt;	       
			&lt;/meta&gt;
		&lt;/doc:legacy-metadata&gt;
	&lt;/doc:docinfo&gt;&lt;/doc:metadata&gt;
	
		</xd:pre>
         <xd:p>
            <xd:b>Source XML 4</xd:b>
         </xd:p>
         <xd:pre>
	
	&lt;docinfo&gt;
	 &lt;!-- ETC. --&gt;
	 &lt;docinfo:lbu-meta&gt;
	  &lt;docinfo:metaitem name="selection_criteria_variant" value="PCT207_regulation_1" /&gt;
	  &lt;docinfo:metaitem name="lbu-sourcename" value="New Zealand Regulations" /&gt;
	  &lt;docinfo:metaitem name="parent-docid" value="GCG-REGULATIONS-D" /&gt;
	  &lt;docinfo:metaitem name="parent-filename" value="Regs-D.xml" /&gt;
	  &lt;docinfo:metaitem name="parent-docid" value="NZREGS_REGS-D.SGM_2001R326-FRONT-CONTENTS" /&gt;
	  &lt;docinfo:metaitem name="parent-filename" value="Regs-D1030.xml" /&gt;
	 &lt;/docinfo:lbu-meta&gt;
	 &lt;!-- ETC. --&gt;
	&lt;/docinfo&gt;
				</xd:pre>
         <xd:p>
            <xd:b>Target XML 4</xd:b>
         </xd:p>
         <xd:pre>
					
	&lt;doc:metadata&gt;
	&lt;doc:docinfo&gt;
		&lt;doc:legacy-metadata metadatasource="lbu-meta"&gt;
			&lt;meta&gt;
			   &lt;metaitem name="selection_criteria_variant" value="PCT207_regulation_1"/&gt;
			   &lt;metaitem name="lbu-sourcename" value="New Zealand Regulations"/&gt;
			   &lt;metaitem name="parent-docid" value="GCG-REGULATIONS-D"/&gt;
			   &lt;metaitem name="parent-docid" value="NZREGS_REGS-D.SGM_2001R326-FRONT-CONTENTS"/&gt;
			&lt;/meta&gt;
		&lt;/doc:legacy-metadata&gt;
	&lt;/doc:docinfo&gt;&lt;/doc:metadata&gt;
	
				</xd:pre>
         <!-- McNally July 28 2016.  I'm commenting-out the following section "Special rules for UK14". 
			Will investigate intent.  If truly UK14 only then probably want separate submodule. 
			Will need some work. Narrative describes custom-metafield which can't occur in docinfo:lbu-meta.
			Example shows docinfo:metaitem which would be ok. 
			Also commented-out the change entry and moved it out of the changelog section. -->
         <!--<section>
				<note><b>Special rules for UK14:</b> These are rules for mapping certain instances of
					the source element <sourcexml>docinfo:custom-metafield</sourcexml> and instances are
					identified through the <sourcexml>@name</sourcexml> attribute. If given source
					present then below rules apply. </note>
				<p><b><u>Mapping to <targetxml>classify:classification</targetxml></u></b></p>
				<p>Source: <ul>
						<li><sourcexml>docinfo:custom-metafield[@name="alternative-title-formal"]</sourcexml></li>
						<li><sourcexml>docinfo:custom-metafield[@name="alternative-title-acronym"]</sourcexml></li>
						<li><sourcexml>docinfo:custom-metafield[@name="alternative-title-popular"]</sourcexml></li>
					</ul></p>
				<p>Target: Each source item becomes <targetxml>metaitem[@name @value]</targetxml> within
						<targetxml>classify:classification</targetxml> markup. As follows:</p>
				<p>Within <targetxml>doc:metadata/doc:docinfo</targetxml> -<ul>
						<li>Create
								<targetxml>classify:classification[@classscheme="uk-functional-information"]/classify:classitem</targetxml>.
							The <targetxml>@classscheme</targetxml> value is hard coded.<ul>
								<li>Create <targetxml>meta</targetxml><ul>
										<li>For each <sourcexml>docinfo:custom-metafield</sourcexml>
											specified above, create <targetxml>metaitem[@name
												@value]</targetxml>. Where <sourcexml>@name</sourcexml>
											value becomes <targetxml>@name</targetxml> value. And
											content of source element becomes
												<targetxml>@value</targetxml> value.</li>
									</ul></li>
								<li>Create
										<targetxml>classify:classitem-identifier/classify:classcode[@normval="functional-parameters"]</targetxml>.
									The <targetxml>@normval</targetxml> value is hard coded.</li>
							</ul></li>
					</ul><note>Create only one container
							<targetxml>classify:classification[@classscheme="uk-functional-information"]/classify:classitem</targetxml>.
						The container holds the items described above and may also hold mappings from
						elsewhere in the same source file.</note></p>
			</section>
			<example>
				<title>Source XML 5</title>
				<codeblock>
	<![CDATA[<docinfo>
	<docinfo:lbu-meta>
		<docinfo:metaitem name="alternative-title-formal" value="Merger confidentiality agreement in letter form"/>
		<docinfo:metaitem name="alternative-title-acronym" value="NDA" />
		<docinfo:metaitem name="alternative-title-popular" value="Non-disclosure clause for a shareholders’ agreement"/>
	</docinfo:lbu-meta>
	</docinfo>
	]]>
		</codeblock>
			</example>
	
			<example>
				<title>Target XML 5</title>
				<codeblock>
	<![CDATA[
	<doc:metadata>
		<doc:docinfo>
			<classify:classification classscheme="uk-functional-information">
				<classify:classitem>
					<meta>
						<metaitem name="alternative-title-formal" value="Merger confidentiality agreement in letter form"/>
						<metaitem name="alternative-title-acronym" value="NDA"/>
						<metaitem name="alternative-title-popular" value="Non-disclosure clause for a shareholders’ agreement"/>
					</meta>
					<classify:classitem-identifier>
						<classify:classcode normval="functional-parameters"/>
					</classify:classitem-identifier>
				</classify:classitem>
			</classify:classification>
		</doc:docinfo>
	</doc:metadata>
	]]>
		</codeblock>
			</example>
			
				<p>2016-07-28: <ph id="change_20160728_ss">Added rules for handling of
							<sourcexml>@name="alternative-title-formal"</sourcexml>,
							<sourcexml>@name="alternative-title-acronym"</sourcexml> and
							<sourcexml>@name="alternative-title-popular"</sourcexml> with updated
						example.</ph></p> -->
         <!--Changes2013-08-12: We removed the docinfo:lbu-meta "include"
						list so now there is only a "drop" list. Anything not on the "drop" list should
						be passed through. Webteam 230557.2013-08-02: Added
							@name="selection_criteria_variant" to the list of
						values in docinfo:metaitem/@name that should be retained. And added a
						example.2013-05-31: Added "document-type" to the list of values
						in docinfo:metaitem/@name that should be retained.2013-04-09: Added the instruction for handling
							docinfo:metaitem[@name="QLDB"].2012-08-30: Created.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="docinfo:lbu-meta">
      <xsl:apply-templates/>
   </xsl:template>

   <xsl:template match="docinfo:metaitem">
      <xsl:choose>
         <xsl:when test="@name='date' or      @name='juris' or      @name='court' or      @name='country' or      @name='parent-filename' or      @name='PA-PGUID' or      @name='TOPIC-PGUID' or      @name='SUB-TOPIC-PGUID'         "/>
         <xsl:otherwise><!-- @name='parent-docid'and name='lbu-sourcename' are two values that need to be converted for court cases -->
            <metaitem>
               <xsl:attribute name="name">
                  <xsl:value-of select="@name"/>
               </xsl:attribute>
               <xsl:attribute name="value">
                  <xsl:value-of select="@value"/>
               </xsl:attribute>
            </metaitem>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:load-date/date</xd:i> becomes
						<xd:b>dc:metadata/dc:date[@lnmeta:datetype="load-date"]</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>The format of the content of all <xd:b>dc:date</xd:b> elements must be
					in 'YYYY-MM-DD'.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:load-date&gt;
&lt;date day="01" month="01" year="2006"&gt;01 January 2006&lt;/date&gt;
&lt;/docinfo:load-date&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;dc:date lnmeta:datetype="load-date"&gt;2006-01-01&lt;/dc:date&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:p>The below example encountered in CANADA contents which contains "00" value in
						<xd:i>@day="00"</xd:i> and <xd:i>@month="00"</xd:i>
					attributes.</xd:p>
            <xd:p>
               <xd:b>Per LBU-</xd:b> This was the format used for historical data in which only the year was given. We will remediate the content to have a valid month/day and will send the remediated data in a subsequent reload.</xd:p>
         </xd:p>
         <xd:pre>

&lt;docinfo:load-date&gt;
    &lt;date year="1959" month="00" day="00"&gt;19590000&lt;/date&gt;
&lt;/docinfo:load-date&gt;
                
				</xd:pre>
         <!--Changes2014-01-07:  Added a note along with example which contains "00" value in @day="00" and @month="00" attributes encountered in CANADA contents.2013-08-07: Removed instructions for creating
							dc:date[@lnmeta:datetype="conversion-date"].2012-08-30: Created.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_date-Chof-docinfo.load-date-LxAdv-dc.date_lnmeta.datetype_load-date-scheme.dita  -->
   <xsl:template match="docinfo:load-date">
      <xsl:apply-templates/>
   </xsl:template>

   <xsl:template match="docinfo:load-date/date">
      <dc:date lnmeta:datetype="load-date">
         <xsl:value-of select="@year"/>
         <xsl:text>-</xsl:text>
         <xsl:value-of select="@month"/>
         <xsl:text>-</xsl:text>
         <xsl:value-of select="@day"/>
      </dc:date>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:normcite/ci:cite/ci:content</xd:i> becomes <xd:b>ref:citations/ref:cite4thisresource/ref:nonciteidentifier</xd:b>. Attribute should be populated as below:
                        <xd:b>ref:nonciteidentifier/@normprotocol</xd:b> should be set to "unspecified". </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo:normcite&gt; &lt;ci:cite type="cite4thisdoc"&gt; &lt;ci:content&gt;2009 AC 11&lt;/ci:content&gt; &lt;/ci:cite&gt; &lt;/docinfo:normcite&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;ref:citations&gt; &lt;ref:cite4thisresource citetype="normcite"&gt; &lt;ref:nonciteidentifier normprotocol="unspecified"&gt; 2009 AC 11 &lt;/ref:nonciteidentifier&gt; &lt;/ref:cite4thisresource&gt; &lt;/ref:citations&gt;
                </xd:pre>
         <!--Changes2012-09-15: Created.2012-11-09: Updated the mapping and example.2012-11-29: Added instruction for handling of required attribute @normprotocol.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.normcite.dita  -->
   <xsl:template match="docinfo:normcite/ci:cite/ci:content" mode="normcite">
      <ref:citations>
         <ref:cite4thisresource citetype="normcite">
            <ref:nonciteidentifier normprotocol="unspecified">
               <xsl:apply-templates/>
            </ref:nonciteidentifier>
         </ref:cite4thisresource>
      </ref:citations>
   </xsl:template>
   <!-- CSN - 2017/10/21 - Creating one that will allow for the elimination of multiple ref:citations elements for primary, parallel, court, ...  -->
   <xsl:template match="docinfo:normcite/ci:cite/ci:content[$streamID = ('UK03')]">
      <ref:cite4thisresource citetype="normcite">
         <ref:nonciteidentifier normprotocol="unspecified">
            <xsl:apply-templates/>
         </ref:nonciteidentifier>
      </ref:cite4thisresource>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:selector</xd:i> becomes <xd:b>classify:classification[@classscheme="selector"]/classify:classitem/classify:classitem-identifier/classify:classname</xd:b>. Each subsequent occurrence of the element docinfo:selector adds a sibling /classify:classitem/classify:classitem-identifier/classify:classname element.
		</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:selector&gt;act&lt;/docinfo:selector&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;classify:classification classscheme="selector"&gt;
&lt;classify:classitem&gt;
&lt;classify:classitem-identifier&gt;
&lt;classify:classname&gt;act&lt;/classify:classname&gt;
&lt;/classify:classitem-identifier&gt;
&lt;/classify:classitem&gt;
&lt;/classify:classification&gt;

	</xd:pre>
         <!--Changes2012-08-30: Created.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="docinfo:selector[preceding-sibling::docinfo:selector]"/>

   <xsl:template match="docinfo:selector">
      <classify:classitem>
         <classify:classitem-identifier>
            <classify:classname>
               <xsl:apply-templates/>
            </classify:classname>
         </classify:classitem-identifier>
      </classify:classitem>
      <xsl:for-each select="following-sibling::docinfo:selector">
         <classify:classitem>
            <classify:classitem-identifier>
               <classify:classname>
                  <xsl:apply-templates/>
               </classify:classname>
            </classify:classitem-identifier>
         </classify:classitem>
      </xsl:for-each>
   </xsl:template>
   <!-- CSN: Added docinfo:selector from base.xsl. -->   <!--<xsl:template xmlns="http://dita.oasis-open.org/architecture/2005/" xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" match="docinfo:selector">
				<xsl:element name="classify:classitem">
					<xsl:element name="classify:classitem-identifier">
						<xsl:element name="classify:classname">
							<xsl:apply-templates/>
						</xsl:element>
					</xsl:element>
				</xsl:element>
			</xsl:template>-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:subtype</xd:i> becomes <xd:b>doc:legacy-metadata/meta/metaitem</xd:b> with attributes <xd:b>@name="docinfo:subtype"</xd:b> and value will be the data from <xd:i>docinfo:subtype</xd:i>.
      </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:subtype&gt;cait&lt;/docinfo:subtype&gt;
&lt;docinfo:subtype&gt;cait&lt;/docinfo:subtype&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;doc:legacy-metadata metadatasource="lbu-meta"&gt;
&lt;meta&gt;
    &lt;metaitem name="docinfo:subtype" value="cait"/&gt;
    &lt;metaitem name="docinfo:subtype" value="cait"/&gt;
&lt;/meta&gt;
&lt;/doc:legacy-metadata&gt;

	</xd:pre>
         <!--Changes2012-11-30: Created.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.subtype-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta-scheme.dita  -->
   <!-- CSN: Added docinfo:subtype from base.xsl. -->
   <xsl:template match="docinfo:subtype">
      <xsl:element name="metaitem">
         <xsl:attribute name="name">
            <xsl:text>docinfo:subtype</xsl:text>
         </xsl:attribute>
         <xsl:attribute name="value">
            <xsl:value-of select="."/>
         </xsl:attribute>
      </xsl:element>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:topiccodes/docinfo:topiccode</xd:i> becomes
						<xd:b>classify:classification[@classscheme="docinfo:topiccodes"]/classify:classitem/classify:classitem-identifier/classify:classcode/@normval</xd:b>.
					The content of <xd:i>docinfo:topiccode</xd:i> becomes the value for
						<xd:b>classify:classcode/@normval</xd:b>. A single
						<xd:b>classify:classification[@classscheme="docinfo:topiccodes"]</xd:b>
					is created for each unique value of <xd:b>@classscheme</xd:b>. Within
					this single element, create multiple <xd:b>classify:classitem</xd:b>
					elements. Only create additional <xd:b>classify:classification</xd:b>
					wrapper elements when the
						<xd:b>classify:classification[@classscheme]</xd:b> has different
					values. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo:topiccodes&gt;
					&lt;docinfo:topiccode&gt;#PA#CODE#&lt;/docinfo:topiccode&gt;
					&lt;docinfo:topiccode&gt;#PA#BUSM#&lt;/docinfo:topiccode&gt;
					&lt;/docinfo:topiccodes&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;classify:classification classscheme="docinfo:topiccodes"&gt;
					&lt;classify:classitem&gt; &lt;classify:classitem-identifier&gt;
					&lt;classify:classcode normval="#PA#CODE#"/&gt;
					&lt;/classify:classitem-identifier&gt; &lt;/classify:classitem&gt;
					&lt;classify:classitem&gt; &lt;classify:classitem-identifier&gt;
					&lt;classify:classcode normval="#PA#BUSM#"/&gt;
					&lt;/classify:classitem-identifier&gt; &lt;/classify:classitem&gt;
					&lt;/classify:classification&gt; </xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>Applied for UK07 Regulation contents only:</xd:b> When element
						<xd:i>docinfo:topiccode</xd:i> contains attribute
						<xd:i>@scheme="source-by-date"</xd:i>, then conversion will
					suppress it including its contents as well. Please see below input and output
					examples for more details:</xd:p>
         <xd:p>
            <xd:b>Source XML:</xd:b>
         </xd:p>
         <xd:pre> &lt;docinfo:topiccodes&gt; &lt;docinfo:topiccode
					scheme="source-by-date"&gt;2012-08-02&lt;/docinfo:topiccode&gt;
					&lt;docinfo:topiccode&gt;#PA#CODE#&lt;/docinfo:topiccode&gt;
					&lt;/docinfo:topiccodes&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML(Only second <xd:i>docinfo:topiccode</xd:i>)
					converted</xd:b>
         </xd:p>
         <xd:pre> &lt;classify:classification classscheme="docinfo:topiccodes"&gt;
					&lt;classify:classitem&gt; &lt;classify:classitem-identifier&gt;
					&lt;classify:classcode normval="#PA#CODE#"/&gt;
					&lt;/classify:classitem-identifier&gt; &lt;/classify:classitem&gt;
					&lt;/classify:classification&gt; </xd:pre>
         <!--Changes2014-02-03: Added a special rule for UK07 contents,
						When element docinfo:topiccode contains attribute
							@scheme="source-by-date", then conversion will
						suppress it including its contents as well. Phase 5 UK discussion-defect
						tracking: issue #156. 2012-08-30: Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.topiccodes-to-LxAdv-classify.classification_classscheme_docinfo-topiccodes.dita  -->
   <!-- CSN: Added docinfo:topiccodes and docinfo:topiccode from base.xsl. -->
   <xsl:template match="docinfo:topiccodes">
      <xsl:element name="classify:classification">
         <xsl:attribute name="classscheme">docinfo:topiccodes</xsl:attribute>
         <xsl:apply-templates/>
      </xsl:element>
   </xsl:template>

   <xsl:template match="docinfo:topiccode">
      <xsl:element name="classify:classitem">
         <xsl:element name="classify:classitem-identifier">
            <xsl:element name="classify:classcode">
               <xsl:attribute name="normval">
                  <xsl:value-of select="."/>
               </xsl:attribute>
            </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>docinfo:versioninfo/@hasotheversions</xd:i> becomes <xd:b>doc:versioninfo/@hasotherversions</xd:b> with these children:
                <xd:ul>
               <xd:li>
                  <xd:i>docinfo:versioninfo/docinfo:startdate[@day @month @year]</xd:i> becomes <xd:b>doc:versioninfo/doc:startdate[@day @month @year]</xd:b>.
                    </xd:li>
               <xd:li>
                  <xd:i>docinfo:versioninfo/docinfo:enddate[@day @month @year]</xd:i> becomes <xd:b>doc:versioninfo/doc:enddate[@day @month @year]</xd:b>.
                    </xd:li>
               <xd:li>
                  <xd:i>docinfo:versioninfo/docinfo:versionbranch[@value]</xd:i> becomes <xd:b>doc:versioninfo/doc:versionbranch[@value]</xd:b>.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:p>Added the attribute <xd:b>@normdate</xd:b> (value must be in '<xd:i>YYYY-MM-DD</xd:i>')
                    inside the target <xd:b>doc:startdate</xd:b> and
                        <xd:b>doc:enddate</xd:b> elements. <xd:ul>
                  <xd:li>If one or more of the three date values (year, month or day) are absent,
                            then attribute <xd:b>@normdate</xd:b> should not be
                            populated.</xd:li>
                  <xd:li>The <xd:b>@normdate</xd:b> attribute value shoud be generated
                            from target attributes (<xd:b>@year</xd:b>,
                                <xd:b>@month</xd:b> and <xd:b>@day</xd:b>),
                            which are comes under the <xd:b>doc:startdate</xd:b> and
                                <xd:b>doc:enddate</xd:b> elements within New Lexis.</xd:li>
               </xd:ul>
            </xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:p>Added the mapping of <xd:i>@startdate-tbd</xd:i>
                    attribute which is comes under <xd:i>docinfo:versioninfo</xd:i>
                    element in source then it should be mapped in target
                        <xd:b>doc:versioninfo@startdate-tbd</xd:b> (attribute value must
                    be in 'true' OR 'false', default value is 'false').</xd:p>
         </xd:p>
         <xd:p> For <xd:b>CA05 Acts&amp;Bills</xd:b> and <xd:b>CA08 Constitutions</xd:b>, suppress
                    <xd:i>docinfo:versioninfo</xd:i> from conversion if it has the
                following variations: <xd:ul>
               <xd:li>&lt;docinfo:versioninfo&gt;&lt;/docinfo:versioninfo&gt;</xd:li>
               <xd:li>&lt;docinfo:versioninfo hasotherversions="false"&gt;&lt;/docinfo:versioninfo&gt;</xd:li>
               <xd:li>&lt;docinfo:versioninfo hasotherversions="true"&gt;&lt;/docinfo:versioninfo&gt;</xd:li>
            </xd:ul> The above variations should be considered as "empty" and needs to be
                suppressed from conversion. </xd:p>
         <xd:p>When transforming the attribute values, enforce these constraints:
                <xd:ul>
               <xd:li>The <xd:b>@day</xd:b> value must be two digit number, i.e. from
                        '01' to '31'.</xd:li>
               <xd:li>The <xd:b>@month</xd:b> value must be transformed to a two digit number from '01' to '12', i.e. 'January' = '01' and 'December' = '12'.</xd:li>
               <xd:li>The <xd:b>@year</xd:b> value must be a four digit number, i.e. '2011'.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>Exception for Canada</xd:b>: Conversion should generate <xd:b>@day</xd:b> attribute
                    value in sequential digit. No need to add leading zero (0) to make the value in
                    two digits.</xd:p>
         <xd:p>
            <xd:b>Source XML based on Canada stream: </xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:versioninfo hasotherversions="true"&gt;
    &lt;docinfo:startdate day="01" month="01" year="2003"/&gt;
    &lt;docinfo:enddate day="30" month="06" year="2003"/&gt;
&lt;/docinfo:versioninfo&gt;
</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;doc:versioninfo hasotherversions="true"&gt;
    &lt;doc:startdate day="1" month="01" year="2003"/&gt;
    &lt;doc:enddate day="30" month="06" year="2003"/&gt;
&lt;/doc:versioninfo&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;docinfo:versioninfo hasotherversions="true"&gt;
     &lt;docinfo:startdate year="2007" month="06" day="21"/&gt;
     &lt;docinfo:versionbranch value="1120669"/&gt;
&lt;/docinfo:versioninfo&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;doc:versioninfo hasotherversions="true"&gt;
    &lt;doc:startdate month="06" day="21" year="2007"/&gt;
    &lt;doc:versionbranch value="1120669"/&gt;
&lt;/doc:versioninfo&gt;

	</xd:pre>
         <!--Changes2016-10-17: Updated the instruction for handling the
                    target attribute @normdate.
                [Webstar#6676189]2016-09-14: Note added for handling the input markup 'docinfo:versioninfo@startdate-tbd'.2016-09-02: Special Rule for added
                        @normdate attribute inside the
                        doc:startdate and
                    doc:enddate.2014-07-02: Edit a note for Canada only to generate
                        @day attribute value must be in sequential digit
                    number. No need to add leading zero (0) to make the value in two digits. This
                    immediate applies to ALL Canada streams.2014-06-09: Added note for Canada only to generate
                        @day attribute value as per the source. No need to
                    add zero (0) to make the value in two digits. This immediate applies to ALL
                    Canada streams.2014-04-15: Added the content stream code "CA08
                        Constitutions" inside the Note for handling empty use cases of
                        docinfo:versioninfo for Canada streams.2013-05-24: Instructions added for handling empty use cases of docinfo:versioninfo for Canada content stream.2011-08-30: Created.2012-12-03: Instruction and example added for docinfo:versioninfo/docinfo:versionbranch[@value].-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_docinfo.versioninfo-LxAdv-doc.versioninfo-scheme.dita  -->
   <!-- CSN: Created docinfo:versioninfo, docinfo:startdate, docinfo:enddate. -->
   <xsl:template match="docinfo:versioninfo">
      <xsl:choose>
         <xsl:when test="$streamID=('CA05' , 'CA08') and not(child::*)"/>
         <xsl:otherwise>
            <xsl:element name="doc:versioninfo">
               <xsl:apply-templates select="@*|node()"/>
            </xsl:element>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="docinfo:versioninfo/@hasotherversions | docinfo:versionbranch/@value | docinfo:versioninfo/@startdate-tbd">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="docinfo:startdate">
      <xsl:element name="doc:startdate">
         <xsl:call-template name="dateAtts"/>
      </xsl:element>
   </xsl:template>

   <xsl:template match="docinfo:enddate">
      <xsl:element name="doc:enddate">
         <xsl:call-template name="dateAtts"/>
      </xsl:element>
   </xsl:template>

   <xsl:template match="docinfo:versionbranch">
      <xsl:element name="doc:versionbranch">
         <xsl:apply-templates select="@*"/>
      </xsl:element>
   </xsl:template>

   <xsl:template name="dateAtts">
      <xsl:variable name="dayValue" as="xs:integer">
         <xsl:choose>
            <xsl:when test="@day">
               <xsl:value-of select="xs:integer(@day)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:text>0</xsl:text>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="monthValue" as="xs:integer">
         <xsl:choose>
            <xsl:when test="@month">
               <xsl:value-of select="xs:integer(@month)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:text>0</xsl:text>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="monthValueString"
                    as="xs:string"
                    select="if ($monthValue lt 10 and $monthValue gt 0) then concat( '0' , string($monthValue) ) else string($monthValue)"/>
      <xsl:variable name="yearValue" as="xs:integer" select="xs:integer(@year)"/>
      <xsl:variable name="current2digitYear"
                    as="xs:integer"
                    select="xs:integer(substring(string(current-date()),3,2))"/>
      <xsl:variable name="outputDay"
                    as="xs:boolean"
                    select="if ($dayValue gt 0 and $dayValue lt 32) then true() else false()"/>
      <xsl:variable name="outputMonth"
                    as="xs:boolean"
                    select="if ($monthValue gt 0 and $monthValue lt 13) then true() else false()"/>
      <xsl:variable name="outputYear"
                    as="xs:boolean"
                    select="if ($yearValue gt 0) then true() else false()"/>
      <xsl:variable name="dayNorm"
                    as="xs:string"
                    select="if ($dayValue lt 10) then concat( '0' , string($dayValue) ) else string($dayValue)"/>
      <xsl:variable name="yearNorm"
                    as="xs:string"
                    select="if ($yearValue lt 10) then concat( '200' , string($yearValue) ) else             if ($yearValue le $current2digitYear) then concat( '20' , string($yearValue) ) else             if ($yearValue lt 100) then concat( '19' , string($yearValue) ) else             if ($yearValue lt 1000) then concat( '0' , string($yearValue) ) else             string($yearValue)"/>
      <xsl:if test="$outputDay and $outputMonth and $outputYear">
         <xsl:attribute name="day" select="$dayValue"/>
         <xsl:attribute name="normdate"
                        select="concat($yearNorm,'-',$monthValueString,'-',$dayNorm)"/>
      </xsl:if>
      <xsl:if test="$outputMonth and $outputYear">
         <xsl:attribute name="month" select="$monthValueString"/>
      </xsl:if>
      <xsl:if test="$outputYear">
         <xsl:attribute name="year" select="$yearValue"/>
      </xsl:if>
   </xsl:template>
   <!--	<xsl:include href="../../modules/nonamespace/Rosetta_classification-LxAdv-classify.classification.xsl"/>-->   <!-- end Metadata  -->   <!--	<xsl:include href="../../modules/glp/Rosetta_glp.note-LxAdv-note.xsl"/>-->   <!--configurationManagementInformation xmlns="urn:x-lexisnexis:configuration-management:1">
		<title>Globally Shared Functions and Named Templates</title>
		<purpose>This stylesheet module contains XSLT functions and named templates that are globally shared regardless of transformation direction or tier, such as the named template for processing errors, etc.</purpose>
		<versionInfo>
			<version>
				<rev>-00</rev>
				<date>20-Mar-2013</date>
				<author>S. Byland</author>
				<description>Initial version.</description>
			</version>
			<version>
				<rev>A00</rev>
				<date>26-Jan-2016</date>
				<author>S. Byland</author>
				<description>Some general cleanup of comments.  Also commented out elementOrAttributeCopy named template as this method was not really used.  There is some code in the CRM LA-to-MNCR baseline that will need to be modified so as to not use this named template anymore.</description>
			</version>
		</versionInfo>
	</configurationManagementInformation-->   <!--  global custom functions  -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>Global functions apply primarily to XSL style conversions but would include such items as error messaging, etc.</xd:p>
      </xd:desc>
   </xd:doc>
   <!--  named template rules START  -->
   <!--  error detected; throw a message to the output START  -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>outputErrorMessage Named Template</xd:b>
         </xd:p>
         <xd:p>This named template is called whenever the XSLT needs to throw an error or warning.  It will use the xsl:message instruction to generate an error message.  If $errorType is set to 'ROCKET' (the default), then the error message will be in the form of an exception element.</xd:p>
         <xd:p>Example exception handling output:</xd:p>
         <xd:pre>
&lt;exception timestamp="2017-01-04 14:54:22"&gt;
  &lt;filename&gt;test.xml&lt;/filename&gt;
  &lt;status&gt;W&lt;/status&gt;
  &lt;code&gt;402&lt;/code&gt;
  &lt;context&gt;/jcd:judicialCourtDecision[1]/jcd:information[1]/courtcase:history[1]/courtcase:historySummary[1]/courtcase:historyItem[1]/citation:citation[1]/citation:content[1]/citation:contentSpan[1]/@citation:contentSpanRole&lt;/context&gt;
  &lt;message&gt;Unexpected Attribute:  name()=citation:contentSpanRole encountered in source document!  Attribute value is=hierarchyReference&lt;/message&gt;
&lt;/exception&gt;
				</xd:pre>
      </xd:desc>
   </xd:doc>
   <xsl:template name="outputErrorMessage">
      <xsl:param name="CurrentDBD"
                 required="no"
                 as="xs:string"
                 select=" 'notApplicable' "/>
      <xsl:param name="messageText" as="xs:string*" select=" 'Error!' "/>
      <!--  text passed in by caller  -->
      <xsl:param name="errorType" as="xs:string*" select=" 'ROCKET' "/>
      <xsl:param name="errorCode" as="xs:string*" select=" '401' "/>
      <xsl:param name="context" as="xs:string*" select=" '/unknown' "/>
      <xsl:param name="status" as="xs:string*" select=" 'W' "/>
      <xsl:param name="documentLNI" as="xs:string*" select=" 'UNKNOWN' "/>
      <!--   fabPipeline only  -->
      <xsl:choose>
         <xsl:when test=" $errorType = 'debug' "><!-- Example of how debug mode might be used; maybe auto create something like these lines after each template rule when building the monolithic and a certain flag is passed? 
					<xsl:if test=" $debug and contains( . , 'Hello Errors' ) ">
						<xsl:call-template name="outputErrorMessage">
							<xsl:with-param name="messageText" as="xs:string" select=" 'Template:  xh:p[translate( normalize-space( string-join( descendant-or-self::*/text() , ... ]' "/>
							<xsl:with-param name="errorType" as="xs:string" select=" 'debug' "/>
							<xsl:with-param name="context" as="xs:string">
								<xsl:call-template name="generateXPath"/>
							</xsl:with-param>
						</xsl:call-template>
					</xsl:if>
					 end example debug mode  -->
            <xsl:message>
               <xsl:element name="debug" inherit-namespaces="no" namespace="">
                  <xsl:attribute name="timestamp" select=" $dateTime "/>
                  <xsl:element name="message" inherit-namespaces="no" namespace="">
                     <xsl:if test=" $context != '/unknown' ">
                        <xsl:text>Context/XPath:  </xsl:text>
                        <xsl:sequence select="$context"/>
                        <xsl:text>.  </xsl:text>
                     </xsl:if>
                     <xsl:sequence select="$messageText"/>
                  </xsl:element>
               </xsl:element>
            </xsl:message>
         </xsl:when>
         <xsl:when test=" upper-case($errorType) = 'ICCE' or upper-case($errorType)='ROCKET' or $errorType = 'fabPipeline' ">
            <xsl:message>
               <xsl:element name="exception" inherit-namespaces="no" namespace="">
                  <xsl:attribute name="timestamp" select=" $dateTime "/>
                  <xsl:element name="filename" inherit-namespaces="no" namespace="">
                     <xsl:sequence select="$fileName"/>
                  </xsl:element>
                  <xsl:element name="status" inherit-namespaces="no" namespace="">
                     <xsl:sequence select="$status"/>
                  </xsl:element>
                  <xsl:element name="code" inherit-namespaces="no" namespace="">
                     <xsl:sequence select="$errorCode"/>
                  </xsl:element>
                  <xsl:element name="context" inherit-namespaces="no" namespace="">
                     <xsl:sequence select="$context"/>
                  </xsl:element>
                  <xsl:element name="message" inherit-namespaces="no" namespace="">
                     <xsl:sequence select="$messageText"/>
                  </xsl:element>
               </xsl:element>
            </xsl:message>
            <xsl:if test=" $errorType = 'fabPipeline' ">
               <xsl:choose>
                  <xsl:when test=" $errorCode = '402' ">
                     <xsl:attribute name="lnf:exception"
                                    namespace="urn:x-lexisnexis:conversion:global:functions:1">
                        <xsl:value-of select="$messageText"/>
                        <xsl:text>; sourceXPath = </xsl:text>
                        <xsl:value-of select="$context"/>
                     </xsl:attribute>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:element name="exception"
                                  inherit-namespaces="no"
                                  namespace="urn:x-lexisnexis:conversion:global:functions:1">
                        <xsl:attribute name="timestamp" select=" $dateTime "/>
                        <xsl:element name="LNI"
                                     inherit-namespaces="no"
                                     namespace="urn:x-lexisnexis:conversion:global:functions:1">
                           <xsl:sequence select="$documentLNI"/>
                        </xsl:element>
                        <xsl:element name="bundle"
                                     inherit-namespaces="no"
                                     namespace="urn:x-lexisnexis:conversion:global:functions:1">
                           <xsl:sequence select="$bundleID"/>
                        </xsl:element>
                        <xsl:element name="code"
                                     inherit-namespaces="no"
                                     namespace="urn:x-lexisnexis:conversion:global:functions:1">
                           <xsl:sequence select="$errorCode"/>
                        </xsl:element>
                        <xsl:element name="sourceXPath"
                                     inherit-namespaces="no"
                                     namespace="urn:x-lexisnexis:conversion:global:functions:1">
                           <xsl:sequence select="$context"/>
                        </xsl:element>
                        <xsl:element name="message"
                                     inherit-namespaces="no"
                                     namespace="urn:x-lexisnexis:conversion:global:functions:1">
                           <xsl:sequence select="$messageText"/>
                        </xsl:element>
                     </xsl:element>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:if>
         </xsl:when>
         <!--for DBD errors, note template matched element name directly in the output file-->
         <xsl:when test="$errorType = 'DBD'">DBDerr:<xsl:value-of select="name()"/>
            <!--<xsl:value-of select="error()"/>-->
            <xsl:if test="not($CurrentDBD='DeScopedDbd' or $CurrentDBD = 'notApplicable' )">
               <xsl:message>
                  <xsl:text>DBDerr:</xsl:text>
                  <xsl:value-of select="$CurrentDBD"/>
                  <xsl:text>:</xsl:text>
                  <xsl:value-of select="name()"/>
               </xsl:message>
            </xsl:if>
         </xsl:when>
         <xsl:otherwise>
            <xsl:message>
               <xsl:value-of select="$messageText"/>
               <!--  just output the message text to the output  -->
               <xsl:value-of select="$context"/>
            </xsl:message>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!--  error detected; throw a message to the output END  -->   <!--  generate and output the source XPath START  -->   <!--  @SBy:  2016-09-20  ROM 1218 IRM Strategic:  updated to allow optionally outputting without brackets (predicates indicating sibling order)  -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>generateXPath Named Template</xd:b>
         </xd:p>
         <xd:p>This named template is used to create the XPath leading to the current node in the form of a string, such as "/jcd:judicialCourtDecision[1]/jcd:information[1]/courtcase:history[1]/courtcase:historySummary[1]/courtcase:historyItem[1]/citation:citation[1]/citation:content[1]/citation:contentSpan[1]/@citation:contentSpanRole".  Parameter $includeBrackets can be set to false() to suppress the predicate output if desired.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:template name="generateXPath" as="xs:string">
      <xsl:param name="includeBrackets" as="xs:boolean" select="true()"/>
      <xsl:sequence select=" string-join(  (:  use string join function to insert the '/' chars of the XPath  :)      ( '' ,            (:  Build a sequence of strings.  First item is empty to ensure XPath starts with a '/'  :)       ( for $i in ancestor-or-self::* return   (:  Walk the ancestor-or-self:: axis and return the name of each element followed by position in brackets  :)         concat( name($i) ,   (:  next item is the element name followed by position in brackets  :)            if ($includeBrackets) then concat(             '[' ,     (:  open bracket, then count preceding sibling elements of same name and add 1; convert to string  :)             string( count($i/preceding-sibling::*[name(.) = name($i)]) + 1) ,              ']'  )   (:  close bracket. This for loop returns sequence of strings in form of 'element-name[#]'  :)            else             '' )       ) ,           (:  Last item in sequence is to add the attribute name if necessary, since  :)       if (self::*) then ()     (:  ancestor-or-self::* won't include 'self' if this is an attribute  :)        else concat( '@' , name() )       ) ,      '/' ) "/>
      <!--   Use '/' as the string separator since this is an XPath  -->
   </xsl:template>
   <!--  generate and output the source XPath END  -->   <!--  combined nested trees START  -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>combineTrees Named Template</xd:b>
         </xd:p>
         <xd:p>This named template is used to combine the content from following sibling elements of the same base name into a single element, such as lnv:TEXT-1, lnv:TEXT-2, etc., into a single lnv:TEXT-1 element, when these elements contain nested hierarchical content requiring the hierarchies to be knitted back together.  It assumes the sibling element descendants are structured the same way, and that the nodes can be combined at specific levels identifed by $combiningElements parameter.</xd:p>
         <xd:p>The base element name (such as "lnv:TEXT-") must be passed as parameter $baseEleName, and the sibling nodes passed as $nodesToCombine.</xd:p>
         <xd:p>Recursion is used to process through all the siblings provided in $nodesToCombine.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:template name="combineTrees" as="element()"><!--  combines the content from following sibling elements of the same base name into a single element (into the "-1" element of same name)  --><!--  assumes the sibling element descendants are structured the same way, and that the nodes can be combined at specific levels identifed by $combiningElements parameter  -->
      <xsl:param name="baseEleName" tunnel="yes" as="xs:string"/>
      <!--  base element name before the digit, such as 'lnv:TEXT-'  -->
      <xsl:param name="nodesToCombine" as="document-node()"/>
      <!--  all of the, or the remaing, sibling segments to be combined under one element  -->
      <xsl:param name="combiningElements" as="xs:string*"/>
      <!--  sequence of element names (strings) where node combining can occur  -->
      <xsl:variable name="updatedTree" as="element()"><!--  combine first remaining segment with second remaining segment and save in this variable  -->
         <xsl:apply-templates select="$nodesToCombine/*/*[1]" mode="combineTrees"><!--  perform combinging of nodes via the combineTrees mode   -->
            <xsl:with-param name="matchingXPath" tunnel="yes" as="xs:string"><!--  node combining will occur when current XPath matches this XPath   --><!--  the matching XPath is determined by first finding the last node in the document that contains text.  Then, start moving up the ancestor-or-self axis until arrive at one of the elements identified in $combiningElements   -->
               <xsl:for-each select="$nodesToCombine/*/*[1]/descendant-or-self::*[text()][last()]/ancestor-or-self::*[ name() = $combiningElements ][1]">
                  <xsl:call-template name="generateXPath"/>
                  <!--  utility that returnes the XPath of the current node   -->
               </xsl:for-each>
            </xsl:with-param>
            <xsl:with-param name="baseEleName"
                            tunnel="yes"
                            as="xs:string"
                            select="$baseEleName"/>
            <!--  pass on baseEleName  -->
            <xsl:with-param name="currentEleName"
                            tunnel="yes"
                            as="xs:string"
                            select=" name( $nodesToCombine/*/*[1] ) "/>
            <!--  pass on the name of the first remaining segment  -->
            <xsl:with-param name="nextEleName"
                            tunnel="yes"
                            as="xs:string"
                            select=" name( $nodesToCombine/*/*[2] ) "/>
            <!--  pass on the name of the next remaining segment  -->
         </xsl:apply-templates>
      </xsl:variable>
      <xsl:choose>
         <xsl:when test="$nodesToCombine/*/*[3]"><!--  if there are 3 or more siblings, then need to recurse   -->
            <xsl:call-template name="combineTrees">
               <xsl:with-param name="baseEleName"
                               tunnel="yes"
                               as="xs:string"
                               select="$baseEleName"/>
               <!--  pass on baseEleName  -->
               <xsl:with-param name="nodesToCombine" as="document-node()"><!--  update nodesToContinue to first be the $updatedTree followed by all other sibling after the 2nd one  -->
                  <xsl:document><!--  Forcing nodesToCombine element below to be in the empty namespace.  This is necessary because even though there is no default namespace declared in this XSLT file, 
											there usually is when building the monolithic deliverable stylesheet (and it is set to the base: namespace URI).  In that scenario, when transforming with the monolithic XSLT, 
											this element would be in the base: namespace, and will cause Saxon to throw various errors since the non-namespaced children being combined below are in the empty namespace.  
											Saxon is require to output all the namespace nodes that are in scope for each element, and to have a default namespace of base: copied for an element that is in no namespace is an error.  -->
                     <nodesToCombine xmlns="">
                        <xsl:copy-of select="$updatedTree"/>
                        <!--  first the $updatedTree containing the newly combined siblings  -->
                        <xsl:copy-of select="$nodesToCombine/*/*[ position() gt 2 ]"/>
                        <!--  remaining siblings to be combined  -->
                     </nodesToCombine>
                  </xsl:document>
               </xsl:with-param>
               <xsl:with-param name="combiningElements"
                               as="xs:string*"
                               select="$combiningElements"/>
               <!--  pass on combiningElements  -->
            </xsl:call-template>
         </xsl:when>
         <xsl:otherwise>
            <xsl:copy-of select="$updatedTree"/>
            <!--  all siblings combined, just output the newly combined tree   -->
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!--  combined nested trees END  -->   <!--  combineSiblingsOfSameName START  -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>combineSiblingsOfSameName Named Template</xd:b>
         </xd:p>
         <xd:p>This named template is used to combine immediate siblings of the same name into a single target element (instead of multiple target elements of same name).</xd:p>
         <xd:p>Within the template of the first sibling, create the output element and apply-templates on child nodes of that element first.  Then use for-each to change context to the next sibling and call this named template.</xd:p>
         <xd:p>Be sure to suppress elements of the same name that have preceding siblings with that name (elementXYX[ preceding-sibling::node()[1][ self::elementXYX ] ]).</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:template name="combineSiblingsOfSameName" as="item()*"><!--  this named template assumes the first sibling's attribute and nodes were already processed, so first call to this rule is the second immediate sibling   --><!--  capture name of current element   -->
      <xsl:variable name="currentEleName" as="xs:string" select="name( . )"/>
      <!--  process child nodes; note attribute nodes are skipped in deference to the first sibling's attributes   -->
      <xsl:apply-templates select="node()"/>
      <!--  recursively process the next immediately following sibling node if it has the same name   -->
      <xsl:for-each select="following-sibling::node()[1][ name() = $currentEleName ]">
         <xsl:call-template name="combineSiblingsOfSameName"/>
      </xsl:for-each>
   </xsl:template>
   <!--  combineSiblingsOfSameName END  -->   <!--  named template rules END  -->   <!--  modal template rules START  -->   <!--  combined nested trees mode START  -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>combineTrees Processing Mode</xd:b>
         </xd:p>
         <xd:p>mode="combineTrees" is used in conjunction with the combineTrees named template to combine multiple siblings into a single element (see description for "combineTrees Named Template").</xd:p>
         <xd:p>For most nodes in the tree, this mode will simply copy itself to the output destination (equivalent to the identity template).</xd:p>
         <xd:p>However, if the current node is a location where a pair of siblng structures can be combined, the combining is done as part of this mode and processing continues.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:template match="node()" mode="combineTrees"><!--  the combineTree mode is used to copy nodes at the same location in a sibling tree as following siblings in current location  -->
      <xsl:param name="matchingXPath" tunnel="yes" as="xs:string"/>
      <!--  the path to the last node containing text in the tree to be combined into  -->
      <xsl:param name="baseEleName" tunnel="yes" as="xs:string"/>
      <!--  base element name before the digit, such as 'lnv:TEXT-'  -->
      <xsl:param name="currentEleName" tunnel="yes" as="xs:string"/>
      <!--  element name of the base of the tree to be combined into  -->
      <xsl:param name="nextEleName" tunnel="yes" as="xs:string"/>
      <!--  element name of the base of the tree to be combined from  -->
      <xsl:variable name="currentXPath" as="xs:string"><!--  determine XPath of current node for later use  -->
         <xsl:call-template name="generateXPath"/>
      </xsl:variable>
      <xsl:copy><!--  copy over current node and attributes to the combined tree  -->
         <xsl:copy-of select="@*"/>
         <xsl:apply-templates select="node()" mode="combineTrees"/>
         <!--  process child nodes to be output first, then determine if nodes from other tree need to be copied over as following siblings  -->
         <xsl:if test="$matchingXPath = $currentXPath"><!--  if processing the last text-containing node in the primary tree, then need to copy over remaining nodes in following tree as siblings  -->
            <xsl:variable name="currentXPathNoBrackets" as="xs:string"><!--  create and save version of current XPath without the square brackets (predicates)  -->
               <xsl:call-template name="generateXPath">
                  <xsl:with-param name="includeBrackets" as="xs:boolean" select="false()"/>
               </xsl:call-template>
            </xsl:variable>
            <xsl:for-each select="/*/*[ name() = $nextEleName ]/descendant-or-self::*[text()][1]"><!--  now change context over to the first text-containing node in the sibling tree (the one with base element name of $nextEleName)  -->
               <xsl:for-each select="ancestor-or-self::*"><!--  start up the ancestor-or-self axis until XPaths match.  Note this should end up at one of the elements identified in $combiningElements  -->
                  <xsl:variable name="altTreeXPath" as="xs:string"><!--  capture the XPath to compare against current XPath; again no predicates  -->
                     <xsl:call-template name="generateXPath">
                        <xsl:with-param name="includeBrackets" as="xs:boolean" select="false()"/>
                     </xsl:call-template>
                  </xsl:variable>
                  <!--  since the base element names are different, need to only compare strings after those element names  -->
                  <xsl:if test="substring-after( $altTreeXPath , $nextEleName ) = substring-after( $currentXPathNoBrackets , $currentEleName )">
                     <xsl:copy-of select="*"/>
                     <!--  if the XPaths match, copy over the children.  Note current output destination is the same spot in primary tree   -->
                  </xsl:if>
               </xsl:for-each>
            </xsl:for-each>
         </xsl:if>
      </xsl:copy>
      <!--  now need to check if there are nodes in sibling tree that need to get copied *after* current node.  Only check when XPath is the same, or starts with, the matching XPath (leading to last text-containing node in primary tree)  -->
      <xsl:if test="starts-with( $matchingXPath , $currentXPath )">
         <xsl:variable name="currentXPathNoBrackets" as="xs:string"><!--  again, create and save version of current XPath without the square brackets (predicates)  -->
            <xsl:call-template name="generateXPath">
               <xsl:with-param name="includeBrackets" as="xs:boolean" select="false()"/>
            </xsl:call-template>
         </xsl:variable>
         <xsl:for-each select="/*/*[ name() = $nextEleName ]/descendant-or-self::*[text()][1]"><!--  now change context just like before.  The processing below is same, except the copy-of will grab different nodes  -->
            <xsl:for-each select="ancestor-or-self::*">
               <xsl:variable name="altTreeXPath" as="xs:string">
                  <xsl:call-template name="generateXPath">
                     <xsl:with-param name="includeBrackets" as="xs:boolean" select="false()"/>
                  </xsl:call-template>
               </xsl:variable>
               <xsl:if test="substring-after( $altTreeXPath , $nextEleName ) = substring-after( $currentXPathNoBrackets , $currentEleName )"><!--  if the XPaths match, need to copy over the following siblings of the same node as in the output destination.  Just up to parent and copy child::* as long as not first one.  -->
                  <xsl:copy-of select="../*[position() != 1][not( starts-with( name() , $baseEleName ) )]"/>
               </xsl:if>
            </xsl:for-each>
         </xsl:for-each>
      </xsl:if>
   </xsl:template>
   <!--  combined nested trees mode END  -->   <!--  default fixSourceNesting mode START  -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>fixSourceNesting Processing Mode (default rule)</xd:b>
         </xd:p>
         <xd:p>mode="fixSourceNesting" for any node matching this rule will simply copy itself to the output destination (equivalent to the identity template).</xd:p>
         <xd:p>It does trap elements in the lndocmeta <xd:i class="xmlSource">source</xd:i> namespace and ensures they remain in the source namespace after copying.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:template match="node()" mode="fixSourceNesting"><!--  the fixSourceNesting mode can be used to resolve issues such as p/lnvxe:text/lnvxe:note when, in the target, note and p are siblings  --><!--  default for this mode is identity template, so first copy over current node and attributes  -->
      <xsl:choose>
         <xsl:when test=" not( self::* ) or ( contains( name() , ':' ) and not( substring-before( name() , ':' ) = 'lndocmeta' ) ) ">
            <xsl:copy>
               <xsl:copy-of select="@*"/>
               <xsl:apply-templates select="node()" mode="fixSourceNesting"/>
               <!--  process child nodes  -->
            </xsl:copy>
         </xsl:when>
         <xsl:otherwise>
            <xsl:variable name="nsURI"
                          as="xs:string"
                          select=" if ( substring-before( name() , ':' ) = 'lndocmeta' ) then 'http://www.lexis-nexis.com/lndocmeta' else '' "/>
            <xsl:variable name="eleName"
                          as="xs:string"
                          select=" if ( substring-before( name() , ':' ) = 'lndocmeta' ) then local-name() else name() "/>
            <xsl:element name="{name()}" namespace="{$nsURI}">
               <xsl:copy-of select="@*"/>
               <xsl:apply-templates select="node()" mode="fixSourceNesting"/>
               <!--  process child nodes  -->
            </xsl:element>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!--  default fixSourceNesting mode END  -->   <!--  modal template rules END  -->   <!--  functions START  -->   <!--  lnf:trim Function START  -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>lnf:trim Function</xd:b>
         </xd:p>
         <xd:p>Adapted from "functx:trim" (http://www.xsltfunctions.com/xsl/functx_trim.html)</xd:p>
         <xd:p>This function removes whitespace at the beginning and end of a string.  Unlike the built-in normalize-space function, it only removes leading and trailing whitespace, not whitespace in the middle of the value. Whitespace is defined as it is in XML, namely as space, tab, carriage return and line feed characters. If $arg is the empty sequence, it returns a zero-length string.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:function name="lnf:trim" as="xs:string">
      <xsl:param name="arg" as="xs:string?"/>
      <xsl:sequence select=" replace( replace( $arg , '\s+$' , '' ) , '^\s+' , '' ) "/>
   </xsl:function>
   <!--  lnf:trim Function END  -->
   <!--  replaceString START  -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>lnf:replaceString Function</xd:b>
         </xd:p>
         <xd:p>This function was created to remove specific string segments from the VISF output as part of the MNCR to VISF code base.</xd:p>
         <xd:p>It will remove all occurrences of all string segments contained within $states from the input string $fileCodeInput.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:function name="lnf:replaceString" as="xs:string">
      <xsl:param name="fileCodeInput" as="xs:string"/>
      <xsl:param name="states" as="xs:string*"/>
      <xsl:choose>
         <xsl:when test=" (for $s in $states return contains( $fileCodeInput , $s ))[.][1] ">
            <xsl:variable name="fileCodeInputNew" as="xs:string*">
               <xsl:for-each select="$states[ contains( $fileCodeInput , . ) ][1]">
                  <xsl:sequence select="substring-before( $fileCodeInput , . )"/>
                  <xsl:sequence select="substring-after( $fileCodeInput , . )"/>
               </xsl:for-each>
            </xsl:variable>
            <xsl:sequence select="lnf:replaceString( string-join( $fileCodeInputNew , '' ) , $states )"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:sequence select="$fileCodeInput"/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:function>
   <!--  replaceString END  -->
   <!-- titleCase START -->
   <xd:doc>
      <xd:desc>
         <xd:p>Function to return a string in Title Case. Currently configured to exclude 'and', 'or'.</xd:p>
         <xd:p>Call using &lt;xsl:sequence select="string-join(for $x in tokenize($text,'\s') return lnf:titleCase($x),' ')"/&gt;</xd:p>
      </xd:desc>
   </xd:doc>
   <!-- function copied from http://p2p.wrox.com/xslt/80938-title-case-string.html -->
   <xsl:function name="lnf:titleCase">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose><!-- when lower case string is 'and', 'or' just output  -->
         <xsl:when test="lower-case($s)=('and','or')">
            <xsl:value-of select="lower-case($s)"/>
         </xsl:when>
         <!-- when the string is in upper case the below would originally pass through in all upper case; commenting -->
         <!--<xsl:when test="$s=upper-case($s)">
				<!-\-<xsl:value-of select="$s"/>-\->
			</xsl:when>-->
         <!-- otherwise convert the first char to upper case and subsequent chars to lower case  -->
         <xsl:otherwise>
            <xsl:value-of select="concat(upper-case(substring($s, 1, 1)), lower-case(substring($s, 2)))"/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:function>
   <!-- titleCase END -->
   <!-- stringToTitleCase START -->
   <xsl:function name="lnf:stringToTitleCase" as="xs:string">
      <xsl:param name="inputString" as="xs:string"/>
      <!--  input string of one or more words  -->
      <xsl:param name="keepAllLower" as="xs:string*"/>
      <!--  string sequence of words to keep as lowercase, such as the, or, and, for, of  -->
      <xsl:variable name="outputSequence" as="xs:string*">
         <xsl:for-each select="tokenize( $inputString , '\s' )">
            <xsl:choose><!-- when lower case string is any one of $keepAllLower, just output lower-case of it  -->
               <xsl:when test="lower-case( . ) = $keepAllLower">
                  <xsl:value-of select="lower-case( . )"/>
               </xsl:when>
               <xsl:when test="contains( . , '-' )">
                  <xsl:value-of select="lnf:genStringToTitleCase( . , $keepAllLower , '-' )"/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:value-of select="concat( upper-case( substring( . , 1 , 1 ) ) , lower-case( substring( . , 2 ) ) )"/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:for-each>
      </xsl:variable>
      <xsl:sequence select="string-join( $outputSequence , ' ' )"/>
      <!--  string join the sequence with a space as the separator  -->
   </xsl:function>
   <!-- stringToTitleCase END -->
   <!-- genStringToTitleCase START -->
   <xsl:function name="lnf:genStringToTitleCase" as="xs:string">
      <xsl:param name="inputString" as="xs:string"/>
      <!--  input string of one or more words  -->
      <xsl:param name="keepAllLower" as="xs:string*"/>
      <!--  string sequence of words to keep as lowercase, such as the, or, and, for, of  -->
      <xsl:param name="stringSeparator" as="xs:string"/>
      <!--  character to break up/tokenize string, normally a space  -->
      <xsl:variable name="outputSequence" as="xs:string*">
         <xsl:for-each select="tokenize( $inputString , $stringSeparator )">
            <xsl:choose><!-- when lower case string is any one of $keepAllLower, just output lower-case of it  -->
               <xsl:when test="lower-case( . ) = $keepAllLower">
                  <xsl:value-of select="lower-case( . )"/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:value-of select="concat( upper-case( substring( . , 1 , 1 ) ) , lower-case( substring( . , 2 ) ) )"/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:for-each>
      </xsl:variable>
      <xsl:sequence select="string-join( $outputSequence , $stringSeparator )"/>
      <!--  string join the sequence with the separator  -->
   </xsl:function>
   <!-- genStringToTitleCase END -->
   <!--  removeSequenceOfStrings START  -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>lnf:removeSequenceOfStrings Function</xd:b>
         </xd:p>
         <xd:p>This function was created to remove a set of substrings from an input string, if any of these strings exist in the input string</xd:p>
         <xd:p>$stringsToRemove is the input string sequence of *regex* items; the function will go through this sequence one by one and remove all occurrences of each item in this sequence.</xd:p>
         <xd:p>The removal can be case sensitive or case insensitive.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:function name="lnf:removeSequenceOfStrings" as="xs:string">
      <xsl:param name="inputString" as="xs:string"/>
      <xsl:param name="stringsToRemove" as="xs:string*"/>
      <xsl:param name="caseInsensitive" as="xs:boolean"/>
      <xsl:choose>
         <xsl:when test=" string-join( $stringsToRemove , '' ) = '' ">
            <xsl:sequence select="$inputString"/>
         </xsl:when>
         <xsl:when test=" $stringsToRemove[1] = '' or $stringsToRemove[1] = () ">
            <xsl:sequence select="lnf:removeSequenceOfStrings( $inputString , remove($stringsToRemove, 1) , $caseInsensitive )"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:sequence select="lnf:removeSequenceOfStrings( replace( $inputString , $stringsToRemove[1] , '' , if ($caseInsensitive) then 'i' else '' ) , remove($stringsToRemove, 1) , $caseInsensitive )"/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:function>
   <!--  removeSequenceOfStrings END  -->
   <!--  @SBy:  2016-09-20  ROM 1218 IRM Strategic:  add substringBeforeLast function  -->
   <!--   Original idea from Tomalak at stackoverflow, http://stackoverflow.com/questions/1119449/removing-the-last-characters-in-an-xslt-string/1119666#1119666  -->
   <!--  substringBeforeLast START  -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>lnf:substringBeforeLast Function</xd:b>
         </xd:p>
         <xd:p>This function will return that part of an input string that appears before the final occurence of an input substring.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:function name="lnf:substringBeforeLast" as="xs:string">
      <xsl:param name="inputString" as="xs:string"/>
      <xsl:param name="searchString" as="xs:string"/>
      <xsl:variable name="remString"
                    as="xs:string"
                    select="substring-after( $inputString , $searchString )"/>
      <xsl:sequence select="concat(              substring-before( $inputString , $searchString ) ,              if (contains( $remString , $searchString )) then               concat( $searchString ,                lnf:substringBeforeLast( $remString , $searchString )              )              else '' )"/>
   </xsl:function>
   <!--  substringBeforeLast END  -->
   <!--  @SBy:  2016-11-04  ROM 1218 IRM Strategic:  save the DOC-ID string logic for use in ref:cross-reference  -->
   <!--  createDocIdString START  -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>lnf:createDocIdString Function</xd:b>
         </xd:p>
         <xd:p>This function will create the correct string for DOC-ID style links for certain conversions.  For the Internal Revenue Manual as an example, where $legacy-filename = 'IRSMNL', and input string is 'IRM 3.10.72', the output string will be 'IRSMNL-3_10_72'.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:function name="lnf:createDocIdString" as="xs:string">
      <xsl:param name="inputElement" as="element()"/>
      <xsl:variable name="inputString"
                    as="xs:string"
                    select="if ($inputElement/source_lnci:cite/@normcite != '') then                         $inputElement/source_lnci:cite/@normcite                        else                        if (starts-with( string( $inputElement ) , 'IRM ' )) then                         substring-after( string( $inputElement ) , 'IRM ' )                        else                         string( $inputElement )"/>
      <xsl:variable name="badCharacters"
                    as="xs:string"
                    select="translate( $inputString , $acceptableID_Chars , '' )"/>
      <xsl:variable name="normString"
                    select="translate( $inputString , $badCharacters , ' ' )"/>
      <xsl:variable name="outputString"
                    select="translate( normalize-space( $normString ) , ' .' , '__' )"/>
      <xsl:sequence select="concat( $legacy-filename , '-' , $outputString )"/>
   </xsl:function>
   <!--  createDocIdString END  -->
   <!--  @SBy:  2017-05-25  ROCKET ReWrites:  function to return a string that is a valid value for attributes of type ID  -->
   <!--  createValidIDstring START  -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>lnf:createValidIDstring Function</xd:b>
         </xd:p>
         <xd:p>Given an arbitrary input string, this function will return a string that is valid for attribute values of type ID. </xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:function name="lnf:createValidIDstring" as="xs:string">
      <xsl:param name="inputString" as="xs:string"/>
      <xsl:variable name="badCharacters"
                    as="xs:string"
                    select="translate( $inputString , $acceptableID_Chars , '' )"/>
      <xsl:variable name="normString"
                    select="translate( $inputString , $badCharacters , '' )"/>
      <xsl:sequence select="if (translate( substring( $normString , 1 , 1 ) , $unallowedFirstCharAcceptableID_Chars , '' ) = '') then concat( '_' , $normString ) else $normString"/>
   </xsl:function>
   <!--  createValidIDstring END  -->
   <!--  NOTE:  the next two functions can allow a transformation to not require sibling recursion moded rules such as mode="textEleRecurse".   However, this function does not apply templates and so does not
				work in the "target" space.  One must use this function and throw results to a variable, then apply templates on that variable to transform the nodes to target format.  Keep in mind that any processing
				of such a variable only has the variable plus descendants in scope.  So, for example, footnote processing that looks for matching node values in the entire source document tree will not actually
				be searching the entire tree anymore, just the tree defined by the variable.  In general, it is safest to use these functions when writing the entire document to a variable and then A-T on that variable.  -->
   <!--  @SBy:  2017-01-17  ROM 1218 IRM Strategic:	general function version of sibling recursion type grouping, for situations such as 
																					handling children of "p" in the source converting to p/text - p/blockquote - p/text etc. in the target  -->
   <!--  siblingBlockGrouping START  -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>lnf:siblingBlockGrouping Function</xd:b>
         </xd:p>
         <xd:p>This function will sibling recursion type grouping for situations such as handling children of "p" in the source converting to p/text - p/blockquote - p/text etc. in the target; for that scenario, the $groupingContainer = 'text' (the text element), $blockElements = ('blockquote', 'table', etc), and $siblingNodes would contain the set of siblings that need to be split into groups of $groupingContainer elements broken up by $blockElements.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:function name="lnf:siblingBlockGrouping" as="item()*">
      <xsl:param name="groupingContainer" as="xs:string"/>
      <!--  name of container element to group consecutive siblings under (typically the "text" element)   -->
      <xsl:param name="blockElements" as="xs:string*"/>
      <!--  list of element names (can be empty string) that cannot be grouped under $groupingContainer (typically table, blockquote, etc)   -->
      <xsl:param name="siblingNodes" as="element()"/>
      <!--  (remaining) sibling nodes (typically text() nodes and elements, can be instances of $groupingContainer too) to perform grouping on, all under a single element parent  -->
      <!--  save name of element parent  -->
      <xsl:variable name="siblingNodesParent"
                    as="xs:string"
                    select="name($siblingNodes)"/>
      <xsl:for-each select="$siblingNodes/node()[1]">
         <xsl:choose><!--  if the first node is not an element, OR it is an element but there are no blockElements and it's not groupingContainer, or it's an element not in blockElements and it's not groupingContainer; then create container and move on   -->
            <xsl:when test=" not(self::*) or ( $blockElements = '' and not( name() = $groupingContainer ) ) or not( name() = $blockElements or name() = $groupingContainer ) ">
               <xsl:element name="{$groupingContainer}" namespace=""><!--  create container   -->
                  <xsl:choose>
                     <xsl:when test=" $blockElements = '' or not( following-sibling::node()[name() = $blockElements or name() = $groupingContainer] ) "><!--  no grouping required; just copy self and all following siblings to output, and no recurse   -->
                        <xsl:copy-of select="."/>
                        <xsl:copy-of select="following-sibling::node()"/>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:for-each select="following-sibling::node()[name() = $blockElements or name() = $groupingContainer][1]"><!--  grouping required; change context to the first blocker (either a group container or block element) and then copy over alll preceding siblings; close container   -->
                           <xsl:copy-of select="preceding-sibling::node()"/>
                        </xsl:for-each>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:element>
               <!--  if grouping was required in prior section; change context to the first blocker again to copy over the blocker, and if necessary initiate recursive call   -->
               <xsl:if test=" not( $blockElements = '' or not( following-sibling::node()[name() = $blockElements or name() = $groupingContainer] ) ) ">
                  <xsl:for-each select="following-sibling::node()[name() = $blockElements or name() = $groupingContainer][1]"><!--  copy over the blocker or container   -->
                     <xsl:copy-of select="."/>
                     <!--  if there are following siblings, need to recurse   -->
                     <xsl:if test="following-sibling::node()"><!--  update sibling list to be only the remaining following siblings   -->
                        <xsl:variable name="siblingNodesUpdated" as="element()">
                           <xsl:element name="{$siblingNodesParent}">
                              <xsl:copy-of select="following-sibling::node()"/>
                           </xsl:element>
                        </xsl:variable>
                        <!--  recurse   -->
                        <xsl:sequence select=" lnf:siblingBlockGrouping( $groupingContainer , $blockElements , $siblingNodesUpdated ) "/>
                     </xsl:if>
                  </xsl:for-each>
               </xsl:if>
            </xsl:when>
            <!--  first node is an element, AND it is an element that is either in blockElements or in groupingContainer. This is the only other possibility, so using xsl:otherwise.  Copy myself over, and recurse    -->
            <!--xsl:when test=" name() eq $blockElements or name() eq $groupingContainer "-->
            <xsl:otherwise><!--  since we are a blocker or container, copy over myself   -->
               <xsl:copy-of select="."/>
               <!--  if there are following siblings, need to recurse   -->
               <xsl:if test="following-sibling::node()"><!--  update sibling list to be only the remaining following siblings   -->
                  <xsl:variable name="siblingNodesUpdated" as="element()"><!-- JD: 2017-04-04: added namespace="" and copy-namespaces="no" after 
							getting error "XTDE0440: Cannot output a namespace node for the default namespace when the element is in no namespace" (source lnvxe:footnote with p child)-->
                     <xsl:element name="{$siblingNodesParent}" namespace="">
                        <xsl:copy-of select="following-sibling::node()" copy-namespaces="no"/>
                     </xsl:element>
                  </xsl:variable>
                  <!--  recurse   -->
                  <xsl:sequence select=" lnf:siblingBlockGrouping( $groupingContainer , $blockElements , $siblingNodesUpdated ) "/>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:for-each>
   </xsl:function>
   <!--  siblingBlockGrouping END  -->
   <!--  @SBy:  2017-01-17  ROM 1218 IRM Strategic:	general function to pull child elements up to be intermingled with the parent.  For example,  
																					handling children note elements of "p" in the source converting to p then note then p then note etc.in the target  -->
   <!--  siblingToParentGrouping START  -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>lnf:siblingToParentGrouping Function</xd:b>
         </xd:p>
         <xd:p>This function will pull child elements up to be intermingled with the parent, such as handling children lnvxe:note elements of "p" in the source converting to p then lnvxe:note then p then lnvxe:note etc.in the target; for that scenario, the $childElements = 'lnvxe:note' (the note element), $currentParent would contain the parent that had one or more $childElements elements needing to be pulled up to the parent level.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:function name="lnf:siblingToParentGrouping" as="item()*">
      <xsl:param name="childElements" as="xs:string*"/>
      <!--  list of element names (such as lnvxe:note) that need to be pulled up and mingled with the parent   -->
      <xsl:param name="currentParent" as="element()"/>
      <!--  the current single parent that contains one or more nodes including $childElements  -->
      <!--  save name of element parent  -->
      <xsl:variable name="currentParentName"
                    as="xs:string"
                    select="name($currentParent)"/>
      <xsl:for-each select="$currentParent/node()[1]">
         <xsl:choose><!--  if the first node is not an element, OR it is an element but there are no childElements, or it's an element not in childElements; then create currentParent and move on   -->
            <xsl:when test=" not(self::*) or ( $childElements = '' ) or not( name() = $childElements ) ">
               <xsl:choose>
                  <xsl:when test=" contains( $currentParentName , ':' ) ">
                     <xsl:element name="{$currentParentName}"><!--  create container   -->
                        <xsl:choose>
                           <xsl:when test=" $childElements = '' or not( following-sibling::node()[name() = $childElements] ) "><!--  no grouping required; just copy self and all following siblings to output, and no recurse   -->
                              <xsl:copy-of select="." copy-namespaces="no"/>
                              <xsl:copy-of select="following-sibling::node()" copy-namespaces="no"/>
                           </xsl:when>
                           <xsl:otherwise>
                              <xsl:for-each select="following-sibling::node()[name() = $childElements][1]"><!--  grouping required; change context to the first childElements element and then copy over alll preceding siblings; close currentParent   -->
                                 <xsl:copy-of select="preceding-sibling::node()" copy-namespaces="no"/>
                              </xsl:for-each>
                           </xsl:otherwise>
                        </xsl:choose>
                     </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:element name="{$currentParentName}" namespace=""><!--  create container   -->
                        <xsl:choose>
                           <xsl:when test=" $childElements = '' or not( following-sibling::node()[name() = $childElements] ) "><!--  no grouping required; just copy self and all following siblings to output, and no recurse   -->
                              <xsl:copy-of select="." copy-namespaces="no"/>
                              <xsl:copy-of select="following-sibling::node()" copy-namespaces="no"/>
                           </xsl:when>
                           <xsl:otherwise>
                              <xsl:for-each select="following-sibling::node()[name() = $childElements][1]"><!--  grouping required; change context to the first childElements element and then copy over alll preceding siblings; close currentParent   -->
                                 <xsl:copy-of select="preceding-sibling::node()" copy-namespaces="no"/>
                              </xsl:for-each>
                           </xsl:otherwise>
                        </xsl:choose>
                     </xsl:element>
                  </xsl:otherwise>
               </xsl:choose>
               <!--  if grouping was required in prior section; change context to the first childElements element again to copy over the childElements element, and if necessary initiate recursive call   -->
               <xsl:if test=" not( $childElements = '' or not( following-sibling::node()[name() = $childElements] ) ) ">
                  <xsl:for-each select="following-sibling::node()[name() = $childElements][1]"><!--  copy over the childElements element   -->
                     <xsl:copy-of select="." copy-namespaces="no"/>
                     <!--  if there are following siblings, need to recurse   -->
                     <xsl:if test="following-sibling::node()"><!--  update sibling list to be only the remaining following siblings   -->
                        <xsl:variable name="currentParentUpdated" as="element()">
                           <xsl:element name="{$currentParentName}">
                              <xsl:copy-of select="following-sibling::node()" copy-namespaces="no"/>
                           </xsl:element>
                        </xsl:variable>
                        <!--  recurse   -->
                        <xsl:sequence select=" lnf:siblingToParentGrouping( $childElements , $currentParentUpdated ) "/>
                     </xsl:if>
                  </xsl:for-each>
               </xsl:if>
            </xsl:when>
            <!--  first node is an element, AND it is an element that is in childElements. This is the only other possibility, so using xsl:otherwise.  Copy myself over, and recurse    -->
            <!--xsl:when test=" name() eq $blockElements or name() eq $groupngContainer "-->
            <xsl:otherwise><!--  since we are a childElements element, copy over myself   -->
               <xsl:copy-of select="." copy-namespaces="no"/>
               <!--  if there are following siblings, need to recurse   -->
               <xsl:if test="following-sibling::node()"><!--  update sibling list to be only the remaining following siblings   -->
                  <xsl:variable name="currentParentUpdated" as="element()">
                     <xsl:element name="{$currentParentName}">
                        <xsl:copy-of select="following-sibling::node()" copy-namespaces="no"/>
                     </xsl:element>
                  </xsl:variable>
                  <!--  recurse   -->
                  <xsl:sequence select=" lnf:siblingToParentGrouping( $childElements , $currentParentUpdated ) "/>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:for-each>
   </xsl:function>
   <!--  siblingToParentGrouping END  -->
   <!-- This template takes an element having @month, @day, or @year attributes and provides the provided attributes and their enhanced values back to the element. -->
   <!-- Much of the logic is designed to create a normalized date value of YYYY-MM-DD.   -->
   <!-- @month is tested for value between 1 and 12.  If other value exists, it outputs but does not create a normalized date. Leading zeros added if value is below 9. -->
   <!-- @day is tested for value between 1 and 31.  If other value exists, it outputs but does not create a normalized date. Leading zeros added if value is below 9. -->
   <!-- @year is tested for four characters.  By testing for current year value the template outputs a four digit year value when only provided with a two digit year value.  -->
   <!-- Some logic taken from DATE template in '/dataArch/XSLT/ContentArch/CRE-to-LA/modules/lnvxe/n=DATE.xsl' -->
   <xsl:template name="DATE_attributes">
      <xsl:param name="date"/>
      <xsl:variable name="dayValue" as="xs:integer">
         <xsl:choose>
            <xsl:when test="$date/date/@day">
               <xsl:value-of select="xs:integer($date/date/@day)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:text>0</xsl:text>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="monthValue" as="xs:integer">
         <xsl:choose>
            <xsl:when test="$date/date/@month">
               <xsl:value-of select="xs:integer($date/date/@month)"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:text>0</xsl:text>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="monthValueString"
                    as="xs:string"
                    select="if ($monthValue lt 10 and $monthValue gt 0) then concat( '0' , string($monthValue) ) else string($monthValue)"/>
      <!-- 20170516:  MCJ:  Added default for $yearValue as was already done for $monthValue and $dayValue. -->
      <!-- <xsl:variable name="yearValue" as="xs:integer" select="xs:integer($date/date/@year)"/> -->
      <xsl:variable name="yearValue" as="xs:integer">
         <xsl:choose>
            <xsl:when test="$date/date/@year">
               <xsl:value-of select="xs:integer($date/date/@year)"/>
            </xsl:when>
            <xsl:otherwise>0</xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="current2digitYear"
                    as="xs:integer"
                    select="xs:integer(substring(string(current-date()),3,2))"/>
      <xsl:variable name="outputDay"
                    as="xs:boolean"
                    select="if ($dayValue gt 0 and $dayValue lt 32) then true() else false()"/>
      <xsl:variable name="outputMonth"
                    as="xs:boolean"
                    select="if ($monthValue gt 0 and $monthValue lt 13) then true() else false()"/>
      <xsl:variable name="outputYear"
                    as="xs:boolean"
                    select="if ($yearValue gt 0) then true() else false()"/>
      <xsl:variable name="dayNorm"
                    as="xs:string"
                    select="if ($dayValue lt 10) then concat( '0' , string($dayValue) ) else string($dayValue)"/>
      <xsl:variable name="yearNorm"
                    as="xs:string"
                    select="if ($yearValue lt 10) then concat( '200' , string($yearValue) ) else    if ($yearValue le $current2digitYear) then concat( '20' , string($yearValue) ) else    if ($yearValue lt 100) then concat( '19' , string($yearValue) ) else    if ($yearValue lt 1000) then concat( '0' , string($yearValue) ) else    string($yearValue)"/>
      <xsl:if test="$outputDay and $outputMonth and $outputYear">
         <xsl:attribute name="day" select="$dayValue"/>
      </xsl:if>
      <xsl:if test="$outputMonth and $outputYear">
         <xsl:attribute name="month" select="$monthValueString"/>
      </xsl:if>
      <xsl:if test="$outputYear">
         <xsl:attribute name="year" select="$yearValue"/>
      </xsl:if>
      <!-- NOTE: this is a globally-shared module, no non-global variables should be used. -->
      <!--<xsl:choose>
			<xsl:when test="$streamID='NZ11'"/>
			<xsl:otherwise>-->
      <xsl:if test="$outputDay and $outputMonth and $outputYear and $yearValue lt 10000">
         <xsl:attribute name="normdate"
                        select="concat( $yearNorm , '-' , $monthValueString , '-' , $dayNorm )"/>
      </xsl:if>
      <!--</xsl:otherwise>
		</xsl:choose>-->
   </xsl:template>
   <!--  functions END  -->   <!-- Set as 'true' if you want inline (embedded) citations.  -->   <xsl:param name="outputEmbeddedCitations" as="xs:string" select="'false'"/>
   <!-- Set as 'segmentsOnly' if you want as flat as possible (only segement elements containing strings) when performing transforms to VisfXML.  -->
   <xsl:param name="visfXmlOutputLevel" as="xs:string" select="'false'"/>
   <!-- Set as 'true' if you want globalentity:* pass-through.  -->
   <xsl:param name="passThroughGlobalEntityMarkup"
              as="xs:string"
              select="'false'"/>
   <xsl:variable name="outputCitation"
                 as="xs:boolean"
                 select="if ($outputEmbeddedCitations = 'true') then true() else false()"/>
   <xsl:variable name="passThroughGlobalEntity"
                 as="xs:boolean"
                 select="if ($passThroughGlobalEntityMarkup = 'true') then true() else false()"/>
   <!-- Set as 'true' if you want errors thrown for elements or attributes not explicitly matched elsewhere; elements are output and wrapped in error element.  Set to 'false' to drop entirely plus no errors; set to 'noErrors' to suppress errors but still copy elements and attributes to the output; set to ROCKET (default) for error messages to be output with offending element/attribute suppressed (no forced schema validation error).  -->
   <xsl:param name="outputUnmatchedElements" as="xs:string" select=" 'ROCKET' "/>
   <xsl:param name="debugMode" as="xs:string" select=" 'false' "/>
   <xsl:variable name="debug"
                 as="xs:boolean"
                 select="if ($debugMode = 'true') then true() else false()"/>
   <!-- Current date/time and file being processed; these global variables only really used for debug/error processing.  current-dateTime() outputs in YYYY-MM-DDTHH:MM:SS-TZ:TZ format when we need YYYY-MM-DD HH:MI:SS   -->
   <xsl:param name="sourceFilename"
              as="xs:string*"
              select=" tokenize( document-uri(/) , '/' )[last()] "/>
   <xsl:variable name="fileName"
                 as="xs:string"
                 select="if (string($sourceFilename) = '') then 'UNKNOWN' else $sourceFilename"/>
   <xsl:variable name="dateTime"
                 as="xs:string"
                 select=" translate( substring( string(current-dateTime()) , 1 , 19 ) , 'T' , ' ' ) "/>
   <!--  Helpfule for Fab pipeline processing to indicate bundle ID   -->
   <xsl:param name="bundleID" as="xs:string" select=" 'UNKNOWN' "/>
   <!--  @SBy:  2016-09-20  ROM 1218 IRM Strategic:  add variables introduced by copyright and LEGDOC-LDC conversions  -->
   <xsl:variable name="acceptableID_Chars"
                 as="xs:string"
                 select=" 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_:' "/>
   <xsl:variable name="unallowedFirstCharAcceptableID_Chars"
                 as="xs:string"
                 select=" '0123456789.-' "/>
   <xsl:variable name="irmSection"
                 as="xs:string"
                 select="substring-after( /LEGDOC-LDC/lnv:CITE/ref:cite4thisresource/source_lnci:cite/source_lnci:content , 'IRM ' )"/>
   <xsl:param name="legacy-filename" as="xs:string" select=" '' "/>
   <!-- Creating variable to hold all upper-case letters -->
   <xsl:variable name="vUpperCase"
                 as="xs:string"
                 select=" 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' "/>
   <!-- Creating variable to hold all lower-case letters -->
   <xsl:variable name="vLowerCase"
                 as="xs:string"
                 select=" 'abcdefghijklmnopqrstuvwxyz' "/>
   <xsl:variable name="outputErrors"
                 as="xs:boolean"
                 select="if ($outputUnmatchedElements = 'true') then true() else false()"/>
   <!-- comments | text | PIs START -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Explanation</xd:b>
         </xd:p>
         <xd:p>This template rule copies over text nodes, comment nodes, and processing instructions to the target as is.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:template match="comment() | text() | processing-instruction()">
      <xsl:copy-of select="."/>
   </xsl:template>
   <!-- comments | text | PIs END -->   <xd:doc>
      <xd:desc>
         <xd:p>When matching the <xd:i class="xmlSource">/</xd:i> root element, just process child nodes.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:template match="/">
      <xsl:apply-templates/>
      <!--  for fab pipeline conversions, create an override template on the root node that defines tunnel parameters for $documentLNI and $targetPlatform.  Here is JCD example, note $outputTgroupXmlID may not be necessary for your conversion    -->
      <!--xsl:apply-templates>
			<xsl:with-param name="outputTgroupXmlID" tunnel="yes" as="xs:boolean" select="false()"/>
			<xsl:with-param name="documentLNI" tunnel="yes" as="xs:string" select="if (contains( */@guid:guid , 'urn:contentItem:' )) then
					substring-after( */@guid:guid , 'urn:contentItem:' )
				else if (*/@guid:guid) then
					*/@guid:guid
				else if (contains( */source_doc:metadata/source_mncrdocmeta:chunkinfo/source_mncrdocmeta:lnlni/@lnlni , 'urn:contentItem:' )) then
					substring-after( */source_doc:metadata/source_mncrdocmeta:chunkinfo/source_mncrdocmeta:lnlni/@lnlni , 'urn:contentItem:' )
				else if (*/source_doc:metadata/source_mncrdocmeta:chunkinfo/source_mncrdocmeta:lnlni/@lnlni) then
					*/source_doc:metadata/source_mncrdocmeta:chunkinfo/source_mncrdocmeta:lnlni/@lnlni
				else 'UNKNOWN' "/>
			<xsl:with-param name="targetPlatform" tunnel="yes" as="xs:string" select=" 'fabPipeline' "/>
		</xsl:apply-templates-->
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i class="xmlSource">lncr:*</xd:i> are just pass through, just process child elements.  <xd:i class="xmlSource">lncr:metadata</xd:i> is suppressed.</xd:p>
      </xd:desc>
   </xd:doc>
   <xsl:template match="lncr:*"><!--  drop wrapper applied to any lncr:* elements and ignore all children but elements  -->
      <xsl:apply-templates select="*"/>
   </xsl:template>

   <xsl:template match="lncr:metadata"/>
   <!--  suppress lncr:metadata and it's children  -->   <!--  matched templates  -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i class="xmlSource">* | @*</xd:i> (unmatched element and attribute nodes).  This template will throw an error, unless $outputUnmatchedElements is set to 'noErrors' as a parameter to the conversion.  Named template "outputErrorMessage" is called which will use the xsl:message instruction to generate an error message.  If $outputUnmatchedElements is set to 'ICCE' (the default), then the error message will be in the form of an exception element.</xd:p>
         <xd:p>Example exception handling output:</xd:p>
         <xd:pre>
&lt;exception timestamp="2017-01-04 14:54:22"&gt;
  &lt;filename&gt;test.xml&lt;/filename&gt;
  &lt;status&gt;W&lt;/status&gt;
  &lt;code&gt;402&lt;/code&gt;
  &lt;context&gt;/jcd:judicialCourtDecision[1]/jcd:information[1]/courtcase:history[1]/courtcase:historySummary[1]/courtcase:historyItem[1]/citation:citation[1]/citation:content[1]/citation:contentSpan[1]/@citation:contentSpanRole&lt;/context&gt;
  &lt;message&gt;Unexpected Attribute:  name()=citation:contentSpanRole encountered in source document!  Attribute value is=hierarchyReference&lt;/message&gt;
&lt;/exception&gt;
			</xd:pre>
      </xd:desc>
   </xd:doc>
   <xsl:template match="* | @*"><!--  matching this pattern is an error  -->
      <xsl:param name="errorStatus" tunnel="yes" as="xs:string" select=" 'W' "/>
      <!--  default is W for warning.  If 'E' is passed, then some systems will ensure the target document is not passed along in the pipeline  -->
      <xsl:param name="targetPlatform"
                 tunnel="yes"
                 as="xs:string"
                 select=" 'ROCKET' "/>
      <!--  default is ROCKET, which outputs exception element via xsl:message.  fabPipeline outputs to target document  -->
      <xsl:param name="documentLNI"
                 tunnel="yes"
                 as="xs:string"
                 select=" 'UNKNOWN' "/>
      <!--  Used for fabPipeline only, the LNI of the document since filename is not available  -->
      <!--  calling the elementOrAttributeCopy named template to copy the node as is   -->
      <!--    if element node, wrap withinin error element  -->
      <!--    if attribute node, also output an error attribute  -->
      <xsl:choose>
         <xsl:when test=" $outputUnmatchedElements = ( 'ROCKET' , 'ICCE' ) or $targetPlatform = 'fabPipeline' ">
            <xsl:call-template name="outputErrorMessage">
               <xsl:with-param name="messageText"
                               as="xs:string"
                               select="concat( if (self::*) then          'Unexpected Element:  name()='  (:  first item is either element (self::* = true()) or attribute (otherwise)  :)         else           'Unexpected Attribute:  name()=' ,        name() ,             (:  second item is element or attribute name  :)        ' encountered in source document!' ,   (:  third item  :)        if (self::* and text()) then       (:  last item is empty string if element and no text() nodes, or if attribute and no value.  :)          concat( '  Text value is=' , string-join( text() , '' ) ) (: Otherwise provide @ value or text() value  :)         else          if (not(self::*) and . != '') then            concat( '  Attribute value is=' , . )           else '' )"/>
               <xsl:with-param name="errorType" as="xs:string" select=" $targetPlatform "/>
               <!--   ROCKET or fabPipeline error type  -->
               <xsl:with-param name="errorCode"
                               as="xs:string"
                               select=" if (self::*) then '401' else '402' "/>
               <!--   401 if element node, 402 if attribute node  -->
               <xsl:with-param name="context" as="xs:string">
                  <xsl:call-template name="generateXPath"/>
               </xsl:with-param>
               <xsl:with-param name="status" as="xs:string" select=" $errorStatus "/>
               <xsl:with-param name="documentLNI" as="xs:string" select=" $documentLNI "/>
               <!--   fabPipeline only  -->
            </xsl:call-template>
         </xsl:when>
         <xsl:when test=" $outputUnmatchedElements = 'noErrors' ">
            <xsl:sequence select="."/>
         </xsl:when>
         <xsl:when test="not($outputErrors)"/>
         <xsl:when test="self::*"><!--  self:* is false for attribute nodes  -->
            <error:error>
               <xsl:sequence select="."/>
            </error:error>
            <xsl:call-template name="outputErrorMessage">
               <xsl:with-param name="messageText"
                               as="xs:string"
                               select="concat( 'Unexpected Element:  ' , name() , ' encountered in source document!' )"/>
            </xsl:call-template>
         </xsl:when>
         <xsl:otherwise><!--  must be an attribute  -->
            <xsl:attribute name="error:error" select="'error:  unexpected attribute!'"/>
            <xsl:sequence select="."/>
            <xsl:call-template name="outputErrorMessage">
               <xsl:with-param name="messageText"
                               as="xs:string"
                               select="concat( 'Unexpected Attribute:  ' , name(..) , '/@' , name() , ' (= ' , . , ') encountered in source document!' )"/>
            </xsl:call-template>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>Identifiers such as <xd:b>xml:id</xd:b> and
					<xd:b>ref:anchor/@id</xd:b> are ID data typed. Refer to the target
				schema/documentation to determine whether or not the value is ID data typed.  </xd:p>
         <xd:p>ID data types cannot contain colons and may not begin with a number (among other
				restrictions).  To properly map to a node that is ID data typed, conversion
				instructions state to substitute a colon or a space with an underscore. Also, prefix
				values beginning with a number, with an underscore. The xml schema will enforce
				these constraints post conversion.</xd:p>
         <xd:p>Do not convert the following cases:<xd:ul>
               <xd:li>Leading and trailing space(s) (e.g. id=" example_id_value_001 ")</xd:li>
               <xd:li>XML Entities (e.g. id="example_id_value_001&amp;#xA;")</xd:li>
            </xd:ul>      </xd:p>
         <xd:p>
            <xd:b>Example Markup - Source</xd:b>
         </xd:p>
         <xd:pre>

&lt;refpt id="&amp;#xA;          0KMN_2_F_FC__S_CLAUSE:HTDICT-TERM&amp;#xA;        " type="ext"/&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Example Markup - Target</xd:b>
         </xd:p>
         <xd:pre>

&lt;ref:anchor id="_0KMN_2_F_FC__S_CLAUSE_HTDICT-TERM" anchortype="global"/&gt;

	</xd:pre>
         <xd:p>Other identifiers, such as <xd:b>@anchoridref</xd:b> are <xd:i>not</xd:i> ID
				data typed. However, they may link to those that are. For example, an
					<xd:b>@anchoridref</xd:b> may point a
					<xd:b>ref:anchor/@id</xd:b>. Since <xd:b>@anchoridref</xd:b>
				is not ID data typed, the ID constraints will not be enforced by the schema post
				conversion, and will result in broken links. So, to ensure proper link resolution,
				it is imperative that such identifiers also follow the ID data type restrictions
					(<xd:b>@anchoridref</xd:b> in this case).</xd:p>
         <!--Changes2013-07-17: Added instructions for handling
					leading/trailing space(s) and XML entities.2013-07-10: Added instruction to replace space with
					underscore.-->
         <!-- SEP 2015-8-12 added -->
         <!--<xsltinclusion>
			<xsl:stylesheet version="2.0">
				<xsl:template match="*[@id]">
					<!-\- need to better combine with other @id functions-\->
					<!-\- need to handle entities, currently does not -\->
					<xsl:variable name="idval" select="@id"/>
					<xsl:choose>
						<xsl:when test="contains($idval, ':') or contains($idval, ' ') or contains('0123456789', substring($idval, 1, 1)) ">
							<xsl:variable name="idvalNoBegNums">
							   <!-\- need recursive function call here to remove leading numerals , currently only handles one  -\->
							   <xsl:choose>
								   <xsl:when test="contains('0123456789', substring(normalize-space($idval), 1, 1))">                           
									   <xsl:value-of select="normalize-space(substring($idval,2))"/>                           
								   </xsl:when>
								   <xsl:otherwise>
									   <xsl:value-of select="normalize-space($idval)"/>                           
								   </xsl:otherwise>
							   </xsl:choose>
							</xsl:variable>
							<xsl:copy>
								<xsl:attribute name="id" select="translate(normalize-space($idvalNoBegNums), ' :', '__')"/>
								<xsl:apply-templates select="@*[name()!='id'] | node()"/>
							</xsl:copy>               
						</xsl:when>
						<xsl:otherwise>
							<xsl:copy>
								<xsl:apply-templates select="@* | node()"/>
							</xsl:copy>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:template>

				need recursive function to remove leading numerals , currently only handles one 

			</xsl:stylesheet>
		</xsltinclusion>-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_identifier-LxAdv-ID_data_type-HandlingPatternRestrictions.dita  -->
   <!-- 
**************************************************************************************
NOTE:
The context node for this template MUST be a string value.
This template returns a string value that has been modified to 
meet the restrictions of the xs:id datatype.

It was originally intended for xml:id, id, and ID attributes, but would
also work for anything else where the xs:id datatype is required.

This template does not handle ALL entities,as 
Saxon will by default, *resolve* entities before this template 
processes the string.  XSLT cannot change this behavior. It will now identify and
replace pointy brackets and ampersands, however, with an underscore as resolving
those would definitely be a problem for the parser.

****************************************************************************************

-->
   <xsl:template name="normalizeIdString"><!-- first step: replace illegal characters with an underscore --><!-- WPK 2017-10-19.  Added mdash to list of disallowed chars. 
		 WPK 2017-10-24.  	
				added   (left double quote #x93;)
				added   (non printable control character #x80;)
				added Â
				added Ã
				added ¢
				added –   (en dash &#x2013;) 
				
			Background.  These are likely encoding issues.  This allows for valid IDs to be created because they are invalid characters nevertheless.
			AU10 PS2017050503412620096LNIAULNPG_input_BUS_GUID_74731000.xml	
			in		Ã¢ÂÂ
			out		Ã¢Â&#x80;Â&#x93;
			
			Ã¢    becomes Ã¢
			Â    becomes Â&#x80;  (control character displays as blank)
			Â    becomes Â&#x93;  (back slanted double quote)
			
			http://www.i18nqa.com/debug/utf8-debug.html
			(expected is not what LN expects but what the website indicates as expected in its context)
			Unicode...Windows1252...Expected...Actual...UTF-8 Bytes
			U+00A2    0xA2          ¢          Â¢       %C2 %A2     (not tilde, but carrot - not exactly what is in data)
			U+201C    0x93          “          â€œ      %E2 %80 %9C   
			U+00E2    0xE2          â          Ã¢       %C3 %A2     (carrot as found in data)
			
			AU10 PS2017050812233824638LNIAULNPG_input_BUS_GUID_93431000.xml
			–   (en dash &#x2013;) 
	-->
      <xsl:variable name="idWithoutDisallowedChars">
         <xsl:value-of select="translate(. , ',!#$%()*+/:;=?@![]\^`|{}~’‘—&#x93;&#x80;ÂÃ¢–', '__________________________________')"/>
      </xsl:variable>
      <!-- get rid of stubborn entities-->
      <xsl:variable name="idWithoutDisallowedEnts">
         <xsl:analyze-string select="$idWithoutDisallowedChars" regex="&lt;|&gt;|&amp;|'">
            <xsl:matching-substring>
               <xsl:text>_</xsl:text>
            </xsl:matching-substring>
            <xsl:non-matching-substring>
               <xsl:value-of select="."/>
            </xsl:non-matching-substring>
         </xsl:analyze-string>
      </xsl:variable>
      <!-- remove leading and trailing spaces and entities -->
      <xsl:variable name="idWoLeadingSpaces">
         <xsl:value-of select="replace($idWithoutDisallowedEnts, '^\s+', '')"/>
      </xsl:variable>
      <xsl:variable name="idWoTrailingSpaces"><!-- this should also handle resolved whitespace and ampersand entities -->
         <xsl:value-of select="replace($idWoLeadingSpaces, '\s+$', '')"/>
      </xsl:variable>
      <xsl:variable name="idWoInternalSpaces">
         <xsl:value-of select="replace($idWoTrailingSpaces, '\s+', '_')"/>
      </xsl:variable>
      <!--  prepend underscore with leading values of period, hyphen, or numeral -->
      <xsl:choose>
         <xsl:when test="matches($idWoInternalSpaces , '^[0-9]|^\.|^\-')">
            <xsl:value-of select="concat('_', $idWoInternalSpaces)"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="$idWoInternalSpaces"/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!-- named template normalizeIdString_dropchars receives the same input (string) as 
	normalizeIdString, but replaces all illegal characters and spaces with nothing. It still
	prepends an underscore if the string begins with a number or illegal starting character. 
	The output should still be a valid id datatype and NMTOKEN.  This is less commonly used
	for IDs than the normalizeIdString template but may be useful for some other attributes-->
   <xsl:template name="normalizeIdString_dropchars"><!-- first step: replace illegal characters with an underscore -->
      <xsl:variable name="idWithoutDisallowedChars">
         <xsl:value-of select="translate(. , ',!#$%()*+/:;=?@![]\^`|{}~’‘', '')"/>
      </xsl:variable>
      <!-- get rid of stubborn entities-->
      <xsl:variable name="idWithoutDisallowedEnts">
         <xsl:analyze-string select="$idWithoutDisallowedChars" regex="&lt;|&gt;|&amp;|'">
            <xsl:matching-substring/>
            <xsl:non-matching-substring>
               <xsl:value-of select="."/>
            </xsl:non-matching-substring>
         </xsl:analyze-string>
      </xsl:variable>
      <!-- remove leading and trailing spaces and entities -->
      <xsl:variable name="idWoLeadingSpaces">
         <xsl:value-of select="replace($idWithoutDisallowedEnts, '^\s+', '')"/>
      </xsl:variable>
      <xsl:variable name="idWoTrailingSpaces"><!-- this should also handle resolved whitespace and ampersand entities -->
         <xsl:value-of select="replace($idWoLeadingSpaces, '\s+$', '')"/>
      </xsl:variable>
      <xsl:variable name="idWoInternalSpaces">
         <xsl:value-of select="replace($idWoTrailingSpaces, '\s+', '')"/>
      </xsl:variable>
      <!--  prepend underscore with leading values of period, hyphen, or numeral -->
      <xsl:choose>
         <xsl:when test="matches($idWoInternalSpaces , '^[0-9]|^\.|^\-')">
            <xsl:value-of select="concat('_', $idWoInternalSpaces)"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="$idWoInternalSpaces"/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!--
stolen from the web, and for reference: id datatypes must follow NCName restrictions		
		
Practical restrictions of an NCName

The practical restrictions of NCName are that it cannot contain several symbol characters like :, @,  $, %, &, /, +, ,, ;, 
whitespace characters or different parenthesis. Furthermore an NCName cannot begin with a number, dot or minus character 
although they can appear later in an NCName.

Allowed characters: -, ., 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, _, 
a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z

Also, - and . cannot be used as the first character of the value.

Disallowed characters: , !, ", #, $, %, &, ', (, ), *, +, ,, /, :, ;, <, =, >, ?, @, [, \, ], ^, `, {, |, }, ~ -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>Identifier values in the source, such as <xd:i>@id</xd:i>, may not have
					uniqueness constraints applied to them. As a result, duplicate identifier values
					may exist. If such values are mapped to a target such as
						<xd:b>@xml:id</xd:b>, schema validation errors will occur. The
						<xd:b>@xml:id</xd:b> attribute is ID data typed, and therefore
						<xd:i>does</xd:i> have the uniqueness constraint applied. In this case:<xd:ul>
               <xd:li>convert the first value in the duplicate sequence</xd:li>
               <xd:li>drop the remaining values in the duplicate sequence</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML 1</xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;table id="T0103011"&gt; ... &lt;/table&gt; &lt;/p&gt;
					&lt;page count="302" /&gt; &lt;p&gt; &lt;table id="T0103011"&gt; ...
					&lt;/table&gt; &lt;/p&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML 1</xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;table xml:id="T0103011"&gt; ... &lt;/table&gt; &lt;/p&gt;
					&lt;ref:page num="302"/&gt; &lt;p&gt; &lt;table&gt; ... &lt;/table&gt;
					&lt;/p&gt; </xd:pre>
         <!--Changes2012-10-18: Created. -->
         <!-- SEP 2015-8-12 added;  need to better combine with other @id functions -->
         <!--<xsltinclusion>
				<xsl:stylesheet version="2.0">
				<xsl:template match="*[@id]">
					<xsl:variable name="idval" select="@id"/>
					<xsl:choose>
						<xsl:when test="preceding::*[@id=$idval]">
							<xsl:copy>
								<xsl:apply-templates select="@*[name()!='id'] | node()"/>
							</xsl:copy>               
						</xsl:when>
						<xsl:otherwise>
							<xsl:copy>
								<xsl:apply-templates select="@* | node()"/>
							</xsl:copy>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:template>      
			</xsl:stylesheet>
			</xsltinclusion>-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_identifier-LxAdv-ID_data_type-HandlingDuplicates.dita  -->
   <!-- 1.	 There are @id and @ID elements in dictionarydoc-norm.dtd.  
		In some cases these need to be transformed to xml:id and in other cases they need to be transformed to @id.  
		All of them need to be checked for duplicate values. We know these 4 cases:
           The mapping of refpt/@id to ref:anchor/@id - IS DONE IN THIS AND modules/nonamespace/Rosetta_refpt-LxAdv-ref.anchor.xsl
           The following mapping is NOT YET DONE as of 3/20/17 because these modules are not in scope for HK05:
           The mapping of footnote/@fntoken to footnote/ref:anchor/@id
           The mapping fnr/@fnrtoken to footnote-ref/ref:anchor/@id
           The mapping of fnr/@fntoken to foonote-ref/@anchoridref
 -->
   <!-- keys for testing -->
   <!--
	<xsl:key name="idTypeValue" match="*[@id]" use="@id"/>
	<xsl:key name="idTypeValue" match="*[@ID]" use="@ID"/>
	<xsl:key name="idTypeValue" match="footnote" use="@fntoken"/>
	<xsl:key name="idTypeValue" match="fnr" use="@fnrtoken"/>

	<xsl:include href="Rosetta_identifier-LxAdv-ID_data_type-HandlingPatternRestrictions.xsl"/>
	
	<xsl:template match="refpt">
		<xsl:apply-templates/>	
		**<xsl:call-template name="amIaDuplicate"/>**
	</xsl:template>
	<xsl:template match="footnote">
		<xsl:apply-templates/>	
		**<xsl:call-template name="amIaDuplicate"/>**
	</xsl:template>
	<xsl:template match="fnr">
		<xsl:apply-templates/>	
		**<xsl:call-template name="amIaDuplicate"/>**
	</xsl:template>
	<xsl:template match="title">
		<xsl:apply-templates/>
		<xsl:if test="@ID or @id">	
			**<xsl:call-template name="amIaDuplicate"/>**
		</xsl:if>	
	</xsl:template>-->
   <!-- end testing code -->
   <xsl:template match="@id | @ID">
      <xsl:if test="not(.='')">
         <xsl:variable name="dupStatus">
            <xsl:for-each select="parent::*">
               <xsl:call-template name="amIaDuplicate"/>
            </xsl:for-each>
         </xsl:variable>
         <xsl:if test="$dupStatus = 'false'">
            <xsl:choose>
               <xsl:when test="local-name(parent::*)='refpt'">
                  <xsl:attribute name="id">
                     <xsl:call-template name="normalizeIdString"/>
                  </xsl:attribute>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:attribute name="xml:id">
                     <xsl:call-template name="normalizeIdString"/>
                  </xsl:attribute>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:if>
      </xsl:if>
   </xsl:template>
   <!-- *****************************************************************************
			 This named template "amIaDuplicate" returns 'false' if the @id or @ID is 
			 a unique */@ID or  */@id in the document. It returns 'true' if the @id 
			 or @ID is the 2nd or subsequent @id or @ID in the document with the same value.
			 The parent element name does not matter; whether the attribute name is @id 
			 or @ID does not matter.
			 
			 It must be used in conjunction with
			 
			 	<xsl:key name="idTypeValue" match="*[@id]" use="@id"/> 
				<xsl:key name="idTypeValue" match="*[@ID]" use="@ID"/>
				(if your stream contains footnotes also include)
				<xsl:key name="idTypeValue" match="footnote" use="@fntoken"/>
	            <xsl:key name="idTypeValue" match="fnr" use="@fnrtoken"/>
	            
			BOTH inserted at the TOP LEVEL of the stylesheet driver.
			
			It needs to be called from the element containing the attribute as a context
			node, not the attribute itself, or it won't work
			
			For example:
				<xsl:template match="refpt">
					<xsl:call-template name="amIaDuplicate"/>	
				</xsl:template>
				
			will return true if this is a refpt with unique @id or is the first of 
			more than one element in the document having the same @id or @ID value.
			How the context template handles this boolean value is left as an exercise
			for the developer of that template. 
						
			If the test for unique values is element-specific or attribute-specific
			within the document, a copy of/variation on this code with a more specific key is 
			recommended rather than reusing this generic template.
			
			- JL
		********************************************************************************-->
   <xsl:template name="amIaDuplicate">
      <xsl:choose>
         <xsl:when test="not(key('idTypeValue', @id | @ID | @fntoken[parent::footnote] | @fnrtoken[parent::fnr])[2])"><!-- id value is unique to document -->
            <xsl:text>false</xsl:text>
         </xsl:when>
         <xsl:otherwise>
            <xsl:variable name="contextNodeGenID" select="generate-id(.)"/>
            <xsl:choose>
               <xsl:when test="key('idTypeValue', @id | @ID | @fntoken[parent::footnote] | @fnrtoken[parent::fnr])[local-name(.)!=('refpt', 'footnote' , 'fnr')] and key('idTypeValue', @id | @ID)[local-name(.)=('refpt' , 'footnote', 'fnr')]"><!--*** key has mixed refpt, footnote, fnr / and other values ***--><!-- non-refpt/footenote/fnr values are all dupes by definition --><!-- TO DO only the first refpt/footnote/fnr key is false --><!-- so IF I am the first refpt/footnote/fnr, I am the only nondupe -->
                  <xsl:for-each select="key('idTypeValue', @id | @ID | @fntoken[parent::footnote] | @fnrtoken[parent::fnr])[local-name(.)=('refpt' , 'footnote', 'fnr')][1]">
                     <xsl:choose>
                        <xsl:when test="generate-id(.)=$contextNodeGenID">false</xsl:when>
                        <xsl:otherwise>true</xsl:otherwise>
                     </xsl:choose>
                  </xsl:for-each>
               </xsl:when>
               <xsl:otherwise><!-- everything with matching id is a refpt/footnote/fnr or everything with matching id is not a 
							refpt/footnote/fnr	so everything but the first id is a dup -->
                  <xsl:for-each select="key('idTypeValue', @id | @ID | @fntoken[parent::footnote] | @fnrtoken[parent::fnr])[1]">
                     <xsl:choose>
                        <xsl:when test="generate-id(.)=$contextNodeGenID">false</xsl:when>
                        <xsl:otherwise>true</xsl:otherwise>
                     </xsl:choose>
                  </xsl:for-each>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!--<xsl:template match="@xml:id">	
		<xsl:variable name="idval" select="."/>
		<xsl:if test="not(preceding::*[@xml:id=$idval])">
			<xsl:attribute name="xml:id">	
				<xsl:call-template name="normalizeIdString"/>
			</xsl:attribute>
		</xsl:if>		
	</xsl:template>	-->   <!--** Start General Markup  07-06-2017 4:16 AM-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>alttitle</xd:i> becomes <xd:b>alttitle</xd:b>. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;leg:heading&gt;
    &lt;desig searchtype="CHAP-NUM"&gt;&lt;designum&gt;&lt;refpt id="CPSA.SDCR.SDCR.PT2" type="ext"/&gt;Part II&lt;/designum&gt;&lt;/desig&gt;
    &lt;title searchtype="CHAP-TITLE"&gt; &amp;#x2014; Application of Part I [&lt;emph typestyle="it"&gt;Supreme Court Only&lt;/emph&gt;]&lt;/title&gt;
    &lt;alttitle&gt;Part III &amp;#x2014; The Civil Division &amp;#x2014; Procedures under Special Acts [&lt;emph typestyle="it"&gt;District Court Only&lt;/emph&gt;]&lt;/alttitle&gt;
&lt;/leg:heading&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
    &lt;desig&gt;Part II&lt;/desig&gt;
    &lt;title&gt; &amp;#x2014; Application of Part I [&lt;emph typestyle="it"&gt;Supreme Court Only&lt;/emph&gt;]&lt;/title&gt;
    &lt;alttitle&gt;Part III &amp;#x2014; The Civil Division &amp;#x2014; Procedures under Special Acts [&lt;emph typestyle="it"&gt;District Court Only&lt;/emph&gt;]&lt;/alttitle&gt;
&lt;/heading&gt;

	</xd:pre>
         <!--Changes2012-09-06: -->
      </xd:desc>
   </xd:doc>
   <xsl:template match="alttitle"><!--  Original Target XPath:  alttitle   -->
      <alttitle>
         <xsl:apply-templates select="@* | node()"/>
      </alttitle>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a
                shared topic rather than duplicated to ensure consistency and accuracy. The xml
                snippets contained in this topic reflect markup needed for the Apollo image handling
                application. The UK is the first LBU to move from Apollo to the Blobstore
                application for image handling. Therefore, if this is a UK conversion instruction
                document, please refer to the following topics for correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to
                        <xd:b>ref:inlineobject</xd:b> for BLOBSTORE images
                        (id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Please note that the conversion of <xd:i>blockquote</xd:i> must follow specific rules based on its location in the source document.</xd:b>
                These context sensitive aspects are not all discussed in detail in the general instructions given here. 
                Please see the specific document type instructions for more information regarding the context sensitive conversion details of this element. 
                If there is any contradiction between these general instructions and the document type specific instructions, the specific instructions should be given precedence.
            </xd:p>
         <xd:p>In general, <xd:i>blockquote</xd:i> becomes <xd:b>blockquote</xd:b>.</xd:p>
         <xd:p>If <xd:i>figure</xd:i> or <xd:i>legfragment</xd:i> occur within
                <xd:i>blockquote</xd:i> then drop <xd:i>blockquote</xd:i>
                element.</xd:p>
         <xd:p>
            <xd:b>If <xd:i>insert-line</xd:i> occurs as the only child within <xd:i>blockquote</xd:i> 
                then drop outer <xd:i>blockquote</xd:i> in NewLexis conversion.</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;blockquote&gt;
  &lt;p&gt;
	&lt;text&gt;
	  &lt;emph typestyle="it"&gt;Ordinary Resolution&lt;/emph&gt;
	&lt;/text&gt;
  &lt;/p&gt;
  &lt;p&gt;
	&lt;text&gt;
	  &lt;emph typestyle="it"&gt;Approval of new issue of Securities&lt;/emph&gt;
	&lt;/text&gt;
  &lt;/p&gt;
  &lt;p&gt;
	&lt;text&gt;To consider, and if thought fit, pass with or without amendment, the following resolution as an ordinary resolution:&lt;/text&gt;
  &lt;/p&gt;
  &lt;p&gt;
	&lt;blockquote&gt;
	  &lt;p&gt;
		&lt;text&gt;&amp;#x201c;That for the purposes of ASX Listing Rule 7.1 and for all other purposes, the Company approves and agrees to the issue of 35,000,000 ordinary fully paid shares in the capital of the Company to Greater Pacific Gold Limited as consideration for the variation of the Joint Venture Agreement entered into between the Company and Greater Pacific Gold Limited on the terms and conditions set out in the Explanatory Statement accompanying this Notice of Meeting.&amp;#x201d;
		&lt;/text&gt;
	  &lt;/p&gt;
	&lt;/blockquote&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;blockquote&gt;
  &lt;p&gt;
	&lt;text&gt;
	  &lt;emph typestyle="it"&gt;Ordinary Resolution&lt;/emph&gt;
	&lt;/text&gt;
  &lt;/p&gt;
  &lt;p&gt;
	&lt;text&gt;
	  &lt;emph typestyle="it"&gt;Approval of new issue of Securities&lt;/emph&gt;
	&lt;/text&gt;
  &lt;/p&gt;
  &lt;p&gt;
	&lt;text&gt;To consider, and if thought fit, pass with or without amendment, the following resolution as an ordinary resolution:&lt;/text&gt;
  &lt;/p&gt;
  &lt;p&gt;
	&lt;blockquote&gt;
	  &lt;p&gt;
		&lt;text&gt;&amp;#x201c;That for the purposes of ASX Listing Rule 7.1 and for all other purposes, the Company approves and agrees to the issue of 35,000,000 ordinary fully paid shares in the capital of the Company to Greater Pacific Gold Limited as consideration for the variation of the Joint Venture Agreement entered into between the Company and Greater Pacific Gold Limited on the terms and conditions set out in the Explanatory Statement accompanying this Notice of Meeting.&amp;#x201d;
		&lt;/text&gt;
	  &lt;/p&gt;
	&lt;/blockquote&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

	</xd:pre>
         <xd:p>If source document having "2" or more <xd:i>blockquote</xd:i> elements in sibling,
            then convert all <xd:i>blockquote</xd:i> into only one
            <xd:b>blockquote</xd:b> element in NL conversion.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
            
            &lt;blockquote&gt;
            &lt;p&gt;&lt;text&gt;[24] Showing the jury what the appellant looked like when wearing the balaclava and overalls that were in evidence (with or without the addition of sunglasses that had not been received in evidence) could not &amp;ldquo;rationally affect (directly or indirectly) the assessment of the probability of the existence of a fact in issue in the proceeding&amp;rdquo;. &lt;fnr fnrtoken="ABCE.ACE.1002.ANT15-R" fntoken="ABCE.ACE.1002.ANT15"&gt;15&lt;/fnr&gt; The central issue at the appellant&amp;rsquo;s trial was whether he was the robber. There was no dispute that there had been a robbery. There was no dispute that the robber had been wearing a balaclava, overalls and sunglasses.&lt;/text&gt;&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;blockquote&gt;
            &lt;p&gt;&lt;text&gt;[25] No one asserted, however, that the person wearing the disguise of balaclava, overalls and sunglasses could be identified by looking at that person during the robbery or could be identified by looking at the security photographs. None of the witnesses, not even the witness who had seen the robber without the balaclava pulled down over his face, said that they could recognise the man who was thus attired. None of the witnesses, and neither trial counsel, asserted that the person depicted in the security photographs could be identified.&lt;/text&gt;&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;blockquote&gt;
            &lt;p&gt;&lt;text&gt;[26] Looking at the appellant wearing the balaclava and overalls (with or without sunglasses) enabled a comparison between no more than the items he put on and what was depicted in the security photographs. But that comparison could be drawn without the appellant being asked to put them on. Dressing the appellant in the items provided no information to the jury that could rationally affect, directly or indirectly, the determination of any fact in issue because it revealed nothing about the wearer and nothing about the appellant that was not already apparent to the jury observing him in the dock.&lt;/text&gt;&lt;/p&gt;
            &lt;/blockquote&gt;
        </xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
            
            &lt;blockquote&gt;
            &lt;p&gt;&lt;text&gt;&amp;#x005B;24&amp;#x005D; Showing the jury what the appellant looked like when wearing the balaclava and overalls that were in evidence &amp;#x0028;with or without the addition of sunglasses that had not been received in evidence&amp;#x0029; could not &amp;#x201C;rationally affect &amp;#x0028;directly or indirectly&amp;#x0029; the assessment of the probability of the existence of a fact in issue in the proceeding&amp;#x201D;. &lt;footnote/&gt; The central issue at the appellant&amp;#x2019;s trial was whether he was the robber. There was no dispute that there had been a robbery. There was no dispute that the robber had been wearing a balaclava, overalls and sunglasses.&lt;/text&gt;&lt;/p&gt;
            &lt;p&gt;&lt;text&gt;&amp;#x005B;25&amp;#x005D; No one asserted, however, that the person wearing the disguise of balaclava, overalls and sunglasses could be identified by looking at that person during the robbery or could be identified by looking at the security photographs. None of the witnesses, not even the witness who had seen the robber without the balaclava pulled down over his face, said that they could recognise the man who was thus attired. None of the witnesses, and neither trial counsel, asserted that the person depicted in the security photographs could be identified.&lt;/text&gt;&lt;/p&gt;
            &lt;p&gt;&lt;text&gt;&amp;#x005B;26&amp;#x005D; Looking at the appellant wearing the balaclava and overalls &amp;#x0028;with or without sunglasses&amp;#x0029; enabled a comparison between no more than the items he put on and what was depicted in the security photographs. But that comparison could be drawn without the appellant being asked to put them on. Dressing the appellant in the items provided no information to the jury that could rationally affect, directly or indirectly, the determination of any fact in issue because it revealed nothing about the wearer and nothing about the appellant that was not already apparent to the jury observing him in the dock.&lt;/text&gt;&lt;/p&gt;
            &lt;/blockquote&gt;
        </xd:pre>
         <xd:p>
            <xd:b>Source XML where blockquote contains a figure</xd:b>
         </xd:p>
         <xd:pre>

&lt;blockquote&gt;
    &lt;figure&gt;
        &lt;glp:note&gt;
            &lt;h&gt;(MAB PROGRAMME STRUCTURE)&lt;/h&gt;
        &lt;/glp:note&gt;
        &lt;inlineobject type="image" attachment="ln-server" filename="pbep-g00121.gif"/&gt;
    &lt;/figure&gt;
&lt;/blockquote&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML where blockquote contains a figure</xd:b>
         </xd:p>
         <xd:pre>

&lt;figure&gt;
    &lt;note&gt;
        &lt;bodytext&gt;
            &lt;h&gt;(MAB PROGRAMME STRUCTURE)&lt;/h&gt;
        &lt;/bodytext&gt;
    &lt;/note&gt;
    &lt;ref:inlineobject&gt;
        &lt;ref:locator&gt;
            &lt;ref:locator-key&gt;
                &lt;ref:key-name name="object-key"/&gt;
                &lt;ref:key-value value="X-Y-pbep-g00121"/&gt; &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
            &lt;/ref:locator-key&gt;
            &lt;ref:locator-params&gt;
                &lt;proc:param name="componentseq" value="1"/&gt;
                &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                &lt;proc:param name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
            &lt;/ref:locator-params&gt;
        &lt;/ref:locator&gt;
    &lt;/ref:inlineobject&gt;
&lt;/figure&gt;

	</xd:pre>
         <!--Changes2016-07-29: Added Note about xml snippets that illustrate
                image handling. Note summarizes move from Apollo to Blobstore application. UK is
                first LBU to move to Blobstore. VSTS 761462013-05-08: Extended the list of allowable values for image handling.2013-05-01: Removed instructions for section
                "Pre-Release 4.0" because according to latest Apollo markup, section
                "Release 4.0 and after" and section "Pre-Release 4.0" now have
                similar conversion markup.2013-04-30: Updated target sample according to latest Apollo markup.2013-02-18: Created two sections, one for "Release 4.0 and after" and another for "Pre-Release 4.0".2013-02-18: Updated target example where blockquote contains a figure. 2013-02-18: Removed CR number LBAM2011121607211100. 2012-10-26: Updated ref:locator markup in Target sample. 2011-09-12: Created.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_blockquote-LxAdv-blockquote.dita  -->
   <!-- JL: refactored :
        1. if legfragment will end up being a child of bodytext if we strip away the paragraph and/or blockquote wrapper, we strip the 
        blockquote wrapper. This leads to an extensive list of potential input parents in the first condition.  PLEASE NOTE: this 
        condition works together with the generic Rosetta_p-LxAdv-p.xsl module.
        
        2. If blockquote has certain other children, such as figure, we remove the blockquote wrapper for those children.
        
        3. If blockquote doesn't meet conditions 1 and 2 above, and if it has adjacent sibling blockquotes that also don't meet the conditions 1 and 2 above, that 
        blockquote and its siblings are merged into one blockquote element.
        
    -->
   <!-- REFACTORED AGAIN!!!!!!
        ANY CONDITION OF COMPLEXITY SHOULD PREVENT MERGE.
        THESE CONDITIONS PREVENT MERGE:
        	    1. legfragment conditions - this is the case where there is no merge and the blockquote wrapper is dropped
        	    2. child bump-ups - this is the case some children become siblings of blockquote and blockquote wrappers
        	    will open and close as necessary until all children  are output properly
        	    3. blockquote is empty - nothing will be output and nothing will be merged
        	    4. blockquote will be wrapped in other elements such as bodytext.
        	    5. any other specific conditions that will make merging difficult or impossible.
        	    
        	    THESE CONDITIONS CAUSE A  MERGE to start:
        	    current blockquote does not have a prevent-merge condition
        	    first preceding sibling is not a blockquote with a merge condition
        	    
        	    THESE CONDITIONS CAUSE A MERGE TO continue on
        	     current blockquote does not have a prevent-merge condition
        	     first following sibling is a blockquote that does not have a prevent-merge condition.
        	     
        	    THESE CONDITIONS CAUSE A MERGE TO stop
        	    current blockquote does not have a prevent-merge condition
        	    first following sibling is not a blockquote with a merge condition.
        	    
        	    IF YOU ADD A NEW CONDITION TO PREVENT MERGE to this template: 
        	    make sure to add an xsl:when with the condition at the annotated place
        	    with the desired non-merged output; also add the condition as an xsl:when to 
        	    the named 'doImeetMergeConditions' template with the value 'false'.
        	    
        	    -->
   <xsl:template match="blockquote">
      <xsl:variable name="currentMergeConditions">
         <xsl:call-template name="doImeetMergeConditions"/>
      </xsl:variable>
      <xsl:variable name="precedingSibMergeConditions">
         <xsl:choose>
            <xsl:when test="not(preceding-sibling::*[1])">false</xsl:when>
            <xsl:otherwise>
               <xsl:for-each select="preceding-sibling::*[1]">
                  <xsl:call-template name="doImeetMergeConditions"/>
               </xsl:for-each>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:variable name="followingingSibMergeConditions">
         <xsl:choose>
            <xsl:when test="not(following-sibling::*[1])">false</xsl:when>
            <xsl:otherwise>
               <xsl:for-each select="following-sibling::*[1]">
                  <xsl:call-template name="doImeetMergeConditions"/>
               </xsl:for-each>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:choose><!-- THIS IS A PREVENT-MERGE CONDITION --><!-- JD: 2017-07-21: added trap for empty node to match DT output. (suppress <blockquote/> from output  -->
         <xsl:when test="not(node())"/>
         <!-- Vikas Rohilla : 2017-08-09 added parent is case:factsummary            -->
         <xsl:when test="legfragment and not(child::*[2]) and (parent::p[parent::*:bodytext or parent::pgrp or parent::li or parent::fnbody or parent::glp:note or parent::case:judgmentbody or parent::case:appendix] or parent::*:bodytext or parent::li or parent::pgrp or parent::fnbody or parent::glp:note or parent::case:judgmentbody or parent::case:appendix or parent::case:factsummary)"><!-- THIS IS A PREVENT-MERGE CONDITION -->
            <xsl:apply-templates/>
         </xsl:when>
         <!--<xsl:when test="ancestor::frm:divs[$streamID='UK12']">
                <xsl:apply-templates select="node()"/>
            </xsl:when>-->
         <xsl:when test="parent::case:decisionsummary and $streamID='UK03'"><!-- THIS IS A PREVENT-MERGE CONDITION -->
            <bodytext>
               <blockquote>
                  <xsl:apply-templates select="node()"/>
               </blockquote>
            </bodytext>
         </xsl:when>
         <xsl:when test="$streamID='AU09' and parent::case:decisionsummary and child::case:embeddedcase/child::case:content"><!-- THIS IS A PREVENT-MERGE CONDITION -->
            <xsl:apply-templates select="@* | node()"/>
         </xsl:when>
         <xsl:when test="figure or (insert-line and not(child::*[2]))                 or (parent::glp:note and descendant::inlineobject[@filename = 'leg1.gif' or @filename = 'leg1.png'])"><!-- THIS IS A PREVENT-MERGE CONDITION --><!-- do not group because it introduces too much complexity. These are your normal bump-ups.
                -->
            <xsl:for-each-group select="*"
                                group-adjacent="if (self::figure or (self::insert-line and not(parent::blockquote/child::*[2]))                     or (parent::blockquote[parent::glp:note] and descendant-or-self::inlineobject[@filename = 'leg1.gif' or @filename = 'leg1.png'])) then                     0                     else                     1">
               <xsl:choose>
                  <xsl:when test="current-grouping-key()=0">
                     <xsl:apply-templates select="current-group()"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <blockquote>
                        <xsl:apply-templates select="current-group()"/>
                     </blockquote>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:for-each-group>
         </xsl:when>
         <!-- IF YOU HAVE ANY OTHER CONDITION REQUIRING SPECIAL HANDLING AND OPTING OUT OF THE MERGE, ADD IT HERE
           AND IN THE  NAMED 'doImeetMergeConditions' TEMPLATE BELOW.  ASSIGN IT THE VALUE 'false' IN THAT NAMED TEMPLATE.-->
         <!-- THE FOLLOWING CONDITION IS A CONDITION THAT ALLOWS MERGE TO START
            IT MUST EXCLUDE ALL PREVENT-MERGE CONDITIONS - this can be done by placing prevent-merge conditions first
            IT MUST SPECIFICALLY INCLUDE ALL START-MERGE CONDITIONS 
            -->
         <xsl:when test="$currentMergeConditions='true' and $precedingSibMergeConditions='false'"><!-- this is a simple blockquote and  can be the start of a group  as long as all the simple blockquotes are consecutive-->
            <blockquote>
               <xsl:apply-templates/>
               <xsl:if test="$followingingSibMergeConditions='true'">
                  <xsl:apply-templates select="following-sibling::*[1][self::blockquote]" mode="next"/>
               </xsl:if>
            </blockquote>
         </xsl:when>
         <xsl:when test="$precedingSibMergeConditions='true' and $currentMergeConditions='true'"><!-- this becomes part of the merge so we don't want to hit it twice --></xsl:when>
         <xsl:otherwise>
            <blockquote>
               <xsl:apply-templates/>
            </blockquote>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="blockquote" mode="next"><!-- we do not need to test for current merge conditions because we have already tested for it in the condition where the template is called  -->
      <xsl:variable name="followingingSibMergeConditions">
         <xsl:choose>
            <xsl:when test="not(following-sibling::*[1])">false</xsl:when>
            <xsl:otherwise>
               <xsl:for-each select="following-sibling::*[1]">
                  <xsl:call-template name="doImeetMergeConditions"/>
               </xsl:for-each>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:variable>
      <xsl:apply-templates/>
      <xsl:if test="$followingingSibMergeConditions='true'">
         <xsl:apply-templates select="following-sibling::*[1][self::blockquote]" mode="next"/>
      </xsl:if>
   </xsl:template>

   <xsl:template name="doImeetMergeConditions"><!-- NOTE IF YOU ADD A NEW CONDITION TO THE NON-MERGE CONDITIONS ABOVE YOU NEED TO ADD IT HERE TOO! -->
      <xsl:choose>
         <xsl:when test="not(self::blockquote)">false</xsl:when>
         <xsl:when test="not(node())">false</xsl:when>
         <xsl:when test="legfragment and not(child::*[2]) and                  (parent::p[parent::*:bodytext or parent::pgrp or parent::li or parent::fnbody or parent::glp:note or parent::case:judgmentbody                  or parent::case:appendix] or parent::*:bodytext or parent::li or parent::pgrp or parent::fnbody or parent::glp:note or                  parent::case:judgmentbody or parent::case:appendix)">false</xsl:when>
         <xsl:when test="parent::case:decisionsummary and $streamID='UK03'">false</xsl:when>
         <xsl:when test="$streamID='AU09' and parent::case:decisionsummary and child::case:embeddedcase/child::case:content">false</xsl:when>
         <xsl:when test="figure or (insert-line and not(child::*[2]))                 or (parent::glp:note and descendant::inlineobject[@filename = 'leg1.gif' or @filename = 'leg1.png'])">false</xsl:when>
         <xsl:otherwise>true</xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>AU-Commentary, Form and Precedents:</xd:b> If <xd:i>blockquote</xd:i> occurred as a direct child of <xd:i>level[@leveltype="prec"]/bodytext</xd:i> and there is no sibling element of <xd:i>blockquote</xd:i> then element  <xd:i>blockquote</xd:i> will be suppressed but its content will be retained in NL conversion.</xd:p>
         <xd:p>
            <xd:b>Source XML: element <xd:i>blockquote</xd:i> appears as a direct child of <xd:i>level[@leveltype="prec"]/bodytext</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
            &lt;level id="CFN_ADM.SGM_CFN.ADM.C1.120-1" leveltype="prec" toc-caption="120.1 Form 6: Writ" subdoc="true"&gt;
            &lt;heading searchtype="FORM"&gt;
            &lt;desig searchtype="FORM-NUM"&gt;&lt;designum&gt;&lt;refpt type="ext" id="CFN.ADM.C1.120-1"&gt;&lt;/refpt&gt;120.1&lt;/designum&gt;&lt;/desig&gt;
            &lt;title searchtype="FORM-TITLE"&gt;Form 6: Writ&lt;/title&gt;
            &lt;/heading&gt;
            &lt;bodytext searchtype="FORM"&gt;
            &lt;blockquote&gt;
            &lt;p indent="none"&gt;&lt;text&gt;WRIT&lt;/text&gt;&lt;/p&gt;
            .....
            &lt;/blockquote&gt;
            &lt;/bodytext&gt;
            &lt;/level&gt;

        </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
            &lt;form:form xml:id="CFN_ADM.SGM_CFN.ADM.C1.120-1"&gt;
            &lt;ref:anchor id="CFN.ADM.C1.120-1" anchortype="global"/&gt;
            &lt;form:info&gt;&lt;meta&gt;&lt;metaitem name="levelype" value="prec"/&gt;&lt;/meta&gt;&lt;/form:info&gt;
            &lt;form:document annotated="false" official="false" typeofdoc="unnamed"&gt;
            &lt;heading&gt;
            &lt;desig&gt;120.1&lt;/desig&gt;&lt;title&gt;Form 6: Writ&lt;/title&gt;&lt;/heading&gt;
            &lt;form:bodytext&gt;
            &lt;p indent="none"&gt;&lt;text&gt;WRIT&lt;/text&gt;&lt;/p&gt;
            ....
            &lt;/form:bodytext&gt;
            &lt;/form:document&gt;
            &lt;/form:form&gt;
        </xd:pre>
         <!--Changes2011-09-12: Created. -->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_Commentary_blockquote-LxAdv-blockquote.dita  -->
   <!-- This template occurs, with more specificity, in '/nonamespace/Rosetta_blockquote-LxAdv-blockquote.xsl' -->
   <!--<xsl:template match="blockquote">

		<!-\-  Original Target XPath:  blockquote   -\->
		<blockquote>
			<xsl:apply-templates select="@* | node()"/>
		</blockquote>

	</xsl:template>-->
   <xsl:template match="blockquote [not(preceding-sibling::*[1][self::blockquote])][not(following-sibling::*[1][self::blockquote])][parent::bodytext][ancestor::level/@leveltype='prec'][$streamID!='AU05']"
                 priority="30">
      <xsl:apply-templates/>
   </xsl:template>
   <!-- 2017-10-20 - MDS: pass through blockquote when child of frm:div Webstar 7020061  -->
   <xsl:template match="blockquote[parent::frm:div][l]" priority="25">
      <xsl:apply-templates select="node()"/>
   </xsl:template>
   <xd:doc><!-- MDS 2017-05-15 - This module is not required since the handling is already in place in the Rosetta_pnum-LxAdv-desig.xsl module --><!--  This module does NOT apply to the following CIs   
            AU_NZ-Legis_Index_Landing_Pages
            AU-Citator
            AU-Journal_Citators
            AU-Bill_Tracking 
    --><!--  This module MAY  apply to these CI's please check with LBU to determine if this module should be in your CI
            AU/NZ Legislation Citators 	
            AU/NZ Legal Topic Summaries 
    -->
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>When the element <xd:i>pnum</xd:i> occurs within the
                structure <xd:i>blockquote/p/pnum</xd:i> convert by adding the attribute
                    <xd:b>@inline=”true”</xd:b> on the element
                    <xd:b>desig</xd:b> for all  occurrences  of
                    <xd:b>blockquote/p/desig</xd:b>. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;blockquote&gt;
  &lt;p&gt;
	&lt;pnum count="39"&gt;[39]&lt;/pnum&gt;
	&lt;text&gt;
	 The case law reveals that there is a preferred approach to the determination of an application 
	 brough pursuant to the provisions of s 79. That approach involves four interrelated steps. Firstly,
	 the court should make findings as to the identity and value of the property, liabilities and financial resources
	 of the parties at the date of the hearing. 
	&lt;/text&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;
  
  </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;blockquote&gt;
  &lt;p&gt;
  &lt;desig value="39" inline="true"&gt;[39]&lt;/desig&gt;
	&lt;text&gt;
	 The case law reveals that there is a preferred approach to the determination of an application 
	 brough pursuant to the provisions of s 79. That approach involves four interrelated steps. Firstly,
	 the court should make findings as to the identity and value of the property, liabilities and financial resources
	 of the parties at the date of the hearing. 
	&lt;/text&gt;
  &lt;/p&gt;
   &lt;/blockquote&gt;      
   
</xd:pre>
         <!--Changes2012-09-11: Created.-->
      </xd:desc>
   </xd:doc>
   <!-- BRT: this rule seems unnecessary - it is already covered by the more generic rule in Rosetta_pnum-LxAdv-desig: 
                    create @inline='true' when no attribute value is present. The fact that the context is blockquote/p/pnum seems irrelevant to the conversion.-->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a shared
                topic rather than duplicated to ensure consistency and accuracy. The xml snippets contained
                in this topic reflect markup needed for the Apollo image handling application. The UK is the
                first LBU to move from Apollo to the Blobstore application for image handling. Therefore, if
                this is a UK conversion instruction document, please refer to the following topics for
                correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE images
                        (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to <xd:b>ref:inlineobject</xd:b> for
                        BLOBSTORE images (id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE images
                        (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p> If <xd:i>link</xd:i> element occurs as a child of
                <xd:i>blockquote</xd:i> then conversion need to move
                <xd:b>ref:lnlink</xd:b> as child of <xd:b>p/text</xd:b>,
                i.e, <xd:i>blockquote/link</xd:i> becomes
                <xd:b>blockquote/p/text/ref:lnlink</xd:b>. </xd:p>
         <xd:p>
            <xd:b>Source XML : if element link is a child of blockquote</xd:b>
         </xd:p>
         <xd:pre>

&lt;blockquote&gt;
    &lt;h&gt;Notice to mortgagor of mortgaged land of exercise of powers by reason of default&lt;/h&gt;
    &lt;link filename="ada-09-lta52-plr-form.pdf" type="pdf"&gt;Download in PDF&lt;/link&gt;
&lt;/blockquote&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Target XML : if element link is a child of blockquote</xd:b>
         </xd:p>
         <xd:pre>

&lt;blockquote&gt;
    &lt;h&gt;Notice to mortgagor of mortgaged land of exercise of powers by reason of default&lt;/h&gt;
    &lt;p&gt;
        &lt;text&gt;
            &lt;ref:lnlink service="ATTACHMENT"&gt;
                &lt;ref:marker role="label"&gt;Download in PDF&lt;/ref:marker&gt;
                &lt;ref:locator&gt;
                    &lt;ref:locator-key&gt;
                        &lt;ref:key-name name="attachment-key"/&gt;
                        &lt;ref:key-value value="X-Y-ada-09-lta52-plr-form"/&gt;
                        &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                    &lt;/ref:locator-key&gt;
                    &lt;ref:locator-params&gt;
                        &lt;proc:param name="componentseq" value="1"/&gt;
                        &lt;proc:param name="attachment-type" value="PDF"/&gt;
                        &lt;proc:param name="attachment-smi" value=""/&gt;
                        &lt;!-- @value populated with SMI obtained from CSSM --&gt;
                        &lt;!-- This @value assignment is done by conversion program --&gt;
                    &lt;/ref:locator-params&gt;
                &lt;/ref:locator&gt;
            &lt;/ref:lnlink&gt;
        &lt;/text&gt;
    &lt;/p&gt; 
&lt;/blockquote&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>For handling of link to ref:lnlink, refer the general markup 
            <xd:a href="../common_newest/Rosetta_link-LxAdv-ref.lnlink.dita">ref:lnlink</xd:a> section in the CI.</xd:p>
         <!--Changes2016-07-29: Added Note about xml snippets that illustrate image
                handling. Note summarizes move from Apollo to Blobstore application. UK is first LBU to
                move to Blobstore.2013-05-01: Updated instructions and target example per latest Apollo markup.2013-02-26: Updated target example per project requirement.2012-10-26: Updated ref:locator markup in Target sample. -->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_blockquote-link-LxAdv-blockquote-p-text-ref.lnlink.dita  -->
   <!-- Vikas Rohilla : Template to match the blockquote/link-->
   <xsl:template match="blockquote/link">
      <p>
         <text>
            <xsl:apply-templates select="@* | node()"/>
         </text>
      </p>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>bodytext</xd:i> becomes <xd:b>bodytext</xd:b>
            <xd:ul>
               <xd:li>
                  <xd:i>@searchtype</xd:i> attribute should be suppressed.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML 1</xd:b>
         </xd:p>
         <xd:pre> &lt;bodytext&gt; &lt;p&gt;&lt;text&gt;This is a judgment of some significance for daily conveyancing practice.&lt;/text&gt;&lt;/p&gt; &lt;/bodytext&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML 1</xd:b>
         </xd:p>
         <xd:pre> &lt;bodytext&gt; &lt;p&gt;&lt;text&gt;This is a judgment of some significance for daily conveyancing practice.&lt;/text&gt;&lt;/p&gt; &lt;bodytext&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML 2</xd:b>
         </xd:p>
         <xd:pre> &lt;bodytext searchtype="COMMENTARY"&gt; &lt;p&gt;&lt;text&gt;Final recommendation 5. Interim recommendations pp 19 and 22.&lt;/text&gt;&lt;/p&gt; &lt;/bodytext&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML 2</xd:b>
         </xd:p>
         <xd:pre> &lt;bodytext&gt; &lt;p&gt;&lt;text&gt;Final recommendation 5. Interim recommendations pp 19 and 22.&lt;/text&gt;&lt;/p&gt; &lt;bodytext&gt; </xd:pre>
         <!--Changes2012-09-06: -->
      </xd:desc>
   </xd:doc>
   <!--Vikas Rohilla : Updated the template for the streamID CA02DC  -->
   <xsl:template match="bodytext">
      <xsl:choose><!-- JL: added the junk characters to get rid of bodytext elements in AU/NZ when there are nbsp and the junk character in them -->
         <xsl:when test="parent::leg:comntry and not(child::*[not(self::p[not(child::*[not(self::text[normalize-space(string-join(., '')) = ('', 'Â ', ' ')])])] or self::hrule)])"/>
         <!-- BRT 11/29/17  WS7053986 suppress this context for UK15cs -->
         <xsl:when test="references and name(preceding-sibling::*[1]) = 'level' and $streamID = 'UK15'"/>
         <xsl:when test="child::glp:note and parent::dig:body and $streamID = 'CA02DC'">
            <xsl:apply-templates select="node() | @*"/>
         </xsl:when>
         <xsl:when test="child::case:embeddedcase and $streamID = 'CA02DS'">
            <xsl:apply-templates select="node() | @*"/>
         </xsl:when>
         <xsl:when test="@searchtype = 'COMMENTARY' and $streamID = ('AU08') and parent::level/@leveltype = 'group'">
            <bodytext>
               <xsl:apply-templates select="@* | node()"/>
            </bodytext>
         </xsl:when>
         <xsl:when test="@searchtype = 'COMMENTARY' and $streamID = ('AU08') and parent::level">
            <bodytext><!-- use case AU08 PS2017050402162840900LNIAUCOURTRULES_input_fcr10081327.xml for bodytext
										PS2017042901112352335LNIAUCOURTRULES_input_voff10081099.xml for glp:note as preceding sibling
										-->
               <xsl:apply-templates select="preceding-sibling::glp:note"/>
               <xsl:apply-templates select="@* | node()"/>
            </bodytext>
         </xsl:when>
         <xsl:when test="parent::entry">
            <xsl:apply-templates select="@* | node()"/>
         </xsl:when>
         <!-- Added instruction for UK15 by Priya Kaushal -->
         <xsl:when test="$streamID = 'UK15'">
            <xsl:if test="not(./child::references[1]) or ./child::references[1]/preceding-sibling::node()">
               <seclaw:bodytext>
                  <xsl:apply-templates select="@* | node()"/>
                  <xsl:for-each select="following-sibling::level">
                     <xsl:call-template name="bodytext-following-level"/>
                  </xsl:for-each>
                  <xsl:for-each select="following-sibling::bodytext/references">
                     <xsl:call-template name="bodytext-references"/>
                  </xsl:for-each>
               </seclaw:bodytext>
            </xsl:if>
            <!--<xsl:choose>
					<xsl:when test="not(./references)">
						<seclaw:bodytext>
							<xsl:apply-templates select="@* | node()"/>
							<xsl:for-each select="following-sibling::level">
								<xsl:call-template name="bodytext-following-level"/>
							</xsl:for-each>
							<xsl:for-each select="following-sibling::bodytext/references">
								
								<xsl:call-template name="bodytext-references"/>
							</xsl:for-each>
						</seclaw:bodytext>
					</xsl:when>
					<xsl:otherwise>
						
						
							<!-\-<xsl:for-each select="following-sibling::level">
								<xsl:call-template name="bodytext-following-level"/>
							</xsl:for-each>-\->
							
						
					</xsl:otherwise>
				</xsl:choose>-->
         </xsl:when>
         <xsl:when test="$streamID ='MY02'">
            <xsl:apply-templates select="node()"/>
         </xsl:when>
         <xsl:when test="$streamID='UK09'">
            <xsl:choose>
               <xsl:when test="footnotegrp/footnote">
                  <bodytext>
                     <xsl:apply-templates select="preceding-sibling::glp:note[parent::level]"/>
                     <xsl:apply-templates select="@* | node()"/>
                  </bodytext>
               </xsl:when>
               <xsl:otherwise>
                  <bodytext>
                     <xsl:apply-templates select="preceding-sibling::glp:note[parent::level]"/>
                     <xsl:apply-templates select="@* | node() except(footnotegrp)"/>
                  </bodytext>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <xsl:otherwise>
            <bodytext>
               <xsl:apply-templates select="preceding-sibling::glp:note[parent::level]"/>
               <xsl:apply-templates select="@* | node()"/>
            </bodytext>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="bodytext[ancestor::leg:comntry and (not(parent::level/@leveltype) and not(parent::level/parent::leg:comntry))][$streamID = ('UK06', 'UK07')]">
      <annot:bodytext>
         <xsl:apply-templates select="@* | node()"/>
      </annot:bodytext>
   </xsl:template>
   <!-- Added template for UK15 by Priya kaushal -->
   <xsl:template name="bodytext-following-level">
      <xsl:choose>
         <xsl:when test="child::heading/title/refpt">
            <seclaw:level>
               <xsl:attribute name="leveltype">
                  <xsl:value-of select="@leveltype"/>
               </xsl:attribute>
               <!--<xsl:apply-templates select="child::heading/title/refpt"/>-->
               <xsl:apply-templates select="@* | node() except (level[preceding-sibling::bodytext])"/>
            </seclaw:level>
         </xsl:when>
         <xsl:when test="child::heading/title and (./child::heading/following-sibling::node())">
            <seclaw:level>
               <xsl:attribute name="leveltype">
                  <xsl:value-of select="@leveltype"/>
               </xsl:attribute>
               <!--<xsl:apply-templates select="child::heading/title"/>-->
               <xsl:apply-templates select="@* | node() except (level[preceding-sibling::bodytext])"/>
            </seclaw:level>
         </xsl:when>
         <xsl:when test="child::heading/title and not(./child::heading/following-sibling::node())">
            <seclaw:level>
               <xsl:attribute name="leveltype">
                  <xsl:value-of select="@leveltype"/>
               </xsl:attribute>
               <!--<xsl:apply-templates select="child::heading/title"/>-->
               <xsl:apply-templates select="@* | node() except (level[preceding-sibling::bodytext])"/>
               <seclaw:bodytext/>
            </seclaw:level>
         </xsl:when>
      </xsl:choose>
   </xsl:template>
   <!-- Added template for UK15 by Priya kaushal -->
   <xsl:template name="bodytext-references">
      <ref:relatedrefs>
         <xsl:apply-templates select="@* | node()"/>
      </ref:relatedrefs>
   </xsl:template>
   <!--***********
		
		BRT 11/26/17 the following template causes an ambiguity error with a more generic template - template match="level[1][parent::level]" 
	WS7051206. This template prevents duplicate seclaw:bodytext entries -->
   <xsl:template match="level[preceding-sibling::bodytext[not(./child::references[1]) or ./child::references[1]/preceding-sibling::node()]][$streamID = 'UK15']"/>

   <xsl:template match="bodytext/@searchtype"/>
   <xd:doc>
      <xd:desc>
         <xd:p>Currency statements in commentary sourced material (applies to
                    <xd:i>COMMENTARYDOC</xd:i> sources only regardless of target, i.e.
                seclaw, legis, regs).<xd:ul>
               <xd:li>If <xd:i>bodytext/@searchtype="COMMENTARY"</xd:i> AND</xd:li>
               <xd:li>the first child element is <xd:i>p</xd:i> AND</xd:li>
               <xd:li>the first child element <xd:i>p</xd:i> contains child element
                            <xd:i>text</xd:i> AND</xd:li>
               <xd:li>the string within <xd:i>text</xd:i> starts with "[Current to"
                        (without quotes), THEN</xd:li>
            </xd:ul>This <xd:i>bodytext</xd:i> element contains a currency statement.  In
                this case, <xd:b>note</xd:b> is created and the
                    <xd:i>bodytext</xd:i> contents are mapped to
                    <xd:b>note/currencystatement/bodytext</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML 1</xd:b>
         </xd:p>
         <xd:pre>

&lt;bodytext searchtype="COMMENTARY"&gt;
     &lt;p&gt;
        &lt;text&gt;[Current to October 2005.]&lt;/text&gt;
     &lt;/p&gt;
    ...
&lt;/bodytext&gt;


	</xd:pre>
         <xd:p>
            <xd:b>Target XML 1</xd:b>
         </xd:p>
         <xd:pre>

&lt;bodytext&gt;
  &lt;note&gt;
     &lt;currencystatement&gt;
       &lt;bodytext&gt;
         &lt;p&gt;
           &lt;text&gt;
              &lt;emph typestyle="ro"&gt;[Current to October 2005.]&lt;/emph&gt;
           &lt;/text&gt;
         &lt;/p&gt;
       &lt;/bodytext&gt;
     &lt;/currencystatement&gt;
  &lt;/note&gt;
&lt;bodytext&gt;


	</xd:pre>
         <!--ChangesYYYY-MM-DD:  -->
      </xd:desc>
   </xd:doc>
   <xsl:template match="bodytext[@searchtype='COMMENTARY' and *[1][self::p/*[1][self::text[contains(., '[Current to')]]]]">
      <bodytext>
         <note>
            <currencystatement>
               <bodytext>
                  <xsl:apply-templates/>
               </bodytext>
            </currencystatement>
         </note>
      </bodytext>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>
               <xd:i>char-line</xd:i> becomes <xd:b>proc:formchars</xd:b> and
                    includes the attributes <xd:b>@formchar</xd:b> and
                        <xd:b>@formcharuse</xd:b>. Attributes
                        <xd:b>@formchar</xd:b> and <xd:b>@formcharuse</xd:b> are
                    required attributes in <xd:b>proc:formchars</xd:b> and the values for
                    these attributes are tokenized in the NewLexis Schema.</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Attribute <xd:b>@formchar</xd:b> allows the tokenized values listed
                    below:</xd:b>
            <xd:ul>
               <xd:li>
                  <xd:b>proc:formchars[@formchar="dot"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formchar="rule"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formchar="dbl-rule"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formchar="hypen"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formchar="invisible"]</xd:b>
               </xd:li>
            </xd:ul>
            <xd:b>Below are the values for <xd:b>proc:formchars[@formchar]</xd:b> found
                    in the source documents and the corresponding mapping in NewLexis.</xd:b>
            <xd:ul>
               <xd:li>
                  <xd:i>char-line[@character="."]</xd:i> becomes
                            <xd:b>proc:formchars[@formchar="dot"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>char-line[@character="_"]</xd:i> becomes
                            <xd:b>proc:formchars[@formchar="rule"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>char-line[@character="-"]</xd:i> becomes
                            <xd:b>proc:formchars[@formchar="hypen"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>char-line[@character=" "]</xd:i> becomes
                            <xd:b>proc:formchars[@formchar="invisible"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>char-line[@character="&amp;nbsp;"]</xd:i> becomes
                            <xd:b>proc:formchars[@formchar="invisible"]</xd:b>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Attribute <xd:b>@formcharuse</xd:b> values are listed below:</xd:b>
            <xd:ul>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="date"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="day"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="month"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="year"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="num"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="money"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="address"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="name"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="longname"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="leaderfill"]</xd:b>
                  <xd:b>@formcharuse="leaderfill"</xd:b> means fill the available
                        space with the formchar. Basically, push the text on each side out to the
                        margins if possible.</xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="other"]</xd:b>
               </xd:li>
            </xd:ul>
            <xd:b>The following are the widths (in points) used for this element in print for each
                    possible value of <xd:b>@formcharuse</xd:b>. To determine the number
                    of characters, divide the point value by 6.</xd:b>
            <xd:ul>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="date"] 66 -&gt;11</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="day"] 36 -&gt;6</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="month"] 48 -&gt; 8</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="year"] 36 -&gt; 6</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="num"] 36 -&gt; 6</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="money"] 42 -&gt; 7</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="address"] 72 -&gt; 12</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="name"] 66 -&gt; 11</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="longname"] 132 -&gt;
                        22</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>proc:formchars[@formcharuse="other"] 66 -&gt; 11</xd:b>
               </xd:li>
            </xd:ul>
            <xd:b>Below are the values for <xd:b>proc:formchars[@formcharuse]</xd:b>
                    found in the source documents and the corresponding mapping in NewLexis.</xd:b>
            <xd:ul>
               <xd:li>
                  <xd:i>char-line[@num-char="2"]</xd:i> becomes
                            <xd:b>proc:formchars[@formcharuse="day"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>char-line[@num-char="4"]</xd:i> becomes
                            <xd:b>proc:formchars[@formcharuse="day"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>char-line[@num-char="8"]</xd:i> becomes
                            <xd:b>proc:formchars[@formcharuse="month"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>char-line[@num-char="12"]</xd:i> becomes
                            <xd:b>proc:formchars[@formcharuse="address"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>char-line[@num-char="16"]</xd:i> becomes
                            <xd:b>proc:formchars[@formcharuse="longname"]</xd:b>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>A CR is required to add attribute @align within
                    <xd:b>proc:formchars</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;blockquote&gt;
        &lt;char-line character="_" num-char="15" align="center"/&gt;
    &lt;/blockquote&gt;
&lt;/p&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;blockquote&gt;
        &lt;proc:formchars formchar="rule" formcharuse="longname" align="center"/&gt;
    &lt;/blockquote&gt;
&lt;/p&gt;

		</xd:pre>
         <!--Changes2013-02-08: Corrected the last mapping of char-line[@character="
                    "] to proc:formchars[@formchar="invisible"]
                so that the source element properly displays as
                    char-line[@character="&nbsp;"].2012-09-11: Removed CR number
                (LBAM2011121605552800).2011-09-11: Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_char-line-LxAdv-proc.formchars.dita  -->
   <!-- Vikas Rohilla : Template to match the char-line and create the proc:formchars	-->
   <xsl:template match="char-line">
      <xsl:choose>
         <xsl:when test="$streamID='AU01' and parent::case:judgmentbody">
            <p>
               <text>
                  <proc:formchars>
                     <xsl:attribute name="formchar">
                        <xsl:choose>
                           <xsl:when test="@character='_'">
                              <xsl:text>rule</xsl:text>
                           </xsl:when>
                           <xsl:when test="@character='.'">
                              <xsl:text>dot</xsl:text>
                           </xsl:when>
                           <xsl:when test="@character='-'">
                              <xsl:text>hypen</xsl:text>
                           </xsl:when>
                           <xsl:when test="@character=' '">
                              <xsl:text>invisible</xsl:text>
                           </xsl:when>
                           <xsl:when test="@character='&amp;nbsp;'">
                              <xsl:text>invisible</xsl:text>
                           </xsl:when>
                        </xsl:choose>
                     </xsl:attribute>
                     <xsl:attribute name="formcharuse">
                        <xsl:choose>
                           <xsl:when test="@num-char='2'">
                              <xsl:text>day</xsl:text>
                           </xsl:when>
                           <xsl:when test="@num-char='4'">
                              <xsl:text>day</xsl:text>
                           </xsl:when>
                           <xsl:when test="@num-char='8'">
                              <xsl:text>month</xsl:text>
                           </xsl:when>
                           <xsl:when test="@num-char='12'">
                              <xsl:text>address</xsl:text>
                           </xsl:when>
                           <xsl:when test="@num-char='16'">
                              <xsl:text>longname</xsl:text>
                           </xsl:when>
                           <!-- Awantika: 2017-10-31- Added @num-char='32' to formcharuse="other" coming in AU01 -->
                           <xsl:when test="@num-char='32'">
                              <xsl:text>other</xsl:text>
                           </xsl:when>
                        </xsl:choose>
                     </xsl:attribute>
                     <xsl:if test="@align[not($streamID='AU01')]">
                        <xsl:copy-of select="@align"/>
                     </xsl:if>
                  </proc:formchars>
               </text>
            </p>
         </xsl:when>
         <xsl:otherwise>
            <proc:formchars>
               <xsl:attribute name="formchar">
                  <xsl:choose>
                     <xsl:when test="@character='_'">
                        <xsl:text>rule</xsl:text>
                     </xsl:when>
                     <xsl:when test="@character='.'">
                        <xsl:text>dot</xsl:text>
                     </xsl:when>
                     <xsl:when test="@character='-'">
                        <xsl:text>hypen</xsl:text>
                     </xsl:when>
                     <xsl:when test="@character=' '">
                        <xsl:text>invisible</xsl:text>
                     </xsl:when>
                     <xsl:when test="@character='&amp;nbsp;'">
                        <xsl:text>invisible</xsl:text>
                     </xsl:when>
                  </xsl:choose>
               </xsl:attribute>
               <xsl:attribute name="formcharuse">
                  <xsl:choose>
                     <xsl:when test="@num-char='2'">
                        <xsl:text>day</xsl:text>
                     </xsl:when>
                     <xsl:when test="@num-char='4'">
                        <xsl:text>day</xsl:text>
                     </xsl:when>
                     <xsl:when test="@num-char='8'">
                        <xsl:text>month</xsl:text>
                     </xsl:when>
                     <xsl:when test="@num-char='12'">
                        <xsl:text>address</xsl:text>
                     </xsl:when>
                     <xsl:when test="@num-char='16'">
                        <xsl:text>longname</xsl:text>
                     </xsl:when>
                  </xsl:choose>
               </xsl:attribute>
               <xsl:if test="@align">
                  <xsl:copy-of select="@align"/>
               </xsl:if>
            </proc:formchars>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>In the Fab Pipeline, JCite/CFE shall conduct a lookup based on the lnci:content
					or the @normcite (if populated) and populate the markup with the additional
					keywords needed for cite traversal. </xd:p>
         <xd:p>The only markup needed for JCite/CFE is
						<xd:b>lnci:cite/lnci:content</xd:b> and optionally
						<xd:b>lnci:cite/@normcite</xd:b>. In order to resolve the correct
					“pile” target for cite link traversal, either a semantic child content type
					element as described below <xd:b>or</xd:b> the <xd:b>lnci:cite/@type</xd:b>
					attribute (but not both) must also be present in the output markup.</xd:p>
         <xd:p>
            <xd:i>ci:cite</xd:i> becomes <xd:b>lnci:cite</xd:b>, with all
					attribute names and values copied as they occur in the source. Convert all
					descendant elements of <xd:i>ci:cite</xd:i> by copying the elements
					and their attribute names and values from the <xd:i>ci:</xd:i>
					namespace <xd:b>as is</xd:b> into the <xd:b>lnci:</xd:b> namespace. That is,
					every descendant of <xd:i>ci:cite</xd:i> that has the form
						<xd:i>ci:{element-name}</xd:i> is converted to
						<xd:b>lnci:{element-name}</xd:b>. As an example of converting the
					descendants of <xd:i>ci:cite</xd:i> into the
						<xd:b>lnci:</xd:b> namespace, here is a partial list of the child
					elements from Rosetta and what they should be converted to: <xd:ul>
               <xd:li>
                  <xd:i>ci:casename</xd:i> becomes
								<xd:b>lnci:casename</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:constref</xd:i> becomes
								<xd:b>lnci:constref</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:courtruleref</xd:i> becomes
								<xd:b>lnci:courtruleref</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:decisionref</xd:i> becomes
								<xd:b>lnci:decisionref</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:effdate</xd:i> becomes
								<xd:b>lnci:effdate</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:party1</xd:i> becomes
								<xd:b>lnci:party1</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:party2</xd:i> becomes
								<xd:b>lnci:party2</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:procphrase</xd:i> becomes
								<xd:b>lnci:procphrase</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:reglref</xd:i> becomes
								<xd:b>lnci:reglref</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:statinfo</xd:i> becomes
								<xd:b>lnci:statinfo</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:text</xd:i> becomes <xd:b>lnci:text</xd:b>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>There are two important exceptions to the converstion instructions given in the
					preceding paragraph: <xd:ul>
               <xd:li>Do not convert any Rosetta-only markup that, if kept, would make the
							output invalid. </xd:li>
               <xd:li>Drop the start and end tags (the mark-up) for
								<xd:i>citefragment</xd:i> and
								<xd:i>ci:span</xd:i> but keep the content of these
							elements as part of what is converted to the content of
								<xd:b>lnci:content</xd:b>.</xd:li>
               <xd:li> Drop all instances of
							<xd:i>ci:{element-name}/@spanref</xd:i>.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>The following are mappings for children of <xd:i>ci:cite</xd:i>: <xd:ul>
               <xd:li>
                  <xd:i>ci:case</xd:i> becomes
							<xd:b>lnci:case</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:stat</xd:i> becomes
							<xd:b>lnci:stat</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:juryinstr</xd:i> becomes
								<xd:b>lnci:juryinstr</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:reg</xd:i> becomes
							<xd:b>lnci:reg</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:courtrule</xd:i> becomes
								<xd:b>lnci:courtrule</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:sesslaw</xd:i> becomes
								<xd:b>lnci:sesslaw</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:patent</xd:i> becomes
								<xd:b>lnci:patent</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:tmark</xd:i> becomes
								<xd:b>lnci:tmark</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:copyright</xd:i> becomes
								<xd:b>lnci:copyright</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:lawrev</xd:i> becomes
								<xd:b>lnci:lawrev</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:periodical</xd:i> becomes
								<xd:b>lnci:periodical</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:pinpoint</xd:i> becomes
								<xd:b>lnci:pinpoint</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:book</xd:i> becomes
							<xd:b>lnci:book</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:oag</xd:i> becomes
							<xd:b>lnci:oag</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:agencydecision</xd:i> becomes
								<xd:b>lnci:agencydecision</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:constitution</xd:i> becomes
								<xd:b>lnci:constitution</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:annot</xd:i> becomes
								<xd:b>lnci:annot</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:execdoc</xd:i> becomes
								<xd:b>lnci:execdoc</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:admininterp</xd:i> becomes
								<xd:b>lnci:admininterp</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:misc</xd:i> becomes
							<xd:b>lnci:misc</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:form</xd:i> becomes
							<xd:b>lnci:form</xd:b>
               </xd:li>
            </xd:ul>Given one of the above mappings, the source
						<xd:i>ci:cite/@searchtype</xd:i> should be dropped and the target
						<xd:b>lnci:cite/@type</xd:b> should be <xd:b>omitted</xd:b>.</xd:p>
         <xd:p>In the absence of one of the possible children of <xd:i>ci:cite</xd:i>
					listed above, <xd:b>lnci:cite/@type</xd:b> should be populated as
					follows: <xd:ul>
               <xd:li>
                  <xd:i>ci:cite/@searchtype="LEG-REF"</xd:i> becomes
								<xd:b>lnci:cite/@type="legislation"</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:cite/@searchtype="CASE-REF"</xd:i> becomes
								<xd:b>lnci:cite/@type="case"</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:cite/@searchtype="BOOK-REF"</xd:i> becomes
								<xd:b>lnci:cite/@type="book"</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:cite/@searchtype="BODY-CASE-REF"</xd:i> becomes
								<xd:b>lnci:cite/@type="case"</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>ci:cite/@searchtype="SUMM-CASE-REF"</xd:i> becomes
								<xd:b>lnci:cite/@type="case"</xd:b>
               </xd:li>
            </xd:ul>This will ensure that the correct “context clue” (Product Content Type or
					PCT) is populated in the Fab Pipeline so that the resulting citation hyperlink
					targets the correct pile. </xd:p>
         <xd:p>
            <xd:b>Handling for AU Journals/Newsitem:</xd:b>
            <xd:ul>
               <xd:li>
                  <xd:i>ci:cite</xd:i> with attribute
								<xd:i>@type="cite4thisdoc"</xd:i> becomes
								<xd:b>lnci:cite</xd:b> with attribute
								<xd:b>@type="cite4thisdoc"</xd:b>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Handling for NZ Regulation and NZ Act from services:</xd:b>
            <xd:ul>
               <xd:li>If <xd:i>ci:cite@type</xd:i> comes with attribute value
									"<xd:b>
                     <xd:i>legref</xd:i>
                  </xd:b>" in source document then conversion needs
							to suppressed attribute value in target and convert
								<xd:i>ci:cite</xd:i> according to general rule. </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML: ci:cite/searchtype="CASE-REF"</xd:b>
         </xd:p>
         <xd:pre> &lt;ci:cite searchtype="CASE-REF"&gt; &lt;ci:case&gt;
					&lt;ci:caseinfo&gt; &lt;ci:decisiondate year="2001"/&gt; &lt;/ci:caseinfo&gt;
					&lt;ci:caseref ID="cr000366" spanref="cr000366-001" status="unval"&gt;
					&lt;ci:reporter value="NSWCCR"/&gt; &lt;ci:volume num="22"/&gt; &lt;ci:page
					num="238"/&gt; &lt;/ci:caseref&gt; &lt;/ci:case&gt; &lt;ci:content&gt;
					&lt;citefragment searchtype="CASE-NAME-REF"&gt; &lt;emph typestyle="it"&gt;Betts
					v Prisk Contractors Pty Ltd&lt;/emph&gt; &lt;/citefragment&gt; &lt;citefragment
					searchtype="CASE-CITE-REF"&gt; &lt;ci:span spanid="cr000366-001"
					status="unval"&gt;(2001) 22 NSWCCR 238&lt;/ci:span&gt;; [2001] NSWCC 146
					&lt;/citefragment&gt; &lt;/ci:content&gt; &lt;/ci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;lnci:cite&gt; &lt;lnci:case&gt; &lt;lnci:caseinfo&gt;
					&lt;lnci:decisiondate year="2001"/&gt; &lt;/lnci:caseinfo&gt; &lt;lnci:caseref
					ID="cr000366" status="unval"&gt; &lt;lnci:reporter value="NSWCCR"/&gt;
					&lt;lnci:volume num="22"/&gt; &lt;lnci:page num="238"/&gt; &lt;/lnci:caseref&gt;
					&lt;/lnci:case&gt; &lt;lnci:content&gt; &lt;emph typestyle="it"&gt;Betts v Prisk
					Contractors Pty Ltd&lt;/emph&gt; (2001) 22 NSWCCR 238; [2001] NSWCC 146
					&lt;/lnci:content&gt; &lt;/lnci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>SOURCE XML: ci:cite/searchtype="BOOK-REF"</xd:b>
         </xd:p>
         <xd:pre> &lt;ci:cite searchtype="BOOK-REF"&gt; &lt;ci:lawrev&gt; &lt;ci:lawrevref
					ID="cr003268" spanref="cr003268-001"&gt; &lt;ci:lawrevlocator&gt;
					&lt;ci:publicationname normpubcode="BCB"/&gt; &lt;ci:volume num="3"/&gt;
					&lt;ci:issue&gt; &lt;ci:date year="1985"/&gt; &lt;/ci:issue&gt; &lt;ci:page
					num="86"/&gt; &lt;/ci:lawrevlocator&gt; &lt;/ci:lawrevref&gt; &lt;/ci:lawrev&gt;
					&lt;ci:content&gt; &lt;citefragment searchtype="BOOK-CITE-REF"&gt; &lt;ci:span
					spanid="cr003268-001"&gt;(1985) 3 BCB 86&lt;/ci:span&gt; &lt;/citefragment&gt;
					&lt;/ci:content&gt; &lt;/ci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;lnci:cite&gt; &lt;lnci:lawrev&gt; &lt;lnci:lawrevref
					ID="cr003268"&gt; &lt;lnci:lawrevlocator&gt; &lt;lnci:publicationname
					normpubcode="BCB"/&gt; &lt;lnci:volume num="3"/&gt; &lt;lnci:issue&gt;
					&lt;lnci:date year="1985"/&gt; &lt;/lnci:issue&gt; &lt;lnci:page num="86"/&gt;
					&lt;/lnci:lawrevlocator&gt; &lt;/lnci:lawrevref&gt; &lt;/lnci:lawrev&gt;
					&lt;lnci:content&gt;(1985) 3 BCB 86&lt;/lnci:content&gt; &lt;/lnci:cite&gt;
				</xd:pre>
         <xd:p>
            <xd:b>SOURCE XML: ci:cite/searchtype="SUMM-CASE-REF"</xd:b>
         </xd:p>
         <xd:pre> &lt;ci:cite searchtype="SUMM-CASE-REF"&gt; &lt;ci:case&gt;
					&lt;ci:caseref ID="cref00000048" spanref="cspan00000048"&gt; &lt;ci:reporter
					value="FCR"/&gt; &lt;ci:volume num="1"/&gt; &lt;ci:edition&gt;&lt;ci:date
					year="1985"/&gt;&lt;/ci:edition&gt; &lt;ci:page num="856"/&gt;
					&lt;/ci:caseref&gt; &lt;/ci:case&gt; &lt;ci:content&gt;&lt;ci:span
					spanid="cspan00000048"&gt;[1985] 1 F.C. 856&lt;/ci:span&gt;&lt;/ci:content&gt;
					&lt;/ci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;lnci:cite&gt; &lt;lnci:case&gt; &lt;lnci:caseref
					ID="cref00000048"&gt; &lt;lnci:reporter value="FCR"/&gt; &lt;lnci:volume
					num="1"/&gt; &lt;lnci:edition&gt;&lt;lnci:date
					year="1985"/&gt;&lt;/lnci:edition&gt; &lt;lnci:page num="856"/&gt;
					&lt;/lnci:caseref&gt; &lt;/lnci:case&gt; &lt;lnci:content&gt;[1985] 1 F.C.
					856&lt;/lnci:content&gt; &lt;/lnci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>SOURCE XML: ci:cite/searchtype="BODY-CASE-REF"</xd:b>
         </xd:p>
         <xd:pre> &lt;ci:cite searchtype="BODY-CASE-REF"&gt; &lt;ci:case&gt;
					&lt;ci:caseref ID="cref00000047" spanref="cspan00000047"&gt; &lt;ci:reporter
					value="OEAB"/&gt; &lt;ci:edition&gt;&lt;ci:date
					year="1993"/&gt;&lt;/ci:edition&gt; &lt;ci:refnum num="55"/&gt;
					&lt;/ci:caseref&gt; &lt;/ci:case&gt; &lt;ci:content&gt;&lt;ci:span
					spanid="cspan00000047"&gt;[1993] O.E.A.B. No. 55&lt;/ci:span&gt;
					&lt;/ci:content&gt; &lt;/ci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;lnci:cite&gt; &lt;lnci:case&gt; &lt;lnci:caseref
					ID="cref00000047"&gt; &lt;lnci:reporter value="OEAB"/&gt;
					&lt;lnci:edition&gt;&lt;lnci:date year="1993"/&gt;&lt;/lnci:edition&gt;
					&lt;lnci:refnum num="55"/&gt; &lt;/lnci:caseref&gt; &lt;/lnci:case&gt;
					&lt;lnci:content&gt;[1993] O.E.A.B. No. 55&lt;/lnci:content&gt;
					&lt;/lnci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML: ci:pinpoint</xd:b>
         </xd:p>
         <xd:pre> &lt;ci:cite ID="I5DDT1GS2SF8P90080000400" normprotocol="lexsee"
					status="valid"&gt; &lt;ci:agencydecision&gt; &lt;ci:decisionref
					ID="I5DDT1GS2SF8P90070000400"&gt; &lt;ci:reporter normpubcode="4007"
					value=""/&gt; &lt;ci:ldi jumppage="1" kw="8197_1999_805*.1" page="805"
					pagesuffix="*" reporter="8197" volume="1999"/&gt; &lt;ci:volume num="1999"/&gt;
					&lt;ci:page num="805"/&gt; &lt;ci:pinpoint lastnum="2" num="1"/&gt;
					&lt;/ci:decisionref&gt; &lt;/ci:agencydecision&gt; &lt;ci:content&gt;1999 SEC
					No-Act. LEXIS 805, 1-2&lt;/ci:content&gt; &lt;/ci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML: lnci:pinpoint</xd:b>
         </xd:p>
         <xd:pre> &lt;lnci:cite ID="I5DDT1GS2SF8P90080000400" normprotocol="lexsee"
					status="valid"&gt; &lt;lnci:agencydecision&gt; &lt;lnci:decisionref
					ID="I5DDT1GS2SF8P90070000400"&gt; &lt;lnci:reporter normpubcode="4007"
					value=""/&gt; &lt;lnci:ldi jumppage="1" kw="8197_1999_805*.1" page="805"
					pagesuffix="*" reporter="8197" volume="1999"/&gt; &lt;lnci:volume
					num="1999"/&gt; &lt;lnci:page num="805"/&gt; &lt;lnci:pinpoint lastnum="2"
					num="1"/&gt; &lt;/lnci:decisionref&gt; &lt;/lnci:agencydecision&gt;
					&lt;lnci:content&gt;1999 SEC No-Act. LEXIS 805, 1-2&lt;/lnci:content&gt;
					&lt;/lnci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>Exception: When <xd:i>link</xd:i> is used as intra-document linking
					within <xd:i>ci:content</xd:i>
            </xd:b>.</xd:p>
         <xd:p>If the <xd:i>ci:content</xd:i> contains a <xd:i>link</xd:i>
				child, the <xd:i>link</xd:i> wrapper markup (not its content) shall be
				removed (omit tag and retain content) and the <xd:i>link/@refpt</xd:i>
				value shall be moved to <xd:b>lnci:cite/@citeref</xd:b>.</xd:p>
         <xd:p>
            <xd:b>SOURCE XML: ci:content/link</xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;pnum count="5"&gt;[5]&lt;/pnum&gt; &lt;refpt
					id="20023NZLR_113_p5" type="ext" /&gt; &lt;text&gt;A number of issues were
					raised on Bs behalf but may be summarised as follows:&lt;/text&gt; ...
					&lt;/p&gt; … &lt;ci:cite searchtype="CASE-REF"&gt; &lt;ci:case&gt;
					&lt;ci:caseref ID="x20023NZLR_113-171" spanref="x20023NZLR_113-171-1"&gt;
					&lt;ci:reporter value="nzar" country="nz" /&gt; &lt;ci:edition&gt; &lt;ci:date
					year="2001" /&gt; &lt;/ci:edition&gt; &lt;ci:page num="598" /&gt;
					&lt;/ci:caseref&gt; &lt;/ci:case&gt; &lt;ci:content&gt; &lt;citefragment
					searchtype="CASE-NAME-REF"&gt; &lt;emph typestyle="it"&gt;Auckland District Law
					Society v Ford&lt;/emph&gt; &lt;/citefragment&gt; &lt;citefragment
					searchtype="CASE-CITE-REF"&gt; &lt;ci:span
					spanid="x20023NZLR_113-171-1"&gt;[2001] NZAR 598&lt;/ci:span&gt;
					&lt;/citefragment&gt; at para [ &lt;link
					refpt="20023NZLR_113_p5"&gt;5&lt;/link&gt; ] &lt;/ci:content&gt;
					&lt;/ci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;ref:anchor id="nz_20023NZLR_113_p5" anchortype="global"
					/&gt; &lt;desig value="5" inline="true"&gt;[5]&lt;/desig&gt; &lt;text&gt;A
					number of issues were raised on Bs behalf but may be summarised as
					follows:&lt;/text&gt; ... &lt;/p&gt; … &lt;lnci:cite
					citeref="20023NZLR_113_p5"&gt; &lt;lnci:case&gt; &lt;lnci:caseref
					ID="x20023NZLR_113-171"&gt; &lt;lnci:reporter value="nzar" country="nz" /&gt;
					&lt;lnci:edition&gt; &lt;lnci:date year="2001" /&gt; &lt;/lnci:edition&gt;
					&lt;lnci:page num="598" /&gt; &lt;/lnci:caseref&gt; &lt;/lnci:case&gt;
					&lt;lnci:content&gt; &lt;emph typestyle="it"&gt;Auckland District Law Society v
					Ford&lt;/emph&gt; [2001] NZAR 598 at para [ 5 ] &lt;/lnci:content&gt;
					&lt;/lnci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML: ci:cite/@type="cite4thisdoc" (AU Journals/Newsitem)</xd:b>
         </xd:p>
         <xd:pre> &lt;jrnl:journalcite&gt; &lt;ci:cite type="cite4thisdoc"&gt;
					&lt;ci:lawrev&gt; &lt;ci:lawrevref&gt; &lt;ci:lawrevlocator&gt;
					&lt;ci:publicationname normpubcode="Aust Jnl of Corp Law"/&gt; &lt;ci:volume
					num="15"/&gt; &lt;ci:page num="185"/&gt; &lt;/ci:lawrevlocator&gt;
					&lt;/ci:lawrevref&gt; &lt;/ci:lawrev&gt; &lt;ci:content&gt;(2003) 15 Aust Jnl of
					Corp Law 185&lt;/ci:content&gt; &lt;/ci:cite&gt; &lt;/jrnl:journalcite&gt;
				</xd:pre>
         <xd:p>
            <xd:b>Target XML: lnci:cite/@type="cite4thisdoc" (AU Journals/Newsitem)</xd:b>
         </xd:p>
         <xd:pre> &lt;ref:cite4thisresource&gt; &lt;lnci:cite type="cite4thisdoc"&gt;
					&lt;lnci:lawrev&gt; &lt;lnci:lawrevref&gt; &lt;lnci:lawrevlocator&gt;
					&lt;lnci:publicationname normpubcode="Aust Jnl of Corp Law"/&gt; &lt;lnci:volume
					num="15"/&gt; &lt;lnci:page num="185"/&gt; &lt;/lnci:lawrevlocator&gt;
					&lt;/lnci:lawrevref&gt; &lt;/lnci:lawrev&gt; &lt;lnci:content&gt;(2003) 15 Aust
					Jnl of Corp Law 185&lt;/lnci:content&gt; &lt;/lnci:cite&gt;
					&lt;/ref:cite4thisresource&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML: ci:cite/@type="legref" (NZ Regulation)</xd:b>
         </xd:p>
         <xd:pre> &lt;glp:note&gt; &lt;p&gt; &lt;text&gt; &lt;ci:cite searchtype="LEG-REF"
					type="legref"&gt; &lt;ci:content&gt;Compare: SR 1958/38 r 15Q&lt;/ci:content&gt;
					&lt;/ci:cite&gt; &lt;/text&gt; &lt;/p&gt; &lt;/glp:note&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;note&gt; &lt;bodytext&gt; &lt;p&gt; &lt;text&gt; &lt;lnci:cite&gt;
					&lt;lnci:content&gt;Compare: SR 1958/38 r 15Q&lt;/lnci:content&gt;
					&lt;/lnci:cite&gt; &lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt; &lt;/note&gt;
				</xd:pre>
         <!--Changes2016-03-23: Updated main instructions to
						clarify that descendants of ci:cite, and not just children, are to be
						processed.2015-09-15: Updated instruction to suppressed the
						attribute @type with value "legref" in target.
						Applicable on NZ Regulation and NZ Act from services [Webstar
						#6245139].2015-03-17: An attribute
							@inline get added with
							desig element even when the
							sourcepnum is not having that
							attribute@inline Applicable on CA12
					only.2015-02-24: Example updated as per new rule an
						attribute @inlineget added with
							desigelement when the
							sourcepnumis not having that
							attribute@inline2014-12-08: Addition of mapping for
							ci:pinpoint to
							lnci:pinpoint and example from US LPA
						content.2013-12-30: Minor illustrative change. Added "(AU
						Journals/Newsitem)" to headings for last example to clarify that retention
						of @type="cite4thisdoc" is an exception for that
						content, as already described in narrative rules.2013-05-01: Removed special rule for
							ci:cite/ci:content/remotelink which required
						suppression of ci:cite/ci:content tags. The elements
						are now retained and convert according to common rules.2013-04-24: Added a mapping for
							ci:procphrase to
							lnci:procphrase.2013-01-22: Instruction modified for the scenario
							ci:cite/ci:content/remotelink to indicate that
						the ci:cite and ci:content
						start-tags and end-tags (but not their content) are dropped.2012-11-29: Updated instructions to drop all
							@spanref.2012-09-18: Instruction and example added for
						handling of ci:cite/@type="cite4thisdoc" for AU
						Journals/Newsitem.2012-09-11: Created.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="ci:cite">
      <xsl:choose>
         <xsl:when test="parent::leg:bodytext">
            <p>
               <text>
                  <lnci:cite>
                     <xsl:if test="ci:content/link">
                        <xsl:attribute name="citeref" select="ci:content/link/@refpt"/>
                     </xsl:if>
                     <!-- MDS 2017-05-01 - Added parameter 'childElementName' to match other call.  
				General ci:* module states to drop value of ci:cite/@searchtype if certain strings are found in first child element local-name.  
				Previously this first child element local-name value was not being passed.  The value is not invalid but it is a diff from the DT documents. -->
                     <xsl:apply-templates select="@*">
                        <xsl:with-param name="childElementName" select="local-name(child::*[1])"/>
                     </xsl:apply-templates>
                     <xsl:apply-templates select="node()"/>
                  </lnci:cite>
               </text>
            </p>
         </xsl:when>
         <xsl:otherwise>
            <lnci:cite><!-- JD: 2017-08-31: added for VSTS Issue 342175.
				  If there is no @type, and no child element aside from <ci:content>, and the parent is case:parallelcite,
				  then set @type='case'
				  -->
               <xsl:if test="not(@type) and not(*[not(name()='ci:content')])         and parent::case:parallelcite and $streamID='UK05'">
                  <xsl:attribute name="type" select="'case'"/>
               </xsl:if>
               <!-- MDS - 2017-08-10 - added to address instructions in CI for AU13 -->
               <!-- Awantika: Added AU01 for normcite -->
               <xsl:if test="$streamID=('AU13','AU01','HK09','UK11DN')">
                  <xsl:if test="ci:case/ci:caseref[ci:reporter/@value and ci:volume/@num and         ci:edition/ci:date/@year and ci:pinpoint[@targettype='page']/@num] and        not(ci:case/ci:caseref/ci:page/@num)"><!-- Done simply to set the context node -->
                     <xsl:for-each select="ci:case[1]/ci:caseref">
                        <xsl:attribute name="normcite">
                           <xsl:text>(</xsl:text>
                           <xsl:value-of select="ci:edition/ci:date/@year"/>
                           <xsl:text>) </xsl:text>
                           <xsl:value-of select="ci:volume/@num"/>
                           <xsl:text> </xsl:text>
                           <xsl:value-of select="ci:reporter/@value"/>
                           <xsl:text> </xsl:text>
                           <xsl:value-of select="ci:pinpoint[@targettype='page']/@num"/>
                        </xsl:attribute>
                     </xsl:for-each>
                  </xsl:if>
               </xsl:if>
               <!-- Ankita Singh 12 June 2017: Introducted value of lnci:cite/@type to "cite4thisdoc under jrnl:journalcite as per latest CI of UK09 -->
               <xsl:if test="$streamID = ('UK09', 'NZ08','AU14') and parent::jrnl:journalcite">
                  <xsl:attribute name="type">cite4thisdoc</xsl:attribute>
               </xsl:if>
               <xsl:if test="ci:content/link">
                  <xsl:attribute name="citeref" select="ci:content/link/@refpt"/>
               </xsl:if>
               <xsl:if test="ci:content/remotelink and $streamID = ('NZ14', 'NZ02','AU11','NZ08','AU14')">
                  <xsl:attribute name="citeref" select="ci:content/remotelink[1]/@refpt"/>
                  <!-- CSN 8/4/17 added [1] in case there are multiple remotelinks -->
               </xsl:if>
               <!-- 20170721:  MCJ:  We originally grouped NZ15 into the code for NZ14 and NZ02 but found there are differences in how DT was
						                  handling colons and the leading underscore... so we kept NZ15 apart.  It is possibly (likely?) that something
						                  is going to need to change.  The NZ15 code attempts to follow the instructions about using a leading underscore
						                  and translating colons to underscores... however, it is not clear whether the target documents have had their
						                  "cite def" processed similarly.
					                      Also, note the added predicate that ensures that there is a remotelink that has @refpt.  It is not clear
					                      what should happen if cite:content/remotelink[not(@refpt)] exists... hoping data is good.
					-->
               <xsl:if test="ci:content/remotelink[@refpt] and $streamID = ('NZ15')"><!-- First replace any colons with underscores. -->
                  <xsl:variable name="translatedCiteRefValue"
                                select="translate(ci:content/remotelink[@refpt][1]/@refpt, ':', '_')"/>
                  <!-- Now, check if the value starts with a digit... if so, prepend an underscore.  There may be other offending first characters that need to be checked but digits should cover most. -->
                  <xsl:variable name="processedCiteRefValue"
                                select="if (matches($translatedCiteRefValue, '^\d')) then concat('_', $translatedCiteRefValue) else $translatedCiteRefValue"/>
                  <xsl:attribute name="citeref" select="$processedCiteRefValue"/>
               </xsl:if>
               <!-- MDS 2017-05-01 - Added parameter 'childElementName' to match other call.  
				General ci:* module states to drop value of ci:cite/@searchtype if certain strings are found in first child element local-name.  
				Previously this first child element local-name value was not being passed.  The value is not invalid but it is a diff from the DT documents. -->
               <xsl:apply-templates select="@*">
                  <xsl:with-param name="childElementName" select="local-name(child::*[1])"/>
               </xsl:apply-templates>
               <xsl:apply-templates select="node()"/>
            </lnci:cite>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="ci:*[not(local-name() = ('cite', 'fragment', 'span', 'volume', 'page'))] | ci:volume[normalize-space(@num) != ''] | ci:page[normalize-space(@num) != '']">
      <xsl:element name="{concat('lnci:', local-name())}">
         <xsl:apply-templates select="@*">
            <xsl:with-param name="childElementName" select="node()[1]/local-name()"/>
         </xsl:apply-templates>
         <!-- Sudhanshu Srivastava 7 June 2017 : Added condition for CA03 stream Only. condition for generating lnci:popname and lnci:hiertext.-->
         <xsl:if test="$streamID = 'CA03' and local-name() = 'statinfo'">
            <xsl:variable name="beforestring"
                          select="substring-before(ancestor::source_cttr:body/leg:info/leg:officialname, '/')"/>
            <xsl:variable name="afterstring"
                          select="substring-after(ancestor::source_cttr:body/leg:info/leg:officialname, '/')"/>
            <xsl:variable name="fullstring"
                          select="ancestor::source_cttr:body/leg:info/leg:officialname"/>
            <xsl:variable name="cicitecount"
                          select="count(ancestor::source_cttr:body/leg:info/leg:officialnum/ci:cite)"/>
            <xsl:variable name="legjuris"
                          select="ancestor::source_cttr:body/leg:info/leg:juris[1]"/>
            <xsl:variable name="legofnumchild"
                          select="ancestor::source_cttr:body/leg:info/leg:officialnum"/>
            <xsl:if test="ancestor::leg:officialnum/parent::leg:info/parent::source_cttr:body">
               <xsl:choose>
                  <xsl:when test="$cicitecount = 1">
                     <xsl:choose>
                        <xsl:when test="not(contains($fullstring, '/'))">
                           <xsl:if test="not(ancestor::ci:cite/preceding-sibling::*[1][self::ci:cite])">
                              <lnci:popname value="{$fullstring}"/>
                           </xsl:if>
                        </xsl:when>
                        <xsl:otherwise>
                           <lnci:popname value="{$beforestring}"/>
                        </xsl:otherwise>
                     </xsl:choose>
                     <lnci:jurisinfo>
                        <lnci:can>
                           <xsl:attribute name="district">
                              <xsl:choose>
                                 <xsl:when test="$legjuris = 'PQ'">QC</xsl:when>
                                 <xsl:when test="$legjuris = ('CD', 'Canada', 'UK')">CA</xsl:when>
                                 <xsl:when test="$legjuris = ('NF')">NL</xsl:when>
                                 <xsl:when test="$legjuris = ('NU')"/>
                                 <xsl:otherwise>
                                    <xsl:value-of select="$legjuris"/>
                                 </xsl:otherwise>
                              </xsl:choose>
                           </xsl:attribute>
                        </lnci:can>
                     </lnci:jurisinfo>
                  </xsl:when>
                  <xsl:when test="$cicitecount = 2">
                     <xsl:choose>
                        <xsl:when test="not(contains($fullstring, '/'))">
                           <xsl:if test="not(ancestor::ci:cite/preceding-sibling::*[1][self::ci:cite])">
                              <lnci:popname value="{$fullstring}"/>
                           </xsl:if>
                        </xsl:when>
                        <xsl:otherwise>
                           <lnci:popname value="{if(not(ancestor::ci:cite/preceding-sibling::*[1][self::ci:cite])) then $beforestring else $afterstring}"/>
                        </xsl:otherwise>
                     </xsl:choose>
                     <lnci:jurisinfo>
                        <lnci:can>
                           <xsl:attribute name="district">
                              <xsl:choose>
                                 <xsl:when test="$legjuris = 'PQ'">QC</xsl:when>
                                 <xsl:when test="$legjuris = ('CD', 'Canada', 'UK')">CA</xsl:when>
                                 <xsl:when test="$legjuris = ('NF')">NL</xsl:when>
                                 <xsl:when test="$legjuris = ('NU')"/>
                                 <xsl:otherwise>
                                    <xsl:value-of select="$legjuris"/>
                                 </xsl:otherwise>
                              </xsl:choose>
                           </xsl:attribute>
                        </lnci:can>
                     </lnci:jurisinfo>
                  </xsl:when>
                  <xsl:when test="$cicitecount = 4">
                     <xsl:choose>
                        <xsl:when test="not(contains($fullstring, '/'))">
                           <xsl:if test="not(ancestor::ci:cite/preceding-sibling::*[1][self::ci:cite])">
                              <lnci:popname value="{$fullstring}"/>
                           </xsl:if>
                           <xsl:if test="ancestor::ci:cite/preceding-sibling::*[1][self::ci:cite] and count(ancestor::ci:cite/preceding-sibling::*[1][self::ci:cite]) = 1">
                              <lnci:popname value="{$fullstring}"/>
                           </xsl:if>
                        </xsl:when>
                        <xsl:otherwise>
                           <xsl:if test="not(ancestor::ci:cite/preceding-sibling::*[1][self::ci:cite])">
                              <lnci:popname value="{$beforestring}"/>
                           </xsl:if>
                           <xsl:if test="ancestor::ci:cite/preceding-sibling::*[1][self::ci:cite] and count(ancestor::ci:cite/preceding-sibling::ci:cite) = 1">
                              <lnci:popname value="{$beforestring}"/>
                           </xsl:if>
                           <xsl:if test="count(ancestor::ci:cite/preceding-sibling::ci:cite) = 2">
                              <lnci:popname value="{$afterstring}"/>
                           </xsl:if>
                           <xsl:if test="count(ancestor::ci:cite/preceding-sibling::ci:cite) = 3">
                              <lnci:popname value="{$afterstring}"/>
                           </xsl:if>
                        </xsl:otherwise>
                     </xsl:choose>
                     <lnci:jurisinfo>
                        <lnci:can>
                           <xsl:attribute name="district">
                              <xsl:choose>
                                 <xsl:when test="$legjuris = 'PQ'">QC</xsl:when>
                                 <xsl:when test="$legjuris = ('CD', 'Canada', 'UK')">CA</xsl:when>
                                 <xsl:when test="$legjuris = ('NF')">NL</xsl:when>
                                 <xsl:when test="$legjuris = ('NU')"/>
                                 <xsl:otherwise>
                                    <xsl:value-of select="$legjuris"/>
                                 </xsl:otherwise>
                              </xsl:choose>
                           </xsl:attribute>
                        </lnci:can>
                     </lnci:jurisinfo>
                  </xsl:when>
                  <xsl:otherwise/>
               </xsl:choose>
            </xsl:if>
         </xsl:if>
         <xsl:if test="$streamID = 'CA03' and local-name() = 'hierlev' and not(child::ci:hierlev)">
            <xsl:variable name="beforeslash"
                          select="substring-before(ancestor::source_cttr:body/leg:info/leg:num, '/')"/>
            <xsl:variable name="afterslash"
                          select="substring-after(ancestor::source_cttr:body/leg:info/leg:num, '/')"/>
            <xsl:variable name="fullnumber" select="ancestor::source_cttr:body/leg:info/leg:num"/>
            <xsl:variable name="cicitecount"
                          select="count(ancestor::source_cttr:body/leg:info/leg:officialnum/ci:cite)"/>
            <xsl:variable name="legofnumchild"
                          select="ancestor::source_cttr:body/leg:info/leg:officialnum"/>
            <xsl:if test="contains(ancestor::leg:officialnum/preceding-sibling::leg:num, '/')">
               <xsl:choose>
                  <xsl:when test="$cicitecount = 1">
                     <lnci:hiertext value="{$beforeslash}"/>
                  </xsl:when>
                  <xsl:when test="$cicitecount = 2">
                     <lnci:hiertext value="{if(not(ancestor::ci:cite/preceding-sibling::*[1][self::ci:cite])) then $beforeslash else $afterslash}"/>
                  </xsl:when>
                  <xsl:when test="$cicitecount = 4">
                     <xsl:if test="not(ancestor::ci:cite/preceding-sibling::*[1][self::ci:cite])">
                        <lnci:hiertext value="{$beforeslash}"/>
                     </xsl:if>
                     <xsl:if test="ancestor::ci:cite/preceding-sibling::*[1][self::ci:cite] and count(ancestor::ci:cite/preceding-sibling::ci:cite) = 2">
                        <lnci:hiertext value="{$afterslash}"/>
                     </xsl:if>
                  </xsl:when>
               </xsl:choose>
            </xsl:if>
         </xsl:if>
         <!-- Awantika-21-07-2017- For AU20 remotelink needs to be created outside ci:content -->
         <xsl:choose>
            <xsl:when test="$streamID='AU20' and local-name() = 'content'">
               <xsl:apply-templates select="node() except remotelink"/>
            </xsl:when>
            <xsl:when test="$streamID='CA02DC' and local-name()='content' and ancestor::case:reportercite">
               <xsl:apply-templates select="*"/>
            </xsl:when>
            <xsl:when test="$streamID='CA02CC' and local-name()='content'">
               <xsl:choose>
                  <xsl:when test="starts-with(.,'Full text: ')">
                     <xsl:value-of select="replace(.,'Full text: ','')"/>
                  </xsl:when>
                  <xsl:when test="starts-with(.,'Texte intégral :')">
                     <xsl:value-of select="replace(.,'Texte intégral :','')"/>
                  </xsl:when>
                  <xsl:when test="starts-with(.,'Full text/texte intégral: ')">
                     <xsl:value-of select="replace(.,'Full text/texte intégral: ','')"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:apply-templates select="node()"/>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
               <xsl:apply-templates select="node()"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:element>
   </xsl:template>
   <!-- JD: 20170524 : added to trap error output message -->
   <xsl:template match="ci:pinpoint/@searchtype"/>

   <xsl:template match="ci:*/@*[not(name() = ('searchtype', 'spanref', 'type', 'ID', 'ln.nsprefix'))]">
      <xsl:attribute name="{name()}">
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>

   <xsl:template match="ci:volume[@num = ''] | ci:volume[@num = ' '] | ci:page[@num = '']"/>

   <xsl:template match="ci:*/@spanref | ci:*/@ln.nsprefix"/>

   <xsl:template match="ci:*/@ID">
      <xsl:param name="increment-caserefid" tunnel="yes"/>
      <xsl:variable name="dupStatus">
         <xsl:for-each select="parent::*">
            <xsl:call-template name="amIaDuplicate"/>
         </xsl:for-each>
      </xsl:variable>
      <xsl:choose>
         <xsl:when test="$dupStatus = 'false'">
            <xsl:attribute name="ID">
               <xsl:call-template name="normalizeIdString"/>
               <xsl:if test="$increment-caserefid = 'yes'">
                  <xsl:text>_01</xsl:text>
               </xsl:if>
            </xsl:attribute>
         </xsl:when>
         <xsl:otherwise>
            <xsl:message>citation ID for <xsl:value-of select="parent::*"/> was a duplicate and
					has been removed from the conversion.</xsl:message>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="citefragment | ci:span"><!-- Sudhanshu : 6 june 2017 , requirement for converting ci:span to lnci:span, so using choose scenario. -->
      <xsl:choose>
         <xsl:when test="$streamID = 'CA03' and not(ancestor::leg:officialnum) and not(ancestor::case:parallelcite)">
            <lnci:span>
               <xsl:apply-templates select="@* | node()"/>
            </lnci:span>
         </xsl:when>
         <xsl:otherwise>
            <xsl:apply-templates/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!--<xsl:template
		match="citefragment[parent::ci:content and remotelink[@service = 'DOC-ID']][$streamID = 'AU04' or $streamID = 'AU08']"> </xsl:template>-->
   <xsl:template match="citefragment[parent::ci:content and remotelink[@service = 'DOC-ID']][$streamID = ('AU04', 'AU08')]">
      <xsl:call-template name="remotelinkDOCID"/>
   </xsl:template>

   <xsl:template match="citefragment[parent::ci:content and remotelink[@service = 'DOC-ID']][$streamID = ('NZ09', 'NZ07-DN')]">
      <xsl:apply-templates/>
   </xsl:template>

   <xsl:template match="ci:cite[not(ancestor::case:references) or $streamID='NZ17CC' or $streamID='HK09']/@searchtype"
                 priority="25">
      <xsl:param name="childElementName"/>
      <xsl:choose><!-- JD: 2017-08-01: NZ06 includes standard module id-CCCC-10268; by my reading ci:cite/@type should not be suppressed, only the value 'legref'
			"If ci:cite@type comes with attribute value "legref" in source document then conversion needs to suppressed attribute value in target 
			and convert ci:cite according to general rule."
			Moving this logic to ci:cite/@type, below
			--><!--<xsl:when test="$streamID = ('NZ06')"/>-->
         <xsl:when test="      $childElementName = 'case' or $childElementName = 'form' or      $childElementName = 'misc' or $childElementName = 'admininterp' or      $childElementName = 'execdoc' or $childElementName = 'annot' or      $childElementName = 'constitution' or $childElementName = 'agencydecision' or      $childElementName = 'oag' or $childElementName = 'book' or      $childElementName = 'pinpoint' or $childElementName = 'periodical' or      $childElementName = 'lawrev' or $childElementName = 'copyright' or      $childElementName = 'tmark' or $childElementName = 'patent' or      $childElementName = 'sesslaw' or $childElementName = 'courtrule' or      $childElementName = 'reg' or $childElementName = 'juryinstr'"/>
         <xsl:otherwise>
            <xsl:attribute name="type">
               <xsl:choose>
                  <xsl:when test=". = 'LEG-REF'">legislation</xsl:when>
                  <xsl:when test=". = 'CASE-REF'">case</xsl:when>
                  <xsl:when test=". = 'BOOK-REF'">book</xsl:when>
                  <xsl:when test=". = 'BODY-CASE-REF'">case</xsl:when>
                  <xsl:when test=". = 'SUMM-CASE-REF'">case</xsl:when>
                  <xsl:when test=". = 'EU-REF'">EU-REF</xsl:when>
               </xsl:choose>
            </xsl:attribute>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="ci:cite/@type">
      <xsl:choose><!-- 
				"Handling for NZ Regulation and NZ Act from services:
				If ci:cite@type comes with attribute value "legref" in source document then conversion needs to suppressed attribute value in target 
			  and convert ci:cite according to general rule."  -->
         <xsl:when test=".='legref' and $streamID=('NZ05','NZ06')"/>
         <!-- do nothing -->
         <xsl:when test=". = 'legref' or parent::ci:cite[ci:case | ci:stat | ci:juryinstr | ci:reg | ci:courtrule | ci:sesslaw | ci:patent | ci:tmark | ci:copyright | ci:lawrev | ci:periodical | ci:pinpoint | ci:book | ci:oag | ci:agencydecision | ci:constitution | ci:annot | ci:execdoc | ci:admininterp | ci:misc | ci:form]"/>
         <xsl:otherwise>
            <xsl:attribute name="type" select="."/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!-- Vikas Rohilla : Added for the error messege	-->
   <xsl:template match="ci:cite/@searchtype"/>
   <!--<xsl:include href="../../modules/ci/Rosetta_ci.cite-Chof-ci.content-LxAdv-lnci.cite.xsl"/>-->   <!--<xsl:include href="../../modules/ci/Rosetta_UK_ci.cite-Chof-ci.content-LxAdv-lnci.cite.xsl"/>-->   <xd:doc>
      <xd:desc>
         <xd:p>If <xd:i>ci:cite</xd:i> encounter in <xd:i>lilabel</xd:i>, then <xd:i>ci:cite</xd:i> will be suppressed but its content will be retained in NL conversion.</xd:p>
         <xd:p>
            <xd:b>Source XML </xd:b>
         </xd:p>
         <xd:pre>

&lt;li&gt;
 &lt;lilabel&gt;
  &lt;ci:cite searchtype="LEG-REF"&gt;
   &lt;ci:content&gt;
    &lt;remotelink dpsi="0K9G" refpt="2008A1S1" remotekey1="REFPTID" service="DOC-ID"&gt;S1 &lt;/remotelink&gt;
   &lt;/ci:content&gt;
  &lt;/ci:cite&gt;
 &lt;/lilabel&gt;
 &lt;p&gt;
  &lt;text&gt;Title&lt;/text&gt;
 &lt;/p&gt;
&lt;/li&gt;
            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;listitem&gt;
 &lt;label&gt;S1&lt;/label&gt;
 &lt;bodytext&gt;
  &lt;p&gt;
   &lt;text&gt;Title&lt;/text&gt;
  &lt;/p&gt;
 &lt;/bodytext&gt;
&lt;/listitem&gt;
            </xd:pre>
         <!--Changes2012-09-27: Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_ci.cite-Chof-lilabel-LxAdv-Suppress.dita  -->
   <!--<xsl:message>Rosetta_ci.cite-Chof-lilabel-LxAdv-Suppress.xsl requires manual development!</xsl:message> -->
   <xsl:template match="lilabel/ci:cite"/>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>
            <xd:i>comm:info/contrib/note/p/text</xd:i> becomes <xd:b>seclaw:prelim/byline/inlinenote[@notetype="contributor"]</xd:b>.</xd:p>
         <xd:p>The resulting <xd:b>seclaw:prelim/byline/inlinenote[@notetype="contributor"]</xd:b> is placed within the target document's main <xd:b>seclaw:level</xd:b>.</xd:p>
         <xd:p>The text and element content of <xd:i>comm:info/contrib/note/p/text</xd:i> maps to become  
			the content of <xd:b>seclaw:prelim/byline/inlinenote[@notetype="contributor"]</xd:b>.</xd:p>
         <xd:p>Exceptional mapping for LPA only: If <xd:i>comm:info/contrib/note/p/text/person</xd:i> exists, <xd:i>person</xd:i> requires different 
			mapping than specified in other parts of this instruction. The following scenarios exist:
			<xd:ul>
               <xd:li>If <xd:i>comm:info/contrib/note/p/text/person/remotelink[@href]</xd:i> exists, then 
					<xd:i>person</xd:i> element is dropped, but its child <xd:i>remotelink</xd:i> 
					element is mapped following the mapping instructions instructions for <xd:i>remotelink/@href</xd:i> 
					(id-CCCC-10467) in the General Markup section of this Conversion Instruction.</xd:li>
               <xd:li>Otherwise, <xd:i>comm:info/contrib/note/p/text/person</xd:i> 
					becomes <xd:b>seclaw:prelim/byline/inlinenote[@notetype="contributor"]/person:person</xd:b>. 
					using the instructions provided in <xd:i>person</xd:i> to <xd:b>person:person</xd:b> 
					(id-CCCC-10428) in the General Markup section of this Conversion Instruction.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;comm:info&gt;
&lt;contrib&gt;
&lt;note&gt;
&lt;p&gt;
&lt;text&gt;&lt;emph typestyle="ib"&gt;Form Adapted for Use in Lexis Practice Advisor and Drafting Notes
Provided By:&lt;/emph&gt; Robert C. Kern, Jr., Moses &amp;amp; Singer LLP&lt;/text&gt;
&lt;/p&gt;
&lt;/note&gt;
&lt;/contrib&gt;
&lt;/comm:info&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;seclaw:level leveltype="form"&gt;
&lt;heading&gt;
&lt;title&gt;Short Form Commercial Loan Agreement&lt;/title&gt;
&lt;/heading&gt;
&lt;seclaw:prelim&gt;
&lt;byline&gt;
&lt;inlinenote notetype="contributor"&gt;&lt;emph typestyle="ib"&gt;Form Adapted 
for Use in Lexis Practice Advisor and Drafting Notes
Provided By:&lt;/emph&gt; Robert C. Kern, Jr., Moses &amp;amp; Singer LLP
&lt;/inlinenote&gt;
&lt;/byline&gt;
&lt;/seclaw:prelim&gt;
&lt;seclaw:bodytext&gt;
[...]
&lt;/seclaw:bodytext&gt;
&lt;/seclaw:level&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML containing <xd:i>person/remotelink/@href</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
&lt;comm:info&gt;
	&lt;contrib&gt;
		&lt;person&gt;
			&lt;name.text&gt;J. Bryan Echols&lt;/name.text&gt;
			&lt;remotelink href="www.lexisnexis.com/en-us/practice-advisor-authors/real-estate.page#j-bryan-echols" hrefclass="http"&gt;J. Bryan Echols&lt;/remotelink&gt;
		&lt;/person&gt;
		&lt;note&gt;
			&lt;p&gt;
				&lt;text&gt;by &lt;person&gt;
						&lt;name.text&gt;J. Bryan Echols&lt;/name.text&gt;
						&lt;remotelink href="http://www.lexisnexis.com/en-us/practice-advisor-authors/zzzz" hrefclass="http"&gt;J. Bryan Echols&lt;/remotelink&gt;
					&lt;/person&gt;, Waller Lansden Dortch &amp;amp; Davis LLP&lt;/text&gt;
			&lt;/p&gt;
		&lt;/note&gt;
	&lt;/contrib&gt;
&lt;/comm:info&gt;
</xd:pre>
         <xd:p>
            <xd:b>Target XML containing <xd:b>person:person/url</xd:b>
            </xd:b>
         </xd:p>
         <xd:pre>
&lt;seclaw:body&gt;
	&lt;seclaw:level leveltype="topic"&gt;
		&lt;ref:anchor anchortype="global" id="_0QYC_1657397"/&gt;
		&lt;seclaw:prelim&gt;
			&lt;byline&gt;
				&lt;inlinenote notetype="contributor"&gt;by &lt;ref:lnlink service="URL"&gt;
						&lt;ref:marker&gt;J. Bryan Echols&lt;/ref:marker&gt;
						&lt;ref:locator&gt;
							&lt;ref:locator-key&gt;
								&lt;ref:key-name name="URL"/&gt;
								&lt;ref:key-value value="http://www.lexisnexis.com/en-us/practice-advisor-authors/zzzz"/&gt;
							&lt;/ref:locator-key&gt;
						&lt;/ref:locator&gt;
					&lt;/ref:lnlink&gt;, Waller Lansden Dortch &amp;amp; Davis LLP&lt;/inlinenote&gt;
			&lt;/byline&gt;			...
		&lt;/seclaw:prelim&gt;
		...
	&lt;/seclaw:level&gt;
&lt;/seclaw:body&gt;
</xd:pre>
         <xd:p>
            <xd:b>Notes</xd:b>
         </xd:p>
         <xd:p>This mapping may need to be revised if more complicated examples of "notes" within contributor markup turn up.  A more scalable solution might be to make a schema change to allow <xd:b>note</xd:b> as a child of <xd:b>seclaw:prelim</xd:b>.</xd:p>
         <!--Changes2017-04-24: LPA 2017 enhancements: Changed the mapping by adding 
    		special handling for comm:info/contrib/note/p/text/person, including use 
    		of a newly included mapping rule for remotelink/@href 
    		(id-CCCC-10467) in the General Markup section of this Conversion Instruction. Adding a markup 
    		example to illustrate the unique mapping.2012-09-11: - Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_Commentary_text-Chof-comm.info-contrib-note-p-LxAdv-seclaw.prelim-byline-inlinenote.dita  -->
   <!-- this may  need more careful placement once testing in context -->
   <xsl:template match="comm:info/contrib/note[not(preceding::contrib/note)]"
                 mode="inline_note">
      <seclaw:prelim>
         <byline>
            <inlinenote>
               <xsl:attribute name="notetype">contributor</xsl:attribute>
               <xsl:apply-templates select="@* | node()" mode="inline_note"/>
            </inlinenote>
         </byline>
         <xsl:apply-templates select="following::contrib/note" mode="contrib_note_wrapper"/>
         <xsl:if test="following::comm:body/level/levelprelim">
            <xsl:apply-templates select="following::comm:body/level/levelprelim"/>
         </xsl:if>
      </seclaw:prelim>
   </xsl:template>

   <xsl:template match="contrib/note" mode="contrib_note_wrapper">
      <byline>
         <inlinenote>
            <xsl:attribute name="notetype">contributor</xsl:attribute>
            <xsl:apply-templates select="@* | node()" mode="inline_note"/>
         </inlinenote>
      </byline>
   </xsl:template>
   <!--SNB 2017-10-27 add template for 2nd and later comm:info/contrib/note elements that does nothing 
      so that default unexpected element template doesnt run and generate error. Note that these
      elements are dealt with inside of <xsl:template match="comm:info/contrib/note[not(preceding::contrib/note)]"
         mode="inline_note">-->
   <xsl:template match="comm:info/contrib/note[(parent::contrib[(preceding::contrib[note])])]"/>
   <!-- SNB 2017-10-27 no change here, but just a note; dont think the following is doing what it's 
   intended to do (which my added template above does). There shouldnt be a preceding comm:info element
   before a comm:info/contrib/note element - think this is just a mistaken XPATH below -->
   <xsl:template match="contrib/note[preceding::comm:info/contrib/note]"/>

   <xsl:template match="note/p" mode="inline_note">
      <xsl:apply-templates select="@* | node()" mode="inline_note"/>
   </xsl:template>

   <xsl:template match="p/text" mode="inline_note">
      <xsl:apply-templates select="@* | node()"/>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>copyright</xd:i> becomes <xd:b>copyright</xd:b> with optional child
                <xd:ul>
               <xd:li>
                  <xd:i>copyright.holder</xd:i> becomes <xd:b>copyright-holder</xd:b>.
		          </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;copyright&gt;
    ©  
    &lt;copyright.holder&gt;Crown Copyright&lt;/copyright.holder&gt; 
&lt;/copyright&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;copyright&gt;
     ©  
     &lt;copyright-holder&gt;Crown Copyright&lt;/copyright-holder&gt; 
&lt;/copyright&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;copyright&gt;
   Copyright © Times Newspapers Ltd and Reed Elsevier (UK) Ltd 2007
&lt;/copyright&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;copyright&gt;
     Copyright © Times Newspapers Ltd and Reed Elsevier (UK) Ltd 2007
&lt;/copyright&gt;

		</xd:pre>
         <!--Changes2013-06-17: Added an example when copyright-holder is not present in the source.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_copyright-LxAdv-copyright.dita  -->
   <!-- Vikas Rohilla : Initial updated may be changed if required-->
   <xsl:template match="copyright">
      <copyright>
         <xsl:apply-templates select="@* | node()"/>
      </copyright>
   </xsl:template>

   <xsl:template match="copyright.holder">
      <copyright-holder>
         <xsl:apply-templates select="@* | node()"/>
      </copyright-holder>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>credit</xd:i> becomes <xd:b>credit</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
    
    &lt;blockquote&gt;
      ...
      &lt;credit&gt;(Emphasis added.)&lt;/credit&gt;
    &lt;/blockquote&gt;
    
    	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
    
    &lt;blockquote&gt;
      ...
      &lt;credit&gt;(Emphasis added.)&lt;/credit&gt;
    &lt;/blockquote&gt;    
    
    	</xd:pre>
         <!--Changes2012-08-07: Created.
        -->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_credit-LxAdv-credit.dita  -->
   <!-- Vikas Rohilla : Initial updated may be changed if required-->
   <xsl:template match="credit">
      <credit>
         <xsl:apply-templates select="@* | node()"/>
      </credit>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>date</xd:i> becomes <xd:b>date</xd:b> comes with following
				attributes: <xd:ul>
               <xd:li>
                  <xd:i>@month</xd:i> becomes <xd:b>@month</xd:b> is
						between 01-12. Any numbers outside this range, do not output a
							<xd:b>@month</xd:b>. </xd:li>
               <xd:li>
                  <xd:i>@day</xd:i> becomes <xd:b>@day</xd:b> is between
						01-31. Any numbers outside this range, do not output
							<xd:b>@day</xd:b>. </xd:li>
               <xd:li>
                  <xd:i>@year</xd:i> becomes <xd:b>@year</xd:b> is 4
						digits in length. Any other lengths, do not output
							<xd:b>@year</xd:b>. </xd:li>
            </xd:ul>
            <xd:p>
               <xd:b>Note: </xd:b>The format of the content of all <xd:b>date</xd:b> elements must be
					in 'YYYY-MM-DD'.</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
	&lt;text&gt;The paragraph below is current to 
		&lt;emph typestyle="bf"&gt;
			&lt;date day="11" month="05" year="2010"&gt;11 May 2010&lt;/date&gt;
		&lt;/emph&gt;
	&lt;/text&gt;
&lt;/p&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
	&lt;text&gt;The paragraph below is current to 
		&lt;emph typestyle="bf"&gt;
			&lt;date day="11" month="05" year="2010"&gt;11 May 2010&lt;/date&gt;
		&lt;/emph&gt;
	&lt;/text&gt;
&lt;/p&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Populating the attribute @normdate</xd:b>
         </xd:p>
         <xd:p>
            <xd:ul>
               <xd:li>If one or more of the three date values (year, month or day) are absent,
						then decision:decisiondate/@normdate should not be populated.</xd:li>
               <xd:li>The <xd:i>@normdate</xd:i> should be populated with the values of
						date elements within New Lexis. </xd:li>
               <xd:li>Using case:decisiondate as an example the ru: case:decisiondate/date/@year,
						case:decisiondate/date/@month and case:decisiondate/date/@day concatenated
						and separated by a single hyphen. The values of
						case:decisiondate/date/@month and case:decisiondate/date/@day should be
						padded with zeroes so that they are 2 digits. </xd:li>
            </xd:ul>
            <xd:p>
               <xd:b>Note: </xd:b>The format of the content of all <xd:b>date</xd:b> elements must be
					in 'YYYY-MM-DD'.</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
            <xd:b>Source 1</xd:b>	

     &lt;admindecision:dates&gt;
         &lt;decision:fileddate  day="8" month="02" year="1989"&gt;
             &lt;date-text&gt;8/2/1989&lt;/date-text&gt;
          &lt;/decision:fileddate&gt;
     &lt;/admindecision:dates&gt;


<xd:b>Source 2</xd:b>

		&lt;decision:dates&gt;
           &lt;decision:decisiondate day="8" month="02" year="1989"&gt;
             &lt;date-text&gt;8/2/1989&lt;/date-text&gt;
           &lt;/decision:decisiondate&gt;
       &lt;/decision:dates&gt;
		
		
<xd:b>Source 3</xd:b>
		
		
	&lt;primlawinfo:primlawinfo&gt;
     &lt;primlawinfo:dates&gt;
        &lt;primlawinfo:effdate year="1961" month="06" day="22"&gt;
            &lt;date-text&gt;June 22, 1961&lt;/date-text&gt;
        &lt;/primlawinfo:effdate&gt;
      &lt;/primlawinfo:dates&gt;
   &lt;/primlawinfo:primlawinfo&gt;
		

		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
            <xd:b>Target 1</xd:b>	

   &lt;admindecision:dates&gt;
      &lt;decision:fileddate  day="8" month="02" year="1989" normdate="1989-02-08"&gt;
			&lt;date-text&gt;8/2/1989&lt;/date-text&gt;
		&lt;/decision:fileddate&gt;
   &lt;/admindecision:dates&gt;
		
		
<xd:b>Target 2</xd:b>

	&lt;decision:decisiondate day="8" month="02" year="1989" normdate="1989-02-08"&gt;
		&lt;date-text&gt;8/2/1989&lt;/date-text&gt;
	&lt;/decision:decisiondate&gt;
		
		
<xd:b>Target 3</xd:b>
		
		
	&lt;primlawinfo:dates&gt;
		&lt;primlawinfo:effdate year="1961" month="06" day="22" normdate="1961-06-22"&gt;
				&lt;date-text&gt;June 22, 1961&lt;/date-text&gt;
		&lt;/primlawinfo:effdate&gt;
	&lt;/primlawinfo:dates&gt;
		
				
		</xd:pre>
         <!--Changes2013-03-08 Added instruction for @normdate attribute that falls
					on various NL date elements-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_date-LxAdv-date.dita  -->
   <!-- IMPORTANT NOTE: if your stream wants to put the text content of the date element into a <date-text> wrapper, add 
		the streamID for your stream into the variable 'streamsThatUseDateTextChild' and it will add
		the date-text wrapper for that stream -->
   <!-- Awantika: Following the above instructions modified the template as in few streams date element is not required 
		but if date is coming in p/text then date element is created. -->
   <!-- Awantika: added stream AU20 to  streamsThatUseDateTextChild-->
   <xsl:template match="date">
      <xsl:variable name="streamsThatUseDateTextChild"
                    select="('HK03','AU01','NZ03','NZ13','CA02DC','UK05','AU20','UK01','UK03','UK11DA','UK12','AU09','UK11DN','UK22CF')"/>
      <xsl:choose>
         <xsl:when test="ancestor::case:dates or $streamID=('CA02DC','AU20','UK11DA','UK12','NZ13','UK11DN','UK22CF')">
            <xsl:choose>
               <xsl:when test="($streamID=$streamsThatUseDateTextChild and parent::entry)">
                  <date>
                     <xsl:apply-templates select="@*|node()"/>
                  </date>
               </xsl:when>
               <xsl:when test="($streamID=$streamsThatUseDateTextChild) and node()">
                  <date-text>
                     <xsl:apply-templates/>
                  </date-text>
               </xsl:when>
               <xsl:when test="not($streamID=$streamsThatUseDateTextChild) and node()">
                  <xsl:apply-templates/>
               </xsl:when>
               <!-- JD: 2017-06-27: 
						Excluding this template from UK01 under case:hearingdates.  
						
						date/@* are applied in the case:hearindates template as any attributes
						must be created before creating any nodes (<date-text>, text() content, etc.)
						
						Previously, the 'otherwise' condition would apply to the data below and would 
						output as @day="06", @month="12" @year="1934; the correct output is 
						@day="23", @month="01" @year="1935"
						
						<case:hearingdates>
							<date day="29" month="11" year="1934"/>
							<date day="30" month="11" year="1934"/>
							<date day="06" month="12" year="1934"/>
							<date day="13" month="12" year="1934">29, 30 November, 6, 13
								December 1934</date>
							<date day="23" month="01" year="1935">23 January 1935</date>
						</case:hearingdates>
						-->
               <xsl:when test="$streamID=('UK01','UK03') and (parent::case:hearingdates or parent::case:decisiondate)"><!-- do nothing; date attributes have been handled and there is no child node() to process --></xsl:when>
               <xsl:otherwise><!-- just apply attributes -->
                  <xsl:apply-templates select="@*"/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <xsl:otherwise>
            <date>
               <xsl:call-template name="DATE_attributes">
                  <xsl:with-param name="date">
                     <xsl:copy-of select="."/>
                  </xsl:with-param>
               </xsl:call-template>
               <xsl:apply-templates select="node()"/>
            </date>
         </xsl:otherwise>
      </xsl:choose>
      <!--<date xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
			<xsl:call-template name="DATE_attributes">
				<xsl:with-param name="date">
					<xsl:copy-of select="."/>
				</xsl:with-param>
			</xsl:call-template>
		<!-\-  Original Target XPath:  date   -\->
		<!-\- Awantika: date becomes date-text if text() is coming else date becomes date in HK03 -\->
			<xsl:choose>
				<xsl:when test="($streamID=$streamsThatUseDateTextChild) and node()">
					<date-text xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
						<xsl:apply-templates/>
					</date-text>
				</xsl:when>
				<xsl:when test="not($streamID=$streamsThatUseDateTextChild) and node()">
					<xsl:apply-templates/>					
				</xsl:when>
			</xsl:choose>
		</date>-->
   </xsl:template>

   <xsl:template match="date[parent::p-limited or ancestor::text][$streamID='UK12']">
      <date>
         <xsl:copy-of select="@*"/>
         <xsl:apply-templates select="node()"/>
      </date>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>deflist</xd:i> becomes <xd:b>deflist</xd:b>
					with children as described below: </xd:p>
         <xd:p>
            <xd:i>defitem</xd:i> becomes <xd:b>defitem</xd:b>. </xd:p>
         <xd:p>
            <xd:i>defterm</xd:i> becomes <xd:b>defterm</xd:b>. </xd:p>
         <xd:p>
            <xd:i>defdesc</xd:i> becomes <xd:b>defdesc</xd:b>. </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>When <xd:i>defitem</xd:i> contains
						<xd:i>footenote</xd:i> or <xd:i>fnr</xd:i> as a
					direct child, place the converted <xd:b>footnote</xd:b> and
						<xd:b>footnote-ref</xd:b> into either
						<xd:b>defterm</xd:b> or <xd:b>defdesc</xd:b>. If
					the <xd:i>footenote</xd:i> or <xd:i>fnr</xd:i>
					occurs either directly before or directly after
						<xd:b>defterm</xd:b>, place the footnote in
						<xd:b>defterm</xd:b>. If the
						<xd:i>footenote</xd:i> or <xd:i>fnr</xd:i>
					occurs after <xd:b>defdesc</xd:b>, place the footnote in
						<xd:b>defdesc</xd:b>. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem&gt; &lt;defterm&gt; &lt;emph
					typestyle="bf"&gt;an entitlement to redundancy pay&lt;/emph&gt;
					&lt;/defterm&gt; &lt;defdesc&gt; &lt;p&gt; &lt;text&gt;includes an
					entitlement for an employee to enter into a retention or redeployment
					period.&lt;/text&gt; &lt;/p&gt; &lt;/defdesc&gt; &lt;/defitem&gt;
					&lt;/deflist&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem&gt; &lt;defterm&gt; &lt;emph
					typestyle="bf"&gt;an entitlement to redundancy pay&lt;/emph&gt;
					&lt;/defterm&gt; &lt;defdesc&gt; &lt;bodytext&gt; &lt;p&gt;
					&lt;text&gt;includes an entitlement for an employee to enter into a
					retention or redeployment period.&lt;/text&gt; &lt;/p&gt;
					&lt;/bodytext&gt; &lt;/defdesc&gt; &lt;/defitem&gt; &lt;/deflist&gt;
				</xd:pre>
         <xd:p>If the markup includes <xd:i>defitem/defterm</xd:i>, but no
					sibling <xd:i>defitem/defdesc</xd:i>, create a blank
						<xd:b>defitem/defdesc</xd:b> element after
						<xd:b>defterm</xd:b> but before any other text (such as a
					note or annottion). The resulting markup within
						<xd:b>deflist/defitem</xd:b> must always include a
						<xd:b>defdesc</xd:b> child to create the proper display to
					the end user.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem&gt; &lt;defterm&gt; &lt;emph
					typestyle="bf"&gt;FWA&lt;/emph&gt; &lt;/defterm&gt;
					&lt;leg:histnote&gt; &lt;p&gt; &lt;text&gt;[def rep Act 174 of 2012 s
					3 and Sch 9 item 14, effective 1 January 2013]&lt;/text&gt; &lt;/p&gt;
					&lt;/leg:histnote&gt; &lt;/defitem&gt; &lt;/deflist&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem&gt; &lt;defterm&gt; &lt;emph
					typestyle="bf"&gt;FWA&lt;/emph&gt; &lt;/defterm&gt; &lt;defdesc/&gt;
					&lt;note notetype="historical"&gt; &lt;bodytext&gt; &lt;p&gt;
					&lt;text&gt;[def rep Act 174 of 2012 s 3 and Sch 9 item 14, effective
					1 January 2013]&lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt;
					&lt;/note&gt; &lt;/defitem&gt; &lt;/deflist&gt; </xd:pre>
         <xd:p> For narrative content that immediately follows
						<xd:i>defterm</xd:i> create and wrap the narrative content
					within <xd:b>defdesc/bodytext/p/text</xd:b> retaining any
						<xd:i>emph</xd:i>. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem&gt; &lt;p&gt; &lt;text&gt;
					&lt;defterm&gt; &lt;refpt id="ACT_REG_1932-MAG_FINEDEFAULTER"
					type="ext"/&gt; &lt;emph typestyle="bf"&gt;fine defaulter&lt;/emph&gt;
					&lt;/defterm&gt; &amp;mdash;see the &lt;emph
					typestyle="it"&gt;Magistrates Court Act 1930&lt;/emph&gt;,
					section&amp;#160;146. &lt;/text&gt; &lt;/p&gt; &lt;/defitem&gt;
					&lt;defitem&gt; &lt;p&gt; &lt;text&gt; &lt;defterm&gt; &lt;refpt
					id="ACT_REG_1932-MAG_OUTSTANDINGFINE" type="ext"/&gt; &lt;emph
					typestyle="bf"&gt;outstanding fine&lt;/emph&gt; &lt;/defterm&gt;
					&amp;mdash; see the &lt;emph typestyle="it"&gt;Magistrates Court Act
					1930&lt;/emph&gt;, section&amp;#160;146. &lt;/text&gt; &lt;/p&gt;
					&lt;/defitem&gt; &lt;/deflist&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem&gt; &lt;defterm&gt;
					&lt;ref:anchor id="ACT_REG_1932-MAG_FINEDEFAULTER"
					anchortype="global"/&gt; &lt;emph typestyle="bf"&gt;fine
					defaulter&lt;/emph&gt; &lt;/defterm&gt; &lt;defdesc&gt;
					&lt;bodytext&gt; &lt;p&gt; &lt;text&gt; &amp;#x2014; see the &lt;emph
					typestyle="it"&gt;Magistrates Court Act 1930&lt;/emph&gt;,
					section&amp;#x00A0;146. &lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt;
					&lt;/defdesc&gt; &lt;/defitem&gt; &lt;defitem&gt; &lt;defterm&gt;
					&lt;ref:anchor id="ACT_REG_1932-MAG_OUTSTANDINGFINE"
					anchortype="global"/&gt; &lt;emph typestyle="bf"&gt;outstanding
					fine&lt;/emph&gt; &lt;/defterm&gt; &lt;defdesc&gt; &lt;bodytext&gt;
					&lt;p&gt; &lt;text&gt; &amp;#x2014; see the &lt;emph
					typestyle="it"&gt;Magistrates Court Act 1930&lt;/emph&gt;,
					section&amp;#x00A0;146. &lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt;
					&lt;/defdesc&gt; &lt;/defitem&gt; &lt;/deflist&gt; </xd:pre>
         <xd:p> Handling of deflist with connector element. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem
					id="WFW.RL.WRA96.S6..APPLIES"&gt; &lt;defterm&gt; &lt;refpt
					id="WFW.RL.WRA96.S6..APPLIES" type="ext"/&gt; &lt;emph
					typestyle="bf"&gt;applies&lt;/emph&gt; &lt;/defterm&gt; :
					&lt;defdesc&gt; &lt;l&gt; &lt;li id="WFW.RL.WRA96.S6..APPLIES.A"&gt;
					&lt;lilabel&gt; &lt;refpt id="WFW.RL.WRA96.S6..APPLIES.A"
					type="ext"/&gt;(a) &lt;/lilabel&gt; &lt;/li&gt; &lt;/l&gt;
					&lt;/defdesc&gt; &lt;/defitem&gt; &lt;/deflist&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem&gt; &lt;defterm&gt;
					&lt;ref:anchor id="WFW.RL.WRA96.S6..APPLIES" anchortype="global"/&gt;
					&lt;emph typestyle="bf"&gt;applies&lt;/emph&gt; &lt;/defterm&gt;
					&lt;connector&gt;:&lt;/connector&gt; &lt;defdesc&gt; &lt;bodytext&gt;
					&lt;list&gt; &lt;listitem&gt; &lt;ref:anchor
					id="WFW.RL.WRA96.S6..APPLIES.A" anchortype="global"/&gt;
					&lt;label&gt;(a)&lt;/label&gt; &lt;/listitem&gt; &lt;/list&gt;
					&lt;/bodytext&gt; &lt;/defdesc&gt; &lt;/defitem&gt; &lt;/deflist&gt;
				</xd:pre>
         <xd:p> If there are more than one <xd:i>defterm</xd:i> in the
					input documents then it will be handled as: </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem&gt; &lt;p&gt; &lt;text&gt;
					&lt;defterm&gt; &lt;refpt id="VIC_ACT_797_BISHOP" type="ext"/&gt;
					&lt;emph typestyle="bf"&gt;"bishop"&lt;/emph&gt; &lt;/defterm&gt; or
					&lt;defterm&gt; &lt;refpt id="VIC_ACT_797_BISHOPOFADIOCESE"
					type="ext"/&gt; &lt;emph typestyle="bf"&gt;"bishop of a
					diocese"&lt;/emph&gt; &lt;/defterm&gt; shall mean as to the term
					"bishop" the bishop registered under the title of "bishop" under the
					provisions of the "&lt;emph typestyle="bf"&gt;Successory Trusts Act
					1878&lt;/emph&gt;" as head of the Church of England in the portion of
					Victoria described in the certificate of registrations, and shall
					include the administrator of the affairs of the dioceses during the
					vacancy of the see; and the term &lt;defterm&gt; &lt;refpt
					id="VIC_ACT_797_DIOCESE" type="ext"/&gt; &lt;emph
					typestyle="bf"&gt;"diocese"&lt;/emph&gt; &lt;/defterm&gt; shall mean
					the portion of Victoria described in such certificate as the diocese
					of the person so registered; &lt;/text&gt; &lt;/p&gt; &lt;/defitem&gt;
					&lt;/deflist&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem&gt; &lt;defterm&gt;
					&lt;ref:anchor id="VIC_ACT_797_BISHOP" anchortype="global"/&gt;
					&lt;emph typestyle="bf"&gt;"bishop"&lt;/emph&gt; &lt;/defterm&gt;
					&lt;connector&gt;or&lt;/connector&gt; &lt;defterm&gt; &lt;ref:anchor
					bid="VIC_ACT_797_BISHOPOFADIOCESE" anchortype="global"/&gt; &lt;emph
					typestyle="bf"&gt;"bishop of a diocese"&lt;/emph&gt; &lt;/defterm&gt;
					&lt;defdesc&gt; &lt;bodytext&gt; &lt;p&gt; &lt;text&gt; shall mean as
					to the term "bishop" the bishop registered under the title of "bishop"
					under the provisions of the "&lt;emph typestyle="bf"&gt;Successory
					Trusts Act 1878&lt;/emph&gt;" as head of the Church of England in the
					portion of Victoria described in the certificate of registrations, and
					shall include the administrator of the affairs of the dioceses during
					the vacancy of the see; and the term &lt;/text&gt; &lt;/p&gt;
					&lt;/bodytext&gt; &lt;/defdesc&gt; &lt;defterm&gt; &lt;ref:anchor
					id="VIC_ACT_797_DIOCESE" anchortype="global"/&gt; &lt;emph
					typestyle="bf"&gt;"diocese"&lt;/emph&gt; &lt;/defterm&gt;
					&lt;defdesc&gt; &lt;bodytext&gt; &lt;p&gt; &lt;text&gt; shall mean the
					portion of Victoria described in such certificate as the diocese of
					the person so registered; &lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt;
					&lt;/defdesc&gt; &lt;/defitem&gt; &lt;/deflist&gt; </xd:pre>
         <xd:p> Handling of <xd:i>defitem/@id</xd:i> and
					<xd:i>defterm/@id</xd:i>. </xd:p>
         <xd:p>
            <xd:p>
               <xd:b>Note: </xd:b>
               <xd:p>For GPL IN Content Stream <xd:ul>
                     <xd:li>
                        <xd:i>defitem/@id</xd:i> becomes
									<xd:b>defitem/@xml:id</xd:b>
                     </xd:li>
                     <xd:li>
                        <xd:i>defterm/@id</xd:i> becomes
									<xd:b>defterm/@xml:id</xd:b>
                     </xd:li>
                  </xd:ul>
               </xd:p>
            </xd:p>
         </xd:p>
         <xd:p>
            <xd:b>GPL IN Content Stream Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem id="S3.i"&gt; &lt;defterm
					id="s3.active service"&gt;active service&lt;/defterm&gt;
					&lt;defdesc&gt; &lt;p&gt; &lt;text&gt;, as applied to a person subject
					to this Act, means the time during which such
					person&amp;#x2014;&lt;/text&gt; &lt;/p&gt; &lt;/defdesc&gt;
					&lt;/defitem&gt; &lt;/deflist&gt; </xd:pre>
         <xd:p>
            <xd:b>GPL IN Content Stream Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem xml:id="S3.i"&gt; &lt;defterm
					xml:id="s3.active service"&gt;active service&lt;/defterm&gt;
					&lt;defdesc&gt; &lt;bodytext&gt; &lt;p&gt; &lt;text&gt;, as applied to
					a person subject to this Act, means the time during which such
					person&amp;#x2014;&lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt;
					&lt;/defdesc&gt; &lt;/defitem&gt; &lt;/deflist&gt; </xd:pre>
         <xd:p>If the input document has subtitle/defterm scenario then
						<xd:i>defterm</xd:i> within a subtitle can be dropped, but
					the child element and content of the tag is retained and no text is
					dropped. </xd:p>
         <xd:p>
            <xd:b>Source XML having subtitle/defterm scenario:</xd:b>
         </xd:p>
         <xd:pre> &lt;subtitle&gt; &lt;defterm&gt; &lt;emph
						typestyle="bf"&gt;&amp;#x201C;Greenhouse Gas Storage Act
						2009&amp;#x201D;&lt;/emph&gt; &lt;/defterm&gt; &lt;/subtitle&gt;
					</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;subtitle&gt; &lt;emph
						typestyle="bf"&gt;&amp;#x201C;Greenhouse Gas Storage Act
						2009&amp;#x201D;&lt;/emph&gt; &lt;/subtitle&gt; </xd:pre>
         <!--Changes2014-03-21: Added instruction to handle
							defitem/@id and
							defterm/@id only for GPL IN content
						Streams.2013-12-20: Added note to place a
							footnote or fnr that
						is a child of defitem into one of its
						children. WebTeam #5158742 - AU04.2013-10-14: Added new rule to create a
						blank defitem/defdesc element after the defterm element. WebTeam #
						237242 and #247307.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="deflist"><!--  Original Target XPath:  deflist   -->
      <deflist>
         <xsl:apply-templates select="@* | node()"/>
      </deflist>
   </xsl:template>

   <xsl:template match="defitem"><!--  Original Target XPath:  defitem   -->
      <defitem>
         <xsl:apply-templates select="@id"/>
         <xsl:apply-templates select="@* except @id | defterm"/>
         <xsl:if test="not(defdesc | p/text/defdesc) and not(text()[normalize-space(replace(., '^[\t\p{Zs}]+$', '')) = ''])"><!-- JL added empty bodytext wrapper to validate to the target schemas -->
            <defdesc>
               <bodytext>
                  <xsl:apply-templates/>
               </bodytext>
            </defdesc>
         </xsl:if>
         <xsl:apply-templates select="node() except (footnote | fnr | defterm)"/>
      </defitem>
   </xsl:template>

   <xsl:template match="defitem[$streamID = ('UK06','UK07')]">
      <defitem>
         <xsl:apply-templates select="@* | defterm"/>
         <xsl:choose><!-- when there is a defdesc apply it --><!-- TODO: find/test p/text/defdesc branch to ensure nothing lost -->
            <xsl:when test="defdesc | p/text/defdesc">
               <xsl:apply-templates select="defdesc | p/text/defdesc"/>
            </xsl:when>
            <!-- when there is no defdesc and text() content that should become the definition -->
            <xsl:when test="not(defdesc | p/text/defdesc)"><!-- JL added empty bodytext wrapper to validate to the target schemas -->
               <defdesc>
                  <bodytext>
                     <xsl:variable name="defvalue"
                                   select="./text()[preceding-sibling::defterm and following-sibling::leg:histnote]"/>
                     <xsl:apply-templates select="node() except (footnote | fnr | defterm)"/>
                  </bodytext>
               </defdesc>
            </xsl:when>
         </xsl:choose>
      </defitem>
   </xsl:template>
   <!-- JD: Attempting to create single defitem template rule, 
		   limiting to specific streams for now.
		   
		   Handles both <defitem> with <defterm> and <defdesc> and the 		
			 condition where <defitem> has a <defterm> but no <defdesc>, but has text() containing the definition.
			
			Example:
	
		<defitem id="IPP.ICON.JRCTL.ART1.OFFICE">
			<defterm>
				<refpt id="IPP.ICON.JRCTL.ART1.OFFICE" type="ext"/>
		  	<emph typestyle="bf">Office</emph>
		 	</defterm>
		 	means the agency entrusted by a Member State with the registration of marks;
		</defitem>
	-->
   <xsl:template match="defitem[$streamID = ('AU11', 'NZ06', 'NZ10', 'AU18')]">
      <defitem>
         <xsl:choose>
            <xsl:when test="$streamID='AU18' and ./@id = descendant::refpt/@id"/>
            <xsl:otherwise>
               <xsl:apply-templates select="@id"/>
            </xsl:otherwise>
         </xsl:choose>
         <xsl:apply-templates select="@* except @id | defterm"/>
         <!-- create <connector> if required  -->
         <xsl:apply-templates select="text()[normalize-space(replace(., '^[\t\p{Zs}]+$', '')) !='' and parent::defitem and preceding-sibling::defterm and (following-sibling::defdesc | following-sibling::leg:histnote[$streamID='AU18'])]"/>
         <xsl:choose><!-- when there is a defdesc apply it --><!-- TODO: find/test p/text/defdesc branch to ensure nothing lost -->
            <xsl:when test="defdesc | p/text/defdesc">
               <xsl:apply-templates select="defdesc | p/text/defdesc"/>
            </xsl:when>
            <!-- JD: 2017-12-01: found validation error and DT mismatch after SVN update.  Adding this when but limiting to affected stream for now.  May be more broadly applicable. -->
            <xsl:when test="glp:note and not(defdesc | p/text/defdesc) and normalize-space(replace(., '^[\t\p{Zs}]+$', '')) !='' and $streamID='NZ06'">
               <xsl:apply-templates select="node() except (footnote | fnr | defterm | leg:histnote)"/>
            </xsl:when>
            <!-- when there is no defdesc and text() content that should become the definition -->
            <xsl:when test="not(defdesc | p/text/defdesc) and normalize-space(replace(., '^[\t\p{Zs}]+$', '')) !=''">
               <defdesc>
                  <bodytext>
                     <p>
                        <text>
                           <xsl:apply-templates select="node() except (footnote | fnr | defterm | leg:histnote)"/>
                        </text>
                     </p>
                  </bodytext>
               </defdesc>
               <!--<xsl:apply-templates select="child::leg:histnote[$streamID='AU18']"/>-->
            </xsl:when>
            <!-- otherwise nothing to do (e.g., text() is all whitespace-->
            <xsl:otherwise/>
         </xsl:choose>
         <!-- now apply templates to any element other than defterm -->
         <xsl:apply-templates select="* except (defterm | defdesc | p/text/defdesc | glp:note)"/>
      </defitem>
   </xsl:template>
   <!-- JD: 2017-07-21: although not mentioned in the instructions, id-CCCC-10277 provides a special use case and example for <connector> 
	if text() contains anything but whitespace (tab, nonbreaking space, line feed) then wrap contents in <connector>
	-->
   <xsl:template match="text()[parent::defitem and preceding-sibling::defterm and following-sibling::defdesc][not(matches(., '^[\t\p{Zs}]+$'))]">
      <connector>
         <xsl:value-of select="."/>
      </connector>
   </xsl:template>
   <!-- if there is a space char (including nonbreaking) suppress it -->
   <xsl:template match="text()[parent::defitem and preceding-sibling::defterm][matches(., '^[\t\p{Zs}]+$')]"/>

   <xsl:template match="defterm"><!--  Original Target XPath:  defterm   -->
      <defterm>
         <xsl:apply-templates select="@* | node()"/>
         <xsl:if test="following-sibling::*[1][self::footnote | self::fnr] | preceding-sibling::*[1][self::footnote | self::fnr]">
            <xsl:apply-templates select="following-sibling::*[1][self::footnote | self::fnr] | preceding-sibling::*[1][self::footnote | self::fnr]"/>
         </xsl:if>
      </defterm>
   </xsl:template>

   <xsl:template match="defterm[parent::subtitle]">
      <xsl:apply-templates select="node()"/>
   </xsl:template>

   <xsl:template match="defdesc"><!--  Original Target XPath:  defdesc   -->
      <defdesc>
         <xsl:apply-templates select="@*"/>
         <bodytext>
            <xsl:apply-templates select="node()"/>
         </bodytext>
         <xsl:if test="following-sibling::*[1][self::footnote | self::fnr]">
            <xsl:apply-templates select="following-sibling::*[1][self::footnote | self::fnr]"/>
         </xsl:if>
      </defdesc>
   </xsl:template>
   <!-- ************************** -->   <!-- Moved functionality to Rosetta_p_glp.note-LxAdv-bodytext_note.xsl.  
        Use that module instead. -->   <!-- ************************** -->   <xd:doc>
      <xd:desc>
         <xd:p> If the source XML has <xd:i>deflist/defitem/glp:note</xd:i> it will be
                    handled as <xd:b>deflist/defitem/defdesc/bodytext/note</xd:b>. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem&gt; ... &lt;glp:note&gt; &lt;p&gt;
                    &lt;text&gt; &lt;emph typestyle="it"&gt;Note: The definition of
                    &amp;ldquo;community corrections officer&amp;rdquo; is affected by
                    section&amp;#160;10.&lt;/emph&gt; &lt;/text&gt; &lt;/p&gt; &lt;/glp:note&gt;
                    &lt;/defitem&gt; &lt;/deflist&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;deflist&gt; &lt;defitem&gt; ... &lt;defdesc&gt; &lt;bodytext&gt;
                    &lt;note&gt; &lt;bodytext&gt; &lt;p&gt; &lt;text&gt; &lt;emph
                    typestyle="it"&gt;Note: The definition of &amp;ldquo;community corrections
                    officer&amp;rdquo; is affected by section&amp;#160;10.&lt;/emph&gt;
                    &lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt; &lt;/note&gt; &lt;/bodytext&gt;
                    &lt;/defdesc&gt; &lt;/defitem&gt; &lt;/deflist&gt; </xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_glp.note-Chof-deflist_defitem-LxAdv-deflist_defitem_defdesc_bodytext_note.dita  -->
   <!-- 20170516:  MCJ:  Turning into a do-nothing module as it feels better to handle this specific path for notes within a module dedicate to notes. -->
   <xd:doc>
      <xd:desc>
         <xd:p>
                When the source has <xd:i>deflist/defitem/p/text</xd:i> then omit <xd:i>p/text</xd:i> and retain <xd:i>defitem</xd:i>.
            </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;deflist&gt;
    &lt;defitem&gt;
        &lt;p&gt;
            &lt;text&gt;
                &lt;defterm&gt;
                    &lt;refpt id="ACT_REG_1932-MAG_FINEDEFAULTER" type="ext"/&gt;
                    &lt;emph typestyle="bf"&gt;fine defaulter&lt;/emph&gt;
                &lt;/defterm&gt;&amp;mdash;see the &lt;emph typestyle="it"&gt;Magistrates Court Act 1930&lt;/emph&gt;,
                section&amp;#160;146.
            &lt;/text&gt;
        &lt;/p&gt;
    &lt;/defitem&gt;
    &lt;defitem&gt;
        &lt;p&gt;
            &lt;text&gt;
                &lt;defterm&gt;
                    &lt;refpt id="ACT_REG_1932-MAG_OUTSTANDINGFINE" type="ext"/&gt;
                    &lt;emph typestyle="bf"&gt;outstanding fine&lt;/emph&gt;
                &lt;/defterm&gt;&amp;mdash; see the &lt;emph typestyle="it"&gt;Magistrates Court Act 1930&lt;/emph&gt;,
                section&amp;#160;146.
            &lt;/text&gt;
        &lt;/p&gt;
    &lt;/defitem&gt;
&lt;/deflist&gt;


            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;deflist&gt;
    &lt;defitem&gt;
        &lt;defterm&gt;
            &lt;ref:anchor id="ACT_REG_1932-MAG_FINEDEFAULTER" anchortype="global"/&gt;
            &lt;emph typestyle="bf"&gt;fine defaulter&lt;/emph&gt;
        &lt;/defterm&gt;
        &lt;defdesc&gt;
            &lt;bodytext&gt;
                &lt;p&gt;
                    &lt;text&gt; &amp;#x2014; see the &lt;emph typestyle="it"&gt;Magistrates Court Act 1930&lt;/emph&gt;, section&amp;#x00A0;146.&lt;/text&gt;
                &lt;/p&gt;
            &lt;/bodytext&gt;
        &lt;/defdesc&gt;     
    &lt;/defitem&gt;
    &lt;defitem&gt;
        &lt;defterm&gt;
            &lt;ref:anchor id="ACT_REG_1932-MAG_OUTSTANDINGFINE" anchortype="global"/&gt; 
            &lt;emph typestyle="bf"&gt;outstanding fine&lt;/emph&gt;
        &lt;/defterm&gt;
        &lt;defdesc&gt;
            &lt;bodytext&gt;
                &lt;p&gt;
                    &lt;text&gt;&amp;#x2014; see the &lt;emph typestyle="it"&gt;Magistrates Court Act 1930&lt;/emph&gt;, section&amp;#x00A0;146.&lt;/text&gt;
                &lt;/p&gt;
            &lt;/bodytext&gt;
        &lt;/defdesc&gt;
    &lt;/defitem&gt;
&lt;/deflist&gt;

            </xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_text-Chof-deflist_defitem_p-LxAdv-deflist_defitem.dita  -->
   <!-- Paul:  this functionality is in the deflist-to-deflist common module Rosetta_deflist_LxAdv_deflist_common_handling_test.xsl 
        
        <xsl:template match="deflist/defitem/p" priority="25">
		<!-\-  Original Target XPath:  deflist/defitem   -\->
	    <deflist xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
			<defitem>
				<xsl:apply-templates select="node()"/>
			</defitem>
		</deflist>
	</xsl:template>

    <xsl:template match="deflist/defitem/p/text" priority="25"> 
         <xsl:apply-templates select="node()"/>
    </xsl:template>
-->
   <xd:doc>
      <xd:desc>
         <xd:p>
                If the source XML has the scenario <xd:i>p/text/deflist</xd:i> then drop the text tag, i.e., <xd:i>p/text/deflist</xd:i> becomes <xd:b>p/deflist</xd:b>.
            </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;text&gt;
        &lt;deflist&gt;
            &lt;defitem&gt;
                &lt;p&gt;
                    &lt;text&gt;
                        &lt;defterm&gt;&lt;emph typestyle="bf"&gt;Australian Standard 1885.1&lt;/emph&gt;&lt;/defterm&gt; means
                        Australian Standard 1885, being that standard as approved 20 March 1990 and published 11 
                        June 1990 entitled &amp;#x2018;Workplace injury and disease recording standard&amp;#x2019;.
                    &lt;/text&gt;
                &lt;/p&gt;
            &lt;/defitem&gt;
        &lt;/deflist&gt;
    &lt;/text&gt;
&lt;/p&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;deflist&gt;
        &lt;defitem&gt;
            &lt;defterm&gt;
                &lt;emph typestyle="bf"&gt;Australian Standard 1885.1&lt;/emph&gt;
            &lt;/defterm&gt;
            &lt;defdesc&gt;
                &lt;bodytext&gt;
                    &lt;p&gt;
                        &lt;text&gt;means Australian Standard 1885, being that 
                            standard as approved 20 March 1990 and published 11 June 1990 entitled 
                            &amp;#x201C;Workplace injury and disease recording standard&amp;#x201D;.
                        &lt;/text&gt;
                    &lt;/p&gt;
                &lt;/bodytext&gt;
            &lt;/defdesc&gt;
        &lt;/defitem&gt;
    &lt;/deflist&gt;
&lt;/p&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Special Scenario:</xd:b> If source document having
                "<xd:i>p/text/deflist</xd:i>" with running text which is comes before
                starting of <xd:i>deflist</xd:i> element and under
                    <xd:i>text</xd:i> markup then conversion should not drop
                    <xd:b>text</xd:b> markup in target and retain running text under
                    <xd:b>text</xd:b> and closing of text markup before
                    <xd:b>deflist</xd:b> in target document. Refer below source and target
                examples:</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
                
&lt;p&gt;
    &lt;text&gt;In these Rules&amp;#x2014;
        &lt;deflist&gt;
            &lt;defitem&gt;
                ...
            &lt;/defitem&gt;
        &lt;/deflist&gt;
    &lt;/text&gt;
&lt;/p&gt;


            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
                
&lt;p&gt;
    &lt;text&gt;In these Rules—&lt;/text&gt;
    &lt;deflist&gt;
        &lt;defitem&gt;
            …
        &lt;/defitem&gt;
    &lt;/deflist&gt;
&lt;/p&gt;

            </xd:pre>
         <!--Changes2016-12-08: Added instruction to handle running text
                    which is comes before deflist and it comes under
                        p/text.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="text[child::deflist]" priority="1"><!--  Original Target XPath:  text   -->
      <xsl:for-each-group select="node()" group-adjacent="if (self::deflist) then 0 else 1">
         <xsl:choose>
            <xsl:when test="current-grouping-key()=0">
               <xsl:for-each select="current-group()">
                  <xsl:apply-templates select="."/>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <text>
                  <xsl:for-each select="current-group()">
                     <xsl:apply-templates select="."/>
                  </xsl:for-each>
               </text>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:for-each-group>
   </xsl:template>
   <!--<xsl:include href="../../modules/nonamespace/Rosetta_defterm-Chof-text_outside_deflist-LxAdv-defterm.xsl"/>	-->   <!-- **************** -->   <!-- MDS Be sure to include Rosetta_designum-Chof-desig-LxAdv-desig.xsl in any driver that includes this module. -->   <!-- **************** -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>desig</xd:i> becomes <xd:b>desig</xd:b>. </xd:p>
         <xd:p>
                Optional attribute <xd:i>@value</xd:i> becomes <xd:b>@value</xd:b>.
            </xd:p>
         <xd:p>
                Optional attribute <xd:i>@inline</xd:i> becomes <xd:b>@inline</xd:b>.
            </xd:p>
         <xd:p>
                Drop any remaining attributes.
            </xd:p>
         <xd:p>
                Please also see the instructions in <xd:a href="../common_newest/Rosetta_edpnum-LxAdv-desig.dita">edpnum</xd:a> regarding the
                occurrence of both <xd:i>desig</xd:i> and <xd:i>edpnum</xd:i> as sibling elements
                within the same parent element.
            </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;desig&gt;
    &lt;designum&gt;2200002817&lt;/designum&gt;
&lt;/desig&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;desig&gt;2200002817&lt;/desig&gt;

            </xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!-- Awantika: desig sibling of title becomes toc-ref in AU01 -->
   <!-- Awantika: to resolve the ambiguity between Rosetta_desig-LxAdv-desig_ref.para and Rosetta_desig-LxAdv-desig updated the template match witn not(parent::p) 
    as if desig is in the heading then it will convert ot desig if inside p then it will convert to ref:para. Removed toc-ref as it will bw mapped in toc module.
    -->
   <xsl:template match="desig[not(parent::p)]"><!--  Original Target XPath:  desig   -->
      <desig><!-- Awantika: created desig @value to get the value from designum and should not get the value of designum in text of desig
	               rather only desiglabel text is populated inside desig-->
         <xsl:choose>
            <xsl:when test="$streamID='AU20'">
               <xsl:attribute name="value">
                  <xsl:value-of select="child::designum"/>
               </xsl:attribute>
               <xsl:apply-templates select="node() except designum"/>
            </xsl:when>
            <!-- $streamID=('NZ11','AU10')
	                        when @id appears on designum, get error.  I suspect any stream would get this error, but 
	                            because this is common I opted for using stream ID.  If you get this error, consider this.
	                            Description: XTDE0410: An attribute node (xml:id) cannot be created after a child of the containing element."
	                            -->
            <xsl:when test="$streamID=('NZ11','AU10') and designum">
               <xsl:apply-templates select="@value | @inline | designum/@id"/>
               <xsl:apply-templates select="*"/>
            </xsl:when>
            <xsl:when test="$streamID=('NZ11','AU10') and not(designum)">
               <xsl:apply-templates select="@value | @inline"/>
               <xsl:apply-templates select="node()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:apply-templates select="@value | @inline | node()"/>
            </xsl:otherwise>
         </xsl:choose>
      </desig>
   </xsl:template>

   <xsl:template match="desig/@value | desig/@inline">
      <xsl:copy-of select="."/>
   </xsl:template>
   <!-- edpnum has it's own element as sibling, and its own module. no need to affect this node. -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>desig/desiglabel</xd:i> becomes <xd:b>desig</xd:b>.</xd:p>
         <xd:p>When combining <xd:i>desiglabel</xd:i> and <xd:i>designum</xd:i>
                the whitespace between should be retained. E.g "Part " and
                "1&amp;nbsp;&amp;nbsp;&amp;nbsp;" <xd:b>becomes</xd:b> "Part
                1&amp;nbsp;&amp;nbsp;&amp;nbsp;".</xd:p>
         <xd:p>
            <xd:b>
               <xd:i>For UK Streams:</xd:i>
            </xd:b> If source does not have whitespace between, then
                insert single space. If contents of source elements are wrapped in
                    <xd:i>emph</xd:i> then space is required at end of label content or
                start of number content; if neither space present, insert single space at end of
                label content.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>The element <xd:i>refpt</xd:i>should be suppressed </xd:p>
         <xd:p>
            <xd:b>Source XML 1: retain space</xd:b>
         </xd:p>
         <xd:pre>
 
&lt;desig searchtype="PART-NUM"&gt;
    &lt;desiglabel&gt;&lt;refpt type="ext" id="A2008L1_PART_1"/&gt;Part &lt;/desiglabel&gt;
    &lt;designum&gt;1&amp;#160;&amp;#160;&amp;#160;&lt;/designum&gt;
&lt;/desig&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML 1: retain space</xd:b>
         </xd:p>
         <xd:pre>

&lt;desig&gt;Part 1&amp;#160;&amp;#160;&amp;#160;&lt;/desig&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML 2: insert space</xd:b>
         </xd:p>
         <xd:pre>
 
&lt;desig&gt;
    &lt;desiglabel&gt;Division&lt;/desiglabel&gt;
    &lt;designum&gt;12&lt;/designum&gt;
&lt;/desig&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML 2: insert space</xd:b>
         </xd:p>
         <xd:pre>

&lt;desig&gt;Division 12&lt;/desig&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML 3: insert space within emph</xd:b>
         </xd:p>
         <xd:pre>
 
&lt;desig&gt;
    &lt;desiglabel&gt;&lt;emph typestyle="bf"&gt;Section&lt;/emph&gt;&lt;/desiglabel&gt;
    &lt;designum&gt;&lt;emph typestyle="bf"&gt;15&lt;emph typestyle="it"&gt;(a)&lt;/emph&gt;&lt;/emph&gt;&lt;/designum&gt;
&lt;/desig&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML 3: insert space within emph</xd:b>
         </xd:p>
         <xd:p>(space inserted at end of emph
                holding label content)</xd:p>
         <xd:pre>

&lt;desig&gt;&lt;emph typestyle="bf"&gt;Section &lt;/emph&gt;&lt;emph typestyle="bf"&gt;15&lt;emph typestyle="it"&gt;(a)&lt;/emph&gt;&lt;/emph&gt;&lt;/desig&gt;

	</xd:pre>
         <!--Changes2013-09-19: Added rules to insert space between label
                    and number when none present in source. Rule required for UK content.
                    Immediately known to occur in UK06, UK07, and UK12. R4.5 Post Iterative Testing
                    Issue 431. WebTeam # 236033.2013-08-23: Removed @value from
                    target example element desig, as it was decided, that if
                    source element doesn't contain @value then target element
                        desig will not contain
                    @value.2012-08-10: Added a note on the supression of element refpt within
                    desiglabel-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="desiglabel">
      <xsl:choose>
         <xsl:when test="parent::desigrange and $streamID='UK06'">
            <desig>
               <xsl:apply-templates select="node() except(refpt)"/>
               <!-- MDS created in HK04 but not applicable until UK06, 07, 12.  Retest with live data. -->
               <xsl:choose>
                  <xsl:when test="following-sibling::designum and (not(ends-with(., ' ')) or not(starts-with(following-sibling::designum, ' ')))">
                     <xsl:text> </xsl:text>
                  </xsl:when>
                  <xsl:when test="emph and following-sibling::designum/emph">
                     <xsl:choose>
                        <xsl:when test="(not(ends-with(emph, ' ')) or not(starts-with(following-sibling::designum/emph, ' ')))">
                           <xsl:text> </xsl:text>
                        </xsl:when>
                        <xsl:otherwise/>
                     </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise/>
               </xsl:choose>
               <!--<xsl:apply-templates select="@* | node()"/>-->
               <xsl:apply-templates select="following-sibling::designum"/>
            </desig>
         </xsl:when>
         <xsl:otherwise>
            <xsl:apply-templates select="node() except(refpt)"/>
            <!-- MDS created in HK04 but not applicable until UK06, 07, 12.  Retest with live data. -->
            <xsl:choose>
               <xsl:when test="following-sibling::designum and (not(ends-with(., ' ')) or not(starts-with(following-sibling::designum, ' ')))">
                  <xsl:text> </xsl:text>
               </xsl:when>
               <xsl:when test="emph and following-sibling::designum/emph">
                  <xsl:choose>
                     <xsl:when test="(not(ends-with(emph, ' ')) or not(starts-with(following-sibling::designum/emph, ' ')))">
                        <xsl:text> </xsl:text>
                     </xsl:when>
                     <xsl:otherwise/>
                  </xsl:choose>
               </xsl:when>
               <xsl:otherwise/>
            </xsl:choose>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>desig/designum</xd:i> becomes <xd:b>desig</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;desig&gt;
    &lt;designum&gt;2200002817&lt;/designum&gt;
&lt;/desig&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;desig&gt;2200002817&lt;/desig&gt;

	</xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_designum-Chof-desig-LxAdv-desig.dita  -->
   <!-- JL note from dita for HK05
    
    *********************************************************************
                <note>If <sourcexml>dict:body/heading/desig/designum</sourcexml> have
                    <sourcexml>refpt</sourcexml> as child then move target mapping of
                    <sourcexml>refpt</sourcexml> to
                    <targetxml>dict:body/dict:defitem/tei:entry/tei:form/tei:orth/ref:anchor</targetxml></note>
    **********************************************************************-->
   <!-- ******************************************************************************************
        IMPORTANT NOTE!
    The  template for desig (match = "desig") SHOULD NOT BE IN THIS MODULE.
    
    That template (which used to be here)  has a conflict with the module for desig : 
    /XSLT/ContentArch/Rosetta-to-LA/modules/nonamespace/Rosetta_desig-LxAdv-desig.xsl
    
    Having the template for desig in this module caused over 1500 ambiguity errors in one test run.
    
    If you need a template for desig to go with designum, which you probably do, 
    please import the desig module for generic handling
    (/XSLT/ContentArch/Rosetta-to-LA/modules/nonamespace/Rosetta_desig-LxAdv-desig.xsl) 
    into your driver if it is not already there.  If you need specialized handing, please
    create a separate module for the desig template.
    
    Thanks, JL
    ********************************************************************************************** -->
   <xsl:template match="desig/designum">
      <xsl:choose>
         <xsl:when test="$streamID='HK05' and parent::desig/parent::heading/parent::source_dict:body">
            <xsl:apply-templates select="@* | node() except refpt"/>
            <xsl:apply-templates select="refpt" mode="hk05desig"/>
         </xsl:when>
         <!-- $streamID=('NZ11','AU10')
	                        when @id appears on designum, get error.  I suspect any stream would get this error, but 
	                            because this is common I opted for using stream ID.  If you get this error, consider this.
	                            Description: XTDE0410: An attribute node (xml:id) cannot be created after a child of the containing element."
	                            -->
         <xsl:when test="$streamID=('NZ11','AU10')">
            <xsl:apply-templates select="node() except refpt"/>
         </xsl:when>
         <xsl:otherwise><!-- <xsl:apply-templates select="@* | node()"/>--><!-- Awantika: ref:anchor is not allowed in desig -->
            <xsl:apply-templates select="@* | node() except refpt"/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="refpt" mode="hk05desig">
      <xsl:apply-templates/>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>dispformula</xd:i> becomes <xd:b>formula</xd:b>
            <xd:ul>
               <xd:li>
                  <xd:i>frac</xd:i> becomes <xd:b>frac</xd:b>
                  <xd:ul>
                     <xd:li>
                        <xd:i>numer</xd:i> becomes <xd:b>numer</xd:b> is the required child element for <xd:b>frac</xd:b>.
                            </xd:li>
                     <xd:li>
                        <xd:i>denom</xd:i> becomes <xd:b>denom</xd:b> is the required child element for <xd:b>frac</xd:b>.
                            </xd:li>
                  </xd:ul>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;dispformula&gt;
    &lt;frac&gt;
        &lt;numer&gt;2 &amp;times; P &amp;times; (J &amp;minus; A)&lt;/numer&gt;
        &lt;denom&gt;J&lt;/denom&gt;
    &lt;/frac&gt;
&lt;/dispformula&gt;
	
            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;formula&gt;
    &lt;frac&gt;
         &lt;numer&gt;2 &amp;#x00D7; P &amp;#x00D7; (J &amp;#x2212; A)&lt;/numer&gt;
         &lt;denom&gt;J&lt;/denom&gt;
    &lt;/frac&gt;
&lt;/formula&gt;

		  </xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="dispformula"><!--  Original Target XPath:  formula   -->
      <formula>
         <xsl:apply-templates select="@* | node()"/>
      </formula>
   </xsl:template>
   <!-- MDS 2017-04-20 - This templates is already defined in '/nonamespace/Rosetta_frac-LxAdv-num_frac.xsl' -->   <!--	<xsl:template match="frac">

		<!-\-  Original Target XPath:  frac   -\->
		<frac>
			<xsl:apply-templates select="@* | node()"/>
		</frac>

	</xsl:template>-->   <!-- MDS 2017-04-20 - This templates is already defined in '/nonamespace/Rosetta_frac-LxAdv-num_frac.xsl' -->   <!--<xsl:template match="numer">

		<!-\-  Original Target XPath:  numer   -\->
		<numer>
			<xsl:apply-templates select="@* | node()"/>
		</numer>

	</xsl:template>-->   <!-- MDS 2017-04-20 - This templates is already defined in '/nonamespace/Rosetta_frac-LxAdv-num_frac.xsl' -->   <!--<xsl:template match="denom">

		<!-\-  Original Target XPath:  denom   -\->
		<denom>
			<xsl:apply-templates select="@* | node()"/>
		</denom>

	</xsl:template>-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:ul>
            <xd:li>If <xd:i>edpnum</xd:i> does <xd:b>not</xd:b> occur as a sibling of
                        <xd:i>desig</xd:i>, then <xd:i>edpnum</xd:i> becomes
                        <xd:b>desig</xd:b>.</xd:li>
            <xd:li>If <xd:i>edpnum</xd:i> and <xd:i>desig</xd:i> occur as
                    siblings, then <xd:i>edpnum</xd:i> becomes
                        <xd:b>altdesig</xd:b>. This scenario can occur in elements such as
                        <xd:i>leg:heading</xd:i>.</xd:li>
            <xd:li>In either case, preserve source document order in the output.</xd:li>
         </xd:ul>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
  &lt;edpnum&gt;[LEN 5638]&lt;/edpnum&gt;
  &lt;title&gt;EPA v Multiplex Constructions Pty Ltd&lt;/title&gt;
&lt;/heading&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
  &lt;desig&gt;[LEN 5638]&lt;/desig&gt;
  &lt;title&gt;EPA v Multiplex Constructions Pty Ltd&lt;/title&gt;
&lt;/heading&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML - sibling <xd:i>edpnum</xd:i> and
                    <xd:i>desig</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;leg:heading inline="true"&gt;
    &lt;edpnum&gt;[78,025]&lt;/edpnum&gt;
    &lt;title searchtype="SECT-TITLE"&gt;Children's evidence to which this Act applies&lt;/title&gt;
    &lt;desig searchtype="SECT-NUM"&gt;&lt;designum&gt;6&lt;/designum&gt;&lt;/desig&gt;
&lt;/leg:heading&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML - sibling <xd:i>edpnum</xd:i> and
                    <xd:i>desig</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;heading inline="true"&gt;
    &lt;altdesig&gt;[78,025]&lt;/altdesig&gt;
    &lt;title&gt;Children's evidence to which this Act applies&lt;/title&gt;
    &lt;desig&gt;6&lt;/desig&gt;    
&lt;/heading&gt;


	</xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>If <xd:i>pnum</xd:i> and <xd:i>edpnum </xd:i> occur as siblings,
            then <xd:i>edpnum</xd:i> becomes <xd:b>altdesig</xd:b> This scenario
            can occur in elements such as <xd:i>p</xd:i>(applicable for UK22CS and
            UK06).</xd:p>
         <xd:p>
            <xd:b>Source XML - sibling <xd:i>pnum</xd:i> and <xd:i>edpnum </xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;pnum&gt;1 (1)&lt;/pnum&gt;
    &lt;edpnum value="F1.302" inline="false"&gt;[F1.302]&lt;/edpnum&gt;         
&lt;/p&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML <xd:b>
                  <xd:i>edpnum</xd:i> becomes
                <xd:b>altdesig</xd:b>
               </xd:b>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;desig&gt;1 (1)&lt;/desig&gt;
    &lt;altdesig value="F1.302" inline="false"&gt;[F1.302]&lt;/altdesig&gt;         
&lt;/p&gt;

	</xd:pre>
         <!--Changes2016-10-12: Added rule for handling scenario when
                pnum and edpnum  occur as
                siblings (applicable for UK22CS and UK06).2016-03-15: Added rule for handling scenario when
                pnum and edpnum  occur as
                siblings (applicable only for UK22CS). [RFA #2755]2013-10-22: Not a rule change. Modified 2nd example for
                    clarity. Removed refpt from source markup. Not pertinent
                    to edpnum rules. Separate rules for
                        refpt provide details. Responds to UK LBU
                query.2013-03-06: Removed instructions/rules for exceptional
                    desig scenario and deprecated attribute @followstitle.
                    Added instructions for maintaining source document ordering.2011-12-21: Included example for multiple desig and added the CR number.2011-12-22: Added instructions regarding the creation of altdesig.2011-01-17: Removed CR number from the instruction based on latest schema
                release.2012-05-16: Corrected last example. Added exceptional use case (copied from heading
                module). For when desig and altdesig occur both before and after the title.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_edpnum-LxAdv-desig.dita  -->
   <!--<xsl:message>Rosetta_edpnum-LxAdv-desig.xsl requires manual development!</xsl:message>-->
   <!-- Awantika- added namespace attribute to the element -->
   <!-- Made sure refpt and its contents are suppressed as invalid in desig/altdesig; allow other child elements to convert over by applying templates. JL -->
   <!-- CSN: Created epdnum template -->
   <xsl:template match="edpnum">
      <xsl:choose>
         <xsl:when test="../desig or ../pnum">
            <xsl:element name="altdesig"
                         namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
               <xsl:apply-templates select="@*|node() except refpt"/>
            </xsl:element>
         </xsl:when>
         <xsl:otherwise>
            <xsl:element name="desig"
                         namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
               <xsl:apply-templates select="@*|node() except refpt"/>
            </xsl:element>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="edpnum/@inline[$streamID=('UK07')]">
      <xsl:attribute name="inline" select="."/>
   </xsl:template>

   <xsl:template match="edpnum/@value[$streamID=('UK07')]">
      <xsl:attribute name="value" select="."/>
   </xsl:template>

   <xsl:template match="edpnum/@inline[$streamID=('UK06','AU14','UK22CF')] | edpnum/@value[$streamID=('UK06','UK22CF')]"/>

   <xsl:template match="edpnum/@ln.user-displayed"/>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>email</xd:i> becomes <xd:b>contact:email</xd:b>.</xd:p>
         <xd:p>The attributes and content of <xd:b>contact:email</xd:b> are populated as follows: <xd:ul>
               <xd:li>The value of <xd:i>email/remotelink/@href</xd:i> with the prefix "mailto:" should be placed in
                            <xd:b>contact:email/@normval</xd:b>.</xd:li>
               <xd:li>The content of <xd:i>email/remotelink</xd:i> should be placed in <xd:b>contact:email</xd:b>.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;email&gt;
    &lt;remotelink href="rtu@services.nsw.gov.au" hrefclass="mailto"&gt;rtu@services.nsw.gov.au&lt;/remotelink&gt;
&lt;/email&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;contact:email normval="mailto:rtu@services.nsw.gov.au"&gt;rtu@services.nsw.gov.au
&lt;/contact:email&gt;

	</xd:pre>
         <xd:p>If <xd:i>emph</xd:i> occurs within <xd:i>email/remotelink</xd:i> then <xd:i>emph</xd:i> should be suppressed from conversion.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;email&gt;
    &lt;remotelink href="Oliver@simplychateau.com" hrefclass="mailto"&gt;
        &lt;emph typestyle="it"&gt;Oliver@simplychateau.com&lt;/emph&gt; 
    &lt;/remotelink&gt;
&lt;/email&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;contact:email normval="mailto:Oliver@simplychateau.com"&gt;
    Oliver@simplychateau.com
&lt;/contact:email&gt;

	</xd:pre>
         <!--Changes2012-05-07: Created.2012-11-21: Added instruction and example for handling of email/remotelink/emph.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_email-LxAdv-email.dita  -->
   <!-- CSN: Created mail template -->
   <xsl:template match="email">
      <xsl:element name="contact:email">
         <xsl:attribute name="normval">
            <xsl:value-of select="./remotelink/@hrefclass"/>
            <xsl:text>:</xsl:text>
            <xsl:value-of select="./remotelink/@href"/>
         </xsl:attribute>
         <xsl:value-of select="string-join(remotelink , '')"/>
      </xsl:element>
   </xsl:template>
   <!-- Vikas Rohilla : Added for the UK12   -->
   <xsl:template match="email[$streamID='UK12']">
      <xsl:element name="contact:email">
         <xsl:choose>
            <xsl:when test="child::remotelink">
               <xsl:attribute name="normval">
                  <xsl:value-of select="./remotelink/@hrefclass"/>
                  <xsl:text>:</xsl:text>
                  <xsl:value-of select="./remotelink/@href"/>
               </xsl:attribute>
               <xsl:value-of select="string-join(remotelink , '')"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:apply-templates select="@*|node()"/>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:element>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>emph</xd:i> becomes <xd:b>emph</xd:b>.
                    <xd:b>@typestyle</xd:b> values are tokenized. These are given below: <xd:ul>
               <xd:li>
                  <xd:b>@typestyle="bf"</xd:b> bold.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="biu"</xd:b> bold, italic and underline.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="bu"</xd:b> bold underline.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="caps"</xd:b> capital characters.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="dbl-un"</xd:b> double underline.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="grayscal"</xd:b> grayscale.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="hi"</xd:b> highlighted.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="ib"</xd:b> italic and bold.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="it"</xd:b> italic.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="iu"</xd:b> italic underline.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="ro"</xd:b> roman.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="smcaps"</xd:b> small caps.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="un"</xd:b> underline.</xd:li>
               <xd:li>
                  <xd:b>@typestyle="inherit"</xd:b> inherit.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>Children of <xd:i>emph</xd:i> should be processed.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;emph typestyle="ro"&gt;(1)&lt;/emph&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;emph typestyle="ro"&gt;(1)&lt;/emph&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>If <xd:b>emph/emph</xd:b> has the same
            <xd:b>@typestyle</xd:b> value then remove one
            <xd:b>emph</xd:b> element.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:p>
               <xd:i>heading/title/emph</xd:i> becomes <xd:b>heading/title</xd:b>. That
                is, the <xd:i>emph</xd:i> start-tag and end-tag (but not the content) are dropped, and the content 
                becomes part of the target parent <xd:b>title</xd:b> element.</xd:p>
            <xd:p>
               <xd:i>emph/inlineobject</xd:i> becomes
                <xd:b>figure/ref:inlineobject</xd:b>.</xd:p>
            <xd:p>
               <xd:i>h/emph/inlineobject</xd:i> becomes
                <xd:b>emph/ref:inlineobject</xd:b>.</xd:p>
            <xd:p>
               <xd:i>sup/emph/emph/inlineobject</xd:i> becomes
                <xd:b>sup/emph/ref:inlineobject</xd:b>.</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
                
                &lt;heading&gt;
                &lt;title&gt;
                &lt;emph typestyle="bf"&gt;Judgment&lt;/emph&gt;
                &lt;/title&gt;
                &lt;/heading&gt;
                
            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
                
                &lt;heading&gt;
                &lt;title&gt;
                Judgment
                &lt;/title&gt;
                &lt;/heading&gt;
                
            </xd:pre>
         <xd:p>
            <xd:b>Source XML: For multiple <xd:i>emph</xd:i> elements</xd:b>
         </xd:p>
         <xd:pre>
                
                &lt;heading&gt;
                &lt;title&gt;
                &lt;emph typestyle="bf"&gt;
                &lt;emph typestyle="bf"&gt;
                Doc. 5.27 - Section 10(&lt;emph typestyle="it"&gt;&lt;emph typestyle="it"&gt;b&lt;/emph&gt;&lt;/emph&gt;) &amp;#x2014; Affidavit
                &lt;/emph&gt;
                &lt;/emph&gt;
                &lt;/title&gt;
                &lt;/heading&gt;
                
            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
                
                &lt;heading&gt;
                &lt;title&gt;Doc. 5.27 - Section 10(b) &amp;#x2014; Affidavit&lt;/title&gt;
                &lt;/heading&gt;
                
            </xd:pre>
         <xd:p>
            <xd:b>Source XML: Showing an <xd:i>emph</xd:i> that contains a child element</xd:b>
         </xd:p>
         <xd:pre>
                
                &lt;heading&gt;
                &lt;title&gt;
                &lt;emph typestyle="bf"&gt;Non-residential building—(&lt;ci:cite searchtype="LEG-REF" status="invalid"&gt;
                &lt;ci:sesslaw&gt;
                &lt;ci:sesslawinfo&gt;
                &lt;ci:sesslawnum num="1994_23a"/&gt;
                &lt;ci:hierpinpoint&gt;&lt;ci:hierlev label="schedule" num="8"/&gt;&lt;/ci:hierpinpoint&gt;
                &lt;/ci:sesslawinfo&gt;
                &lt;ci:sesslawref&gt;&lt;ci:standardname normpubcode="UK_ACTS"/&gt;&lt;/ci:sesslawref&gt;
                &lt;/ci:sesslaw&gt;
                &lt;ci:content&gt;VATA 1994, Schedule 8, group 5&lt;/ci:content&gt;&lt;/ci:cite&gt;, note 7A)&lt;/emph&gt;
                &lt;/title&gt;
                &lt;/heading&gt;
                
            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
                
                &lt;heading&gt;
                &lt;title&gt;Non-residential building—(&lt;lnci:cite searchtype="LEG-REF" status="invalid"&gt;
                &lt;lnci:sesslaw&gt;
                &lt;lnci:sesslawinfo&gt;
                &lt;lnci:sesslawnum num="1994_23a"/&gt;
                &lt;lnci:hierpinpoint&gt;&lt;lnci:hierlev label="schedule" num="8"/&gt;&lt;/lnci:hierpinpoint&gt;
                &lt;/lnci:sesslawinfo&gt;
                &lt;lnci:sesslawref&gt;&lt;lnci:standardname normpubcode="UK_ACTS"/&gt;&lt;/lnci:sesslawref&gt;
                &lt;/lnci:sesslaw&gt;
                &lt;lnci:content&gt;VATA 1994, Schedule 8, group 5&lt;/lnci:content&gt;&lt;/lnci:cite&gt;, note 7A)&lt;/title&gt;
                &lt;/heading&gt;
                
            </xd:pre>
         <xd:p>
            <xd:b>Source XML: When source is having <xd:i>emph</xd:i> and <xd:i>PCDATA</xd:i> under <xd:i>heading/title</xd:i> than in that case the <xd:i>emph</xd:i> element get dropped from target and its content along with the PCDATA will be put directly under <xd:b>title</xd:b> element.</xd:b>
         </xd:p>
         <xd:pre>
                
                &lt;heading&gt;
                &lt;title&gt;
                &lt;emph typestyle="it"&gt;R&lt;/emph&gt;(on the application of Green) v Police Complaints Authority
                &lt;fnr fnrtoken="d30e128" fntoken="d30e1108"&gt;13&lt;/fnr&gt;
                &lt;/title&gt;
                &lt;/heading&gt;
                
            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
                
                &lt;heading&gt;
                &lt;title&gt;R (on the application of Green) v Police Complaints Authority
                &lt;footnote-ref anchoridref="d30e128"&gt;
                &lt;ref:anchor id="d30e1108"/&gt;
                &lt;label&gt;13&lt;/label&gt;
                &lt;/footnote-ref&gt;   
                &lt;/title&gt;
                &lt;/heading&gt;
                
            </xd:pre>
         <xd:p>
            <xd:i>emph/sub/inlineobject</xd:i> becomes
            <xd:b>figure/ref:inlineobject</xd:b>.</xd:p>
         <!--Changes2015-03-18: When heading\title contains emph and PCDATA under it then from target the emph tags will dropped and it's content along with PCDATA content will be put directly under title element . Applicable to UK09 only.2014-10-22: Added an example to explicitly show child elements of emph being retained. (R4.5 Content Issue List #1998)2014-06-04: Clarified instructions and added an example to show multiple emph elements being handled.2013-02-26: Created.-->
         <!--Changes2016-04-01: Added statement to clarify that children of emph should be processed.2013-01-08: Added note for handling
                emph/emph has the same
                @typestyle value.2012-02-28: Added instructions for handling of
                case:judges/emph/@typestyle="smcaps".2011-12-15: Created.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="emph" name="emph-generic">
      <xsl:choose><!-- pass through when parent is title with heading parent or parent is emph with parent title with parent title-->
         <xsl:when test="(child::copyright and parent::disclaimer and $streamID='UK11DA')">
            <xsl:element name="emph">
               <xsl:copy-of select="@typestyle"/>
               <xsl:apply-templates select="@*|node() except copyright"/>
            </xsl:element>
         </xsl:when>
         <xsl:when test="parent::title/parent::heading[$streamID='UK07']">
            <xsl:element name="emph">
               <xsl:copy-of select="@typestyle"/>
               <xsl:apply-templates/>
            </xsl:element>
         </xsl:when>
         <!-- 2016-10-24 - MDS: Pass through when child outputting as URL in UK11DA -->
         <xsl:when test="parent::remotelink[$streamID='UK11DA']">
            <xsl:apply-templates select="node()"/>
         </xsl:when>
         <!-- JD: excluding the dropping of <emph> within title for streams to match DT output.  
                    			There is no instruction to remove <emph> from <title> in 
                    		 emph to emph (id-CCCC-10316)
                    		 title to title (id-CCCC-10479)
                    		-->
         <xsl:when test="$streamID=('AU11','NZ06','NZ08','NZ18','NZ11','NZ13','AU14') and (parent::title/parent::heading                       |parent::emph/parent::title/parent::heading                       | parent::title/parent::leg:heading                       |parent::emph/parent::title/parent::leg:heading) and (not(preceding-sibling::text()) or not(following-sibling::text()))                       "><!-- not in CI, but match DT output: when parent emph is same, merge -->
            <xsl:choose><!-- pass through when there is a parent emph with the same @typestyle -->
               <xsl:when test="@typestyle=parent::emph/@typestyle">
                  <xsl:apply-templates/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:element name="emph">
                     <xsl:copy-of select="@typestyle"/>
                     <xsl:apply-templates/>
                  </xsl:element>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <xsl:when test="(parent::title/parent::heading                             |parent::emph/parent::title/parent::heading                             | parent::title/parent::leg:heading                             |parent::emph/parent::title/parent::leg:heading) and (not(preceding-sibling::text()) or not(following-sibling::text()))                             ">
            <xsl:apply-templates/>
         </xsl:when>
         <!--skip over emphasis if only refpt at child -->
         <xsl:when test="refpt and not(normalize-space(string-join(text(), '')))[$streamID!='CA10']"><!-- suppress --></xsl:when>
         <xsl:when test="@typestyle=parent::emph/@typestyle"><!-- pass through when there is a parent emph with the same @typestyle -->
            <xsl:apply-templates/>
         </xsl:when>
         <xsl:when test="child::inlineobject and not(parent::h) and $streamID='AU08'">
            <xsl:apply-templates/>
         </xsl:when>
         <!-- The handling for AU06 could be shareable but keeping as stream-specific until we have more testing. -->
         <!-- JD: 2017-07-19: tested with UK01 too (added); this appears to be working properly.  
                    			Note that the following 'when' drops text() that should be emphasized -->
         <xsl:when test="child::inlineobject and not(parent::h) and ($streamID=('AU06','AU04','UK01','HK02'))"><!-- this attempts to allow the emphasis markup to be retained around some output but not around others. --><!-- keep current emph node to get to later. -->
            <xsl:variable name="me" select="."/>
            <xsl:for-each-group select="node()" group-adjacent="if (self::inlineobject) then 0 else 1">
               <xsl:choose><!-- anything here is not kept within emphasis. -->
                  <xsl:when test="current-grouping-key()=0">
                     <xsl:apply-templates select="current-group()"/>
                  </xsl:when>
                  <!-- the otherwise condition allows the retention of the emphasis markup. -->
                  <xsl:otherwise>
                     <emph><!-- build @typestyle using the input node's @typestyle. -->
                        <xsl:copy-of select="$me/@typestyle"/>
                        <xsl:apply-templates select="current-group()"/>
                     </emph>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:for-each-group>
         </xsl:when>
         <!-- JD: Note that this template will drop any text() appearing in emph, as in "Declared takings (F)"  
                    		<emph typestyle="bf">Declared takings (F) 
                    		   <inlineobject type="image" mimetype="image/gif" filename="VATC_19761_1.gif"/>
                    	  </emph>
                    		-->
         <xsl:when test="child::inlineobject and not(parent::h) and not ($streamID='UK09')"><!-- AS: for emph/inlineobject in DT GDS it's emph/ref:inlineobject but in CI it's figure/ref:inlineobeject -->
            <xsl:element name="figure">
               <xsl:apply-templates/>
            </xsl:element>
         </xsl:when>
         <xsl:when test="child::sub/child::inlineobject">
            <xsl:apply-templates/>
         </xsl:when>
         <xsl:when test="ancestor::ci:content[$streamID='CA02DS']">
            <xsl:apply-templates/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:element name="emph">
               <xsl:copy-of select="@typestyle"/>
               <xsl:apply-templates/>
            </xsl:element>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!--suppress to get rid of errors as @typestyle already handled. JL -->
   <xsl:template match="emph/@typestyle"/>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:b>When <xd:i>emph</xd:i> is inside <xd:i>case:judges</xd:i> and <xd:i>@typestyle="smcaps"</xd:i> then conversion need to omit <xd:i>emph</xd:i> tag.</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
					&lt;case:judgment&gt;
					  &lt;case:courtinfo&gt;
					      &lt;case:judges&gt;
					          JUDGE M 
					          &lt;emph typestyle="smcaps"&gt;c&lt;/emph&gt; 
					          ELREA. 
					      &lt;/case:judges&gt;
					  &lt;/case:courtinfo&gt;
					  ...
					&lt;/case:judgment&gt;
        	    </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
					&lt;courtcase:opinion&gt;
					  &lt;courtcase:opinionby&gt;
					    JUDGE M 
					    c
					    ELREA. 
					  &lt;/courtcase:opinion&gt;
					&lt;/courtcase:opinion&gt;
        	    </xd:pre>
         <!--Changes2011-12-15: Created.Added instructions for handling of case:judges/emph/@typestyle="smcaps".-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_emph-Chof-case.judges-LxAdv-omit_tag.dita  -->
   <!-- 20170424:  MCJ:  Handled to match the conversion instructions.  However, it feels like this would be better placed in a single module that handles emph to avoid spreading the instructions
    	                  across many modules. -->
   <!-- 20170424:  MCJ:  Also don't know if the XSLT that is embedded in the DITA needs to be changed. -->
   <xsl:template match="emph[parent::case:judges and ./@typestyle='smcaps']">
      <xsl:apply-templates/>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>heading/title/emph</xd:i> becomes <xd:b>heading/title</xd:b>. That
        is, the <xd:i>emph</xd:i> start-tag and end-tag (but not the content) are dropped, and the content becomes part of the target parent <xd:b>title</xd:b> element.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
    &lt;title&gt;
        &lt;emph typestyle="bf"&gt;Judgment&lt;/emph&gt;
    &lt;/title&gt;
&lt;/heading&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
    &lt;title&gt;
Judgment
    &lt;/title&gt;
&lt;/heading&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML: For multiple <xd:i>emph</xd:i> elements</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
  &lt;title&gt;
    &lt;emph typestyle="bf"&gt;
      &lt;emph typestyle="bf"&gt;
        Doc. 5.27 - Section 10(&lt;emph typestyle="it"&gt;&lt;emph typestyle="it"&gt;b&lt;/emph&gt;&lt;/emph&gt;) &amp;#x2014; Affidavit
      &lt;/emph&gt;
    &lt;/emph&gt;
  &lt;/title&gt;
&lt;/heading&gt;
                  
       </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
  &lt;title&gt;Doc. 5.27 - Section 10(b) &amp;#x2014; Affidavit&lt;/title&gt;
&lt;/heading&gt;
               
       </xd:pre>
         <xd:p>
            <xd:b>Source XML: Showing an <xd:i>emph</xd:i> that contains a child element</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
    &lt;title&gt;
        &lt;emph typestyle="bf"&gt;Non-residential building—(&lt;ci:cite searchtype="LEG-REF" status="invalid"&gt;
        &lt;ci:sesslaw&gt;
          &lt;ci:sesslawinfo&gt;
            &lt;ci:sesslawnum num="1994_23a"/&gt;
            &lt;ci:hierpinpoint&gt;&lt;ci:hierlev label="schedule" num="8"/&gt;&lt;/ci:hierpinpoint&gt;
          &lt;/ci:sesslawinfo&gt;
          &lt;ci:sesslawref&gt;&lt;ci:standardname normpubcode="UK_ACTS"/&gt;&lt;/ci:sesslawref&gt;
        &lt;/ci:sesslaw&gt;
        &lt;ci:content&gt;VATA 1994, Schedule 8, group 5&lt;/ci:content&gt;&lt;/ci:cite&gt;, note 7A)&lt;/emph&gt;
    &lt;/title&gt;
&lt;/heading&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
    &lt;title&gt;Non-residential building—(&lt;lnci:cite searchtype="LEG-REF" status="invalid"&gt;
      &lt;lnci:sesslaw&gt;
        &lt;lnci:sesslawinfo&gt;
          &lt;lnci:sesslawnum num="1994_23a"/&gt;
          &lt;lnci:hierpinpoint&gt;&lt;lnci:hierlev label="schedule" num="8"/&gt;&lt;/lnci:hierpinpoint&gt;
        &lt;/lnci:sesslawinfo&gt;
        &lt;lnci:sesslawref&gt;&lt;lnci:standardname normpubcode="UK_ACTS"/&gt;&lt;/lnci:sesslawref&gt;
      &lt;/lnci:sesslaw&gt;
      &lt;lnci:content&gt;VATA 1994, Schedule 8, group 5&lt;/lnci:content&gt;&lt;/lnci:cite&gt;, note 7A)&lt;/title&gt;
&lt;/heading&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML: When source is having <xd:i>emph</xd:i> and <xd:i>PCDATA</xd:i> under <xd:i>heading/title</xd:i> than in that case the <xd:i>emph</xd:i> element get dropped from target and its content along with the PCDATA will be put directly under <xd:b>title</xd:b> element.</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
     &lt;title&gt;
        &lt;emph typestyle="it"&gt;R&lt;/emph&gt;(on the application of Green) v Police Complaints Authority
             &lt;fnr fnrtoken="d30e128" fntoken="d30e1108"&gt;13&lt;/fnr&gt;
     &lt;/title&gt;
&lt;/heading&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
     &lt;title&gt;R (on the application of Green) v Police Complaints Authority
             &lt;footnote-ref anchoridref="d30e128"&gt;
                  &lt;ref:anchor id="d30e1108"/&gt;
                      &lt;label&gt;13&lt;/label&gt;
              &lt;/footnote-ref&gt;   
     &lt;/title&gt;
&lt;/heading&gt;

	</xd:pre>
         <!--Changes2015-03-18: When heading\title contains emph and PCDATA under it then from target the emph tags will dropped and it's content along with PCDATA content will be put directly under title element . Applicable to UK09 only.2014-10-22: Added an example to explicitly show child elements of emph being retained. (R4.5 Content Issue List #1998)2014-06-04: Clarified instructions and added an example to show multiple emph elements being handled.2013-02-26: Created.-->
      </xd:desc>
   </xd:doc>
   <!-- MDS - 2017-03-13 - Moved functionality to modules/nonamespace/Rosetta_emph-LxAdv-emph.xsl and removed this module from Driver -->
   <!-- CSN: Created mail template -->
   <xsl:template match="heading/title/emph">
      <xsl:apply-templates/>
   </xsl:template>

   <xsl:template match="heading/title/emph/emph">
      <xsl:apply-templates/>
   </xsl:template>
   <!-- HK02-Articles heading handling -->
   <xsl:template match="jrnl:prelim/heading/title">
      <nitf:hl1>
         <xsl:apply-templates/>
      </nitf:hl1>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
               <xd:b>Handling of Footnote references and Endnotes</xd:b>
            </xd:b>
         </xd:p>
         <xd:p> Whenever <xd:i>refpt</xd:i> and <xd:i>remotelink</xd:i> occurs
                as adjacent siblings, this indicates they are footnote refernces and are linked to
                endnotes within the document or outside the document. <xd:ol>
               <xd:li> Check for the <xd:i>remotelink/@refpt</xd:i> value, if it is
                        "*_FN#", then create a <xd:b>footnote-ref</xd:b>. If it is
                        "*_FN#-R" then create the <xd:b>footnote</xd:b> as child of
                            <xd:b>endnotes</xd:b>. </xd:li>
               <xd:li> The <xd:i>l</xd:i> around endnotes is converted to
                            <xd:b>endnotes</xd:b> the <xd:i>li</xd:i> around a
                        endnote is removed when <xd:i>refpt</xd:i> and
                            <xd:i>remotelink</xd:i> is converted to
                            <xd:b>footnote/@role="endnote"</xd:b>. </xd:li>
            </xd:ol>
            <xd:p>
               <xd:b>Note: </xd:b>endnote references can be found at any place in the same document or in
                    another document.</xd:p>
            <xd:p>
               <xd:b>Note: </xd:b>We are only converting <xd:i>refpt</xd:i> and
                        <xd:i>remotelink</xd:i> to
                        <xd:b>footnote/@role="endnote"</xd:b> within
                        <xd:b>primlaw:level/@leveltype="endnote"</xd:b> when they occurs
                    as adjacent siblings.</xd:p>
            <xd:p>
               <xd:b>Note: </xd:b>footnote-ref/@reftype will be set to "global" if refpt/@id="ext".</xd:p>
         </xd:p>
         <xd:p> The attribute value's for <xd:i>refpt/@id</xd:i> and
                    <xd:i>remotelink/@refpt</xd:i> are duplicated within the source
                document i.e., <xd:ol>
               <xd:li>
                  <xd:i>refpt/@id</xd:i> (footnote refernce) and
                            <xd:i>remotelink/@refpt</xd:i> (endnote) will be same. and </xd:li>
               <xd:li>
                  <xd:i>remotelink/@refpt</xd:i> (footnote refernces) and
                            <xd:i>refpt/@id</xd:i> (endnote) will be same. </xd:li>
            </xd:ol>
            <xd:p>
               <xd:b>Note: </xd:b>The endnote and associated endnote references may be in different
                    documents.</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Footnote-ref:</xd:b> Every occurance of <xd:i>refpt</xd:i> and
                    <xd:i>remotelink</xd:i> will become
                    <xd:b>footnote-ref</xd:b> in output. Populate
                    <xd:b>footnote-ref</xd:b> as follows: <xd:ul>
               <xd:li>
                  <xd:b>footnote-ref/@role</xd:b> will always be set to
                            <xd:b>"endnote"</xd:b>.</xd:li>
               <xd:li>
                  <xd:i>remotelink/@refpt</xd:i> becomes
                            <xd:b>footnote-ref/@anchoridref</xd:b>.</xd:li>
               <xd:li>
                  <xd:i>refpt/@id</xd:i> becomes
                            <xd:b>footnote-ref/ref:anchor/@id</xd:b>.</xd:li>
               <xd:li>
                  <xd:i>remotelink/sup</xd:i> becomes
                            <xd:b>footnote-ref/label</xd:b>.</xd:li>
               <xd:li>
                  <xd:i>remotelink</xd:i> attributes are converted as follows: <xd:p>
                            Create <xd:b>footnote:ref/ref:locator/ref:locator-key</xd:b>
                            with attributes and children as follows: <xd:ul>
                        <xd:li>If <xd:i>@remotekey1="DOC-ID"</xd:i> then <xd:ul>
                              <xd:li>
                                 <xd:b>ref:key-name/@name</xd:b> will have the
                                            value "DOC-ID".</xd:li>
                              <xd:li>
                                 <xd:b>key-value/@value</xd:b> will be the
                                            value of <xd:i>@dpsi</xd:i> followed by hyphen
                                            and concatenated with <xd:i>@refpt</xd:i> or
                                                <xd:i>@remotekey2</xd:i>, which ever is
                                            present (if both are present, use
                                                <xd:i>@remotekey2</xd:i>).</xd:li>
                           </xd:ul>
                        </xd:li>
                        <xd:li>If <xd:i>@remotekey1="REFPTID"</xd:i> then <xd:ul>
                              <xd:li>
                                 <xd:b>ref:key-name/@name</xd:b> will have the
                                            value "DOC-ID".</xd:li>
                              <xd:li>
                                 <xd:b>ref:key-value/@value</xd:b> will be the
                                            value of <xd:i>@dpsi</xd:i> followed by hyphen
                                            and concatenated with
                                            <xd:i>@docidref</xd:i>.</xd:li>
                              <xd:li>Create <xd:b>ref:locator/@anchoridref</xd:b>
                                            with value from <xd:i>@refpt</xd:i> or
                                                <xd:i>@remotekey2</xd:i>, which ever is
                                            present (if both are present, use
                                                <xd:i>@refpt</xd:i>).</xd:li>
                           </xd:ul>
                        </xd:li>
                     </xd:ul>
                  </xd:p>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Endnote:</xd:b> Every occurance of <xd:i>refpt</xd:i> and
                    <xd:i>remotelink</xd:i> will become <xd:b>footnote</xd:b> as
                a child of <xd:b>endnotes</xd:b> which is the container element for all
                the converted endnotes. Populate each <xd:b>footnote</xd:b> created within
                    <xd:b>endnotes</xd:b> as follows: <xd:ul>
               <xd:li>
                  <xd:b>footnote/@role</xd:b> will always be set to "endnote".</xd:li>
               <xd:li>
                  <xd:i>refpt/@id</xd:i> becomes
                            <xd:b>footnote/ref:anchor/@id</xd:b>.</xd:li>
               <xd:li>
                  <xd:i>remotelink/sup</xd:i> becomes
                            <xd:b>footnote/label</xd:b>.</xd:li>
               <xd:li>
                  <xd:i>remotelink/sub</xd:i> becomes
                            <xd:b>footnote/label</xd:b>.</xd:li>
               <xd:li>
                  <xd:i>remotelink</xd:i> attributes are converted as follows: <xd:p>
                            Create
                                <xd:b>footnote/ref:returnreference/ref:locator/ref:locator-key</xd:b>
                            with attributes and children as follows: <xd:ul>
                        <xd:li>If <xd:i>@remotekey1="DOC-ID"</xd:i> then <xd:ul>
                              <xd:li>
                                 <xd:b>ref:key-name/@name</xd:b> will have the
                                            value "DOC-ID".</xd:li>
                              <xd:li>
                                 <xd:b>key-value/@value</xd:b> will be the
                                            value of <xd:i>@dpsi</xd:i> followed by hyphen
                                            and concatenated with <xd:i>@refpt</xd:i> or
                                                <xd:i>@remotekey2</xd:i>, which ever is
                                            present (if both are present, use
                                                <xd:i>@remotekey2</xd:i>).</xd:li>
                           </xd:ul>
                        </xd:li>
                        <xd:li>If <xd:i>@remotekey1="REFPTID"</xd:i> then <xd:ul>
                              <xd:li>
                                 <xd:b>ref:key-name/@name</xd:b> will have the
                                            value "DOC-ID".</xd:li>
                              <xd:li>
                                 <xd:b>ref:key-value/@value</xd:b> will be the
                                            value of <xd:i>@dpsi</xd:i> followed by hyphen
                                            and concatenated with
                                            <xd:i>@docidref</xd:i>.</xd:li>
                              <xd:li>Create <xd:b>ref:locator/@anchoridref</xd:b>
                                            with value from <xd:i>@refpt</xd:i> or
                                                <xd:i>@remotekey2</xd:i>, which ever is
                                            present (if both are present, use
                                                <xd:i>@refpt</xd:i>).</xd:li>
                           </xd:ul>
                        </xd:li>
                     </xd:ul>
                  </xd:p>
                  <xd:p>
                     <xd:b>Note: </xd:b>If <xd:i>remotelink/@dpsi</xd:i> is not present, use value
                            from <xd:i>docinfo:dpsi/@id-string</xd:i> or capture value
                            from the LBU manifest file.</xd:p>
                  <xd:p>
                     <xd:b>Note: </xd:b>
                     <xd:b>ref:locator/@anchoridref</xd:b> that begins with a
                            number must have an underscore added at start. Also apply other identifier data type format as
                            used for <xd:b>xml:id</xd:b> and <xd:b>ref:anchor/@id</xd:b>
                            (e.g. change colon to underscore). Refer to the section titled "Identifiers to ID Data Type - 
                            Handling Pattern Restrictions", if that section exists in this CI.</xd:p>
               </xd:li>
            </xd:ul>
            <xd:p>
               <xd:b>Note: </xd:b>All elements between the <xd:i>l</xd:i> and the nearest ancestor
                        <xd:i>leg:level</xd:i> are not converted as usual. For example,
                        <xd:i>leg:endmatter/leg:level/leg:level-vrnt/leg:levelbody/leg:bodytext/l/li</xd:i>
                    becomes <xd:b>primlaw:level/endnotes/footnote</xd:b> with appropriate
                    attributes. </xd:p>
            <xd:p>
               <xd:b>Note: </xd:b>For the Xpath <xd:i>leg:bodytext/glp:note/l/li</xd:i>, all elements between <xd:i>l</xd:i> and the nearest 
                    ancestor <xd:i>glp:note</xd:i> are not converted as usual and the target <xd:b>endnote</xd:b> will be sibling of 
                    <xd:b>primlaw:bodytext</xd:b>. The target Xpath will be <xd:b>primlaw:level/endnotes/footnote</xd:b>. Refer below source XML 3 and target XML 3.</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Source XML 1</xd:b>
         </xd:p>
         <xd:pre>

&lt;!--Rosetta AU source markup for a reference to an endnote VIC_ACT_6231.xml--&gt;
    &lt;row&gt;
        &lt;entry colname="c1" align="left"&gt;Pt 3 Div. 1 Subdiv. (12) (Heading and ss 390–396)
        &lt;/entry&gt;
        &lt;entry colname="c2" align="left"&gt;repealed. 
            &lt;emph typestyle="bf"&gt;&lt;sup&gt;,&lt;/sup&gt;&lt;/emph&gt;
            
&lt;!-- Footnote-refernce-start --&gt;
            &lt;refpt id="VIC_ACT_6231_FN32-R" type="ext"/&gt;
            &lt;remotelink remotekey1="REFPTID" service="DOC-ID" dpsi="0062" docidref="ABCD_5641" refpt="VIC_ACT_6231_FN32"&gt;
                &lt;sup&gt;32&lt;/sup&gt;
            &lt;/remotelink&gt;
&lt;!-- Footnote-reference-end --&gt;

            &lt;emph typestyle="bf"&gt;&lt;sup&gt;,&lt;/sup&gt;&lt;/emph&gt;
        &lt;/entry&gt;
    &lt;/row&gt;
...
&lt;leg:endmatter&gt;
    &lt;leg:level&gt;
        &lt;leg:level-vrnt&gt;
            &lt;leg:levelbody&gt;
                &lt;leg:bodytext&gt;
&lt;!--Endnote-start --&gt;
                    &lt;l&gt;
                        &lt;li&gt;
                            &lt;lilabel&gt;
                                &lt;refpt id="VIC_ACT_6231_FN32" type="ext"/&gt;
                                &lt;remotelink remotekey1="REFPTID" service="DOC-ID" dpsi="0062" docidref="ABCD_5641" refpt="VIC_ACT_6231_FN32-R"&gt;&lt;sup&gt;32&lt;/sup&gt;&lt;/remotelink&gt;
                            &lt;/lilabel&gt;
                            &lt;p&gt;
                                &lt;text align="left"&gt;...&lt;/text&gt;
                            &lt;/p&gt;
                        &lt;/li&gt;
                    &lt;!-- ... --&gt;
                    &lt;/l&gt;
&lt;!--Endnote-end --&gt;
                &lt;/leg:bodytext&gt;
            &lt;/leg:levelbody&gt;
        &lt;/leg:level-vrnt&gt;
    &lt;/leg:level&gt;
&lt;/leg:endmatter&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML 1</xd:b>
         </xd:p>
         <xd:pre>

&lt;!--
footnote-ref/@role will always be set to "endnote"
remotelink/@refpt becomes footnote-ref/@anchoridref
refpt/@id becomes footnote-ref/ref:anchor/@id
remotelink/sub becomes footnote-ref/label
--&gt;
    &lt;row&gt;
        &lt;entry colname="c1" align="left"&gt;Pt 3 Div. 1 Subdiv. (12) (Heading and ss 390–396)
        &lt;/entry&gt;
        &lt;entry colname="c2" align="left"&gt;repealed. 
            &lt;emph typestyle="bf"&gt;&lt;sup&gt;,&lt;/sup&gt;&lt;/emph&gt;
            
         &lt;!--   Footnote-reference-start --&gt; 
            
            &lt;footnote-ref role="endnote" anchoridref="VIC_ACT_6231_FN32"&gt;               	
               	&lt;ref:anchor id="_0062-VIC_ACT_6231_FN32-R" anchortype="global"/&gt;
                &lt;ref:locator anchoridref="VIC_ACT_6231_FN32"&gt;
                &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="DOC-ID"/&gt; 
                    &lt;ref:key-value value="0062-ABCD_5641"/&gt;
                &lt;/ref:locator-key&gt;
            &lt;/ref:locator&gt;

               	&lt;label&gt;32&lt;/label&gt;
           &lt;/footnote-ref&gt;

           &lt;!-- Footnote-reference-end --&gt;
            
            &lt;emph typestyle="bf"&gt;&lt;sup&gt;,&lt;/sup&gt;&lt;/emph&gt;
        &lt;/entry&gt;
    &lt;/row&gt;

&lt;!--
...
endnotes/footnote/@role will always set to "endnote"
refpt/@id becomes footnote/ref:anchor/@id
remotelink/sub becomes footnote/label
--&gt;
&lt;!-- Endnote-start--&gt;
&lt;primlaw:level leveltype="endnote"&gt;
    &lt;endnotes&gt;
        &lt;footnote role="endnote"&gt;
            &lt;ref:returnreference&gt;
                &lt;ref:locator anchoridref="VIC_ACT_6231_FN32-R"&gt;
                    &lt;ref:locator-key&gt;
                        &lt;ref:key-name name="DOC-ID"/&gt;
                        &lt;ref:key-value value="0062-ABCD_5641"/&gt;
                    &lt;/ref:locator-key&gt;
                &lt;/ref:locator&gt;
            &lt;/ref:returnreference&gt;
            &lt;ref:anchor id="0062-VIC_ACT_6231_FN32" anchortype="global"/&gt;
            &lt;label&gt;32&lt;/label&gt;
            &lt;bodytext&gt;
                &lt;p&gt;
                    &lt;text align="left"&gt;...&lt;/text&gt;
                &lt;/p&gt;
            &lt;/bodytext&gt;
        &lt;/footnote&gt;
        &lt;!-- rest of footnote@role='endnote' --&gt;
    &lt;/endnotes&gt;
&lt;/primlaw:level&gt;
&lt;!--Endnote-end --&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML 2</xd:b>
         </xd:p>
         <xd:pre>

&lt;!--Rosetta AU source markup for a reference to an endnote VIC_ACT_9595.xml--&gt;
    &lt;!-- Footnote-refernce-start --&gt;
&lt;title align="left" searchtype="SECT-TITLE"&gt;
    &lt;emph typestyle="bf"&gt;&lt;emph typestyle="it"&gt;Constitution of Board&lt;/emph&gt;&lt;/emph&gt;&lt;refpt id="VIC_ACT_9595_FN1-R" type="ext"/&gt;&lt;remotelink remotekey1="REFPTID" service="DOC-ID" refpt="VIC_ACT_9595_FN1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/remotelink&gt;&amp;#x00A0;
    &lt;lnlink status="valid" service="SEARCH" scope="All Subscribed Australian Cases and Commentary" scope-protocol="combined-source-name"&gt;
        &lt;marker&gt;&lt;inlineobject width="21px" type="image" filename="mb.gif" attachment="web-server" alttext="click to find cases &amp;amp; commentary"/&gt;
        &lt;/marker&gt;
        &lt;api-params&gt;
            &lt;param name="expressSearch" value="true"/&gt;&lt;param name="searchString" value="COUNCIL OF ADULT EDUCATION ACT 1981 w/s LEG-REF(6)"/&gt;&lt;/api-params&gt;
    &lt;/lnlink&gt;
&lt;/title&gt;
&lt;!-- Footnote-reference-end --&gt;

&lt;!-- ... --&gt;

&lt;leg:level id="VIC_ACT_9595_NOTESPROV4"&gt;
    &lt;leg:level-vrnt leveltype="clause" searchtype="LEGISLATION" subdoc="true" toc-caption="4. List of Annotations"&gt;
        &lt;leg:heading&gt;
            &lt;!-- ... --&gt;
        &lt;/leg:heading&gt;
        &lt;leg:levelbody&gt;
          &lt;leg:bodytext&gt;
             &lt;table&gt;
                &lt;tgroup cols="2"&gt;
                 &lt;colspec colwidth="3*" colname="c1" colnum="1"/&gt;
                 &lt;colspec colwidth="12*" colname="c2" colnum="2"/&gt;
                 &lt;tbody&gt;
                &lt;row&gt;
                &lt;entry colname="c1"&gt;S. 2 def. of &amp;quot;adult, community and further education&amp;quot;&lt;/entry&gt;
                &lt;entry colname="c2"&gt;inserted by No. 91/1991 s. 44(a).&lt;/entry&gt;
               &lt;!--... --&gt; 
            &lt;/tbody&gt;
        &lt;/tgroup&gt;
    &lt;/table&gt;
               &lt;!--Endnote-start --&gt;
    &lt;l&gt;
        &lt;li&gt;&lt;lilabel&gt;&lt;refpt id="VIC_ACT_9595_FN1" type="ext"/&gt;&lt;remotelink remotekey1="REFPTID" service="DOC-ID" refpt="VIC_ACT_9595_FN1-R"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/remotelink&gt;&lt;/lilabel&gt;
            &lt;p&gt;&lt;text align="left"&gt;S. 6: Section&amp;#x00A0;50 of the &lt;emph typestyle="bf"&gt;Adult, Community and Further Education Act 1991&lt;/emph&gt;, No. 91/1991, provides as follows:&lt;/text&gt;&lt;/p&gt;
            &lt;p&gt;&lt;text align="left"&gt;&lt;emph typestyle="bf"&gt;'50. &lt;emph typestyle="it"&gt;Transitional provisions for the Council of Adult Education&lt;/emph&gt;&lt;/emph&gt;&lt;/text&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;!-- ... --&gt;
    &lt;/l&gt;
            &lt;!--Endnote-end --&gt;   
           &lt;/leg:bodytext&gt;
        &lt;/leg:levelbody&gt;
    &lt;/leg:level-vrnt&gt;
&lt;/leg:level&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML 2</xd:b>
         </xd:p>
         <xd:pre>

&lt;!--
footnote-ref/@role will always be set to "endnote"
remotelink/@refpt becomes footnote-ref/@anchoridref
refpt/@id becomes footnote-ref/ref:anchor/@id
remotelink/sub becomes footnote-ref/label
--&gt;
   &lt;!--   Footnote-reference-start --&gt; 
            
            &lt;title align="left"&gt;
    &lt;emph typestyle="bf"&gt;&lt;emph typestyle="it"&gt;Constitution of Board&lt;/emph&gt;&lt;/emph&gt;
    &lt;footnote-ref role="endnote" anchoridref="VIC_ACT_9595_FN1"&gt;               	
        &lt;ref:anchor id="VIC_ACT_9595_FN1-R" anchortype="global"/&gt;
        &lt;ref:locator anchoridref="VIC_ACT_9595_FN1"&gt;
            &lt;ref:locator-key&gt;
                &lt;ref:key-name name="DOC-ID"/&gt; 
                &lt;ref:key-value value="0062-ABCD_1234"/&gt;
            &lt;/ref:locator-key&gt;
        &lt;/ref:locator&gt;        
        &lt;label&gt;1&lt;/label&gt;
    &lt;/footnote-ref&gt;&amp;#x00A0;    
&lt;/title&gt;

     &lt;!-- Footnote-reference-end --&gt;           
           
&lt;!--
...
endnotes/footnote/@role will always set to "endnote"
refpt/@id becomes footnote/ref:anchor/@id
remotelink/sub becomes footnote/label
--&gt;
&lt;primlaw:level xml:id="VIC_ACT_9595_NOTESPROV4" leveltype="clause" includeintoc="true" alternatetoccaption="4. List of Annotations"&gt;    
        &lt;heading&gt;
            &lt;!-- ... --&gt;
        &lt;/heading&gt;
        &lt;primlaw:bodytext&gt;
            &lt;table&gt;
                &lt;tgroup cols="2"&gt;
                    &lt;colspec colwidth="3*" colname="c1" colnum="1"/&gt;
                    &lt;colspec colwidth="12*" colname="c2" colnum="2"/&gt;
                    &lt;tbody&gt;
                        &lt;row&gt;&lt;entry colname="c1"&gt;S. 2 def. of &amp;quot;adult, community and further education&amp;quot;&lt;/entry&gt;&lt;entry colname="c2"&gt;inserted by No. 91/1991 s. 44(a).&lt;/entry&gt;
                            &lt;!--... --&gt; 
                    &lt;/tbody&gt;
                &lt;/tgroup&gt;
            &lt;/table&gt;
        &lt;/primlaw:bodytext&gt;
    &lt;!-- Endnote-start--&gt;
    &lt;endnotes&gt;
        &lt;footnote role="endnote"&gt;
            &lt;ref:returnreference&gt;
                &lt;ref:locator anchoridref="VIC_ACT_9595_FN1-R"/&gt;	
                &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="DOC-ID"/&gt; 
                    &lt;ref:key-value value="0062-ABCD_1234"/&gt;
                &lt;/ref:locator-key&gt;
                &lt;/ref:locator&gt;
            &lt;/ref:returnreference&gt;
            &lt;ref:anchor id="0062-VIC_ACT_9595_FN1" anchortype="global"/&gt;
            &lt;label&gt;1&lt;/label&gt;
            &lt;bodytext&gt;
                &lt;p&gt;&lt;text align="left"&gt;S. 6: Section&amp;#x00A0;50 of the &lt;emph typestyle="bf"&gt;Adult, Community and Further Education Act 1991&lt;/emph&gt;, No. 91/1991, provides as follows:&lt;/text&gt;&lt;/p&gt;
                &lt;p&gt;&lt;text align="left"&gt;&lt;emph typestyle="bf"&gt;'50. &lt;emph typestyle="it"&gt;Transitional provisions for the Council of Adult Education&lt;/emph&gt;&lt;/emph&gt;&lt;/text&gt;&lt;/p&gt;
            &lt;/bodytext&gt;
        &lt;/footnote&gt;
        &lt;!--rest of footnote@role=”endnote” --&gt;
    &lt;/endnotes&gt;
    &lt;!--Endnote-end --&gt;
&lt;/primlaw:level&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML 3</xd:b>
         </xd:p>
         <xd:pre>

&lt;!--Rosetta AU source markup for a reference to an endnote AUS-0065-20130614133539_VIC_REG_2012-14210020.xml--&gt;
   &lt;leg:level id="VIC_REG_2012-142_PROV4"&gt;
    - &lt;leg:level-vrnt searchtype="LEGISLATION" subdoc="true" leveltype="reg" toc-caption="4 Principal Rules"&gt;
        - &lt;leg:heading&gt;
            - &lt;desig searchtype="REG-NUM"&gt;
                - &lt;designum&gt;
                    &lt;refpt id="VIC_REG_2012-142_PROV4" type="ext" /&gt; 
                    &lt;emph typestyle="bf"&gt;4&lt;/emph&gt; 
                &lt;/designum&gt;
            &lt;/desig&gt;
            - &lt;title align="left" searchtype="REG-TITLE"&gt;
                &lt;emph typestyle="bf"&gt;Principal Rules&lt;/emph&gt; 
            &lt;/title&gt;
        &lt;/leg:heading&gt;
        - &lt;leg:levelbody&gt;
            - &lt;leg:bodytext&gt;
                - &lt;p&gt;
                    - &lt;text align="left"&gt;
                        In these Rules, the Supreme Court (General Civil Procedure) Rules 2005
                        
                        &lt;!-- Footnote-refernce-start --&gt;
                        &lt;refpt id="VIC_REG_2012-142_FN1-R" type="ext" /&gt; 
                        - &lt;remotelink remotekey1="REFPTID" service="DOC-ID" refpt="VIC_REG_2012-142_FN1" docidref="VIC_REG_2012-142_BODY"&gt;
                            &lt;sup&gt;1&lt;/sup&gt; 
                        &lt;/remotelink&gt;
                        
                        &lt;!-- Footnote-refernce-end --&gt;
                        are called the Principal Rules. 
                    &lt;/text&gt;
                &lt;/p&gt;
                - &lt;glp:note&gt;
                    &lt;!--Endnote-start --&gt;
                    - &lt;l&gt;
                        - &lt;li&gt;
                            - &lt;lilabel&gt;
                                &lt;refpt id="VIC_REG_2012-142_FN1" type="ext" /&gt; 
                                - &lt;remotelink remotekey1="REFPTID" service="DOC-ID" refpt="VIC_REG_2012-142_FN1-R" docidref="VIC_REG_2012-142_BODY"&gt;
                                    &lt;sup&gt;1&lt;/sup&gt; 
                                &lt;/remotelink&gt;
                            &lt;/lilabel&gt;
                            - &lt;p&gt;
                                &lt;text align="left"&gt;Rule 4: S.R. No. 148/2005. Reprint No. 4 as at 17 September 2012. Reprinted to S.R. No. 97/2012 and subsequently amended by S.R. Nos 39/2012 and 121/2012.&lt;/text&gt; 
                            &lt;/p&gt;
                        &lt;/li&gt;
                    &lt;/l&gt;
                    &lt;!--Endnote-end --&gt;
                &lt;/glp:note&gt;
            &lt;/leg:bodytext&gt;
        &lt;/leg:levelbody&gt;
    &lt;/leg:level-vrnt&gt;
&lt;/leg:level&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML 3</xd:b>
         </xd:p>
         <xd:pre>

&lt;!--
footnote-ref/@role will always be set to "endnote"
remotelink/@refpt becomes footnote-ref/@anchoridref
refpt/@id becomes footnote-ref/ref:anchor/@id
remotelink/sub becomes footnote-ref/label
--&gt;
   &lt;primlaw:level includeintoc="true" alternatetoccaption="4 Principal Rules"
    leveltype="regulation"&gt;
    &lt;ref:anchor id="VIC_REG_2012-142_PROV4" anchortype="global"/&gt;
    &lt;heading&gt;
        &lt;desig&gt;
            &lt;emph typestyle="bf"&gt;4&lt;/emph&gt;
        &lt;/desig&gt;
        &lt;title align="left"&gt;
            &lt;emph typestyle="bf"&gt;Principal Rules&lt;/emph&gt;
        &lt;/title&gt;
    &lt;/heading&gt;
    &lt;primlaw:bodytext&gt;
        &lt;p align="left"&gt;
            &lt;text&gt;In these Rules, the Supreme Court (General Civil Procedure) Rules
                2005
                &lt;!-- Footnote-refernce-start --&gt;
                &lt;footnote-ref anchoridref="VIC_REG_2012-142_FN1" role="endnote"&gt;
                    &lt;ref:anchor id="VIC_REG_2012-142_FN1-R"/&gt;
                    &lt;ref:locator anchoridref="VIC_REG_2012-142_FN1"&gt;
                        &lt;ref:locator-key&gt;&lt;ref:key-name name="DOC-ID"/&gt;
                            &lt;ref:key-value value="0065-VIC_REG_2012-142_BODY"
                            /&gt;
                        &lt;/ref:locator-key&gt;
                    &lt;/ref:locator&gt;
                    &lt;label&gt;1&lt;/label&gt;
                &lt;/footnote-ref&gt;
                 &lt;!-- Footnote-refernce-end --&gt;
                are called the Principal Rules.&lt;/text&gt;
        &lt;/p&gt;
    &lt;/primlaw:bodytext&gt;
    &lt;!-- Endnote-start--&gt;
    &lt;endnotes&gt;
        &lt;footnote role="endnote"&gt;
            &lt;ref:returnreference&gt;
                &lt;ref:locator anchoridref="VIC_REG_2012142_FN1R"/&gt;
                &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="DOC-ID"/&gt;
                    &lt;ref:key-value value="0065-VIC_REG_2012142_BODY"/&gt;
                &lt;/ref:locator-key&gt;
                &lt;/ref:locator&gt;
            &lt;/ref:returnreference&gt;
            &lt;ref:anchor id="0065-VIC_REG_2012142_FN1" anchortype="global"/&gt;
            &lt;label&gt;1&lt;/label&gt; 
            &lt;bodytext&gt;
                &lt;p&gt;
                    &lt;text align="left"&gt;Rule 4: S.R. No. 148/2005. Reprint No. 4 as at 17 September 2012. Reprinted to S.R. No. 97/2012 and subsequently amended by S.R. Nos 39/2012 and 121/2012.&lt;/text&gt; 
                &lt;/p&gt;
            &lt;/bodytext&gt;
        &lt;/footnote&gt; 
    &lt;/endnotes&gt;
    &lt;!-- Endnote-end--&gt;
&lt;/primlaw:level&gt;

	</xd:pre>
         <!--Changes2016-11-16: Added to note regarding applying any rules related to 
                @anchoridref, referring specifically to section for "Identifiers to ID Data Type - 
                Handling Pattern Restrictions".2012-02-15: Created. 2012-09-05: Added to note for ref:locator/@anchoridref that begins with a number... Also apply other identifier data type format as
                used for xml:id and ref:anchor/@id
                (e.g. change colon to underscore).2012-10-03: Added another example for endnote handling.2013-10-07: Instruction and example for added for the Xpath leg:bodytext/glp:note/l/li related to endnote handling. WebTeam # is 238790.2013-12-18: Instruction added to convert remotelink/@refpt to footnote-ref/@anchoridref.  WebTeam #5158742 - AU04. Applies generally to all LBUs and streams.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_endnote-LxAdv-endnote.dita  -->
   <!-- JL 20171109: white-space proofed the test, with fallback to traditional remotelink processing.
    Also tightened up the criteria for refpt and remotelink matching to include the @refpt FN string,
    so the processing for refpt or remotelink will resort to default handling if all the criteria are not met.
    This fixes a few production webstars 
    -->
   <xsl:template match="refpt[         following-sibling::node()[1][self::remotelink[matches(@refpt , '^.*FN(\d+)\-R$') or matches(@refpt , '^.*FN(\d+)$')]]         or          preceding-sibling::node()[1][self::remotelink[matches(@refpt , '^.*FN(\d+)\-R$') or matches(@refpt , '^.*FN(\d+)$')]]         or          preceding-sibling::node()[1][self::text()[matches(. , '^\s+$')]         [preceding-sibling::node()[1][self::remotelink[matches(@refpt , '^.*FN(\d+)\-R$') or matches(@refpt , '^.*FN(\d+)$')]]]]         or          following-sibling::node()[1][self::text()[matches(. , '^\s+$')]         [following-sibling::node()[1][self::remotelink[matches(@refpt , '^.*FN(\d+)\-R$') or matches(@refpt , '^.*FN(\d+)$')]]]]                 ]"
                 priority="30"><!-- do nothing --></xsl:template>
   <!-- note: this logic will need to be merged with "remotelink" 
                
                JL made it node rather than element because there can be intervening text, and we don't want to do
                this with intervening text.-->
   <xsl:template match="remotelink[matches(@refpt , '^.*FN(\d+)\-R$') or matches(@refpt , '^.*FN(\d+)$')]         [preceding-sibling::node()[1][self::refpt]         or         following-sibling::node()[1][self::refpt]         or         preceding-sibling::node()[1][self::text()[matches(. , '^\s+$')][preceding-sibling::node()[1][self::refpt]]]         or         following-sibling::node()[1][self::text()[matches(. , '^\s+$')][following-sibling::node()[1][self::refpt]]]        ]"
                 priority="30">
      <xsl:choose>
         <xsl:when test="matches(@refpt , '^.*FN(\d+)\-R$')">
            <xsl:apply-templates select="." mode="endnote"/>
         </xsl:when>
         <xsl:when test="matches(@refpt , '^.*FN(\d+)$')">
            <xsl:apply-templates select="." mode="footnoteref"/>
         </xsl:when>
         <xsl:otherwise><!-- this should now never happen -->
            <xsl:call-template name="outputErrorMessage">
               <xsl:with-param name="messageText"
                               as="xs:string"
                               select=" 'remotelink/@refpt does not meet criteria for endnote or footnoteref' "/>
               <xsl:with-param name="errorType" as="xs:string" select=" 'ICCE' "/>
               <xsl:with-param name="errorCode" as="xs:string*" select=" 'TBD' "/>
               <xsl:with-param name="context" as="xs:string">
                  <xsl:value-of select="base-uri()"/>
               </xsl:with-param>
            </xsl:call-template>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="remotelink" mode="footnoteref">
      <footnote-ref>
         <xsl:attribute name="role" select="'endnote'"/>
         <xsl:attribute name="anchoridref">
            <xsl:for-each select="@refpt">
               <xsl:call-template name="normalizeIdString"/>
            </xsl:for-each>
         </xsl:attribute>
         <xsl:for-each select="preceding-sibling::node()[1][self::refpt] | following-sibling::node()[1][self::refpt]">
            <xsl:call-template name="refpt-generic"/>
         </xsl:for-each>
         <xsl:call-template name="locator"/>
         <xsl:apply-templates select="sup" mode="footnoteref"/>
      </footnote-ref>
   </xsl:template>

   <xsl:template name="locator">
      <ref:locator>
         <xsl:for-each select=" if (@refpt) then @refpt else @remotekey2">
            <xsl:attribute name="anchoridref">
               <xsl:call-template name="normalizeIdString"/>
            </xsl:attribute>
         </xsl:for-each>
         <ref:locator-key>
            <ref:key-name name="DOC-ID"/>
            <ref:key-value>
               <xsl:attribute name="value">
                  <xsl:choose>
                     <xsl:when test="@dpsi">
                        <xsl:value-of select="@dpsi"/>
                     </xsl:when>
                     <xsl:when test="//docinfo:dpsi/@id-string">
                        <xsl:value-of select="//docinfo:dpsi/@id-string"/>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:value-of select="$dpsi"/>
                     </xsl:otherwise>
                  </xsl:choose>
                  <xsl:text>-</xsl:text>
                  <xsl:choose>
                     <xsl:when test=" @remotekey1 = 'DOC-ID' or @remotekey1 = 'DOCID' ">
                        <xsl:value-of select="if (@remotekey2) then @remotekey2 else @refpt"/>
                     </xsl:when>
                     <xsl:when test=" @remotekey1 = 'REFPTID' or @remotekey1 = 'REFPT' ">
                        <xsl:choose>
                           <xsl:when test="@docidref">
                              <xsl:value-of select="@docidref"/>
                           </xsl:when>
                           <xsl:when test="@status=('unval','invalid')"><!-- no @docidref however status is unvalidated or invalid so don't throw error  --></xsl:when>
                           <xsl:otherwise><!-- This should be an error message -->
                              <xsl:text>XXXX</xsl:text>
                              <xsl:call-template name="outputErrorMessage">
                                 <xsl:with-param name="messageText"
                                                 as="xs:string"
                                                 select=" 'remotelink/@docidref is missing and link cannot be correctly completed' "/>
                                 <xsl:with-param name="errorType" as="xs:string" select=" 'ICCE' "/>
                                 <xsl:with-param name="errorCode" as="xs:string*" select=" '403' "/>
                                 <xsl:with-param name="context" as="xs:string">
                                    <xsl:value-of select="base-uri()"/>
                                 </xsl:with-param>
                              </xsl:call-template>
                           </xsl:otherwise>
                        </xsl:choose>
                     </xsl:when>
                  </xsl:choose>
               </xsl:attribute>
            </ref:key-value>
         </ref:locator-key>
      </ref:locator>
   </xsl:template>

   <xsl:template match="remotelink" mode="endnote">
      <footnote>
         <xsl:attribute name="role" select="'endnote'"/>
         <!-- Paul: moved the refanchor creation (foreach) before the ref:returnreference.
            The court rules schema (and statutory) requires this occur first.  -->
         <xsl:for-each select="preceding-sibling::refpt | following-sibling::refpt">
            <xsl:call-template name="refpt-generic"/>
         </xsl:for-each>
         <ref:returnreference>
            <xsl:call-template name="locator"/>
         </ref:returnreference>
         <xsl:apply-templates select="sup | sub" mode="footnoteref"/>
         <xsl:if test="parent::lilabel[following-sibling::node()]">
            <bodytext>
               <xsl:apply-templates select="parent::lilabel/following-sibling::node()"/>
            </bodytext>
         </xsl:if>
      </footnote>
   </xsl:template>

   <xsl:template match="sup | sub" mode="footnoteref">
      <label>
         <xsl:apply-templates/>
      </label>
   </xsl:template>

   <xsl:template match="l[li[lilabel[refpt][remotelink][not(child::*[3])]]][not(child::*[not(self::li[lilabel[refpt][remotelink][not(child::*[3])]])])][not(@virtual-nesting)]"
                 priority="30">
      <endnotes>
         <xsl:apply-templates select="li" mode="endnote"/>
      </endnotes>
   </xsl:template>

   <xsl:template match="li" mode="endnote">
      <xsl:apply-templates select="lilabel" mode="endnote"/>
   </xsl:template>

   <xsl:template match="lilabel" mode="endnote">
      <xsl:apply-templates select="remotelink" mode="endnote"/>
   </xsl:template>
   <!-- endnotes become a bump-up within primlaw:level (within and outside of glp:note) as well as leg:comntry
   Since I coded this for a dictionary stream, it hasn't been tested yet.  Someone with a 
   legislation stream should test it and sign off here. JL 
   
   JD: 2017-08-10: works for legislation stream NZ06; see notes in /modules/glp/Rosetta_glp.note-LxAdv-note.xsl
   -->
   <xsl:template match="leg:bodytext" priority="30"><!-- this will handle annotations interspersed with primlaw:bodytext elements in document order -->
      <xsl:for-each-group select="*"
                          group-adjacent="if (self::leg:comntry or self::l[li[lilabel[refpt][remotelink][not(child::*[3])]]][not(child::*[not(self::li[lilabel[refpt][remotelink][not(child::*[3])]])])][not(@virtual-nesting)]              or self::glp:note[l[li[lilabel[refpt][remotelink][not(child::*[3])]]][not(child::*[not(self::li[lilabel[refpt][remotelink][not(child::*[3])]])])][not(@virtual-nesting)]]             ) then 0 else 1">
         <xsl:choose>
            <xsl:when test="current-grouping-key()=0">
               <xsl:for-each select="current-group()">
                  <xsl:choose>
                     <xsl:when test="self::glp:note">
                        <xsl:apply-templates select="*"/>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:apply-templates select="."/>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:choose>
                  <xsl:when test="$streamID='AU19LA' or ($streamID=('NZ12') and not(ancestor::legfragment))">
                     <admindoc:bodytext>
                        <xsl:apply-templates select="parent::leg:bodytext/@*"/>
                        <xsl:for-each select="current-group()">
                           <xsl:apply-templates select="."/>
                        </xsl:for-each>
                     </admindoc:bodytext>
                  </xsl:when>
                  <xsl:when test="$streamID='AU18' and not(ancestor::legfragment)">
                     <xsl:choose>
                        <xsl:when test="parent::leg:bodytext[preceding-sibling::leg:level]">
                           <xsl:element name="admindoc:level">
                              <xsl:attribute name="leveltype">
                                 <xsl:text>unclassified</xsl:text>
                              </xsl:attribute>
                              <admindoc:bodytext>
                                 <xsl:apply-templates select="parent::leg:bodytext/@*"/>
                                 <xsl:for-each select="current-group()">
                                    <xsl:apply-templates select="."/>
                                 </xsl:for-each>
                              </admindoc:bodytext>
                           </xsl:element>
                        </xsl:when>
                        <xsl:otherwise>
                           <admindoc:bodytext>
                              <xsl:apply-templates select="parent::leg:bodytext/@*"/>
                              <xsl:for-each select="current-group()">
                                 <xsl:apply-templates select="."/>
                              </xsl:for-each>
                           </admindoc:bodytext>
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                     <primlaw:bodytext>
                        <xsl:apply-templates select="parent::leg:bodytext/@*"/>
                        <xsl:for-each select="current-group()">
                           <xsl:apply-templates select="."/>
                        </xsl:for-each>
                     </primlaw:bodytext>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:for-each-group>
   </xsl:template>
   <!-- This template is being suppressed as no requirement in the output. -->
   <xsl:template match="leg:bodytext/@searchtype[$streamID='UK06']"/>
   <!--<xsl:include href="../../modules/nonamespace/Rosetta_figure-LxAdv-figure.xsl"/>-->   <!--			<xsl:include href="../../modules/nonamespace/Rosetta_note-Chof-figure_caption-LxAdv-note.xsl"/><!-\-updated quotes-\->-->   <!--** END General Markup  07-06-2017 4:25 AM-->   <!-- 	
	<xsl:include href="../../modules/glp/Rosetta_glp.note-Chof-emph-LxAdv-inlinenote.xsl"/>
	<xsl:include href="../../modules/glp/Rosetta_glp.note-Chof-text-LxAdv-inlinenote.xsl"/>
	<xsl:include href="../../modules/glp/Rosetta_glp.note-Chof-level_heading-LxAdv-seclaw.level_seclaw.prelim_note.xsl"/>
	<xsl:include href="../../modules/glp/Rosetta_glp.note-Chof-p-LxAdv-note.xsl"/>
	<xsl:include href="../../modules/glp/Rosetta_glp.note_blockquote_p_text_inlineobject-LxAdv-note_bodytext_p_text.xsl"/>
	<xsl:include href="../../modules/nonamespace/Rosetta_form-chars-LxAdv-formchars.xsl"/>	
	<xsl:include href="../../modules/nonamespace/Rosetta_footnote-LxAdv-footnote.xsl"/>	
	<xsl:include href="../../modules/glp/Rosetta_glp.note-Chof-figure-LxAdv-figure.xsl"/>
		
	<xsl:include href="../../modules/nonamespace/Rosetta_h-LxAdv-h.xsl"/>
	-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>h</xd:i> becomes <xd:b>h</xd:b>. The attributes of <xd:i>h</xd:i> are
					handled as follows: <xd:ul>
               <xd:li>
                  <xd:i>h/@l</xd:i> becomes <xd:b>h/@level</xd:b>.</xd:li>
               <xd:li>
                  <xd:i>h/@align</xd:i> becomes <xd:b>h/@align</xd:b>. The valid values for
								<xd:b>h/@align</xd:b> are:<xd:ul>
                     <xd:li>"left"</xd:li>
                     <xd:li>"right"</xd:li>
                     <xd:li>"center"</xd:li>
                  </xd:ul>
               </xd:li>
            </xd:ul>
         </xd:p>
         <!-- MDS - 2017-05-12 - Addded due to need to match DT output. -->If the Stream is UK08CA and the parent element is <xd:i>entry</xd:i>, pass through the element
				and process the children.<xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;h l="3" align="center"&gt; &lt;emph typestyle="it"&gt;Background&lt;/emph&gt; &lt;/h&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;h level="3" align="center"&gt; &lt;emph typestyle="it"&gt;Background&lt;/emph&gt; &lt;/h&gt;
				</xd:pre>
         <!--Changes-->
         <!-- SEP 2015-8-12 copied from Rosetta-to-LA\modules\base\base.xsl -->
         <!-- MDS 2017-04-05 - Added from UK08CA stream inlineobject handling  -->
         <xd:p>Within UK08CA stream, when source is having emph followed by inlineobject inside base:h element
						<xd:i>h/emph/inlineobject</xd:i>than in Target it should Map with and becomes
						<xd:b>emph/ref:inlineobject</xd:b>.</xd:p>
         <!-- MDS 2017-05-15 - Added from /nonamespace/Rosetta_h-Chof-form_bodytext-LxAdv-form.h.xsl -->
         <xd:p>
            <xd:i>form/bodytext/h</xd:i> becomes <xd:b>form:h</xd:b>.</xd:p>
         <xd:pre> &lt;h&gt; &lt;emph typestyle="bf"&gt;Table 2 Estimation of regression coefficients using the SUR
					model &lt;inlineobject type="image" mimetype="image/gif" filename="JFRC_2005_Vol13_Issue2_May_167_1.gif" /&gt;
					&lt;/emph&gt; &lt;/h&gt; <xd:b>Becomes</xd:b> &lt;emph typestyle="bf"&gt;Table 2 Estimation of regression
					coefficients using the SUR model &lt;ref:inlineobject&gt; &lt;ref:locator&gt; &lt;ref:locator-key&gt;
					&lt;ref:key-name name="object-key"/&gt; &lt;ref:key-value value="X-Y-JFRC_2005_Vol13_Issue2_May_167_1"/&gt;
					&lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt; &lt;/ref:locator-key&gt;
					&lt;ref:locator-params&gt; &lt;proc:param name="componentseq" value="1"/&gt; &lt;proc:param name="object-type"
					value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt; &lt;proc:param
					name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
					&lt;/ref:locator-params&gt; &lt;/ref:locator&gt; &lt;/ref:inlineobject&gt; &lt;/emph&gt; </xd:pre>
      </xd:desc>
   </xd:doc>
   <xsl:variable name="docinfoidtext" select="/*/docinfo/docinfo:doc-id/text()"/>
   <xsl:template match="h">
      <xsl:choose><!-- MDS 2017-05-12 - Added to match DT Output -->
         <xsl:when test="$streamID = 'UK08CA' and parent::entry">
            <xsl:apply-templates/>
         </xsl:when>
         <xsl:when test="$streamID='UK06'">
            <h>
               <xsl:apply-templates select="@*|node()"/>
            </h>
         </xsl:when>
         <!-- 2017-10-19 MDS: Added handling for parent:clause[parent::frm:div] -->
         <xsl:when test="(parent::bodytext|parent::blockquote|parent::frm:*|parent::clause)[parent::form|parent::frm:*|parent::clause[ancestor::frm:divs]]">
            <form:h>
               <xsl:if test="@l">
                  <xsl:attribute name="level">
                     <xsl:value-of select="@l"/>
                  </xsl:attribute>
               </xsl:if>
               <xsl:copy-of select="@* except (@typesize|@l)"/>
               <xsl:apply-templates select="node()"/>
            </form:h>
         </xsl:when>
         <!-- 20170601:  MCJ:  Excluding AU06 from this condition because the regulation schema does not support base:entry/base:toc. -->
         <!-- JL added AU05 -->
         <!-- 2017-11-15: JD: Excluding UK01. 
        Rather than add all to this exclude list maybe we should specifically INCLUDE what we want(?)
        -->
         <!-- 2017-11-16 - CSN: Added UK03.  webstar 7050317.   
			Totally agree with JD above.   This logic is backwards. -->
         <xsl:when test="parent::entry and not($streamID = ('AU05','AU06','AU15','NZ09','UK01','UK03','UK09','NZ12','UK07'))">
            <xsl:element name="toc">
               <xsl:element name="toc-entry">
                  <heading>
                     <xsl:if test="@l">
                        <xsl:attribute name="level">
                           <xsl:value-of select="@l"/>
                        </xsl:attribute>
                     </xsl:if>
                     <!-- SEP 2015-08-06 looks like there was a missing @ here, added it -->
                     <xsl:if test="@align">
                        <xsl:attribute name="align">
                           <xsl:value-of select="@align"/>
                        </xsl:attribute>
                     </xsl:if>
                     <title>
                        <xsl:apply-templates/>
                     </title>
                  </heading>
               </xsl:element>
            </xsl:element>
         </xsl:when>
         <xsl:when test="child::inlineobject">
            <figure><!-- SEP 2015-08-06 looks like there was a missing @ here, added it -->
               <xsl:if test="@align">
                  <xsl:attribute name="align">
                     <xsl:value-of select="@align"/>
                  </xsl:attribute>
               </xsl:if>
               <xsl:apply-templates/>
            </figure>
         </xsl:when>
         <!-- MDS - 2017-05-05 - As specified in '/comm/UK08_QUASI_ReguMate_COMMTOADMINDOC-Body.xsl' -->
         <xsl:when test="$streamID = 'UK08CA' and emph/inlineobject">
            <xsl:apply-templates select="node()"/>
         </xsl:when>
         <xsl:when test="(parent::case:decisionsummary or parent::case:typeofcase) and $streamID='UK03'">
            <bodytext>
               <h>
                  <xsl:apply-templates select="@*|node()"/>
               </h>
            </bodytext>
         </xsl:when>
         <xsl:otherwise>
            <xsl:choose>
               <xsl:when test="contains(lower-case($docinfoidtext),'overview') and //source_cttr:annotations[@id='OP15']/heading/note/h[@id='OP15A']">
                  <xsl:apply-templates/>
               </xsl:when>
               <xsl:when test="contains(lower-case($docinfoidtext),'analytics') and parent::comm:citations and $streamID='AU20'">
                  <xsl:apply-templates/>
               </xsl:when>
               <xsl:otherwise>
                  <h>
                     <xsl:if test="@l">
                        <xsl:attribute name="level">
                           <xsl:value-of select="@l"/>
                        </xsl:attribute>
                     </xsl:if>
                     <!-- SEP 2015-08-06 looks like there was a missing @ here, added it -->
                     <xsl:if test="@align">
                        <xsl:attribute name="align">
                           <xsl:value-of select="@align"/>
                        </xsl:attribute>
                     </xsl:if>
                     <xsl:apply-templates/>
                  </h>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="h/@l">
      <xsl:choose>
         <xsl:when test="$streamID='UK06'"/>
         <xsl:otherwise>
            <xsl:attribute name="level">
               <xsl:value-of select="."/>
            </xsl:attribute>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="h/@align">
      <xsl:attribute name="align">
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>
   <!--<xsl:include href="../../modules/nonamespace/Rosetta_h-Chof-entry-LxAdv-entry_toc_toc-entry_heading.xsl"/>-->   <!--<xsl:include href="../../modules/nonamespace/Rosetta_h-Chof-form_bodytext-LxAdv-form.h.xsl"/>-->   <!--<xsl:include href="../../modules/nonamespace/Rosetta_form.bodytext_h-LxAdv-form.h.xsl"/>-->   <!--			<xsl:include href="../../modules/nonamespace/Rosetta_h-Chof-figure-glp.note-LxAdv-figure-note-bodytext-h.xsl"/>	-->   <!--<xsl:include href="../../modules/nonamespace/Rosetta_heading-LxAdv-heading.xsl"/>-->   <xd:doc>
      <xd:desc>
         <xd:p>When <xd:i>heading/title</xd:i> is the child of <xd:i>bodytext</xd:i>, then <xd:i>heading/title</xd:i>
				becomes <xd:b>h</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;bodytext&gt;
    &lt;heading&gt;
        &lt;title&gt;
            &lt;ci:cite searchtype="CASE-REF"&gt;
                &lt;ci:case&gt;
                    &lt;ci:caseref ID="cr000012" spanref="cr000012-001"&gt; &lt;/ci:caseref&gt;
                &lt;/ci:case&gt;
                &lt;ci:content&gt;
                    &lt;citefragment searchtype="CASE-CITE-REF"&gt;
                        &lt;ci:span spanid="cr000012-001"&gt;HC Hamilton CRI 2009-419-94, 29 March
                            2010&lt;/ci:span&gt;
                    &lt;/citefragment&gt;
                &lt;/ci:content&gt;
            &lt;/ci:cite&gt;
        &lt;/title&gt;
    &lt;/heading&gt;
    ...
&lt;/bodytext&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;bodytext&gt;
    &lt;h&gt;
        &lt;lnci:cite&gt;
            &lt;lnci:case&gt;
                &lt;lnci:caseref ID="cr000012"&gt; &lt;/lnci:caseref&gt;
            &lt;/lnci:case&gt;
            &lt;lnci:content&gt;HC Hamilton CRI 2009-419-94, 29 March 2010&lt;/lnci:content&gt;
        &lt;/lnci:cite&gt;
    &lt;/h&gt;
    ...
&lt;/bodytext&gt;

	</xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="heading[parent::bodytext]/title"><!--  Original Target XPath:  h   -->
      <h>
         <xsl:apply-templates select="@* | node()"/>
      </h>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>When <xd:i>heading/title</xd:i> is the child of <xd:i>bodytext</xd:i>, then <xd:i>heading/title</xd:i> becomes <xd:b>h</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;bodytext&gt;
 &lt;heading searchtype="ANNOTATIONS"&gt;
  &lt;title&gt;&lt;emph typestyle="bf"&gt;NOTES&lt;/emph&gt;&lt;/title&gt;
 &lt;/heading&gt;
&lt;/bodytext&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;bodytext&gt;
 &lt;h&gt;&lt;emph typestyle="bf"&gt;NOTES&lt;/emph&gt;&lt;/h&gt;
&lt;/bodytext&gt;

            </xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_bodytext_heading_title-to-LxAdv_bodytext_h.dita  -->
   <xsl:template match="bodytext/heading[title]" priority="25">
      <xsl:apply-templates select="title" mode="h"/>
   </xsl:template>
   <!-- assuming we don't perpetuate atts down to the h? -->
   <xsl:template match="heading/title" mode="h">
      <h>
         <xsl:apply-templates/>
      </h>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>hrule</xd:i> becomes <xd:b>hrule</xd:b> and attributes
                    <xd:i>@align</xd:i> and <xd:i>@width</xd:i> needs to be
                supressed and presentation stylesheet will render <xd:b>hrule</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>If <xd:i>hrule[parent::blockquote]</xd:i>
            <xd:i>hrule</xd:i> should become <xd:b>pgrp/hrule</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;hrule align="true" width="5"/&gt;

   </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;hrule/&gt;

	</xd:pre>
         <!--Changes2011-12-21: Created. 2012-12-06: Instruction added for attributes handling.-->
         <!-- SEP 2015-8-12 added -->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_hrule-LxAdv-hrule.dita  -->
   <xsl:template match="hrule">
      <xsl:element name="hrule"
                   namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
         <xsl:apply-templates select="@*"/>
      </xsl:element>
   </xsl:template>

   <xsl:template match="hrule[parent::blockquote[not(ancestor::leg:comntry)]]">
      <pgrp>
         <xsl:element name="hrule">
            <xsl:apply-templates select="@*"/>
         </xsl:element>
      </pgrp>
   </xsl:template>
   <!--  Vikas Rohilla : Created the template for the stream CA14   -->
   <xsl:template match="hrule[parent::highlight][$streamID='CA14']"/>

   <xsl:template match="hrule/@align | hrule/@width"/>
   <xd:doc>
      <xd:desc>
         <xd:p>The element <xd:i>inlineobject</xd:i> becomes
        <xd:b>ref:inlineobject</xd:b>, with the attribute
        <xd:i>inlineobject/@height</xd:i> copied to
        <xd:b>ref:inlineobject/@height</xd:b> and
        <xd:i>inlineobject/@width</xd:i> copied to
        <xd:b>ref:inlineobject/@width</xd:b>.</xd:p>
         <xd:p>Then, the child element <xd:b>ref:inlineobject/ref:locator</xd:b> is created, and
      its sub-elements are created as follows: <xd:ul>
               <xd:li>Create <xd:b>ref:locator-key</xd:b>
                  <xd:ul>
                     <xd:li>Create <xd:b>ref:key-name</xd:b> with attribute
                <xd:b>@name="object-key"</xd:b>.</xd:li>
                     <xd:li>Create <xd:b>ref:key-value</xd:b> with attribute
                <xd:b>@value</xd:b> copied from
                <xd:i>inlineobject/@filename</xd:i>.</xd:li>
                     <xd:li>If <xd:i>inlineobject/@dpsi</xd:i> is present, create a string consisting
              of "[[DPSI:", followed by the value of <xd:i>inlineobject/@dpsi</xd:i>,
              followed by "]]", and prepend this string to
                <xd:b>ref:key-value/@value</xd:b>. See example #2 below.</xd:li>
                  </xd:ul>
               </xd:li>
               <xd:li>Create <xd:b>ref:locator-params</xd:b> and also create standardize attribute values.<xd:ul>
                     <xd:li>Create <xd:b>proc:param</xd:b> with attribute
                <xd:b>@name="object-type"</xd:b> and attribute
                <xd:b>@value="IMG"</xd:b>.</xd:li>
                     <xd:li>Create <xd:b>proc:param</xd:b> with attribute
                <xd:b>@name="external-or-local"</xd:b> and attribute
                <xd:b>@value="external"</xd:b>.</xd:li>
                     <xd:li>Create <xd:b>proc:param</xd:b> with attribute
                <xd:b>@name="object-server"</xd:b> and attribute
                <xd:b>@value="Blobstore"</xd:b>. (Notice that for this target, the value
              is cased as <xd:b>"Blobstore"</xd:b>.)</xd:li>
                     <!-- McNally Oct 25 2016: Casing for "Blobstore" is lower-case-s. Differs from ref:lnlink which is BlobStore.
               To keep value same as now done in prod for NARS. Per Susan Massa, Bency Thomas, and others at Oct 25 mtg.-->
                     <xd:li>Create <xd:b>proc:param</xd:b> with attribute
                <xd:b>@name="object-pguid"</xd:b> and attribute
                <xd:b>@value="urn:contentItem:0000-0000-0000-0000-00000-00"</xd:b>.</xd:li>
                     <xd:li>Create <xd:b>proc:param</xd:b> with attribute
                <xd:b>@name="componentseq"</xd:b> and attribute
                <xd:b>@value="1"</xd:b>.</xd:li>
                  </xd:ul>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>All other <xd:i>inlineobject</xd:i> attributes not explicitly mentioned in the
      instructions above (<xd:i>@height, @width, @filename, @dpsi</xd:i>) are dropped and
      not output to the target document.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:p>In the case of icons or other boilerplate images, the <xd:i>inlineobject</xd:i>
        shall usually be suppressed from conversion and a corresponding product requirement is
        created with instructions to instantiate the image on retrieval based on
        information/semantic markup in the document. This will sometimes include additional
        attributes being added to target elements created from parent source elements (such as
          <xd:b>ref:crossreference</xd:b> from <xd:i>remotelink</xd:i>).</xd:p>
            <xd:p>Usually, any icons encountered from the list below are suppressed. These files are
        suppressed for both *.gif and *.png file types. <xd:ul>
                  <xd:li>1.gif</xd:li>
                  <xd:li>2.gif</xd:li>
                  <xd:li>3.gif</xd:li>
                  <xd:li>4.gif</xd:li>
                  <xd:li>5.gif</xd:li>
                  <xd:li>IconSignalPositive.gif</xd:li>
                  <xd:li>IconSignalNegative.gif</xd:li>
                  <xd:li>IconSignalNeutral.gif</xd:li>
                  <xd:li>IconSignalPossibleNegative.gif</xd:li>
                  <xd:li>IconSignalCiteInfoOnly.gif</xd:li>
                  <xd:li>cbcc.gif</xd:li>
                  <xd:li>leg1.gif</xd:li>
                  <xd:li>mb.gif</xd:li>
                  <xd:li>au_repealed.gif</xd:li>
                  <xd:li>au_exclaim.gif</xd:li>
               </xd:ul>
            </xd:p>
            <xd:p>Use cases where the LBU feels the product requirement cannot be met if the markup is
        completely suppressed shall be handled case-by-case, and as usual additional topics will
        contain specific instructions for these scenarios that override the instructions in this
        note.</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Example #1: <xd:i>inlineobect/@dpsi</xd:i> not present</xd:b>
         </xd:p>
         <xd:pre>

&lt;inlineobject type="image" smi="98765" attachment="ln-server" filename="an_image.gif" width="15" height="20"/&gt;

        </xd:pre>
         <xd:pre>

&lt;ref:inlineobject width="15" height="20"&gt;
    &lt;ref:locator&gt;
        &lt;ref:locator-key&gt;
            &lt;ref:key-name name="object-key"/&gt;
            &lt;ref:key-value value="an_image.gif"/&gt;
        &lt;/ref:locator-key&gt;
        &lt;ref:locator-params&gt;
          &lt;proc:param name="object-type" value="IMG"/&gt;
          &lt;proc:param name="external-or-local" value="external"/&gt;
          &lt;proc:param name="object-server" value="Blobstore"/&gt;
          &lt;proc:param name="object-pguid" value="urn:contentItem:0000-0000-0000-0000-00000-00"/&gt;
          &lt;proc:param name="componentseq" value="1"/&gt; 
        &lt;/ref:locator-params&gt;
    &lt;/ref:locator&gt;
&lt;/ref:inlineobject&gt;

        </xd:pre>
         <xd:p>
            <xd:b>Example #2: <xd:i>inlineobject/@dpsi</xd:i> is present</xd:b>
         </xd:p>
         <xd:pre>

&lt;inlineobject type="image" dpsi="003F" filename="another_image.gif" alttext="alternate text caption"/&gt;

        </xd:pre>
         <xd:pre>

&lt;ref:inlineobject alttext="alternate text caption"&gt;
    &lt;ref:locator&gt;
        &lt;ref:locator-key&gt;
            &lt;ref:key-name name="object-key"/&gt;
            &lt;ref:key-value value="[[DPSI:003F]]another_image.gif"/&gt;
        &lt;/ref:locator-key&gt;
        &lt;ref:locator-params&gt;
          &lt;proc:param name="object-type" value="IMG"/&gt;
          &lt;proc:param name="external-or-local" value="external"/&gt;
          &lt;proc:param name="object-server" value="Blobstore"/&gt;
          &lt;proc:param name="object-pguid" value="urn:contentItem:0000-0000-0000-0000-00000-00"/&gt;
          &lt;proc:param name="componentseq" value="1"/&gt; 
        &lt;/ref:locator-params&gt;
    &lt;/ref:locator&gt;
&lt;/ref:inlineobject&gt;

        </xd:pre>
         <!--Changes2016-11-07: Updated the instruction for ref:key-name and
                    proc:param attribute values.2016-10-21: Changed one proc:param name for target. Formerly
            @name="attachment-server"; changed to
            @name="object-server".2016-05-20: Created this instruction to specify Blobstore
          specific output parameters.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_inlineobject-LxAdv-ref.inlineobject_BLOBSTORE.dita  -->
   <!--   Image handling background note 2017-11-30:

Please use $streamID in Rosetta_link-LxAdv-ref.lnlink.xsl due to notation below.  

It was originally intended that Apollo jurisdictions would use these (when first introduced in the DITA):

\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_lnlink_service_ATTACHMENT-LxAdv-ref.lnlink.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_link-LxAdv-ref.lnlink.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_inlineobject-LxAdv-ref.inlineobject.xsl

And blobstore jurisdictions would use these (notice BLOBSTORE in the file name):

\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_lnlink_service_ATTACHMENT-LxAdv-ref.lnlink_BLOBSTORE.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_link-LxAdv-ref.lnlink_BLOBSTORE.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_inlineobject-LxAdv-ref.inlineobject_BLOBSTORE.xsl

They were originally meant to be mutually exclusive.

Ditamap includes (and subsequently xsl drivers) may have included both blobstore and Apollo handling during the transition from one to the other even though only one image handling 
is done in an LBU.  Image handling is LBU wide and not individual stream specific.

Very importantly, there is a named template (@name="generic-link") in Rosetta_link-LxAdv-ref.lnlink.xsl which is called by both “Rosetta_p-LxAdv-p.xsl” and “Rosetta_bodytext-link-LxAdv-seclaw.bodytext-p-text-ref.lnlink.xsl”.   Both of these common modules are not LBU specific.  . 
This effectively, although unintentionally, crossed the original exclusivity described above.

Current fix is to use $streamID indicating HK and UK which are currently the only blobstore jurisdictions.  Ultimately, goal is to re-establish these image handling files are mutually exclusive.
-->
   <!--<!-\-inlineobject Child of remotelink to
        ref:inlineobject id-CCCC-10364
    
        
            Instructions [common element]
            This topic is used in numerous conversion instructions for several LBUs. It is a
                shared topic rather than duplicated to ensure consistency and accuracy. The xml
                snippets contained in this topic reflect markup needed for the Apollo image handling
                application. The UK is the first LBU to move from Apollo to the Blobstore
                application for image handling. Therefore, if this is a UK conversion instruction
                document, please refer to the following topics for correct image handling markup.
                    lnlink[@service="ATTACHMENT"] to
                        ref:lnlink[@service="ATTACHMENT"] for BLOBSTORE
                        images (id-CCCC-10542)
                    inlineobject to
                        ref:inlineobject for BLOBSTORE images
                        (id-CCCC-10540)
                    link[@filename] to
                        ref:lnlink[@service="ATTACHMENT"] for BLOBSTORE
                        images (id-CCCC-10541)
                
            If inlineobject is a child of
                remotelink, convert its parent
                remotelink using the general mapping to
                ref:crossreference. Then, as child of
                ref:content map inlineobject to
                ref:inlineobject. 
        
        
        
            Source XML
            

&lt;remotelink dpsi="03SC" service="DOC-ID" remotekey1="DOC-ID" remotekey2="00162287"&gt;
    &lt;inlineobject type="image" attachment="web-server" filename="2.gif"
        alttext="QuickCITE - Cautionary information/Traitement et historique réservés" /&gt;
&lt;/remotelink&gt;

	
        
        
            Target XML
            

&lt;ref:crossreference crossreferencetype="seeAlso"&gt;
    &lt;ref:content&gt;
        &lt;ref:inlineobject&gt;
            &lt;ref:locator&gt;
                &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="object-key"/&gt;
                    &lt;ref:key-value value="X-Y-2"/&gt; &lt;!-\\- X and Y are LNI and SMI values obtained from CSSM -\\-&gt;
                &lt;/ref:locator-key&gt;
                &lt;ref:locator-params&gt;
                    &lt;proc:param name="componentseq" value="1"/&gt;
                    &lt;proc:param name="object-type" value="image"/&gt; &lt;!-\\- allowable values: “image”; (from .jpg, .gif, .png, .bmp)-\\-&gt;
                    &lt;proc:param name="object-smi" value=""/&gt; &lt;!-\\- This @value assignment is done by conversion program -\\-&gt;
                &lt;/ref:locator-params&gt;
            &lt;/ref:locator&gt;
        &lt;/ref:inlineobject&gt;
    &lt;/ref:content&gt;
    &lt;ref:locator&gt;
        &lt;ref:locator-key&gt;
            &lt;ref:key-name name="DOC-ID"/&gt;
            &lt;ref:key-value value="03SC-00162287"/&gt;
        &lt;/ref:locator-key&gt;
    &lt;/ref:locator&gt;
&lt;/ref:crossreference&gt;

	
        
        
        
            Changes
            2011-12-03: Created. New topic to address
                inlineobject as child of
                remotelink
            2013-02-18: Target example updated per inlineobject instructions. 
            2013-02-18: Created two sections, one for "Release 4.0 and after" and another for "Pre-Release 4.0".
            2013-04-30: Updated target sample according to latest Apollo markup.
            2013-05-01: Removed instructions for section
                "Pre-Release 4.0" because according to latest Apollo markup, section
                "Release 4.0 and after" and section "Pre-Release 4.0" now have
                similar conversion markup.
            2013-05-08: Extended the list of allowable values for image handling.
            2016-08-03: Added Note about xml snippets that illustrate
                image handling. Note summarizes move from Apollo to Blobstore application. UK is
                first LBU to move to Blobstore.
        
    
-\->
    <xsl:message>needs manual development and DITA brought in</xsl:message>-->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a
                shared topic rather than duplicated to ensure consistency and accuracy. The xml
                snippets contained in this topic reflect markup needed for the Apollo image handling
                application. The UK is the first LBU to move from Apollo to the Blobstore
                application for image handling. Therefore, if this is a UK conversion instruction
                document, please refer to the following topics for correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
                            <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to
                            <xd:b>ref:inlineobject</xd:b> for BLOBSTORE images
                        (id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
                            <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>If the <xd:i>inlineobject</xd:i>
            <xd:i>is</xd:i> a diagram or picture illustrating textual material (e.g. not a minor icon
                or symbol), <xd:i>inlineobject</xd:i> becomes
                    <xd:b>figure/ref:inlineobject</xd:b>. </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>When <xd:i>inlineobject</xd:i> is a child of
                    <xd:i>verbatim</xd:i> then conversion should suppress
                    <xd:i>proc:nl</xd:i> from before and after of
                    <xd:b>figure</xd:b> element in the target. For more clarification see
                Example: 3.</xd:p>
         <xd:p>
            <xd:b>Source XML 1: Source @smi present</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;text&gt; 
        &lt;inlineobject type="image" 
                      smi="98765" 
                      attachment="ln-server" 
                      filename="3S3J-WW80-003F-W39R-00000-00-98765-xmp6.gif" /&gt;
    &lt;/text&gt;
&lt;/p&gt;

             </xd:pre>
         <xd:p>
            <xd:b>Target XML 1: Source @smi present</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;text&gt;
        &lt;figure&gt;
            &lt;ref:inlineobject&gt;
                &lt;ref:locator&gt;
                    &lt;ref:locator-key&gt;
                        &lt;ref:key-name name="object-key"/&gt;
                        &lt;ref:key-value value="3S3J-WW80-003F-W39R-00000-00-98765-xmp6"/&gt;
                    &lt;/ref:locator-key&gt;
                    &lt;ref:locator-params&gt;
                        &lt;proc:param name="componentseq" value="1"/&gt;
                        &lt;proc:param name="object-type" value="image"/&gt;
                        &lt;proc:param name="object-smi" value="98765"/&gt;
                    &lt;/ref:locator-params&gt;
                    &lt;/ref:locator&gt;
            &lt;/ref:inlineobject&gt;
        &lt;/figure&gt;
    &lt;/text&gt;
&lt;/p&gt;

             </xd:pre>
         <xd:p>
            <xd:b>Source XML 2: Source @smi not present</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;text&gt; 
        &lt;inlineobject type="image" 
                      attachment="ln-server" 
                      filename="sch2.gif" /&gt;
    &lt;/text&gt;
&lt;/p&gt;

             </xd:pre>
         <xd:p>
            <xd:b>Target XML 2: Source @smi not present</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;text&gt;
        &lt;figure&gt;
            &lt;ref:inlineobject&gt;
                &lt;ref:locator&gt;
                    &lt;ref:locator-key&gt;
                        &lt;ref:key-name name="object-key"/&gt;
                        &lt;ref:key-value value="X-Y-sch2"/&gt;   &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                    &lt;/ref:locator-key&gt;
                &lt;ref:locator-params&gt;
                    &lt;proc:param name="componentseq" value="1"/&gt;
                    &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                    &lt;proc:param name="object-smi" value=""/&gt;    &lt;!-- This @value assignment is done by conversion program --&gt;
                &lt;/ref:locator-params&gt;
                &lt;/ref:locator&gt;
            &lt;/ref:inlineobject&gt;
        &lt;/figure&gt;
    &lt;/text&gt;
&lt;/p&gt;

             </xd:pre>
         <xd:p>
            <xd:b>Source XML 3: &lt;nl/&gt; before and after &lt;inlineobject&gt;</xd:b>
         </xd:p>
         <xd:pre>
&lt;p&gt;
    &lt;text&gt;
        &lt;verbatim verbatimclass="future"&gt;
            ...
            &lt;nl/&gt; 26. Each of the provisions of the Act listed in
            Column A of the&lt;nl/&gt; Table to this section is amended in the manner specified for
            the&lt;nl/&gt; provision in Column B of the Table.&lt;nl/&gt;
            &lt;inlineobject filename="SO13_18FT-0001.jpg" type="image" attachment="ln-server"/&gt;&lt;nl/&gt;
            &lt;inlineobject filename="SO13_18FT-0002.jpg" type="image" attachment="ln-server"/&gt;&lt;nl/&gt;
            &lt;inlineobject filename="SO13_18FT-0003.jpg" type="image" attachment="ln-server"/&gt;&lt;nl/&gt;
            SOLICITORS ACT&lt;nl/&gt;
            &lt;nl/&gt; 27. (1) Section 1 of the Solicitors Act is amended by striking&lt;nl/&gt; out "If a
            person, unless a party to the proceeding, commences" at the&lt;nl/&gt; beginning and
            substituting "Subject to subsection (2), if a person&lt;nl/&gt; commences".&lt;nl/&gt;
        &lt;/verbatim&gt;
    &lt;/text&gt;
&lt;/p&gt;
             </xd:pre>
         <xd:p>
            <xd:b>Target XML 3: &lt;nl/&gt; before and after &lt;inlineobject&gt;</xd:b>
         </xd:p>
         <xd:pre>
&lt;p&gt;
    &lt;text&gt;
        &lt;verbatim verbatimclass="future"&gt;
            ...
            &lt;proc:nl/&gt; 26. Each of the provisions of the Act listed in
            Column A of the&lt;proc:nl/&gt; Table to this section is amended in the manner specified for
            the&lt;proc:nl/&gt; provision in Column B of the Table.
            
            &lt;figure&gt;
                &lt;ref:inlineobject&gt;
                    &lt;ref:locator&gt;
                        &lt;ref:locator-key&gt;
                            &lt;ref:key-name name="object-key"/&gt;
                            &lt;ref:key-value value="X-Y-SO13_18FT-0001"/&gt; &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                        &lt;/ref:locator-key&gt;
                        &lt;ref:locator-params&gt;
                            &lt;proc:param name="componentseq" value="1"/&gt;
                            &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                            &lt;proc:param name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
                        &lt;/ref:locator-params&gt;
                    &lt;/ref:locator&gt;
                &lt;/ref:inlineobject&gt;
            &lt;/figure&gt;
            &lt;figure&gt;
                &lt;ref:inlineobject&gt;
                    &lt;ref:locator&gt;
                        &lt;ref:locator-key&gt;
                            &lt;ref:key-name name="object-key"/&gt;
                            &lt;ref:key-value value="X-Y-SO13_18FT-0002"/&gt; &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                        &lt;/ref:locator-key&gt;
                        &lt;ref:locator-params&gt;
                            &lt;proc:param name="componentseq" value="1"/&gt;
                            &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                            &lt;proc:param name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
                        &lt;/ref:locator-params&gt;
                    &lt;/ref:locator&gt;
                &lt;/ref:inlineobject&gt;
            &lt;/figure&gt;
            &lt;figure&gt;
                &lt;ref:inlineobject&gt;
                    &lt;ref:locator&gt;
                        &lt;ref:locator-key&gt;
                            &lt;ref:key-name name="object-key"/&gt;
                            &lt;ref:key-value value="X-Y-SO13_18FT-0003"/&gt; &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                        &lt;/ref:locator-key&gt;
                        &lt;ref:locator-params&gt;
                            &lt;proc:param name="componentseq" value="1"/&gt;
                            &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                            &lt;proc:param name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
                        &lt;/ref:locator-params&gt;
                    &lt;/ref:locator&gt;
                &lt;/ref:inlineobject&gt;
            &lt;/figure&gt;
            SOLICITORS ACT&lt;proc:nl/&gt;
            &lt;proc:nl/&gt; 27. (1) Section 1 of the Solicitors Act is amended by striking&lt;proc:nl/&gt; out "If a
            person, unless a party to the proceeding, commences" at the&lt;proc:nl/&gt; beginning and
            substituting "Subject to subsection (2), if a person&lt;proc:nl/&gt; commences".&lt;proc:nl/&gt;
        &lt;/verbatim&gt;
    &lt;/text&gt;
&lt;/p&gt;
             </xd:pre>
         <!--Changes2016-07-29: Added Note about xml snippets that illustrate
                    image handling. Note summarizes move from Apollo to Blobstore application. UK is
                    first LBU to move to Blobstore.2014-10-13: Added note and example to suppress
                        proc:nl from before and after of
                        figure/inlineobject when it comes inside
                        verbatim element.2013-05-24: Updated target example, "when smi is
                    present".2013-05-08: Extended the list of allowable values for
                    image handling.2013-05-02: Updated target example to if the SMI is
                    present then a ref:inliineobject/@status attribute is set
                    to “valid”.2013-05-01: Removed instructions for section
                        "Pre-Release 4.0" because according to latest Apollo markup, section
                        "Release 4.0 and after" and section "Pre-Release 4.0" now have
                    similar conversion markup.2013-04-30: Updated target sample according to latest
                    Apollo markup.2013-02-18: Created two sections, one for "Release 4.0
                        and after" and another for "Pre-Release 4.0".2013-02-18: Target example updated per inlineobject instructions. 2012-11-30: Moved full conversion instruction to new base
                    topic inlineobject to
                        ref:inlineobject. This topic now specific to
                        figure/ref:inlineobject mapping.2012-10-26: Changed to reflect recent requirements for attachment-type links.-->
      </xd:desc>
   </xd:doc>
   <xd:doc/>
   <!-- created 2 global parameters to be used in driver, 
        
        <xsl:param name="inlineobjBoilerplateFiles" select="('xxx.gif', 'xxx.png')"/> for boilerplate filenames that ARE
        to be converted to ref:inlineobject.
        
        <xsl:param name="inlineobjFilesToSuppress" select="('yyy.png', 'yyy.gif')"/> for filenames that are to be 
        *SUPPRESSED* from conversion but require special handling elsewhere.  That other handling is not specified in this module
        
    When the @filename attribute of inlineobject is not on either of those lists, we will output the figure wrapper in this module.    
    
    This will allow us to be LBU-specific in names of files for specific handling.
    
    
    JL
    -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_inlineobject-LxAdv-figure_ref.inlineobject.dita  -->
   <!-- <xsl:param name="inlineobjFilesToSuppress"/>
	<xsl:param name="inlineobjBoilerplateFiles" select="('1.gif', '2.gif', '3.gif', '4.gif', '5.gif', 'IconSignalPositive.gif', 'IconSignalNegative.gif', 'IconSignalNeutral.gif', 'IconSignalPossibleNegative.gif', 'IconSignalCiteInfoOnly.gif', 'cbcc.gif', 'leg1.gif', 'mb.gif', 'au_repealed.gif', 'au_exclaim.gif', '1.png', '2.png', '3.png', '4.png', '5.png', 'IconSignalPositive.png', 'IconSignalNegative.png', 'IconSignalNeutral.png', 'IconSignalPossibleNegative.png', 'IconSignalCiteInfoOnly.png', 'cbcc.png', 'leg1.png', 'mb.png', 'au_repealed.png', 'au_exclaim.png')"/>
	 -->
   <xsl:template match="inlineobject[not(@filename=$inlineobjFilesToSuppress          or @filename=$inlineobjBoilerplateFiles          or parent::blockquote         or parent::dispformula          )]"><!--  Paul: I removed this bodytext parent check from the not() part of the match predicate.  
            It was causing objects to get suppressed.
        "or parent::bodytext"
        FYI:
        parent::blockquote seems to be handled by 	<xsl:template match="blockquote[inlineobject and not(inlinobject/following-sibling::* or inlineobject/preceding-sibling::*)]">
        parent::dispformula is handled by 	<xsl:template match="dispformula">
-->
      <xsl:variable name="blobstoreStreams"
                    select="('UK01','UK02','UK03', 'UK04', 'UK05', 'UK06', 'UK07', 'UK08CA', 'UK08OR', 'UK09', 'UK10', 'UK11DA', 'UK11DN', 'UK12', 'UK14', 'UK15', 'UK15', 'UK16', 'UK17', 'UK17', 'UK18', 'UK22CF', 'UK22CS','HK01','HK02', 'HK03','HK04','HK05','HK06','HK07','HK08', 'HK09'             )"/>
      <!-- Paul: I removed 2 non-uk streams from the $blobstoreStreams.
            I'm pretty sure people were only doing this to get the "when" behavior below instead of the "otherwise".
            They aren't blobstore streams.  See otherwise clause comment.  I know the otherwise <figure> output is difference from DT but i think that may be incorrect.
            As of 2017-05-27, the ONLY blobstore streams are UK.  No other LBU has moved there yet.

            , 'CA19', 'AU04' 
        -->
      <xsl:choose><!-- JL added to handle some UK streams that use blobstore; the test for link parent ensures the output is valid
                as figure isn't valid in ref:marker
                -->
         <xsl:when test="$streamID=$blobstoreStreams"><!-- JD: 2017-06-08: similar to Paul's note below, UK08CA is adding a <figure> wrapper; 
                		I assume this is because the overlapping conditions in CCCC-10540 and CCCC-10368), 
                		including this dubious instruction: 
                		"If the inlineobject is a diagram or picture illustrating textual material (e.g. not a minor icon or symbol), inlineobject becomes figure/ref:inlineobject."
                		(how are we or the XSLT processor to know whether the image is a diagram or picture illustrating textual material?)
                		
                		For now, hacking with additional xsl:when clause
                	-->
            <xsl:choose>
               <xsl:when test="parent::h[$streamID='UK09']">
                  <xsl:call-template name="inlineobjblobstore"/>
               </xsl:when>
               <xsl:when test="parent::link | parent::figure | parent::emph | parent::publication  and not(parent::emph/parent::h) or (parent::text and $streamID=('UK08CA','UK11DA','UK06'))">
                  <xsl:call-template name="inlineobjblobstore"/>
               </xsl:when>
               <!-- JD: 2017-10-31: when ancestor is figure the <figure> element has already been created.  
                        This may be brittle; the source is:
                      <figure>
                        <p>
                           <text>
                              <inlineobject ...>
                            </text>
                        </p>
                      </figure>
                      -->
               <xsl:when test="$streamID=('UK01','UK08OR') and ancestor::figure">
                  <xsl:call-template name="inlineobjblobstore"/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:choose><!-- Awantika: Added condition when parent is case:judgements for HK03 -->
                     <xsl:when test="$streamID='HK03' and parent::case:judgments">
                        <attachments>
                           <appendix>
                              <bodytext>
                                 <figure>
                                    <xsl:call-template name="inlineobjblobstore"/>
                                 </figure>
                              </bodytext>
                           </appendix>
                        </attachments>
                     </xsl:when>
                     <xsl:otherwise>
                        <figure>
                           <xsl:call-template name="inlineobjblobstore"/>
                        </figure>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <xsl:otherwise><!-- Paul: DT seems to be omitting the figure wrapper.  is this correct? -->
            <xsl:choose>
               <xsl:when test="$streamID = ('AU16') or parent::figure[$streamID= ('AU15' , 'AU05', 'NZ12', 'AU18')] or parent::remotelink[ ( @service = 'URL' or @href ) and not( ( contains( . , 'www' ) or contains( . , 'http' ) or contains( . , 'mailto' ) or contains( . , 'ftp' ) ) ) ]">
                  <xsl:apply-templates select="." mode="refinline"/>
               </xsl:when>
               <!-- 20170607:  MCJ:  Added condition for AU06.  I am not sure why this wouldn't be the default handling (to avoid a figure within a figure) but
                                              don't want to affect other streams. -->
               <xsl:when test="($streamID = 'AU06') or ($streamID = 'NZ05') or ($streamID='AU19_CC')">
                  <xsl:choose><!-- this condition is probably not complete in terms of preventing a double wrapper for 'figure'.  The test for an ancestor figure will
                                     cover most things but could also cause trouble if there are constructs in between the outer wrapper and the current
                                     inline object that need different handling.  This module could use some refactoring (not just for this stream area). -->
                     <xsl:when test="(./parent::leg:bodytext or ./parent::li or ./parent::text or ./parent::legfragment) and not(ancestor::figure)">
                        <figure>
                           <xsl:apply-templates select="." mode="refinline"/>
                        </figure>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:apply-templates select="." mode="refinline"/>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:when>
               <!-- JD: probably more applicable, but setting to AU11 for now.  leg:bodytext/inlineobject would need to create primlaw:bodytext/p/text/figure -->
               <xsl:when test="$streamID='AU11' and parent::leg:bodytext">
                  <p>
                     <text>
                        <figure>
                           <xsl:apply-templates select="." mode="refinline"/>
                        </figure>
                     </text>
                  </p>
               </xsl:when>
               <!-- JD: probably more applicable, but settting to NZ18 for now.  Do not create <figure> wrapper when under <lnci:content> -->
               <xsl:when test="$streamID='NZ18' and parent::remotelink/parent::ci:content">
                  <xsl:apply-templates select="." mode="refinline"/>
               </xsl:when>
               <xsl:otherwise>
                  <figure>
                     <xsl:apply-templates select="." mode="refinline"/>
                  </figure>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!-- JL Included template name inlineobjblobstore from another module with DITA instructions
    <dita:topic xmlns="http://dita.oasis-open.org/architecture/2005/" id="Rosetta_inlineobject-to-LexisAdvance_ref.inlineobject_BLOBSTORE">
    -->
   <xsl:template match="inlineobject" name="inlineobjblobstore">
      <xsl:choose>
         <xsl:when test="$streamID='AU04' and parent::blockquote">
            <p>
               <figure>
                  <ref:inlineobject>
                     <xsl:apply-templates select="@height | @width"/>
                     <ref:locator>
                        <ref:locator-key>
                           <ref:key-name name="object-key"/>
                           <ref:key-value>
                              <xsl:apply-templates select="@filename"/>
                           </ref:key-value>
                        </ref:locator-key>
                        <ref:locator-params>
                           <proc:param name="object-type" value="IMG"/>
                           <proc:param name="external-or-local" value="external"/>
                           <proc:param name="object-server" value="Blobstore"/>
                           <proc:param name="object-pguid"
                                       value="urn:contentItem:0000-0000-0000-0000-00000-00"/>
                           <proc:param name="componentseq" value="1"/>
                        </ref:locator-params>
                     </ref:locator>
                  </ref:inlineobject>
               </figure>
            </p>
         </xsl:when>
         <xsl:otherwise>
            <ref:inlineobject>
               <xsl:apply-templates select="@height | @width"/>
               <ref:locator>
                  <ref:locator-key>
                     <ref:key-name name="object-key"/>
                     <ref:key-value>
                        <xsl:apply-templates select="@filename"/>
                     </ref:key-value>
                  </ref:locator-key>
                  <ref:locator-params>
                     <proc:param name="object-type" value="IMG"/>
                     <proc:param name="external-or-local" value="external"/>
                     <proc:param name="object-server" value="Blobstore"/>
                     <proc:param name="object-pguid"
                                 value="urn:contentItem:0000-0000-0000-0000-00000-00"/>
                     <proc:param name="componentseq" value="1"/>
                  </ref:locator-params>
               </ref:locator>
            </ref:inlineobject>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="inlineobject/@height | inlineobject/@width">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="inlineobject/@filename">
      <xsl:attribute name="value">
         <xsl:apply-templates select="parent::inlineobject/@dpsi"/>
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>

   <xsl:template match="inlineobject/@dpsi">
      <xsl:value-of select="concat('[[DPSI:', . , ']]')"/>
   </xsl:template>

   <xsl:template match="inlineobject[$streamID='CA10']" priority="25">
      <figure>
         <xsl:apply-templates select="." mode="refinline"/>
      </figure>
   </xsl:template>

   <xsl:template match="inlineobject[@filename='au_repeal01.png'][$streamID='AU04']">
      <legisinfo:status statuscode="repealed"/>
   </xsl:template>

   <xsl:template match="nl[following-sibling::*[1][self::inlineobject[@filename!=$inlineobjFilesToSuppress]]][following-sibling::*[2][self::nl]] | nl[preceding-sibling::*[1][self::inlineobject[@filename!=$inlineobjFilesToSuppress]]][following-sibling::*[2][self::nl]]"/>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a
                shared topic rather than duplicated to ensure consistency and accuracy. The xml
                snippets contained in this topic reflect markup needed for the Apollo image handling
                application. The UK is the first LBU to move from Apollo to the Blobstore
                application for image handling. Therefore, if this is a UK conversion instruction
                document, please refer to the following topics for correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
                            <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to
                            <xd:b>ref:inlineobject</xd:b> for BLOBSTORE images
                        (id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
                            <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:i>h/inlineobject</xd:i> becomes
                    <xd:b>figure/ref:inlineobject</xd:b>. The attributes of
                    <xd:i>h</xd:i> are handled as follows: <xd:ul>
               <xd:li>
                  <xd:i>h/@align</xd:i> becomes
                        <xd:b>figure/@align</xd:b>.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML showing <xd:i>inlineobject</xd:i> occurring in
                    <xd:i>h</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;leg:levelbody&gt;
    &lt;leg:bodytext&gt;
        &lt;h align="center"&gt;
            &lt;inlineobject type="image" filename="CTH_ACT_2001-65_PIC030.gif" attachment="ln-server"/&gt;
        &lt;/h&gt;
    &lt;/leg:bodytext&gt;
&lt;/leg:levelbody&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;primlaw:bodytext&gt;
    &lt;figure align="center"&gt;
        &lt;ref:inlineobject&gt;
            &lt;ref:locator&gt;
                &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="object-key"/&gt;
                    &lt;ref:key-value value="X-Y-CTH-ACT-2001-65-PIC030"/&gt; &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                &lt;/ref:locator-key&gt;
                &lt;ref:locator-params&gt;
                    &lt;proc:param name="componentseq" value="1"/&gt;
                    &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                    &lt;proc:param name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
                &lt;/ref:locator-params&gt;
            &lt;/ref:locator&gt;
        &lt;/ref:inlineobject&gt;
    &lt;/figure&gt;
&lt;/primlaw:bodytext&gt;

            </xd:pre>
         <!--Changes2016-07-29: Added Note about xml snippets that illustrate
                    image handling. Note summarizes move from Apollo to Blobstore application. UK is
                    first LBU to move to Blobstore.2012-10-26: Updated ref:locator markup in Target sample. 2013-02-18: Target example updated per inlineobject instructions. 2013-02-18: Created two sections, one for "Release 4.0
                        and after" and another for "Pre-Release 4.0".2013-04-30: Updated target sample according to latest
                    Apollo markup.2013-05-01: Removed instructions for section
                        "Pre-Release 4.0" because according to latest Apollo markup, section
                        "Release 4.0 and after" and section "Pre-Release 4.0" now have
                    similar conversion markup.2013-05-08: Extended the list of allowable values for
                    image handling.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="h[inlineobject]"><!--  Original Target XPath:  figure/ref:inlineobject   -->
      <figure>
         <xsl:apply-templates select="@* | node()"/>
      </figure>
   </xsl:template>

   <xsl:template match="h[inlineobject][$streamID='UK09']" priority="25"><!--  Original Target XPath:  figure/ref:inlineobject   -->
      <h>
         <xsl:apply-templates select="@* | node()"/>
      </h>
   </xsl:template>

   <xsl:template match="h/@align"><!--  Original Target XPath:  figure/@align   -->
      <xsl:attribute name="align">
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>
   <!-- ********************** -->   <!-- Use '/nonamespace/Rosetta_emph-LxAdv-emph.xsl' instead -->   <!-- ********************** -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a
                shared topic rather than duplicated to ensure consistency and accuracy. The xml
                snippets contained in this topic reflect markup needed for the Apollo image handling
                application. The UK is the first LBU to move from Apollo to the Blobstore
                application for image handling. Therefore, if this is a UK conversion instruction
                document, please refer to the following topics for correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to
                        <xd:b>ref:inlineobject</xd:b> for BLOBSTORE images
                        (id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:i>emph/inlineobject</xd:i> becomes
                    <xd:b>figure/ref:inlineobject</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML showing <xd:i>inlineobject</xd:i> occurring in
                    <xd:i>emph</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
&lt;p&gt;
    &lt;text&gt;
        &lt;emph typestyle="it"&gt;
            &lt;inlineobject type="image" filename="SA_ACT_1984-3_PIC2.gif" attachment="ln-server"/&gt;
        &lt;/emph&gt;
    &lt;/text&gt;
&lt;/p&gt;
            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;p&gt;
    &lt;text&gt;
        &lt;figure&gt;
            &lt;ref:inlineobject&gt;
                &lt;ref:locator&gt;
                    &lt;ref:locator-key&gt;
                        &lt;ref:key-name name="object-key"/&gt;
                        &lt;ref:key-value value="X-Y-SA-ACT-1984-3-PIC2"/&gt; &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                    &lt;/ref:locator-key&gt;
                    &lt;ref:locator-params&gt;
                        &lt;proc:param name="componentseq" value="1"/&gt;
                        &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                        &lt;proc:param name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
                    &lt;/ref:locator-params&gt;
                &lt;/ref:locator&gt;
            &lt;/ref:inlineobject&gt;
    &lt;/figure&gt;
  &lt;/text&gt;  
&lt;/p&gt;
            </xd:pre>
         <xd:p>When source is having emph followed by inlineobject inside base:h element
                    <xd:i>h/emph/inlineobject</xd:i>than in Target it should Map with and becomes
                    <xd:b>emph/ref:inlineobject</xd:b>.</xd:p>
         <xd:pre>
&lt;h&gt;
    &lt;emph typestyle="bf"&gt;Table 2 Estimation of regression coefficients using the SUR model 
        &lt;inlineobject type="image" mimetype="image/gif" filename="JFRC_2005_Vol13_Issue2_May_167_1.gif" /&gt;
    &lt;/emph&gt;
&lt;/h&gt;

<xd:b>Becomes</xd:b>
    
 &lt;emph typestyle="bf"&gt;Table 2 Estimation of regression coefficients using the SUR model
     &lt;ref:inlineobject&gt;
                &lt;ref:locator&gt;
                    &lt;ref:locator-key&gt;
                        &lt;ref:key-name name="object-key"/&gt;
                        &lt;ref:key-value value="X-Y-JFRC_2005_Vol13_Issue2_May_167_1"/&gt; &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                    &lt;/ref:locator-key&gt;
                    &lt;ref:locator-params&gt;
                        &lt;proc:param name="componentseq" value="1"/&gt;
                        &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                        &lt;proc:param name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
                    &lt;/ref:locator-params&gt;
                &lt;/ref:locator&gt;
            &lt;/ref:inlineobject&gt;
&lt;/emph&gt;
            </xd:pre>
         <!-- This doesn't have anything to do with inlineobject.  It is regarding emph markup. -->
         <xd:p>When source is having emph followed by another emph of same typestyle and then
                followed by inlineobject <xd:i>sup/emph/emph/inlineobject</xd:i>than in
                Target it should drop one emph and the followed
                    <xd:i>emph/inlineobject</xd:i> should directly Map it with and becomes
                    <xd:b>sup/emph/ref:inlineobject</xd:b>.</xd:p>
         <xd:pre>
&lt;row&gt;
    &lt;entry&gt;
        &lt;sup&gt;
            &lt;emph typestyle="it"&gt;
                &lt;emph typestyle="it"&gt;
                    &lt;inlineobject type="image" mimetype="image/gif" filename="ALE_2014_Vol16_Issue2_Sep_433_1.gif" /&gt;
                &lt;/emph&gt;
            &lt;/emph&gt;
        &lt;/sup&gt;
    &lt;/entry&gt;
    &lt;entry&gt;(1)&lt;/entry&gt;
&lt;/row&gt;

<xd:b>Becomes</xd:b>

&lt;row&gt;
    &lt;entry&gt;
        &lt;sup&gt;
            &lt;emph&gt;
                &lt;ref:inlineobject&gt;
                    &lt;ref:locator&gt;
                        &lt;ref:locator-key&gt;
                            &lt;ref:key-name name="object-key"/&gt;
                            &lt;ref:key-value value="X-Y-ALE_2014_Vol16_Issue2_Sep_433_1"/&gt; &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                        &lt;/ref:locator-key&gt;
                        &lt;ref:locator-params&gt;
                            &lt;proc:param name="componentseq" value="1"/&gt;
                            &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                            &lt;proc:param name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
                        &lt;/ref:locator-params&gt;
                    &lt;/ref:locator&gt;
                &lt;/ref:inlineobject&gt;
            &lt;/emph&gt;
        &lt;/sup&gt;
    &lt;/entry&gt;    
&lt;/row&gt;
            </xd:pre>
         <!-- This doesn't have anything to do with the inlinobject. It is about the conversion of heading as a descendant of leg:comntry -->
         <xd:p>When source is having
                <xd:i>leg:comntry/level/bodytext/heading/title/emph/inlineobject</xd:i>
            then it becomes
                <xd:b>annot:annotations/annot:annotation-grp/annot:annotation/bodytext/h/emph/ref:inlineobject</xd:b>.</xd:p>
         <xd:pre>
&lt;leg:comntry searchtype="ANNOTATIONS"&gt;
    &lt;level leveltype="comm30"&gt;
        &lt;bodytext&gt;
            &lt;heading searchtype="ANNOTATIONS"&gt;
                &lt;title&gt;
                    &lt;emph typestyle="bf"&gt;
                        &lt;inlineobject type="image" mimetype="image/gif" filename="img8d4.gif" /&gt;NOTES
                    &lt;/emph&gt;
                &lt;/title&gt;
            &lt;/heading&gt;
        &lt;/bodytext&gt;
    &lt;/level&gt;
&lt;/leg:comntry&gt;

<xd:b>Becomes</xd:b>

&lt;annot:annotations&gt;
    &lt;annot:annotation-grp grptype="COMMENTARY"&gt;
        &lt;annot:annotation&gt;
            &lt;bodytext&gt;
                &lt;h&gt;
                    &lt;emph typestyle="bf"&gt;&lt;ref:inlineobject&gt;
                        &lt;ref:locator&gt;
                            &lt;ref:locator-key&gt;
                                &lt;ref:key-name name="object-key"/&gt;
                                &lt;ref:key-value value="X-Y-img8d4"/&gt; &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                            &lt;/ref:locator-key&gt;
                            &lt;ref:locator-params&gt;
                                &lt;proc:param name="componentseq" value="1"/&gt;
                                &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                                &lt;proc:param name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
                            &lt;/ref:locator-params&gt;
                        &lt;/ref:locator&gt;
                    &lt;/ref:inlineobject&gt;NOTES&lt;/emph&gt;
                &lt;/h&gt;
            &lt;/bodytext&gt;
        &lt;/annot:annotation&gt;
    &lt;/annot:annotation-grp&gt;
&lt;/annot:annotations&gt;
            </xd:pre>
         <!--Changes2012-10-26: Updated ref:locator markup in Target sample. 2013-02-18: Target example updated per inlineobject instructions. 2013-02-18: Created two sections, one for "Release 4.0
                        and after" and another for "Pre-Release 4.0".2013-04-30: Updated target sample according to latest
                    Apollo markup.2013-05-01: Removed instructions for section
                        "Pre-Release 4.0" because according to latest Apollo markup, section
                        "Release 4.0 and after" and section "Pre-Release 4.0" now have
                    similar conversion markup.2013-05-08: Extended the list of allowable values for
                    image handling.2015-06-18: When source is having emph followed by inlineobject inside base:h element h/emph/inlineobject than in Target it should Map it like emph/ref:inlineobject as emph containing text under it.2015-07-21: When Inlineobject is followed by two emph
                    elements of same typestyle then from Target we should drop the one emph element
                    and the followed emph/inlineobject should mapped with
                        figure/ref:inlineobject in Target. applicable to
                UK09 only RFA #2354. 2015-07-24: When Inlineobject is followed by two emph
                elements of same typestyle sup/emph/emph/inlineobjectthen from Target we should drop the one emph element
                and the followed emph/inlineobject should mapped with
                emph/ref:inlineobject in Target. applicable to
                UK09 only RFA #2354. 2015-08-12: Added instruction and example for 
                leg:comntry/level/bodytext/heading/title/emph/inlineobject, Applicable on UK07, R4.5 issue # 2364.2016-08-01: Added Note about xml snippets that illustrate
                image handling. Note summarizes move from Apollo to Blobstore application. UK is
                first LBU to move to Blobstore.-->
      </xd:desc>
   </xd:doc>
   <!--<xsl:template match="emph/inlineobject">

		<!-\-  Original Target XPath:  figure/ref:inlineobject   -\->
	    <figure xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
			<ref:inlineobject>
				<xsl:apply-templates select="@* | node()"/>
			</ref:inlineobject>
		</figure>

	</xsl:template>-->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a
                shared topic rather than duplicated to ensure consistency and accuracy. The xml
                snippets contained in this topic reflect markup needed for the Apollo image handling
                application. The UK is the first LBU to move from Apollo to the Blobstore
                application for image handling. Therefore, if this is a UK conversion instruction
                document, please refer to the following topics for correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to
                        <xd:b>ref:inlineobject</xd:b> for BLOBSTORE images
                        (id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:i>sub/inlineobject</xd:i> becomes <xd:b>figure/ref:inlineobject</xd:b>. Suppress <xd:i>sub</xd:i> from conversion.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;text&gt;
    The various language versions of that phrase use the terms
    'adscribirse' (Spanish), 'tages sammen' (Danish), 'angehängt'
    (German), 
    '&lt;sub&gt;
        &lt;inlineobject type="image" mimetype="image/gif"
        filename="img1c4e.gif"/&gt;
    &lt;/sub&gt;' 
    (Greek), 'added on'
    (English), 'rattachée' (French), 'collegato' (Italian), 'gevoegd
    bij' (Dutch), 'ligado' (Portuguese), 'yhteydessä' (Finnish) and
    'läggas samman' (Swedish).
&lt;/text&gt;

    </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;text&gt;
    The various language versions of that phrase use the terms
    'adscribirse' (Spanish), 'tages sammen' (Danish), 'angehängt'
    (German), 
    '&lt;figure&gt;
        &lt;ref:inlineobject&gt;
            &lt;ref:locator&gt;
                &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="object-key"/&gt;
                    &lt;ref:key-value value="X-Y-img1c4e"/&gt; &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                &lt;/ref:locator-key&gt;
                &lt;ref:locator-params&gt;
                    &lt;proc:param name="componentseq" value="1"/&gt;
                    &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                    &lt;proc:param name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
                &lt;/ref:locator-params&gt;
            &lt;/ref:locator&gt;
        &lt;/ref:inlineobject&gt;
    &lt;/figure&gt;' 
    (Greek), 'added on'
    (English), 'rattachée' (French), 'collegato' (Italian), 'gevoegd
    bij' (Dutch), 'ligado' (Portuguese), 'yhteydessä' (Finnish) and
    'läggas samman' (Swedish).
&lt;/text&gt;

    </xd:pre>
         <!--Changes2013-02-18: Target example updated per inlineobject instructions. 2013-02-18: Created two sections, one for "Release 4.0 and after" and another for "Pre-Release 4.0".2013-04-30: Updated target sample according to latest Apollo markup.2013-05-01: Removed instructions for section
                "Pre-Release 4.0" because according to latest Apollo markup, section
                "Release 4.0 and after" and section "Pre-Release 4.0" now have
                similar conversion markup.2013-05-08: Extended the list of allowable values for image handling.2016-08-01: Added Note about xml snippets that illustrate
                image handling. Note summarizes move from Apollo to Blobstore application. UK is
                first LBU to move to Blobstore.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="sub[inlineobject]"><!--  Original Target XPath:  figure/ref:inlineobject   -->
      <xsl:apply-templates select="node()"/>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a
                shared topic rather than duplicated to ensure consistency and accuracy. The xml
                snippets contained in this topic reflect markup needed for the Apollo image handling
                application. The UK is the first LBU to move from Apollo to the Blobstore
                application for image handling. Therefore, if this is a UK conversion instruction
                document, please refer to the following topics for correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to
                        <xd:b>ref:inlineobject</xd:b> for BLOBSTORE images
                        (id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:i>dispformula/inlineobject</xd:i> becomes <xd:b>formula/ref:inlineobject</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML showing <xd:i>inlineobject</xd:i> occurring in <xd:i>dispformula</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;text&gt;
        &lt;dispformula&gt;
            &lt;inlineobject type="image" attachment="ln-server" filename="g0146031.gif"/&gt;
        &lt;/dispformula&gt;
    &lt;/text&gt;
&lt;/p&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;text&gt;
        &lt;formula&gt;
            &lt;ref:inlineobject&gt;
                &lt;ref:locator&gt;
                    &lt;ref:locator-key&gt;
                        &lt;ref:key-name name="object-key"/&gt;
                        &lt;ref:key-value value="X-Y-g0146031"/&gt;   &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                    &lt;/ref:locator-key&gt;
                    &lt;ref:locator-params&gt;
                        &lt;proc:param name="componentseq" value="1"/&gt;
                        &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                        &lt;proc:param name="object-smi" value=""/&gt;    &lt;!-- This @value assignment is done by conversion program --&gt;
                    &lt;/ref:locator-params&gt;
                &lt;/ref:locator&gt;
            &lt;/ref:inlineobject&gt;
        &lt;/formula&gt;
    &lt;/text&gt;
&lt;/p&gt;

            </xd:pre>
         <!--Changes2012-10-26: Updated ref:locator markup in Target sample. 2013-02-18: Target example updated per inlineobject instructions. 2013-02-18: Created two sections, one for "Release 4.0 and after" and another for "Pre-Release 4.0".2013-04-30: Updated target sample according to latest Apollo markup.2013-05-01: Removed instructions for section
                "Pre-Release 4.0" because according to latest Apollo markup, section
                "Release 4.0 and after" and section "Pre-Release 4.0" now have
                similar conversion markup.2013-05-08: Extended the list of allowable values for image handling.2016-08-01: Added Note about xml snippets that illustrate
                image handling. Note summarizes move from Apollo to Blobstore application. UK is
                first LBU to move to Blobstore.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="inlineobject[parent::dispformula]"><!--  Original Target XPath:  formula/ref:inlineobject   -->
      <xsl:apply-templates select="." mode="refinline"/>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a shared topic
                rather than duplicated to ensure consistency and accuracy. The xml snippets contained in this
                topic reflect markup needed for the Apollo image handling application. The UK is the first LBU
                to move from Apollo to the Blobstore application for image handling. Therefore, if this is a UK
                conversion instruction document, please refer to the following topics for correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE images
                        (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to <xd:b>ref:inlineobject</xd:b> for
                        BLOBSTORE images (id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE images
                        (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:i>p/blockquote/inlineobject</xd:i> becomes
                    <xd:b>p/figure/ref:inlineobject</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b> If <xd:i>inlineobject</xd:i> in this context contains sibling elements
                (other children of <xd:i>blockquote</xd:i>), do not complete this
                instruction. Instead, complete <xd:a href="Rosetta_inlineobject-w-siblings-Chof-p_blockquote-LxAdv-p_figure_ref.inlineobject.dita#Rosetta_inlineobject-w-siblings-Chof-p_blockquote-LxAdv-p_figure_ref.inlineobject"/>
         </xd:p>
         <xd:p>
            <xd:b>Source XML showing <xd:i>inlineobject</xd:i> occurring in <xd:i>blockquote</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;leg:levelbody&gt;
    &lt;leg:bodytext&gt;
        &lt;p&gt;
            &lt;text&gt;The value of ...&lt;/text&gt;
            &lt;blockquote&gt;
                &lt;inlineobject type="image" filename="TAS_ACT_1987-13_HIGH-PENAM07.tiff" attachment="ln-server"/&gt;
            &lt;/blockquote&gt;
            &lt;text&gt;where&amp;#160;&amp;ndash;&lt;/text&gt;
        &lt;/p&gt;
    &lt;/leg:bodytext&gt;
&lt;/leg:levelbody&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML showing <xd:i>inlineobject</xd:i> occurring in <xd:i>blockquote</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;primlaw:bodytext&gt;
    &lt;p&gt;
        &lt;text&gt;The value of ...&lt;/text&gt;
        &lt;figure&gt;
            &lt;ref:inlineobject&gt;
                &lt;ref:locator&gt;
                    &lt;ref:locator-key&gt;
                        &lt;ref:key-name name="object-key"/&gt;
                        &lt;ref:key-value value="X-Y-TAS-ACT-1987-13-HIGH-PENAM07"/&gt; &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                    &lt;/ref:locator-key&gt;
                    &lt;ref:locator-params&gt;
                        &lt;proc:param name="componentseq" value="1"/&gt;
                        &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp, .tiff)--&gt;
                        &lt;proc:param name="object-smi" value=""/&gt; &lt;!-- This @value assignment is done by conversion program --&gt;
                    &lt;/ref:locator-params&gt;
                &lt;/ref:locator&gt;
            &lt;/ref:inlineobject&gt;
        &lt;/figure&gt;
    &lt;/p&gt;
&lt;/primlaw:bodytext&gt;

            </xd:pre>
         <!--Changes2016-07-26: Added Note about xml snippets that
                    illustrate image handling. Note summarizes move from Apollo to Blobstore
                    application. UK is first LBU to move to Blobstore. 2012-10-26: Updated ref:locator markup in Target sample. 2013-02-18: Target example updated per inlineobject instructions. 2013-02-18: Created two sections, one for "Release 4.0 and after" and another for "Pre-Release 4.0".2013-04-30: Updated target sample according to latest Apollo markup.2013-05-01: Removed instructions for section
                "Pre-Release 4.0" because according to latest Apollo markup, section
                "Release 4.0 and after" and section "Pre-Release 4.0" now have
                similar conversion markup.2013-05-08: Extended the list of allowable values for image handling.2013-05-08: Added note to use a different instruction if inlineobject contains siblings.2015-12-08: Added '.tiff' to the list of allowable values for proc:param[@name="object-type"]/@value="image".-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="blockquote[inlineobject and not(inlinobject/following-sibling::node() or inlineobject/preceding-sibling::node())]"><!--  Original Target XPath:  p/figure/ref:inlineobject   -->
      <p>
         <figure>
            <ref:inlineobject>
               <xsl:apply-templates select="inlineobject" mode="refinline"/>
            </ref:inlineobject>
         </figure>
      </p>
   </xsl:template>
   <!-- Template specific to p/blockquote so a new p wrapper is not created... a better way probably exists to do this. -->
   <xsl:template match="p/blockquote[inlineobject and not(inlinobject/following-sibling::node() or inlineobject/preceding-sibling::node())]"
                 priority="25"><!--  Original Target XPath:  p/figure/ref:inlineobject   -->
      <figure>
         <xsl:apply-templates select="." mode="refinline"/>
      </figure>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a
                shared topic rather than duplicated to ensure consistency and accuracy. The xml
                snippets contained in this topic reflect markup needed for the Apollo image handling
                application. The UK is the first LBU to move from Apollo to the Blobstore
                application for image handling. Therefore, if this is a UK conversion instruction
                document, please refer to the following topics for correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to
                        <xd:b>ref:inlineobject</xd:b> for BLOBSTORE images
                        (id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
                        <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
                        images (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:i>bodytext/inlineobject</xd:i> becomes
                <xd:b>bodytext/p/text/figure/ref:inlineobject</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;bodytext&gt;
    &lt;inlineobject type="image" attachment="ln-server" filename="elb31.gif"/&gt;
    &lt;p&gt;
        &lt;text&gt;The European Court of Justice also found that contracting out arrangements could fall under the Directive...&lt;/text&gt;
    &lt;/p&gt;
    ...
&lt;/bodytext&gt;

    </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;bodytext&gt;
        &lt;p&gt;
            &lt;text&gt;
                &lt;figure&gt;
                    &lt;ref:inlineobject&gt;
                        &lt;ref:locator&gt;
                            &lt;ref:locator-key&gt;
                                &lt;ref:key-name name="object-key"/&gt;
                                &lt;ref:key-value value="X-Y-elb31"/&gt;  &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                            &lt;/ref:locator-key&gt;
                            &lt;ref:locator-params&gt;
                                &lt;proc:param name="componentseq" value="1"/&gt;
                                &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                                &lt;proc:param name="object-smi" value=""/&gt;        &lt;!-- This @value assignment is done by conversion program --&gt;                                
                            &lt;/ref:locator-params&gt;
                        &lt;/ref:locator&gt;
                    &lt;/ref:inlineobject&gt;
                &lt;/figure&gt;
            &lt;/text&gt;
        &lt;/p&gt;
        &lt;p&gt;
            &lt;text&gt;The European Court of Justice also found that contracting out arrangements could fall under the Directive...&lt;/text&gt;
        &lt;/p&gt;
        ...
&lt;/bodytext&gt;

    </xd:pre>
         <!--Changes2016-07-29: Added Note about xml snippets that illustrate
                image handling. Note summarizes move from Apollo to Blobstore application. UK is
                first LBU to move to Blobstore. VSTS 761462013-05-08: Extended the list of allowable values for image handling.2013-05-01: Removed instructions for section
                "Pre-Release 4.0" because according to latest Apollo markup, section
                "Release 4.0 and after" and section "Pre-Release 4.0" now have
                similar conversion markup.2013-04-30: Updated target sample according to latest Apollo markup.2013-02-18: Created two sections, one for "Release 4.0 and after" and another for "Pre-Release 4.0".2013-02-18: Target example updated per inlineobject instructions. -->
         <!-- SEP 2015-9-23 added; method A versus method B? (depends on how bodytext is implemented externally)   -->
      </xd:desc>
   </xd:doc>
   <xsl:template xmlns="http://dita.oasis-open.org/architecture/2005/"
                 match="inlineobject[parent::bodytext]">
      <xsl:element name="p">
         <xsl:element name="text">
            <xsl:element name="figure">
               <xsl:apply-templates select="." mode="refinline"/>
            </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>insert-line[@character]</xd:i> becomes
						<xd:b>proc:nl</xd:b>.</xd:p>
         <!-- Moved to Rosetta_blockquote-LxAdv-blockquote.xsl -->
         <!--<p><b>If <sourcexml>insert-line</sourcexml> occurs as the only child within <sourcexml>blockquote</sourcexml> then drop outer <sourcexml>blockquote</sourcexml> in NewLexis conversion.</b></p>-->
         <xd:p>
            <xd:b>Source XML : If <xd:i>insert-line/@character=" "</xd:i>
					comes in XPATH
					<xd:i>bodytext/blockquote/insert-line</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre> &lt;blockquote&gt; &lt;insert-line character=" "/&gt;
					&lt;/blockquote&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML : If <xd:i>insert-line/@character=" "</xd:i>
					comes in XPATH
					<xd:i>bodytext/blockquote/insert-line</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre> &lt;p/&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML : If <xd:i>insert-line/@character=""</xd:i>
					comes in XPATH
					<xd:i>bodytext/blockquote/insert-line</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre> &lt;blockquote&gt; &lt;insert-line character=""/&gt;
					&lt;/blockquote&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML : If <xd:i>insert-line/@character=""</xd:i>
					comes in XPATH
					<xd:i>bodytext/blockquote/insert-line</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre> &lt;p/&gt; </xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>When <xd:i>insert-line</xd:i> occurs as a child of a
					<xd:i>blockquote</xd:i> and the character type is <xd:b>space,
					nbsp, or thinsp,</xd:b> then the result is mapped to an empty
					<xd:b>p</xd:b> tag.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;leg:bodytext&gt; &lt;p&gt; &lt;blockquote&gt;
					&lt;insert-line character=" "/&gt; &lt;p
					indent="none"&gt;&lt;text&gt;Tape reference: &lt;form-chars
					character="." num-char="16"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;p
					indent="none"&gt;&lt;text&gt;&lt;form-chars character="."
					num-char="16"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;p
					indent="none"&gt;&lt;text&gt;Name of complainant: &lt;form-chars
					character="." num-char="16"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;p
					indent="none"&gt;&lt;text&gt;Cross reference to other interviews with
					complainant: &lt;form-chars character="."
					num-char="16"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;insert-line character="
					"/&gt; &lt;p indent="none"&gt;&lt;text&gt;I certify that the contents
					of this certificate are correct.&lt;/text&gt;&lt;/p&gt;
					&lt;insert-line character=" "/&gt; &lt;p
					indent="none"&gt;&lt;text&gt;&lt;form-chars character="."
					num-char="12"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;p
					indent="none"&gt;&lt;text align="center"&gt;Signature of
					Interviewer&lt;form-chars character=" "
					num-char="16"/&gt;&lt;form-chars character=" "
					num-char="2"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;insert-line character="
					"/&gt; &lt;p indent="none"&gt;&lt;text align="center"&gt;Date of
					Certificate&lt;form-chars character=" "
					num-char="16"/&gt;&lt;form-chars character=" "
					num-char="2"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;/blockquote&gt;
					&lt;/p&gt; &lt;/leg:bodytext&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;primlaw:bodytext&gt; &lt;p&gt; &lt;blockquote&gt;
					&lt;p/&gt; &lt;p indent="none"&gt;&lt;text&gt;Tape reference:
					&lt;proc:formchars formchar="dot"
					formcharuse="longname"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;p
					indent="none"&gt;&lt;text&gt;&lt;proc:formchars formchar="dot"
					formcharuse="longname"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;p
					indent="none"&gt;&lt;text&gt;Name of complainant: &lt;proc:formchars
					formchar="dot" formcharuse="longname"/&gt;&lt;/text&gt;&lt;/p&gt;
					&lt;p indent="none"&gt;&lt;text&gt;Cross reference to other interviews
					with complainant: &lt;proc:formchars formchar="dot"
					formcharuse="longname"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;p/&gt; &lt;p
					indent="none"&gt;&lt;text&gt;I certify that the contents of this
					certificate are correct.&lt;/text&gt;&lt;/p&gt; &lt;p/&gt; &lt;p
					indent="none"&gt;&lt;text&gt;&lt;proc:formchars formchar="dot"
					formcharuse="address"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;p
					indent="none"&gt;&lt;text align="center"&gt;Signature of
					Interviewer&lt;proc:formchars formchar="dot"
					formcharuse="longname"/&gt;&lt;proc:formchars formchar="dot"
					formcharuse="day"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;p/&gt; &lt;p
					indent="none"&gt;&lt;text align="center"&gt;Date of
					Certificate&lt;proc:formchars formchar="dot"
					formcharuse="longname"/&gt;&lt;proc:formchars formchar="dot"
					formcharuse="day"/&gt;&lt;/text&gt;&lt;/p&gt; &lt;/blockquote&gt;
					&lt;/p&gt; &lt;/primlaw:bodytext&gt; </xd:pre>
         <!--Changes2012-01-16: Created.2012-02-28: Instruction and Example added if
						insert-line comes in XPATH
						bodytext/blockquote/insert-line2012-05-15: Instruction and Example added when
						insert-line[@character] is space, nbsp, or
					thinsp in the source.2012-05-15: Remove rest of note to handling
						insert-line.2012-10-25: Instruction and example added when
						insert-line occurs as a child of a
						blockquote.-->
      </xd:desc>
   </xd:doc>
   <!-- MCJ:  2017-08-01: updated predicate to test for not(parent::blockquote) in order to remove ambiguity with other template.
    	                   this introduces new holes that will need to be refactored if/when relevant data appears.  My guess is that
    	                   these templates need to be consolidated so that the transform to proc:nl is the default and the test on
    	                   parent::blockquote (and testing @character) becomes exceptions. -->
   <!-- JD: 2017-07-25: modified per instruction "insert-line[@character] becomes proc:nl." -->
   <!--xsl:template match="insert-line"-->
   <xsl:template match="insert-line[@character and not(parent::blockquote)]"><!--  Original Target XPath:  proc:nl   -->
      <proc:nl>
         <xsl:apply-templates select="@* | node()"/>
      </proc:nl>
   </xsl:template>
   <!-- JD: 2017-07-25: modified below to test unicode value of character, as contains() won't work on character entities -->   <!--xsl:template match="insert-line[parent::blockquote and (@character=' ' or contains(@character,'nbsp') or contains(@character, 'thinsp'))]"-->
   <xsl:template match="insert-line[parent::blockquote and @character = (' ', ' ', ' ')]">
      <xsl:choose>
         <xsl:when test="parent::blockquote[parent::p][not(child::*[2])]">
            <text>
               <proc:nl/>
            </text>
         </xsl:when>
         <xsl:otherwise>
            <p/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="insert-line[parent::blockquote[parent::bodytext[parent::level[@leveltype=('prec.grp' , 'precgrp' , 'precgrp1' , 'precgrp2' , 'prec' , 'form')]]] and @character = (' ', ' ', ' ')][$streamID=('AU05', 'NZ09')]"
                 priority="2">
      <form:p/>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>l</xd:i> becomes <xd:b>list</xd:b>.</xd:p>
         <xd:p>The child <xd:i>li</xd:i> becomes
        <xd:b>listitem</xd:b>. <xd:b>bodytext</xd:b> is the required child element for
        <xd:b>listitem</xd:b>. The child <xd:i>lilabel</xd:i> becomes <xd:b>label</xd:b>. </xd:p>
         <xd:p>Any <xd:i>h</xd:i> children of the <xd:i>li</xd:i> should be processed as <xd:b>h</xd:b> within the <xd:b>listitem/bodytext</xd:b>.  Process the children of <xd:i>h</xd:i>.</xd:p>
         <xd:p>Nested lists, when a <xd:i>li</xd:i> contains a <xd:i>l</xd:i> element, the mapping should appear as follows: create <xd:b>list/listitem/bodytext</xd:b>
       followed by a <xd:i>list</xd:i> within the <xd:i>bodytext</xd:i> element.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;l&gt;
  &lt;li&gt;
   &lt;lilabel&gt;
	   &lt;emph typestyle="ro"&gt;(1)&lt;/emph&gt;
   &lt;/lilabel&gt;
   &lt;p&gt;
	 &lt;text&gt;The plaintiffs&amp;#x2019; application is dismissed.&lt;/text&gt;
   &lt;/p&gt;
 &lt;/li&gt;
 &lt;li&gt;
   &lt;lilabel&gt;
	   &lt;emph typestyle="ro"&gt;(2)&lt;/emph&gt;
   &lt;/lilabel&gt;
   &lt;p&gt;
	 &lt;text&gt;The plaintiffs pay the defendant&amp;#x2019;s costs, including each appearance in the court, as taxed, if not agreed.&lt;/text&gt;
   &lt;/p&gt;
 &lt;/li&gt;
&lt;/l&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML </xd:b>
         </xd:p>
         <xd:pre>

&lt;list&gt;
 &lt;listitem&gt;
	&lt;label&gt;
	  &lt;emph typestyle="ro"&gt;(1)&lt;/emph&gt;
	&lt;/label&gt;
	&lt;bodytext&gt;
	 &lt;p&gt;
	  &lt;text&gt;The plaintiffs&amp;#x2019; application is dismissed.&lt;/text&gt;
	 &lt;/p&gt;
	&lt;/bodytext&gt; 
 &lt;/listitem&gt;
 &lt;listitem&gt;
	&lt;label&gt;
	  &lt;emph typestyle="ro"&gt;(2)&lt;/emph&gt;
	&lt;/label&gt;
	&lt;bodytext&gt;
	 &lt;p&gt;
	  &lt;text&gt;The plaintiffs pay the defendant&amp;#x2019;s costs, including each appearance in the court, as taxed, if not agreed.&lt;/text&gt;
	 &lt;/p&gt;
	&lt;/bodytext&gt; 
 &lt;/listitem&gt;
&lt;/list&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Nested list Source(l/li/l)</xd:b>
         </xd:p>
         <xd:pre>
    
              &lt;l&gt;
            &lt;li&gt;
              &lt;lilabel&gt;&amp;#x2022;&lt;/lilabel&gt;
              &lt;p&gt;
                &lt;text&gt;the health and safety of workers who are:&lt;/text&gt;
              &lt;/p&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;l&gt;
                &lt;li&gt;
                  &lt;lilabel&gt;&amp;#x25E6;&lt;/lilabel&gt;
                  &lt;p&gt;
                    &lt;text&gt;engaged by the person conducting the business or undertaking;&lt;/text&gt;
                  &lt;/p&gt;
                &lt;/li&gt;
              &lt;/l&gt;
            &lt;/li&gt;
            ...  
            
  </xd:pre>
         <xd:p>
            <xd:b>Nested list Target (list/listitem/bodytext/list)</xd:b>
         </xd:p>
         <xd:pre>
    
          &lt;list&gt;
            &lt;listitem&gt;
              &lt;label&gt;&amp;#x2022;&lt;/label&gt;
              &lt;bodytext&gt;
              &lt;p&gt;
                &lt;text&gt;the health and safety of workers who are:&lt;/text&gt;
              &lt;/p&gt;
              &lt;/bodytext&gt;
            &lt;/listitem&gt;
            &lt;listitem&gt;
               &lt;bodytext&gt;
                 &lt;list&gt;
                   &lt;listitem&gt;
                      &lt;label&gt;&amp;#x25E6;&lt;/label&gt;
                      &lt;bodytext&gt;
                        &lt;p&gt;
                         &lt;text&gt;engaged by the person conducting the business or undertaking;&lt;/text&gt;
                        &lt;/p&gt;
                      &lt;/bodytext&gt;  
                   &lt;/listitem&gt;
                 &lt;/list&gt;
               &lt;/bodytext&gt;  
            &lt;/listitem&gt;  
            ...
  
  </xd:pre>
         <!--Changes2016-04-01: Added mapping instruction for handling h within listitem.2014-01-16: Added mapping instruction for nested lists.-->
      </xd:desc>
   </xd:doc>
   <!-- Done as part of ROCKET but not for any particular stream JL 2017-03-14 -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_l-LxAdv-list.dita  -->
   <!-- virtual nesting requires its own template -->
   <xsl:template match="l[not(@virtual-nesting)]">
      <xsl:choose><!-- Awantika: specific for AU20 -->
         <xsl:when test="$streamID='AU20' and ancestor::source_cttr:annotations[@id='OI7' or @id='OP3']/heading/note/l">
            <xsl:for-each select="li/p/text">
               <primlaw:subordinatelaw-item>
                  <textitem>
                     <xsl:apply-templates select="@* | node()"/>
                  </textitem>
               </primlaw:subordinatelaw-item>
            </xsl:for-each>
         </xsl:when>
         <!-- 2017-10-17 - MDS: Added due to Webstar 7025682 -->
         <xsl:when test="parent::l">
            <xsl:apply-templates select="node()"/>
         </xsl:when>
         <xsl:otherwise><!-- 2017-10-17 - MDS: Removed 'except l' because it was dropping content as found in Webstar 7025682.  See when statement 'parent::l'-->
            <xsl:element name="list">
               <xsl:apply-templates select="@*"/>
               <xsl:if test="$streamID='UK09' and note[not(preceding-sibling::li)]">
                  <listitem>
                     <bodytext/>
                  </listitem>
               </xsl:if>
               <xsl:apply-templates select="node()"/>
            </xsl:element>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="l[ancestor::frm:body][not(ancestor::footnote or ancestor::note)][$streamID='UK12']"
                 priority="25">
      <form:list>
         <xsl:apply-templates select="@*|node() except l"/>
      </form:list>
   </xsl:template>
   <!-- Sudhanshu added this template as li and h element is not handled , so added for UK06. -->   <!-- JD: 2017-07-10: this should be the default, not stream-specific; appears duplicate of /modules/nonamespace/Rosetta_li-LxAdv-listitem.xsl -->
   <xsl:template match="li[$streamID='UK06' or $streamID='USLPA']">
      <listitem>
         <xsl:apply-templates select="lilabel"/>
         <bodytext>
            <xsl:apply-templates select="h"/>
            <xsl:apply-templates select="@* | node() except (lilabel|h)"/>
         </bodytext>
      </listitem>
   </xsl:template>
   <!-- JD: 2017-07-10: this should be the default, not stream-specific -->   <!--<xsl:template match="h[$streamID='UK06']">
    <h>
      <xsl:apply-templates select="@*|node()"/>
    </h>
  </xsl:template>-->   <!--  <xsl:template match="h/@l[$streamID='UK06']"/>-->   <!-- 
    ********************************************************************************************
    NOTE!
    from  /XSLT/ContentArch/Rosetta-to-LA/modules/nonamespace/Rosetta_refpt-LxAdv-ref.anchor.xsl
   
    this is **GENERIC** behavior. If your stream implements differently, fork template or give a streamID test
   
    <p>If <sourcexml>refpt</sourcexml> comes within <sourcexml>l/li/lilabel</sourcexml>
					then <targetxml>ref:anchor</targetxml> will become the first child of
						<targetxml>listitem</targetxml>.</p>
					-	JL
    ************************************************************************************************  -->
   <xsl:template match="lilabel">
      <xsl:choose><!-- SS: Only for HK07 - Remove EMPTY label element inside list--><!-- Awantika: Corrected dropping of lilabel --><!-- JD: 2017-07-24: added NZ18 to streams to suppress empty <label> from; added 'replace' test to get rid of characters not handled by normalize-space(e.g., nbsp) -->
         <xsl:when test="$streamID=('HK07','NZ18', 'AU16', 'NZ12','CA14', 'AU18') and normalize-space(replace(., '^[\t\p{Zs}]+$', '')) = ''"><!--<xsl:if test=".[normalize-space() = '']"/>--></xsl:when>
         <xsl:when test="$streamID=('NZ13', 'AU18') and normalize-space(replace(., '^Â $', '')) = ''"/>
         <xsl:otherwise>
            <xsl:element name="label">
               <xsl:apply-templates select="@* | node() except(refpt)"/>
            </xsl:element>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!-- Awantika: wrapper p to be created around list if coming in case:factsummary and case:decisionsummary for HK03 -->
   <xsl:template match="l[not(@virtual-nesting)][parent::case:factsummary or parent::case:decisionsummary]"
                 priority="25"><!-- JD: 2017-06-16: removing $streamID test, as this is supposed to be the default handling.  
  	If stream-specific handling is required this should be moved to a stream-specific module. --><!--<xsl:if test="$streamID='HK03'">-->
      <xsl:choose>
         <xsl:when test="$streamID=('NZ04', 'AU13')">
            <list>
               <xsl:apply-templates select="@* | node()"/>
            </list>
         </xsl:when>
         <!-- JD: UK02 wraps in list when a child of case:decisionsummary but not case:factsummary -->
         <xsl:when test="$streamID=('UK02') and parent::case:decisionsummary">
            <list>
               <xsl:apply-templates select="@* | node()"/>
            </list>
         </xsl:when>
         <xsl:otherwise>
            <p>
               <list>
                  <xsl:apply-templates select="@* | node()"/>
               </list>
            </p>
         </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:if>-->
   </xsl:template>
   <!-- Vikas Rohilla : Added template for the empty lilabel   -->
   <xsl:template match="lilabel[matches(.,'^$')]"/>
   <!-- MDS 207-05-17 - Exception found in AU04 There is no target attribute in <list> for l/@type -->
   <xsl:template match="l/@type"/>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>lilabel/fnr</xd:i> becomes <xd:b>label/footnote</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML having lilabel/fnr:</xd:b>
         </xd:p>
         <xd:pre>
         &lt;li id="AFL.FL.FLA75.S31.1.C"&gt;    
             &lt;lilabel&gt;        
                 &lt;refpt id="AFL.FL.FLA75.S31.1.C" type="ext"/&gt;        
                 &lt;fnr fnrtoken="AFL.FL.FLA75.S31.1.C.FTN1-R" fntoken="AFL.FL.FLA75.S31.1.C.FTN1"&gt;*&lt;/fnr&gt;(c)        
             &lt;/lilabel&gt;    
             . . .     
         &lt;/li&gt; 
     </xd:pre>
         <xd:p>
            <xd:b>Target XML </xd:b>
         </xd:p>
         <xd:pre>

&lt;listitem&gt;
    &lt;ref: anchor id=" AFL.FL.FLA75.S31.1.C " anchortype="global"/&gt;
    &lt;bodytext&gt;
        ...
    &lt;/bodytext&gt;
    &lt;label&gt;(c)
        &lt;footnote&gt;
            &lt;ref:anchor id="AFL.FL.FLA75.S31.1.C.FTN1" anchortype="global"/&gt;
            &lt;label&gt;*&lt;/label&gt;
            &lt;bodytext&gt;
                ....
            &lt;/bodytext&gt;
        &lt;/footnote&gt;
    &lt;/label&gt;
&lt;/listitem&gt;

</xd:pre>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_fnr-Chof-lilabel-LxAdv-label_footnote.dita  -->
   <!-- Vikas Rohilla : initila updated may by changed if required-->
   <!-- 20170531:  MCJ:  Enforced order of processing attributes since some create elements. -->
   <xsl:template match="lilabel/fnr">
      <footnote>
         <xsl:choose>
            <xsl:when test="$streamID='AU18'">
               <xsl:element name="ref:anchor">
                  <xsl:attribute name="id">
                     <xsl:value-of select="@fnrtoken"/>
                  </xsl:attribute>
                  <xsl:attribute name="anchortype">
                     <xsl:text>global</xsl:text>
                  </xsl:attribute>
               </xsl:element>
               <label>
                  <xsl:apply-templates select="node()"/>
               </label>
               <bodytext>
                  <xsl:text><!--Mandatory element per the target schema--></xsl:text>
               </bodytext>
            </xsl:when>
            <xsl:otherwise><!-- Process all attributes except @fnrtoken because fnrtoken produces an element.  This does assume that no other
		         attributes produce elements. -->
               <xsl:apply-templates select="@* except @fnrtoken"/>
               <!-- Now process @fnrtoken as the last attribute since it produces an element. -->
               <xsl:apply-templates select="@fnrtoken"/>
               <xsl:apply-templates select="node()"/>
            </xsl:otherwise>
         </xsl:choose>
      </footnote>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>When <xd:i>li</xd:i> has attribute <xd:i>@level</xd:i> then conversion need to suppress
      <xd:i>@level</xd:i>.</xd:p>
         <xd:p>When <xd:i>li</xd:i> is immediately followed by a <xd:i>l</xd:i> that list should be brought into the end of the <xd:b>listitem/bodytext</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML having li/@level</xd:b>
         </xd:p>
         <xd:pre>

&lt;l&gt;
    &lt;li level="1"&gt;
        &lt;lilabel&gt;(a)&lt;/lilabel&gt;
            &lt;p&gt;
                &lt;text&gt;the day on which the person with the claim first knew,&lt;/text&gt;
            &lt;/p&gt;
    &lt;/li&gt;
&lt;/l&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;list&gt;
    &lt;listitem&gt;
        &lt;label&gt;(a)&lt;/label&gt;
        &lt;bodytext&gt;
            &lt;p&gt;
                &lt;text&gt;the day on which the person with the claim first
                    knew,&lt;/text&gt;
            &lt;/p&gt;
        &lt;/bodytext&gt;
    &lt;/listitem&gt;
&lt;/list&gt;

        </xd:pre>
      </xd:desc>
   </xd:doc>
   <xsl:template match="li"><!--  Original Target XPath:  listitem   -->
      <listitem>
         <xsl:choose>
            <xsl:when test="@id = ''"/>
            <xsl:when test="$streamID='AU18' and ./@id = descendant::refpt/@id"/>
            <xsl:otherwise>
               <xsl:apply-templates select="@id"/>
            </xsl:otherwise>
         </xsl:choose>
         <xsl:apply-templates select="@* except @id"/>
         <xsl:apply-templates select="lilabel/refpt"/>
         <xsl:apply-templates select="lilabel"/>
         <bodytext><!-- 
                <xsl:apply-templates select="* except lilabel"/>
-->
            <xsl:choose>
               <xsl:when test="$streamID=('AU10','NZ11')"><!-- WPK 2017-12-08.  In pacific PG, glp:notes can become margin notes.
                            However they are not done by creating new <p><text><marginnote> for each note.
                            The margin notes are all placed inside the preceding <p><text> (already created text node).
                            This is achieved by applying following-sibling glp:note from within the first p/text.
                            Since the following sibling is done there, applying templates here will create duplicates.
                            So this "when" clause prevents duplication of margin notes.
                            4.2.2.3. heading (id-CCCC-10182)
                            1. bodytext/glp:note[notetype="xref"] becomes seclaw:bodytext/p/text/marginnote. New p and text elements are not created;
                            instead, the newly created marginnote is placed in the p that was mapped from the preceding sibling p of glp:note[notetype="xref"]. Within
                            this p the marginnote is placed within the text element that was mapped from the preceding sibling p element's last existing child text element.
                            2. li/glp:note[notetype="xref"] becomes listitem/bodytext/p/text/marginnote. Within the listitem/bodytext, new p
                            and text elements are usually not created; instead, the newly created marginnote is placed in the p that was mapped from the preceding sibling p of
                            glp:note[notetype="xref"]. Within this p the marginnote is placed within the text element that was mapped from the preceding sibling p
                            element's last child text source element. A new text element will need to be created if and only if the glp:note[notetype="xref"] occurs in
                            an li before any sibling p in the li (because in this case there would be no li/p that precedes the li/glp:note).
                        -->
                  <xsl:apply-templates select="* except (lilabel | glp:note[@notetype='xref'][preceding-sibling::*[1][self::p[text[not(*) and normalize-space(.)!='']] or self::glp:note[@notetype='xref']]])"/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:apply-templates select="* except lilabel"/>
               </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="following-sibling::*[1][self::l]">
               <xsl:apply-templates select="following-sibling::*[1][self::l]" mode="nested-list"/>
            </xsl:if>
         </bodytext>
      </listitem>
   </xsl:template>
   <!-- JL: change to handle potential multiple nested consecutive lists between lis -->
   <xsl:template match="l" mode="nested-list">
      <xsl:choose>
         <xsl:when test="ancestor::frm:body and not(ancestor::footnote or ancestor::note)">
            <form:list>
               <xsl:apply-templates/>
            </form:list>
         </xsl:when>
         <xsl:otherwise>
            <list>
               <xsl:apply-templates/>
            </list>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:if test="following-sibling::*[1][self::l]">
         <xsl:apply-templates select="following-sibling::*[1][self::l]" mode="nested-list"/>
      </xsl:if>
   </xsl:template>

   <xsl:template match="li[ancestor::frm:body][not(ancestor::footnote or ancestor::note)]"
                 priority="25"><!--  Original Target XPath:  listitem   -->
      <form:listitem>
         <xsl:apply-templates select="@*"/>
         <xsl:apply-templates select="lilabel/refpt"/>
         <xsl:apply-templates select="lilabel"/>
         <form:bodytext>
            <xsl:apply-templates select="* except lilabel"/>
            <xsl:if test="following-sibling::*[1][self::l]">
               <xsl:apply-templates select="following-sibling::*[1][self::l]" mode="nested-list"/>
            </xsl:if>
         </form:bodytext>
      </form:listitem>
   </xsl:template>

   <xsl:template match="li/@level"/>
   <!--			<xsl:include href="../../modules/glp/Rosetta_glp.note-Chof-li-LxAdv-listitem-note.xsl"/>	-->   <xd:doc>
      <xd:desc>
         <xd:p>When <xd:i>l</xd:i> has attribute <xd:i>@virtual-nesting </xd:i> then
        it should be converted to real list nesting (mean's creating some parent nested list on
        basis of attribute value i.e. "@virtual-nesting='3'"). Drop <xd:i>@virtual-nesting</xd:i> and add n-1 list wrappers, where <xd:b>n</xd:b> is the value of <xd:i>@virtual-nesting</xd:i>. Please refer the below input and target markups for more clarification: </xd:p>
         <xd:p>
            <xd:b>Source XML having l/@virtual-nesting</xd:b>
         </xd:p>
         <xd:pre>

&lt;l virtual-nesting="3"&gt;
    &lt;li&gt;
        &lt;lilabel/&gt;
        &lt;p&gt;
            &lt;text&gt;&lt;emph typestyle="bf"&gt;Unless the agreement provides otherwise...&lt;/emph&gt;&lt;/text&gt;
        &lt;/p&gt;
    &lt;/li&gt;
&lt;/l&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;list&gt;
    &lt;listitem&gt;
      &lt;bodytext&gt;
        &lt;p&gt;
          &lt;list&gt;
            &lt;listitem&gt;
              &lt;bodytext&gt;
                &lt;p&gt;
                  &lt;list&gt;
                    &lt;listitem&gt;
                      &lt;bodytext&gt;
                        &lt;p&gt;&lt;text&gt;&lt;emph typestyle="bf"&gt;Unless the agreement provides otherwise...&lt;/emph&gt;&lt;/text&gt;&lt;/p&gt;
                      &lt;/bodytext&gt;
                    &lt;/listitem&gt;
                  &lt;/list&gt;
                &lt;/p&gt;
              &lt;/bodytext&gt;
            &lt;/listitem&gt;
          &lt;/list&gt;
        &lt;/p&gt;
      &lt;/bodytext&gt;
    &lt;/listitem&gt;
  &lt;/list&gt;

        </xd:pre>
      </xd:desc>
   </xd:doc>
   <!--Vikas Rohilla : updated for the streamID CA01  -->
   <!-- Sudhanshu Srivastava : Added CA02CC for listing conversion -->
   <xsl:template match="l[@virtual-nesting='1'][$streamID='CA01' or $streamID='CA02CC' or $streamID='CA12' or $streamID='CA19' or $streamID='CA14' or $streamID='CA15' or $streamID='CA04' ]"
                 priority="2">
      <xsl:call-template name="virtualNesting">
         <xsl:with-param name="content" select="li"/>
         <xsl:with-param name="counter" select="number(@virtual-nesting)"/>
      </xsl:call-template>
   </xsl:template>
   <!-- Assumes @virtual-nesting is always a digit and never less than 2 -->
   <xsl:template match="l[@virtual-nesting]">
      <xsl:choose>
         <xsl:when test="$streamID='CA01' and(starts-with(ancestor::case:decisionsummary/child::heading/title,'Court Summary:') or         starts-with(ancestor::case:decisionsummary/child::heading/title,'Court Summary:') or        starts-with(ancestor::case:decisionsummary/child::heading/title,'Résumé de la Cour :') or        starts-with(ancestor::case:decisionsummary/child::heading/title,'Commission Summary:') or        starts-with(ancestor::case:decisionsummary/child::heading/title,'Board Summary:') or        starts-with(ancestor::case:decisionsummary/child::heading/title,'Tribunal Summary:') or        starts-with(ancestor::case:decisionsummary/child::heading/title,'Executive Summary:') or        starts-with(ancestor::case:decisionsummary/child::heading/title,'Commissioner Summary:') or        starts-with(ancestor::case:decisionsummary/child::heading/title,'Résumé du tribunal :') or        starts-with(ancestor::case:decisionsummary/child::heading/title,'Sommaire du tribunal :') or        contains(ancestor::case:decisionsummary/child::heading/title,'Subsequent History') or contains(ancestor::case:decisionsummary/child::heading/title,'Historique subséquent') or contains(ancestor::case:decisionsummary/child::heading/title,'Court Catchwords') or contains(ancestor::case:decisionsummary/child::heading/title,'Indexation de la Cour') or contains(ancestor::case:decisionsummary/child::p[1]/text[1]/emph[1],'Subsequent History') or contains(ancestor::case:decisionsummary/child::p[1]/text[1]/emph[1],'Historique subséquent') or contains(ancestor::case:decisionsummary/child::p[1]/text[1]/emph[1],'Court Catchwords') or contains(ancestor::case:decisionsummary/child::p[1]/text[1]/emph[1],'Indexation de la Cour'))">
            <p>
               <list>
                  <listitem>
                     <bodytext>
                        <p>
                           <xsl:call-template name="virtualNesting">
                              <xsl:with-param name="content" select="li"/>
                              <xsl:with-param name="counter" select="number(@virtual-nesting)"/>
                           </xsl:call-template>
                        </p>
                     </bodytext>
                  </listitem>
               </list>
            </p>
         </xsl:when>
         <xsl:otherwise>
            <list>
               <listitem>
                  <bodytext>
                     <p>
                        <xsl:call-template name="virtualNesting">
                           <xsl:with-param name="content" select="li"/>
                           <xsl:with-param name="counter" select="number(@virtual-nesting)"/>
                        </xsl:call-template>
                     </p>
                  </bodytext>
               </listitem>
            </list>
         </xsl:otherwise>
      </xsl:choose>
      <!--  Original Target XPath:  list   -->
   </xsl:template>

   <xsl:template name="virtualNesting">
      <xsl:param name="content"/>
      <xsl:param name="counter"/>
      <xsl:choose>
         <xsl:when test="($counter - 1)&gt;1">
            <list>
               <listitem>
                  <bodytext>
                     <p>
                        <xsl:call-template name="virtualNesting">
                           <xsl:with-param name="content" select="$content"/>
                           <xsl:with-param name="counter" select="$counter - 1"/>
                        </xsl:call-template>
                     </p>
                  </bodytext>
               </listitem>
            </list>
         </xsl:when>
         <xsl:otherwise>
            <xsl:choose>
               <xsl:when test="$streamID='CA04' or $streamID='CA02CC' or $streamID='CA12' or $streamID='CA19'">
                  <xsl:choose>
                     <xsl:when test="count(child::*) = 1 and (@virtual-nesting[.='1'] or not(@virtual-nesting))">
                        <list>
                           <listitem>
                              <xsl:apply-templates select="$content/lilabel"/>
                              <bodytext>
                                 <xsl:apply-templates select="$content/(* except lilabel)"/>
                              </bodytext>
                           </listitem>
                        </list>
                     </xsl:when>
                     <xsl:when test="count(child::*) = 1">
                        <list>
                           <listitem>
                              <xsl:apply-templates select="$content/lilabel"/>
                              <bodytext>
                                 <xsl:apply-templates select="$content/(* except lilabel)"/>
                              </bodytext>
                           </listitem>
                        </list>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:for-each select="child::*">
                           <list>
                              <xsl:apply-templates select="."/>
                           </list>
                        </xsl:for-each>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:when>
               <xsl:when test="$streamID='CA08'">
                  <list>
                     <listitem>
                        <bodytext>
                           <list>
                              <xsl:apply-templates select="$content | node() except lilabel"/>
                           </list>
                        </bodytext>
                     </listitem>
                  </list>
               </xsl:when>
               <xsl:when test="$streamID='CA15' or $streamID='CA01' or $streamID='CA14'">
                  <list>
                     <xsl:for-each select="child::*">
                        <xsl:apply-templates select="."/>
                     </xsl:for-each>
                  </list>
               </xsl:when>
               <xsl:otherwise>
                  <list>
                     <listitem>
                        <bodytext>
                           <xsl:apply-templates select="$content/*"/>
                        </bodytext>
                     </listitem>
                  </list>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!--<xsl:include href="../../modules/nonamespace/Rosetta_link-LxAdv-ref.lnlink_BLOBSTORE.xsl"/>-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>link</xd:i> becomes <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> and children can be converted as follows: 
                <xd:ul>
               <xd:li>The attribute <xd:i>link/@status</xd:i> is always suppressed, it is never output to the target document.</xd:li>
               <xd:li>
                  <xd:i>link</xd:i> content becomes <xd:b>ref:marker</xd:b>. </xd:li>
               <xd:li>Create <xd:b>ref:locator</xd:b> and describe as: 
                        <xd:ul>
                     <xd:li>Create <xd:b>ref:locator-key</xd:b> and describe as: 
                                <xd:ul>
                           <xd:li>Create <xd:b>ref:key-name</xd:b> with <xd:b>@name="attachment-key"</xd:b>. 
                                        This line is hard coded.
                                    </xd:li>
                           <xd:li>Create <xd:b>ref:key-value</xd:b> with
                                        <xd:b>@value</xd:b>, as follows: 
                                        <xd:ul>
                                 <xd:li>If <xd:i>link[@smi]</xd:i> is present,
                                                copy <xd:i>link[@filename]</xd:i> to
                                                  <xd:b>@value</xd:b>
                                 </xd:li>
                                 <xd:li>If <xd:i>link[@smi]</xd:i> is not present,
                                                then <xd:b>@value="X-Y-Z"</xd:b>, where X
                                                is LNI, Y is SMI, and Z is filename. LNI and SMI
                                                (retreived from CSSM) values are added by
                                                <xd:b>"Workflow Generic Image Handlers</xd:b>. The last
                                                component "Z" is copied from
                                                <xd:i>link[@filename]</xd:i>.</xd:li>
                                 <xd:li>If <xd:i>link[@smi]</xd:i> is not present,
                                                then conversion program should pass
                                                <xd:i>link[@filename]</xd:i> value to
                                                <xd:b>“Workflow Generic Image Handler”</xd:b> as is and
                                                “Workflow Generic Image Handler” will do conversion
                                                of filename value as noted above. <xd:b>Conversion of
                                                    filename replaces underscore, blank, and period
                                                    with hyphen.</xd:b>
                                 </xd:li>
                              </xd:ul>
                           </xd:li>
                        </xd:ul>
                     </xd:li>
                     <xd:li>Create <xd:b>ref:locator-params</xd:b> and describe as: 
                                <xd:ul>
                           <xd:li>
                              <xd:b>ref:locator-params</xd:b> element contains locator parameters. It provides a parameter
                                        (identified as a name/value pair) passing mechanism for link services. Each parameter is expressed as a
                                        <xd:b>@name</xd:b> and <xd:b>@value</xd:b> pair in <xd:b>proc:param</xd:b>
                                        element. It is used to identify the attachment type and component sequence.
                                    </xd:li>
                           <xd:li>Create <xd:b>proc:param</xd:b> with <xd:b>@name</xd:b> and <xd:b>@value</xd:b>.
                                        <xd:b>@name</xd:b> and <xd:b>@value</xd:b> are required attributes in
                                        <xd:b>proc:param</xd:b>.
                                    </xd:li>
                           <xd:li>Three <xd:b>proc:param[@name]</xd:b> and <xd:b>proc:param[@value]</xd:b> pairs are described
                                        below: 
                                        <xd:ul>
                                 <xd:li>
                                    <xd:b>proc:param[@name="componentseq"]</xd:b> with the attribute
                                                <xd:b>@value="1"</xd:b>. This line is hard coded.
                                            </xd:li>
                                 <xd:li>
                                    <xd:b>proc:param[@name="attachment-type"]</xd:b> with the
                                                attribute <xd:b>@value</xd:b>. The <xd:b>@value</xd:b> value is from
                                                <xd:b>link[@type]</xd:b>. Allowable values: “image”; “PDF”; “spreadsheet”; “audio”; “HTML”; “video”; “hotdoc”; “wordprocess”.
                                            </xd:li>
                                 <xd:li>
                                    <xd:b>proc:param[@name="attachment-smi"]</xd:b> with the
                                                attribute <xd:b>@value</xd:b>. The <xd:b>@value</xd:b>
                                                value is from <xd:i>link[@smi]</xd:i>. If
                                                <xd:i>link[@smi]</xd:i> is not present, obtain SMI from CSSM.
                                                This <xd:b>@value</xd:b> assignment is done by conversion program.</xd:li>
                              </xd:ul>
                           </xd:li>
                        </xd:ul>
                     </xd:li>
                  </xd:ul>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML. Source @smi present</xd:b>
         </xd:p>
         <xd:pre>

&lt;link type="pdf" smi="98765" filename="xmpl-c1.pdf" status="valid"&gt;Download in PDF&lt;/link&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML. Source @smi present</xd:b>
         </xd:p>
         <xd:pre>

&lt;ref:lnlink service="ATTACHMENT"&gt;
    &lt;ref:marker role="label"&gt;Download in PDF&lt;/ref:marker&gt; 
    &lt;ref:locator&gt;
        &lt;ref:locator-key&gt;
            &lt;ref:key-name name="attachment-key"/&gt;
            &lt;ref:key-value value="xmpl-c1"/&gt;
        &lt;/ref:locator-key&gt;
        &lt;ref:locator-params&gt;
            &lt;proc:param name="componentseq" value="1"/&gt;
            &lt;proc:param name="attachment-type" value="PDF"/&gt;
            &lt;proc:param name="attachment-smi" value="98765"/&gt;
        &lt;/ref:locator-params&gt;
    &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML. Source @smi not present</xd:b>
         </xd:p>
         <xd:pre>

&lt;link type="pdf" filename="pbap-c1.pdf" status="valid"&gt;Download in PDF&lt;/link&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML. Source @smi not present</xd:b>
         </xd:p>
         <xd:pre>

&lt;ref:lnlink service="ATTACHMENT"&gt;
    &lt;ref:marker role="label"&gt;Download in PDF&lt;/ref:marker&gt; 
    &lt;ref:locator&gt;
        &lt;ref:locator-key&gt;
            &lt;ref:key-name name="attachment-key"/&gt;
            &lt;ref:key-value value="X-Y-pbap-c1"/&gt; 
            &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
        &lt;/ref:locator-key&gt;
        &lt;ref:locator-params&gt;
            &lt;proc:param name="componentseq" value="1"/&gt;
            &lt;proc:param name="attachment-type" value="PDF"/&gt;
            &lt;proc:param name="attachment-smi" value=""/&gt; 
            &lt;!-- @value populated with SMI obtained from CSSM --&gt;
            &lt;!-- This @value assignment is done by conversion program --&gt;
        &lt;/ref:locator-params&gt;
    &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;

	</xd:pre>
         <!--Changes2015-09-08: Minor XPATH correction in title to change 
                ref:lnlink/@service="ATTACHMENT" to be 
                ref:lnlink[@service="ATTACHMENT"].2015-05-22: Changed the instructions to indicate link/@status is always dropped and removed ref:lnlink/@status from target example. This is a very low-priority change and has been added for technical correctness, particularly with respect to new CIs. Existing scripts do not have to implement this change since ref:lnlink/@status is ignored by LexisAdvance if it is present.2013-09-24: Not a rule change. Modified examples to illustrate when @status suppressed and when retained.2013-08-21: Added instruction for when to suppress @status.2013-05-24: Updated instruction for handling of link when smi is present and some of the verbiage is changed.2013-05-02: Some of the verbiage is changed and updated target example to if the SMI is present then a ref:lnlink/@status attribute is set to “valid”.2013-05-01: Updated instructions and target example per latest Apollo markup.2013-02-26: Updated target example per project requirement.2012-10-26: Changed to reflect recent requirements for attachment-type links.-->
         <!-- Added from /Rosetta-to-LA/modules/nonamespace/Rosetta_ci.cite-LxAdv-lnci.cite.xsl -->
         <xd:p>
            <xd:b>Exception: When <xd:i>link</xd:i> is used as intra-document linking within
                <xd:i>ci:content</xd:i>
            </xd:b>.</xd:p>
         <xd:p>If the <xd:i>ci:content</xd:i> contains a <xd:i>link</xd:i> child,
                the <xd:i>link</xd:i> wrapper markup (not its content) shall be removed (omit
                tag and retain content) and the <xd:i>link/@refpt</xd:i> value shall be moved
                to <xd:b>lnci:cite/@citeref</xd:b>.</xd:p>
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_link-LxAdv-ref.lnlink.dita  -->
   <!--   
        
        *****PLEASE READ*****
        
Image handling background note 2017-11-30:
        
Please use $streamID in Rosetta_link-LxAdv-ref.lnlink.xsl due to notation below.  

It was originally intended that Apollo jurisdictions would use these (when first introduced in the DITA):

\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_lnlink_service_ATTACHMENT-LxAdv-ref.lnlink.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_link-LxAdv-ref.lnlink.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_inlineobject-LxAdv-ref.inlineobject.xsl

And blobstore jurisdictions would use these (notice BLOBSTORE in the file name):

\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_lnlink_service_ATTACHMENT-LxAdv-ref.lnlink_BLOBSTORE.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_link-LxAdv-ref.lnlink_BLOBSTORE.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_inlineobject-LxAdv-ref.inlineobject_BLOBSTORE.xsl

They were originally meant to be mutually exclusive.

Ditamap includes (and subsequently xsl drivers) may have included both blobstore and Apollo handling during the transition from one to the other even though only one image handling 
is done in an LBU.  Image handling is LBU wide and not individual stream specific.

Very importantly, there is a named template (@name="generic-link") in Rosetta_link-LxAdv-ref.lnlink.xsl which is called by both "Rosetta_p-LxAdv-p.xsl" and "Rosetta_bodytext-link-LxAdv-seclaw.bodytext-p-text-ref.lnlink.xsl".   Both of these common modules are not LBU specific.  . 
This effectively, although unintentionally, crossed the original exclusivity described above.

Current fix is to use $streamID indicating HK and UK which are currently the only blobstore jurisdictions.  Ultimately, goal is to re-establish these image handling files are mutually exclusive.
-->
   <xsl:template match="link[not(parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp or parent::text[parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp])]"
                 name="generic-link">
      <xsl:choose><!-- Awantika:2017-11-07: updated for NZ12 for webstar #7039775 -->
         <xsl:when test="$streamID='NZ12' and parent::pgrp">
            <p>
               <text>
                  <ref:lnlink service="ATTACHMENT">
                     <ref:marker role="label">
                        <xsl:apply-templates/>
                     </ref:marker>
                     <ref:locator>
                        <ref:locator-key>
                           <ref:key-name name="attachment-key"/>
                           <ref:key-value>
                              <xsl:attribute name="value">
                                 <xsl:choose><!-- JL: 20170526: Per Roopa and Selva, we should output the filename extension for image links to work -->
                                    <xsl:when test="@smi">
                                       <xsl:value-of select="@filename"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                       <xsl:value-of select="@filename"/>
                                    </xsl:otherwise>
                                 </xsl:choose>
                              </xsl:attribute>
                           </ref:key-value>
                        </ref:locator-key>
                        <ref:locator-params>
                           <proc:param name="componentseq" value="1"/>
                           <proc:param>
                              <xsl:attribute name="name">attachment-type</xsl:attribute>
                              <xsl:attribute name="value">
                                 <xsl:apply-templates select="@type"/>
                              </xsl:attribute>
                           </proc:param>
                           <proc:param>
                              <xsl:attribute name="name">attachment-smi</xsl:attribute>
                              <xsl:attribute name="value">
                                 <xsl:choose>
                                    <xsl:when test="@smi">
                                       <xsl:value-of select="@smi"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                       <xsl:value-of select="$smi"/>
                                    </xsl:otherwise>
                                 </xsl:choose>
                              </xsl:attribute>
                           </proc:param>
                        </ref:locator-params>
                     </ref:locator>
                  </ref:lnlink>
               </text>
            </p>
         </xsl:when>
         <xsl:otherwise>
            <ref:lnlink service="ATTACHMENT">
               <ref:marker role="label">
                  <xsl:apply-templates/>
               </ref:marker>
               <ref:locator>
                  <ref:locator-key>
                     <ref:key-name name="attachment-key"/>
                     <ref:key-value>
                        <xsl:attribute name="value">
                           <xsl:choose><!-- JL: 20170526: Per Roopa and Selva, we should output the filename extension for image links to work -->
                              <xsl:when test="@smi">
                                 <xsl:value-of select="@filename"/>
                              </xsl:when>
                              <xsl:otherwise>
                                 <xsl:value-of select="@filename"/>
                              </xsl:otherwise>
                           </xsl:choose>
                        </xsl:attribute>
                     </ref:key-value>
                  </ref:locator-key>
                  <ref:locator-params><!--SS - 2017-11-26: Added the below condition for added blobstore when link comes under 'paragraph' p.--><!-- JL: 2017-11-30: this module is supposed to be for Apollo but has been included in some blobstore LBUs (HK, UK). 
                                Using streamID to make sure Blobstore information goes to Blobstore LBUs. -->
                     <xsl:choose>
                        <xsl:when test="contains(./@type, 'wordprocess') and (starts-with($streamID, 'HK') or starts-with($streamID , 'UK'))">
                           <xsl:choose>
                              <xsl:when test="contains(./@type, 'wordprocess')">
                                 <proc:param name="attachment-type" value="wordprocess"/>
                              </xsl:when>
                              <xsl:otherwise>
                                 <proc:param name="attachment-type" value="IMG"/>
                              </xsl:otherwise>
                           </xsl:choose>
                           <proc:param name="external-or-local" value="external"/>
                           <proc:param name="attachment-server" value="BlobStore"/>
                           <proc:param name="attachment-pguid"
                                       value="urn:contentItem:0000-0000-0000-0000-00000-00"/>
                           <proc:param name="componentseq" value="1"/>
                        </xsl:when>
                        <xsl:otherwise><!--SS: end here-->
                           <proc:param name="componentseq" value="1"/>
                           <proc:param>
                              <xsl:attribute name="name">attachment-type</xsl:attribute>
                              <xsl:attribute name="value">
                                 <xsl:apply-templates select="@type"/>
                              </xsl:attribute>
                           </proc:param>
                           <proc:param>
                              <xsl:attribute name="name">attachment-smi</xsl:attribute>
                              <xsl:attribute name="value">
                                 <xsl:choose>
                                    <xsl:when test="@smi">
                                       <xsl:value-of select="@smi"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                       <xsl:value-of select="$smi"/>
                                    </xsl:otherwise>
                                 </xsl:choose>
                              </xsl:attribute>
                           </proc:param>
                        </xsl:otherwise>
                     </xsl:choose>
                  </ref:locator-params>
               </ref:locator>
            </ref:lnlink>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="link/@status"/>

   <xsl:template match="link/@smi"/>

   <xsl:template match="link/@filename"/>

   <xsl:template match="link/@type">
      <xsl:choose>
         <xsl:when test=".=('para','page', 'ed-pnum','refpt','logo')">
            <xsl:message>attachment-type is invalid, cannot be determined.</xsl:message>
         </xsl:when>
         <xsl:when test=".=('pdf' , 'pdf-fillable')">PDF</xsl:when>
         <xsl:when test=".='hotdoc-nonfillable'">hotdoc</xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="."/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!-- MDS - 2017-03-14 - Passes through children of link if parent is ci:content
        This is taken from /Rosetta-to-LA/modules/nonamespace/Rosetta_ci.cite-LxAdv-lnci.cite.xsl documentation.  Also copied to documentation in this module.-->
   <xsl:template match="link[parent::ci:content]">
      <xsl:apply-templates/>
   </xsl:template>
   <!-- Vikas Rohilla : Template to match the link[@refpt]-->   <!-- JL removing status att because it's not valid in output schema and some modules copy it -->
   <xsl:template match="link[@refpt][not($streamID='AU21' or 'USLPA')]" priority="25">
      <ref:lnlink>
         <ref:marker>
            <xsl:apply-templates/>
         </ref:marker>
         <ref:locator>
            <xsl:apply-templates select="@* except @status"/>
         </ref:locator>
      </ref:lnlink>
   </xsl:template>
   <!-- Vikas Rohilla : Handle the empty link having no attributes and the content webstar #7045989 -->
   <xsl:template match="link[not(@*)][.='']" priority="10"/>
   <!-- MDS - 2017-09-07 Unhandled in NZ07-DN Examples in CI show the @alttext dropped.  There are no obviously matching structures in the ref:lnlink or ref:marker elements for LA.-->
   <xsl:template match="link/@alttext"/>
   <xd:doc>
      <xd:desc>
         <xd:p>The element <xd:i>remotelink</xd:i> with attribute
        <xd:i>remotelink/@service</xd:i> equal to 'DOC-ID' becomes
        <xd:b>ref:lnlink</xd:b>. The <xd:b>ref:lnlink</xd:b> element is
      populated as follows: <xd:ul>
               <xd:li>The attribute <xd:i>remotelink/@status</xd:i> is always suppressed, it is never output to the target document.</xd:li>
               <xd:li>Attribute <xd:b>ref:lnlink/@service</xd:b> is set to "DOCUMENT".</xd:li>
               <xd:li>Element <xd:b>ref:lnlink/ref:marker</xd:b> is created and the content of
            <xd:i>remotelink</xd:i> becomes the content of child
            <xd:b>ref:lnlink/ref:marker</xd:b>. Any descendant element is converted
          according to instructions for that element in the section <xd:i>General Mark-Up</xd:i>.</xd:li>
               <xd:li>Element <xd:b>ref:lnlink/ref:locator</xd:b> and child element
            <xd:b>ref:locator/ref:locator-key</xd:b> are created. <xd:ul>
                     <xd:li>Element
              <xd:b>ref:locator/ref:locator-key/ref:key-name</xd:b> is created and the attribute <xd:b>ref:key-name/@name</xd:b> is set to "DOC-ID".</xd:li>
                     <xd:li>Element <xd:b>ref:locator/ref:locator-key/ref:key-value</xd:b> is created.<xd:ul>
                           <xd:li>If <xd:i>remotelink/@remotekey1="DOC-ID"</xd:i> or
                    <xd:i>remotelink/@remotekey1="DOCID"</xd:i>:<xd:ul>
                                 <xd:li>
                                    <xd:b>ref:key-value/@value</xd:b> is set to the the value of
                        <xd:i>remotelink/@dpsi</xd:i>, followed by a hyphen ("-"). Then it
                      is concatenated with the value of
                        <xd:i>remotelink/@remotekey2</xd:i>. If and only if
                        <xd:i>remotelink/@remotelink2</xd:i> is <xd:b>not</xd:b> present, use
                        <xd:i>remotelink/@refpt</xd:i> instead.</xd:li>
                              </xd:ul>
                           </xd:li>
                           <xd:li>If <xd:i>remotelink/@remotekey1="REFPTID"</xd:i>:<xd:ul>
                                 <xd:li>
                                    <xd:b>ref:key-value/@value</xd:b> is set to the the value of
                <xd:i>remotelink/@dpsi</xd:i>, followed by a hyphen ("-"). Then it is
              concatenated with the value of <xd:i>remotelink/@docidref</xd:i>. If
                <xd:i>remotelink/@docidref</xd:i> is not present when
                <xd:i>remotelink/@remotekey1="REFPTID"</xd:i>, this is a data error and
              the link is invalid. As a work-around, use the value "MISSINGDOCID" if the
                <xd:i>remotelink/@docidref</xd:i> attribute is missing in this
              context.</xd:li>
                                 <xd:li>The attribute <xd:b>ref:lnlink/ref:locator/@anchoridref</xd:b> is set to
              the value of <xd:i>remotelink/@refpt</xd:i>. If and only if
                <xd:i>remotelink/@refpt</xd:i> is <xd:b>not</xd:b> present, use
                <xd:i>remotelink/@remotelink2</xd:i> instead. If this value begins with a
              number, an underscore (_) is added to the front. Any colons (":") present in the
              Rosetta source value are replaced with an underscore ("_") in the NewLexis output
              value.</xd:li>
                              </xd:ul>
                           </xd:li>
                           <xd:li>When creating the value for <xd:b>ref:key-value/@value</xd:b>: if
            <xd:i>remotelink/@dpsi</xd:i> is not present, the value from
            <xd:i>docinfo:dpsi/@id-string</xd:i> is used. If there is no
            <xd:i>docinfo:dpsi/@id-string</xd:i> value, the value from the LBU manifest
          file is used.</xd:li>
                        </xd:ul>
                     </xd:li>
                  </xd:ul>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;remotelink service="DOC-ID" remotekey1="REFPTID" dpsi="0OM9" refpt="CITEID_177509" docidref="bb9b-55a207cd7z58"&gt;What will the trigger events be?&lt;/remotelink&gt;

      </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;ref:lnlink service="DOCUMENT"&gt;
  &lt;ref:marker&gt;What will the trigger events be?&lt;/ref:marker&gt;
  &lt;ref:locator anchoridref="CITEID_177509"&gt;
    &lt;ref:locator-key&gt;
      &lt;ref:key-name name="DOC-ID"/&gt;
      &lt;ref:key-value value="0OM9-bb9b-55a207cd7z58"/&gt;
    &lt;/ref:locator-key&gt;
  &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;

      </xd:pre>
         <!--Changes2015-11-03: Updated the instructions for  remotelink/@remotekey1="DOC-ID" to also include the scenario when there is no hyphen (remotelink/@remotekey1="DOCID").2015-05-22: Added an instruction to explicitly indicate remotelink/@status is always dropped (suppressed). This is a very low-priority change and has been added for technical correctness, particularly with respect to new CIs. Existing scripts do not have to implement this change unless needed since prior to the change remotelink/@status handling was not explicitly specified.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="remotelink[(@service='DOC-ID' or @service='FINDQUANTUM') and ($streamID = 'UK18') and not(parent::emph)]"
                 priority="25"><!--  Original Target XPath:  ref:lnlink   -->
      <ref:lnlink>
         <xsl:apply-templates select="@*"/>
         <xsl:attribute name="service">
            <xsl:choose>
               <xsl:when test="@service = 'DOC-ID'">DOCUMENT</xsl:when>
               <xsl:otherwise>
                  <xsl:value-of select="@service"/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:attribute>
         <ref:marker>
            <xsl:apply-templates select="node()"/>
         </ref:marker>
         <ref:locator><!--<xsl:attribute name="anchoridref">
				<xsl:choose>
						<xsl:when test="@refpt">
						    <xsl:choose>
								<xsl:when test="contains('0123456789', substring(@refpt, 1, 1))">
									<xsl:text>_</xsl:text>
									<xsl:value-of select="replace(@refpt, ':', '_')"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="replace(@refpt, ':', '_')"/>
								</xsl:otherwise>
							</xsl:choose>						  
						</xsl:when>
						<xsl:when test="@remotelink2">
							   <xsl:value-of select="@remotelink2"/>						  
						</xsl:when>
					</xsl:choose>
			  </xsl:attribute>-->
            <xsl:if test="@remotekey1">
               <ref:locator-key>
                  <ref:key-name>
                     <xsl:attribute name="name">
                        <xsl:value-of select="@service"/>
                     </xsl:attribute>
                  </ref:key-name>
                  <ref:key-value>
                     <xsl:attribute name="value">
                        <xsl:choose>
                           <xsl:when test="@remotekey1 = ('DOC-ID', 'DOCID')">
                              <xsl:choose>
                                 <xsl:when test="@dpsi">
                                    <xsl:value-of select="@dpsi"/>
                                 </xsl:when>
                                 <xsl:when test="//docinfo:dpsi/@id-string">
                                    <xsl:value-of select="//docinfo:dpsi/@id-string"/>
                                 </xsl:when>
                                 <xsl:otherwise>
                                    <xsl:value-of select="$dpsi"/>
                                 </xsl:otherwise>
                              </xsl:choose>
                              <xsl:text>-</xsl:text>
                              <xsl:choose>
                                 <xsl:when test="@remotekey2">
                                    <xsl:value-of select="@remotekey2"/>
                                 </xsl:when>
                                 <xsl:otherwise>
                                    <xsl:value-of select="@refpt"/>
                                 </xsl:otherwise>
                              </xsl:choose>
                           </xsl:when>
                           <xsl:when test="@remotekey1 = 'REFPTID'">
                              <xsl:value-of select="@dpsi"/>
                              <xsl:text>-</xsl:text>
                              <xsl:choose>
                                 <xsl:when test="@docidref">
                                    <xsl:value-of select="@docidref"/>
                                 </xsl:when>
                                 <xsl:otherwise>
                                    <xsl:text>MISSINGDOCID</xsl:text>
                                 </xsl:otherwise>
                              </xsl:choose>
                           </xsl:when>
                        </xsl:choose>
                     </xsl:attribute>
                  </ref:key-value>
               </ref:locator-key>
            </xsl:if>
         </ref:locator>
      </ref:lnlink>
   </xsl:template>

   <xsl:template match="remotelink[(@service='DOC-ID' or @service='FINDQUANTUM') and ($streamID = 'UK18') and parent::docinfo:assoc-links-grp]"
                 priority="30">
      <doc:related-content-item>
         <doc:related-content-link><!--  Original Target XPath:  ref:lnlink   -->
            <ref:lnlink>
               <xsl:apply-templates select="@*"/>
               <xsl:attribute name="service">
                  <xsl:choose>
                     <xsl:when test="@service = 'DOC-ID'">DOCUMENT</xsl:when>
                     <xsl:otherwise>
                        <xsl:value-of select="@service"/>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:attribute>
               <ref:marker>
                  <xsl:apply-templates select="node()"/>
               </ref:marker>
               <ref:locator><!--<xsl:attribute name="anchoridref">
				<xsl:choose>
						<xsl:when test="@refpt">
						    <xsl:choose>
								<xsl:when test="contains('0123456789', substring(@refpt, 1, 1))">
									<xsl:text>_</xsl:text>
									<xsl:value-of select="replace(@refpt, ':', '_')"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="replace(@refpt, ':', '_')"/>
								</xsl:otherwise>
							</xsl:choose>						  
						</xsl:when>
						<xsl:when test="@remotelink2">
							   <xsl:value-of select="@remotelink2"/>						  
						</xsl:when>
					</xsl:choose>
			  </xsl:attribute>-->
                  <xsl:if test="@remotekey1">
                     <ref:locator-key>
                        <ref:key-name>
                           <xsl:attribute name="name">
                              <xsl:value-of select="@service"/>
                           </xsl:attribute>
                        </ref:key-name>
                        <ref:key-value>
                           <xsl:attribute name="value">
                              <xsl:choose>
                                 <xsl:when test="@remotekey1 = ('DOC-ID', 'DOCID')">
                                    <xsl:choose>
                                       <xsl:when test="@dpsi">
                                          <xsl:value-of select="@dpsi"/>
                                       </xsl:when>
                                       <xsl:when test="//docinfo:dpsi/@id-string">
                                          <xsl:value-of select="//docinfo:dpsi/@id-string"/>
                                       </xsl:when>
                                       <xsl:otherwise>
                                          <xsl:value-of select="$dpsi"/>
                                       </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:text>-</xsl:text>
                                    <xsl:choose>
                                       <xsl:when test="@remotekey2">
                                          <xsl:value-of select="@remotekey2"/>
                                       </xsl:when>
                                       <xsl:otherwise>
                                          <xsl:value-of select="@refpt"/>
                                       </xsl:otherwise>
                                    </xsl:choose>
                                 </xsl:when>
                                 <xsl:when test="@remotekey1 = 'REFPTID'">
                                    <xsl:value-of select="@dpsi"/>
                                    <xsl:text>-</xsl:text>
                                    <xsl:choose>
                                       <xsl:when test="@docidref">
                                          <xsl:value-of select="@docidref"/>
                                       </xsl:when>
                                       <xsl:otherwise>
                                          <xsl:text>MISSINGDOCID</xsl:text>
                                       </xsl:otherwise>
                                    </xsl:choose>
                                 </xsl:when>
                              </xsl:choose>
                           </xsl:attribute>
                        </ref:key-value>
                     </ref:locator-key>
                  </xsl:if>
               </ref:locator>
            </ref:lnlink>
         </doc:related-content-link>
      </doc:related-content-item>
   </xsl:template>
   <!--<xsl:include href="../../modules/nonamespace/Rosetta_remotelink-LxAdv-ref.crossreference.xsl"/>-->   <xd:doc>
      <xd:desc>
         <xd:p>If <xd:i>link</xd:i> only has the attribute <xd:i>@refpt</xd:i>, then the following instructions should be used: <xd:ul>
               <xd:li>
                  <xd:i>link</xd:i> becomes <xd:b>ref:lnlink</xd:b>.</xd:li>
               <xd:li>The content of <xd:i>link</xd:i> becomes <xd:b>ref:marker</xd:b>.</xd:li>
               <xd:li>Create <xd:b>ref:locator</xd:b> and populate the attribute <xd:b>ref:locator/@anchoridref</xd:b> with the
          value of <xd:i>link/@refpt</xd:i>.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>ref:locator/@anchoridref</xd:b> that begins with a number must
        have an underscore added at start. Also apply other identifier data type format as
        used for <xd:b>xml:id</xd:b> and <xd:b>ref:anchor/@id</xd:b>
        (e.g. change colon to underscore). Refer to the section titled "Identifiers to ID Data Type - 
        Handling Pattern Restrictions", if that section exists in this CI.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
        If the link element source also includes a <xd:i>@dpsi</xd:i>, the attribute should be dropped. 
      </xd:p>
         <xd:p>
            <xd:b>Source XML: only attribute of <xd:i>link</xd:i> is <xd:i>refpt</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;link refpt="x98-1174a2"&gt;page 324 line 46&lt;/link&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Target XML: only attribute of <xd:i>link</xd:i> is <xd:i>refpt</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;ref:lnlink&gt;
    &lt;ref:marker&gt;page 324 line 46&lt;/ref:marker&gt;
    &lt;ref:locator anchoridref="x98-1174a2"/&gt;
&lt;/ref:lnlink&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>CA02-CC</xd:b>
            <xd:b>: </xd:b>
            <xd:i>emph</xd:i> will be dropped in
        <xd:i>link/emph</xd:i>. </xd:p>
         <!--Changes2016-11-16: Added to note regarding applying any rules related to 
        @anchoridref, referring specifically to section for "Identifiers to ID Data Type - 
        Handling Pattern Restrictions".2014-11-24: Updated instruction for CA02-CC to drop
            emph in link/emph.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_link_refpt-LxAdv-ref.lnlink-ref.locator_anchoridref.dita  -->
   <!-- Vikas Rohilla : updated the priority attribute because the ambigous math with in the file Rosetta_link-LxAdv-ref.lnlink.xsl at line 177 -->
   <xsl:template match="link[@refpt][not(@type or @smi or @filename)]" priority="2">
      <ref:lnlink>
         <ref:marker>
            <xsl:choose>
               <xsl:when test="$streamID='CA02-CC'">
                  <xsl:value-of select="."/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:apply-templates select="node()"/>
               </xsl:otherwise>
            </xsl:choose>
         </ref:marker>
         <ref:locator>
            <xsl:attribute name="anchoridref">
               <xsl:apply-templates select="@refpt"/>
            </xsl:attribute>
         </ref:locator>
      </ref:lnlink>
   </xsl:template>

   <xsl:template match="link/@refpt">
      <xsl:attribute name="anchoridref">
         <xsl:call-template name="normalizeIdString"/>
      </xsl:attribute>
   </xsl:template>

   <xsl:template match="link/@dpsi"/>
   <!--<xsl:include href="../../modules/nonamespace/Rosetta_bodytext-link-LxAdv-seclaw.bodytext-p-text-ref.lnlink.xsl"/>-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Note: </xd:b>Elements that contain the attribute <xd:i>@ln.user-displayed="false"</xd:i> are used for certain functionality in Rosetta that does not exist in Lexis
        Advance. Each of the following elements have mappings described elsewhere in this CI for when this attribute does not exist. The examples here are ONLY for when
        this <xd:i>@ln.user-displayed="false"</xd:i> appears. (This attribute never has a "true" value, i.e. @ln.user-displayed="true".)</xd:p>
         <xd:p>If <xd:i>edpnum</xd:i> has attribute <xd:i>@ln.user-displayed="false"</xd:i> then map to <xd:b>desig</xd:b> or
        <xd:b>altdesig</xd:b> as usual but no element content carried forward. Only the attribute @value is populated.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;edpnum ln.user-displayed="false"&gt;2343&lt;/edpnum&gt;

</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;desig value="2343"/&gt;

            </xd:pre>
      </xd:desc>
   </xd:doc>
   <!-- CSN: Created pednum when @ln.user-displayed='false' -->
   <xsl:template match="epdnum[@ln.user-displayed='false']">
      <xsl:element name="desig">
         <xsl:attribute name="value">
            <xsl:value-of select="."/>
         </xsl:attribute>
      </xsl:element>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Note: </xd:b>Elements that contain the attribute <xd:i>@ln.user-displayed="false"</xd:i> are used for certain functionality in Rosetta that does not exist in Lexis Advance. Each of the
          following elements have mappings described elsewhere in this CI for when this attribute does not exist. The examples here are ONLY for when this
            <xd:i>@ln.user-displayed="false"</xd:i> appears. (This attribute never has a "true" value, i.e. @ln.user-displayed="true".)</xd:p>
         <xd:p>If <xd:i>heading</xd:i> has attribute <xd:i>@ln.user-displayed="false"</xd:i> the element is suppressed.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;leg:heading ln.user-displayed="false"&gt; &lt;title&gt;Preliminary&lt;/title&gt; &lt;/leg:heading&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;!-- output Suppressed --&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;level id="ASC_ARCHIVE.SGM_MISC.INS_2" leveltype="miscins"&gt; &lt;heading ln.user-displayed="false"&gt; &lt;title&gt;[Instrument]&lt;/title&gt; &lt;/heading&gt; ...
          &lt;/level&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;!-- output Suppressed --&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;leg:heading ln.user-displayed="false"&gt; &lt;title&gt;Preliminary&lt;/title&gt; &lt;/leg:heading&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;!-- output Suppressed --&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;leg:juris ln.userdisplayed="false"&gt;NSW&lt;/leg:juris&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;jurisinfo:legisbodyinfo&gt; &lt;jurisinfo:jurisdiction&gt; &lt;jurisinfo:system&gt;NSW&lt;/jurisinfo:system&gt; &lt;/jurisinfo:jurisdiction&gt; &lt;/jurisinfo:legisbodyinfo&gt;
          &lt;dc:metadata&gt; &lt;dc:coverage&gt; &lt;location:state codescheme="ISO-3166-2" statecode="AU-NS"&gt;NSW&lt;/location:state&gt; &lt;/dc:coverage&gt; &lt;/dc:metadata&gt; </xd:pre>
         <!-- SEP 2015-8-12 added -->
      </xd:desc>
   </xd:doc>
   <xsl:template match="heading[@ln.user-displayed = 'false']" priority="25"/>
   <!-- suppress -->
   <xsl:template match="leg:heading[@ln.user-displayed = 'false']" priority="25"/>
   <!-- suppress -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Note: </xd:b>Elements that contain the attribute <xd:i>@ln.user-displayed="false"</xd:i> are used for certain functionality in Rosetta that does not exist in Lexis
        Advance. Each of the following elements have mappings described elsewhere in this CI for when this attribute does not exist. The examples here are ONLY for when
        this <xd:i>@ln.user-displayed="false"</xd:i> appears. (This attribute never has a "true" value, i.e. @ln.user-displayed="true".)</xd:p>
         <xd:p>When <xd:i>abbrvname</xd:i> has attribute <xd:i>@ln.user-displayed="false"</xd:i> (i.e. <xd:i>abbrvname/@ln.user-displayed="false"</xd:i>),
      that element is translated into the target but with the element content omitted. Only the attributes are populated. So there is no displayable content.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;abbrvname ln.user-displayed="false"&gt;CALabArb&lt;/abbrvname&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;jurisinfo:courtname normshortname="CALabArb"/&gt;

            </xd:pre>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_abbrvname_ln.user-displayed.dita  -->
   <xsl:template match="abbrvname[@ln.user-displayed='false']" priority="25">
      <xsl:apply-templates/>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Note: </xd:b>Elements that contain the attribute <xd:i>@ln.user-displayed="false"</xd:i>
        are used for certain functionality in Rosetta that does not exist in Lexis Advance. Each of
        the following elements have mappings described elsewhere in this CI for when this attribute
        does not exist. The examples here are ONLY for when this
          <xd:i>@ln.user-displayed="false"</xd:i> appears. (This attribute never has a
        "true" value, i.e. @ln.user-displayed="true".)</xd:p>
         <xd:p>When ln.user-displayed="false" appears on any date element (i.e.
          <xd:i>pubinfo:pubdates ln.user-displayed="false"</xd:i>), that element is
        translated into the target but with the element content omitted. Only the attributes are
        populated. So there is no displayable content.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;pubdate ln.user-displayed="false"&gt;
	&lt;date month="12" year="1997"&gt;December 1997&lt;/date&gt;
&lt;/pubdate&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;primlawinfo:dates&gt;
    &lt;pubinfo:pubdate month="12" year="1997"/&gt;
&lt;/pubinfo:pubdates&gt;

            </xd:pre>
         <!--    <xsltinclusion>
      <xsl:stylesheet version="2.0">
        <!-\- BRT: modified the template from CA14 driver file. This template is duplicated in each of the driver files; is should be moved from all of these to a module. Currently only this template (in this DITA topic) has the modification.
        The instruction in this topic applies to "any date element", but only gives an example of pubdate and doesn't say which other dates are relevant. The
        template only addresses pubdate, but should be expanded to include other dates -\->
        <xsl:template match="pubdate">
          <xsl:element name="pubinfo:dates">
            <xsl:element name="pubinfo:pubdate">
              <!-\- BRT: added this condition to handle the rule in this topic (no text in result) -\->
              <xsl:choose>
                <xsl:when test="@ln.user-displayed='false'">
                  <xsl:call-template name="process_date_attributes"/>
                  <xsl:apply-templates select="*[not(self::date)]"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:apply-templates/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:element>
          </xsl:element>
        </xsl:template>
      </xsl:stylesheet>
    </xsltinclusion>
-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_pubdate_ln.user-displayed-to-LxAdv-pubinfo.pubdates_pubinfo.pubdate.dita  -->
   <!--	<xsl:message>Rosetta_pubdate_ln.user-displayed-to-LxAdv-pubinfo.pubdates_pubinfo.pubdate.xsl requires manual development!</xsl:message> -->
   <!-- BRT: modified the template from CA14 driver file. This template is duplicated in each of the driver files; is should be moved from all of these to a module. Currently only this template (in this DITA topic) has the modification.
        The instruction in this topic applies to "any date element", but only gives an example of pubdate and doesn't say which other dates are relevant. The
        template only addresses pubdate, but should be expanded to include other dates -->
   <xsl:template xmlns="http://dita.oasis-open.org/architecture/2005/" match="pubdate">
      <xsl:element name="pubinfo:dates">
         <xsl:element name="pubinfo:pubdate"><!-- BRT: added this condition to handle the rule in this topic (no text in result) -->
            <xsl:choose>
               <xsl:when test="@ln.user-displayed='false'"><!--                  <xsl:call-template name="process_date_attributes"/>-->
                  <xsl:apply-templates select="*[not(self::date)]"/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:apply-templates/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>When <xd:i>lnlink[@service="SEARCH"]</xd:i> occurs it is suppressed. The service type "SEARCH" is not supported in New Lexis. It is recommended that <xd:i>lnlink</xd:i> elements with <xd:i>@service="SEARCH"</xd:i> be copied as is into an XML comment. This retains the content for future analysis without creating unsupported target markup. The risk of this approach is the non-conversion of any marker/display text that is within the <xd:i>lnlink</xd:i> and the consequent lack of this text being displayed in NewLexis products.
    </xd:p>
         <xd:p>
            <xd:b>Source XML showing service type "SEARCH" converted to XML comment.</xd:b>
         </xd:p>
         <xd:pre>

&lt;lnlink scope="All Subscribed Australian Cases and Commentary" scope-protocol="combined-source-name" service="SEARCH" status="valid"&gt;
	&lt;api-params&gt;
		&lt;param name="expressSearch" value="true"/&gt;
		&lt;param name="searchString" value="ELECTRICITY SAFETY ACT 1998 w/s LEG-REF(1)"/&gt;
	&lt;/api-params&gt;
&lt;/lnlink&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>


&lt;!--  lnlink[@service="SEARCH"] source:

&lt;lnlink scope="All Subscribed Australian Cases and Commentary" scope-protocol="combined-source-name" service="SEARCH" status="valid"&gt;
	&lt;api-params&gt;
		&lt;param name="expressSearch" value="true"/&gt;
		&lt;param name="searchString" value="ELECTRICITY SAFETY ACT 1998 w/s LEG-REF(1)"/&gt;
	&lt;/api-params&gt;
&lt;/lnlink&gt;

--&gt;


	</xd:pre>
         <!--Changes2015-09-08: Minor XPATH correction in instruction title and body to change 
        lnlink/@service='SEARCH' to be lnlink[@service='SEARCH'].-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_lnlink_service_SEARCH-LxAdv-SUPPRESS.dita  -->
   <xsl:template match="lnlink[@service='SEARCH']">
      <xsl:comment>
         <xsl:copy-of select="."/>
      </xsl:comment>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>The element <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> becomes
      <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b>, all <xd:i>lnlink</xd:i> attributes are dropped and not copied to the target, and its child elements are
      transformed as follows: <xd:ul>
               <xd:li>The element <xd:i>lnlink/marker</xd:i> becomes
            <xd:b>ref:lnlink/ref:marker</xd:b>, with attribute
            <xd:i>marker/@role</xd:i> becoming <xd:b>ref:marker/@role</xd:b> if
          present.</xd:li>
               <xd:li>Create child <xd:b>ref:lnlink/ref:locator</xd:b> and create its child elements
          as follows:<xd:ul>
                     <xd:li>Create <xd:b>ref:locator-key</xd:b> and its child elements as follows:<xd:ul>
                           <xd:li>Create <xd:b>ref:key-name</xd:b> with attribute
                    <xd:b>@name="attachment-key"</xd:b>.</xd:li>
                           <xd:li>Create <xd:b>ref:key-value</xd:b> with attribute
                    <xd:b>@value</xd:b> set to
                    <xd:i>lnlink/api-params/param[@name="attachment-key"]/@value</xd:i>.</xd:li>
                           <xd:li>If <xd:i>lnlink/api-params/param[@name="dpsi"]/@value</xd:i> is
                  present, create a string consisting of "[[DPSI:", followed by the value of
                    <xd:i>lnlink/api-params/param[@name="dpsi"]/@value</xd:i>, followed by
                  "]]", and prepend this string to <xd:b>ref:key-value/@value</xd:b>. See
                  example #2 below.</xd:li>
                        </xd:ul>
                     </xd:li>
                     <xd:li>Create <xd:b>ref:locator-params</xd:b> and its child elements as follows:<xd:ol>
                           <xd:li>Most <xd:i>api-params/param</xd:i> elements become
                    <xd:b>ref:locator-params/proc:param</xd:b>, with attribute
                    <xd:i>param/@name</xd:i> becoming
                    <xd:b>proc:param/@name</xd:b> and attribute
                    <xd:i>param/@value</xd:i> becoming
                    <xd:b>proc:param/@value</xd:b>. </xd:li>
                           <xd:li>Two exceptions to the previous rule are: <xd:ul>
                                 <xd:li>The element <xd:i>api-params/param[@name="attachment-key"]</xd:i>
                      is used to create <xd:b>ref:key-value</xd:b>, described
                      earlier.</xd:li>
                                 <xd:li>The element <xd:i>api-params/param[@name="attachment-smi"]</xd:i>
                      is dropped and is not used to create a corresponding target
                        <xd:b>ref:locator-params/proc:param</xd:b> element.</xd:li>
                              </xd:ul>
                           </xd:li>
                           <xd:li>Several target <xd:b>ref:locator/proc:param</xd:b> elements are
                  required (also create standardize attribute values), even if their corresponding
                  source <xd:i>api-params/param</xd:i> element is not present: <xd:ul>
                                 <xd:li>Create
                        <xd:b>proc:param[@name="attachment-type"][@value="IMG"]</xd:b>
                      with if <xd:i>param[@name="attachment-type"]/@value</xd:i> is not
                      present or empty.</xd:li>
                                 <xd:li>Create
                        <xd:b>proc:param[@name="external-or-local"][@value="external]</xd:b>
                      if <xd:i>param[@name="external-or-local"]/@value</xd:i> is not
                      present or empty.</xd:li>
                                 <xd:li>Create
                        <xd:b>proc:param[@name="attachment-server"][@value="BlobStore"]</xd:b>
                      if <xd:i>param[@name="attachment-server"]/@value</xd:i> is not
                      present or empty.</xd:li>
                                 <xd:li>Create
                        <xd:b>proc:param[@name="attachment-pguid"][@value=""urn:contentItem:0000-0000-0000-0000-00000-00"]</xd:b>
                      if <xd:i>param[@name="attachment-pguid"]/@value</xd:i> is not
                      present or empty.</xd:li>
                                 <xd:li>Create <xd:b>proc:param[@name="componentseq"][@value="1"]</xd:b>
                      if <xd:i>param[@name="componentseq"]/@value</xd:i> is not present or
                      empty.</xd:li>
                              </xd:ul>
                           </xd:li>
                        </xd:ol>
                     </xd:li>
                  </xd:ul>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Example #1</xd:b>
         </xd:p>
         <xd:p>Note how the <xd:i>&lt;param name="attachment-smi" value="4364"/&gt;</xd:i> is
        dropped, <xd:i>&lt;param name="componentseq" value="3"/&gt;</xd:i> and
          <xd:i>&lt;proc:param name="attachment-type" value="PDF"/&gt;</xd:i> are copied as
        is, and several other <xd:i>proc:param</xd:i> elements are added as described in
        item #3 of the instructions regarding creation of <xd:b>ref:locator-params</xd:b>
        child elements.</xd:p>
         <xd:pre>

&lt;lnlink service="ATTACHMENT" status="valid"&gt;
  &lt;marker role="content"&gt;PDF Format&lt;/marker&gt;
  &lt;api-params&gt;
    &lt;param name="attachment-key" value="application_for_apportionment.pdf"/&gt;
    &lt;param name="attachment-type" value="PDF"/&gt;
    &lt;param name="attachment-smi" value="4364"/&gt;
    &lt;param name="componentseq" value="3"/&gt;
  &lt;/api-params&gt;
&lt;/lnlink&gt;
                
            </xd:pre>
         <xd:pre>

&lt;ref:lnlink service="ATTACHMENT"&gt;
    &lt;ref:marker role="label"&gt;Download in PDF&lt;/ref:marker&gt; 
    &lt;ref:locator&gt;
        &lt;ref:locator-key&gt;
            &lt;ref:key-name name="attachment-key"/&gt;
            &lt;ref:key-value value="application_for_apportionment.pdf"/&gt;
        &lt;/ref:locator-key&gt;
        &lt;ref:locator-params&gt;
          &lt;proc:param name="attachment-type" value="PDF"/&gt;
          &lt;proc:param name="external-or-local" value="external"/&gt;
          &lt;proc:param name="attachment-server" value="BlobStore"/&gt;
          &lt;proc:param name="attachment-pguid" value="urn:contentItem:0000-0000-0000-0000-00000-00"/&gt;
          &lt;proc:param name="componentseq" value="3"/&gt; 
        &lt;/ref:locator-params&gt;
    &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;
                
            </xd:pre>
         <xd:p>
            <xd:b>Example #2: <xd:i>lnlink/api-params/param[@name="dpsi"]/@value</xd:i> is present</xd:b>
         </xd:p>
         <xd:pre>
        
&lt;lnlink service="ATTACHMENT" status="valid"&gt;
  &lt;marker role="content"&gt;Alternate form&lt;/marker&gt;
  &lt;api-params&gt;
    &lt;param name="attachment-key" value="example.gif"/&gt;
    &lt;param name="dpsi" value="O4W2"/&gt;
  &lt;/api-params&gt;
&lt;/lnlink&gt;
                
      </xd:pre>
         <xd:pre>
        
&lt;ref:lnlink service="ATTACHMENT"&gt;
    &lt;ref:marker role="label"&gt;Alternate form&lt;/ref:marker&gt; 
    &lt;ref:locator&gt;
        &lt;ref:locator-key&gt;
            &lt;ref:key-name name="attachment-key"/&gt;
            &lt;ref:key-value value="[[DPSI:O4W2]]example.gif"/&gt;
        &lt;/ref:locator-key&gt;
        &lt;ref:locator-params&gt;
          &lt;proc:param name="dpsi" value="O4W2"/&gt;
          &lt;proc:param name="attachment-type" value="IMG"/&gt;
          &lt;proc:param name="external-or-local" value="external"/&gt;
          &lt;proc:param name="attachment-server" value="BlobStore"/&gt;
          &lt;proc:param name="attachment-pguid" value="urn:contentItem:0000-0000-0000-0000-00000-00"/&gt;
          &lt;proc:param name="componentseq" value="1"/&gt; 
        &lt;/ref:locator-params&gt;
    &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;
                
      </xd:pre>
         <xd:p>
            <xd:b>Example #3: minimal source mark-up</xd:b>
         </xd:p>
         <xd:pre>
        
&lt;lnlink service="ATTACHMENT" status="valid"&gt;
  &lt;marker role="content"&gt;PDF Format&lt;/marker&gt;
  &lt;api-params&gt;
    &lt;param name="attachment-key" value="file_name.pdf"/&gt;
  &lt;/api-params&gt;
&lt;/lnlink&gt;
                
      </xd:pre>
         <xd:pre>
        
&lt;ref:lnlink service="ATTACHMENT"&gt;
    &lt;ref:marker role="label"&gt;Alternate form&lt;/ref:marker&gt; 
    &lt;ref:locator&gt;
        &lt;ref:locator-key&gt;
            &lt;ref:key-name name="attachment-key"/&gt;
            &lt;ref:key-value value="file_name.pdf"/&gt;
        &lt;/ref:locator-key&gt;
        &lt;ref:locator-params&gt;
          &lt;proc:param name="attachment-type" value="IMG"/&gt;
          &lt;proc:param name="external-or-local" value="external"/&gt;
          &lt;proc:param name="attachment-server" value="BlobStore"/&gt;
          &lt;proc:param name="attachment-pguid" value="urn:contentItem:0000-0000-0000-0000-00000-00"/&gt;
          &lt;proc:param name="componentseq" value="1"/&gt; 
        &lt;/ref:locator-params&gt;
    &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;
                
      </xd:pre>
         <!--Changes2016-05-21: Updated the Blobstore related instruction for use standardize specific output parameters.2016-05-20: Created this instruction to specify Blobstore
          specific output parameters.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_lnlink_service_ATTACHMENT-LxAdv-ref.lnlink_BLOBSTORE.dita  -->
   <!--   Image handling background note 2017-11-30:

Please use $streamID in Rosetta_link-LxAdv-ref.lnlink.xsl due to notation below.  

It was originally intended that Apollo jurisdictions would use these (when first introduced in the DITA):

\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_lnlink_service_ATTACHMENT-LxAdv-ref.lnlink.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_link-LxAdv-ref.lnlink.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_inlineobject-LxAdv-ref.inlineobject.xsl

And blobstore jurisdictions would use these (notice BLOBSTORE in the file name):

\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_lnlink_service_ATTACHMENT-LxAdv-ref.lnlink_BLOBSTORE.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_link-LxAdv-ref.lnlink_BLOBSTORE.xsl
\svn\dataArch\XSLT\ContentArch\Rosetta-to-LA\modules\nonamespace\Rosetta_inlineobject-LxAdv-ref.inlineobject_BLOBSTORE.xsl

They were originally meant to be mutually exclusive.

Ditamap includes (and subsequently xsl drivers) may have included both blobstore and Apollo handling during the transition from one to the other even though only one image handling 
is done in an LBU.  Image handling is LBU wide and not individual stream specific.

Very importantly, there is a named template (@name="generic-link") in Rosetta_link-LxAdv-ref.lnlink.xsl which is called by both “Rosetta_p-LxAdv-p.xsl” and “Rosetta_bodytext-link-LxAdv-seclaw.bodytext-p-text-ref.lnlink.xsl”.   Both of these common modules are not LBU specific.  . 
This effectively, although unintentionally, crossed the original exclusivity described above.

Current fix is to use $streamID indicating HK and UK which are currently the only blobstore jurisdictions.  Ultimately, goal is to re-establish these image handling files are mutually exclusive.
-->
   <!-- Awantika: Adding priorities to template lnlink/marker, lnlink/marker/@role, param/@name, param/@value 
  as they are also present in ../modules/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.xsl therefore creating ambiguities.-->
   <xsl:template match="lnlink[@service='ATTACHMENT']"><!--  Original Target XPath:  ref:lnlink[@service="ATTACHMENT"]   -->
      <ref:lnlink><!-- Awantika: Added attributes to ref:lnlink. -->
         <xsl:attribute name="service">
            <xsl:value-of select="@service"/>
         </xsl:attribute>
         <xsl:if test="@status and not($streamID='UK12')">
            <xsl:attribute name="status">
               <xsl:value-of select="@status"/>
            </xsl:attribute>
         </xsl:if>
         <!-- Awantika: Applying marker template instead of applying all templates -->
         <xsl:apply-templates select="marker"/>
         <!--<xsl:apply-templates/>-->
         <ref:locator>
            <ref:locator-key>
               <ref:key-name name="attachment-key"/>
               <ref:key-value>
                  <xsl:attribute name="value">
                     <xsl:value-of select="if(api-params/param[@name='dpsi']/@value) then concat('[[DPSI:' , api-params/param[@name='dpsi']/@value, ']]') else()"/>
                     <xsl:value-of select="api-params/param[@name='attachment-key']/@value"/>
                  </xsl:attribute>
               </ref:key-value>
            </ref:locator-key>
            <ref:locator-params><!-- Awantika: applying template api-params instead of api-params/param -->
               <xsl:apply-templates select="api-params"/>
               <!--<xsl:apply-templates select="api-params/param" mode="blobstore"/>-->
            </ref:locator-params>
         </ref:locator>
      </ref:lnlink>
   </xsl:template>
   <!-- Awantika: changed template match from lnlink/marker to marker -->
   <xsl:template match="marker" priority="25">
      <ref:marker>
         <xsl:apply-templates select="@* | node()"/>
      </ref:marker>
   </xsl:template>
   <!-- Awantika: changed template match from lnlink/marker/@role to marker/@role -->
   <xsl:template match="marker/@role" priority="25">
      <xsl:copy-of select="."/>
   </xsl:template>
   <!--<xsl:template match="lnlink/marker" priority="25">
    <ref:marker>
      <xsl:apply-templates select="@* | node()"/>
    </ref:marker>
  </xsl:template>
  
  <xsl:template match="lnlink/marker/@role" priority="25">
    <xsl:copy-of select="."/>
  </xsl:template>-->   <!-- WPK: for these streams 'UK08OR','UK09','UK12','UK14','UK15','UK15_DS'
    use doc-heading for the ref:marker for alternate renditions.  VSTS bug 372544.
    Documented in /modules/nonamespace/Rosetta_docinfo.doc-heading-LxAdv-alt.rendition-ref.marker.xsl
    Initial testing for UK15DS to get conversion out by priority.
    <xsl:template match="/*[1]/docinfo[1]/docinfo:alt-renditions[1]/docinfo:alt-rendition/lnlink[@service = 'ATTACHMENT']/marker
    [$streamID = ('UK08OR','UK09','UK12','UK14','UK15','UK15_DS')]"
  -->
   <xsl:template match="/*[1]/docinfo[1]/docinfo:alt-renditions[1]/docinfo:alt-rendition/lnlink[@service = 'ATTACHMENT']/marker     [$streamID = ('UK15_DS')]"
                 priority="26">
      <ref:marker>
         <xsl:apply-templates select="@*"/>
         <xsl:value-of select="/*[1]/docinfo[1]/docinfo:doc-heading[1]"/>
      </ref:marker>
   </xsl:template>

   <xsl:template match="api-params[parent::lnlink[@service='ATTACHMENT']]"><!-- Awantika: Removed ref:locator-params as it is already created in ref:locator --><!-- <ref:locator-params> -->
      <xsl:apply-templates select="param" mode="blobstore"/>
      <xsl:if test="not(param[@name='attachment-type'][@value!=''])">
         <proc:param name="attachment-type" value="IMG"/>
      </xsl:if>
      <xsl:if test="not(param[@name='external-or-local'][@value!=''])">
         <proc:param name="external-or-local" value="external"/>
      </xsl:if>
      <xsl:if test="not(param[@name='attachment-server'][@value!=''])">
         <proc:param name="attachment-server" value="BlobStore"/>
      </xsl:if>
      <xsl:if test="not(param[@name='attachment-pguid'][@value!=''])">
         <proc:param name="attachment-pguid"
                     value="urn:contentItem:0000-0000-0000-0000-00000-00"/>
      </xsl:if>
      <xsl:if test="not(param[@name='componentseq'][@value!=''])">
         <proc:param name="componentseq" value="1"/>
      </xsl:if>
      <!--</ref:locator-params>-->
   </xsl:template>

   <xsl:template match="api-params/param[not(@name=('attachment-key' , 'attachment-smi'))]"
                 mode="blobstore">
      <proc:param>
         <xsl:apply-templates select="@* | node()"/>
      </proc:param>
   </xsl:template>

   <xsl:template match="param/@name" priority="25">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="param/@value" priority="25">
      <xsl:copy-of select="."/>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>marker</xd:i> becomes <xd:b>ref:marker</xd:b>.</xd:p>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_marker-LxAdv-ref.marker.dita  -->
   <xsl:template match="marker">
      <ref:marker>
         <xsl:apply-templates select="@* | node()"/>
      </ref:marker>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>marker</xd:i> is suppressed if it contains <xd:i>inlineobject</xd:i> as a child element.
            </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;lnlink status="valid" service="SEARCH" scope="All Subscribed Australian Cases and Commentary" scope-protocol="combined-source-name"&gt;
    &lt;marker&gt;
        &lt;inlineobject width="21px" type="image" filename="mb.gif" attachment="web-server" alttext="click to find cases &amp;amp; commentary"/&gt;
    &lt;/marker&gt;
    &lt;api-params&gt;
        &lt;param name="expressSearch" value="true"/&gt;
        &lt;param name="searchString" value="SUPREME COURT RULES 1970"/&gt;
    &lt;/api-params&gt;
&lt;/lnlink&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Suppress <xd:i>marker</xd:i>. A corresponding product requirement should be created with an instruction to instantiate the image on retrieval based on information/semantic markup in the document.</xd:b>
         </xd:p>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_marker_inlineobject-LxAdv-SUPPRESS.dita  -->
   <!-- JL WE NEED TO RESOLVE THIS INLINEOBJECT ISSUE !!!!! -->
   <xsl:template match="marker[inlineobject]" priority="25"/>
   <!--JL This is what I envision in the future:
        
 <xsl:template match="marker[inlineobject]" priority="25">
        <xsl:apply-templates select="inlineobject" mode="to-be-determined"/>
    </xsl:template> -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>nl</xd:i> becomes <xd:b>proc:nl</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:i>nl</xd:i> comes with <xd:i>@n</xd:i> then
          <xd:i>@n</xd:i> will be suppressed in NL conversion.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>MLV: NSW Law reports - preserve spacing and linebreaks for licensing.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;tbody&gt;
    &lt;row&gt;
        &lt;entry colname="c1" align="left"&gt;On the day after this Regulation's notification
            day.&lt;nl/&gt;(4/11/2008)&lt;/entry&gt;
    &lt;/row&gt;
&lt;/tbody&gt;
    	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;tbody&gt;
    &lt;row&gt;
        &lt;entry colname="c1" align="left"&gt;On the day after this Regulation's notification
            day.&lt;proc:nl/&gt;(4/11/2008)&lt;/entry&gt;
    &lt;/row&gt;
&lt;/tbody&gt;

    	</xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;p&gt;
    &lt;text&gt;
        &lt;nl n="2"/&gt;
    &lt;/text&gt;
&lt;/p&gt;
      </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;p&gt;
    &lt;text&gt;
        &lt;proc:nl/&gt;
    &lt;/text&gt;
&lt;/p&gt;
</xd:pre>
         <!--Changes2013-03-14: Add instruction and example
            nl/@n.-->
      </xd:desc>
   </xd:doc>
   <!-- Awantika:2017-11-30- CI has differnt rule for CA02CC,DC and DS."Any nl elements that occur inside case:casename should be suppressed if they are preceded or followed by a space. Any nl elements that
are not preceded or followed by a space should be converted into a single space character. Webstar# 6994049" -->
   <xsl:template match="nl">
      <xsl:choose><!-- Awantika: Commenting this for CA02CC.Webstar  6994049. CI doesn't say to create proc:nl
                "Any nl elements that occur inside case:casename should be suppressed if they are preceded or followed by a space. Any nl elements that
are not preceded or followed by a space should be converted into a single space character."
                -->
         <xsl:when test="$streamID='CA02CC' and parent::case:casename">
            <xsl:apply-templates/>
         </xsl:when>
         <xsl:when test="$streamID='AU21'">
            <xsl:choose>
               <xsl:when test="parent::text/parent::p/parent::source_dict:subtopic/@id[starts-with(.,'BOOK:')]"/>
               <xsl:otherwise>
                  <xsl:element name="proc:nl">
                     <xsl:apply-templates/>
                  </xsl:element>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <xsl:otherwise>
            <xsl:element name="proc:nl">
               <xsl:apply-templates/>
            </xsl:element>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="nl/@n"><!-- suppress --></xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>If <xd:i>nl</xd:i> encounter in <xd:i>lilabel</xd:i>, then <xd:i>nl</xd:i> will suppress in NL conversion.
            <xd:p>
               <xd:b>Note: </xd:b>
               <xd:i>lilabel/nl</xd:i> is Data error.</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Source XML </xd:b>
         </xd:p>
         <xd:pre>

&lt;li&gt;
 &lt;lilabel&gt;&lt;nl/&gt;&amp;#x2002;&lt;nl/&gt;8&lt;/lilabel&gt;
 &lt;p&gt;
  &lt;text&gt;&lt;emph typestyle="bf"&gt;Trustees&amp;#x2019; liability&lt;/emph&gt;&lt;/text&gt;
  &lt;text&gt;The Trustees shall not be liable for (and shall be indemnified out of the Trust Fund for) any loss or liability which they may incur by reason of the exercise, manner of exercise or non-exercise of any of the powers, authorities or discretions conferred on them by this deed or by law. &amp;#x2002; &lt;/text&gt;
 &lt;/p&gt;
&lt;/li&gt;
            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;listitem&gt;
 &lt;label&gt;8&lt;/label&gt;
 &lt;bodytext&gt;
  &lt;p&gt;
   &lt;text&gt;&lt;emph typestyle="bf"&gt;Trustees&amp;#x2019; liability&lt;/emph&gt;&lt;/text&gt;
   &lt;text&gt;The Trustees shall not be liable for &amp;#x0028;and shall be indemnified out of the Trust Fund for&amp;#x0029; any loss or liability which they may incur by reason of the exercise, manner of exercise or non-exercise of any of the powers, authorities or discretions conferred on them by this deed or by law. &amp;#x2002;&lt;/text&gt;
  &lt;/p&gt;
 &lt;/bodytext&gt;
&lt;/listitem&gt;
            </xd:pre>
         <!--Changes2012-09-27: Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_nl-Chof-lilabel-LxAdv-Suppress.dita  -->
   <xsl:template match="lilabel/nl"/>
   <xd:doc>
      <xd:desc>
         <xd:p>If <xd:i>nl</xd:i> encounter in <xd:i>ci:content</xd:i>, then <xd:i>nl</xd:i> will be replaced with a single space character in NL conversion.<xd:p>
               <xd:b>Note: </xd:b>We should replace <xd:i>nl</xd:i> within a citation with a single space character.  We shouldn’t be styling citations like this.</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Source XML </xd:b>
         </xd:p>
         <xd:pre>

&lt;case:reportercite&gt;
    &lt;ci:cite type="cite4thisdoc"&gt;
        &lt;ci:case&gt;
            &lt;ci:caseref ID="cref00000001" spanref="cspan00000001"&gt;
                &lt;ci:reporter value="CLLC"/&gt;
                &lt;ci:volume num="55"/&gt;
                &lt;ci:refnum num="18001"/&gt;
            &lt;/ci:caseref&gt;
        &lt;/ci:case&gt;
        &lt;ci:content&gt;CITATION: &lt;ci:span spanid="cspan00000001"&gt;55 CLLC
            18,001&lt;/ci:span&gt;&lt;nl/&gt;BOARD FILE NUMBER: LR-2270-H-01&lt;/ci:content&gt;
    &lt;/ci:cite&gt;
&lt;/case:reportercite&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;ref:citations&gt;
    &lt;ref:cite4thisresource citetype="reporter"&gt;
        &lt;lnci:cite&gt;
            &lt;lnci:case&gt;
                &lt;lnci:caseref ID="cref00000001"&gt;
                    &lt;lnci:reporter value="CLLC"/&gt;
                    &lt;lnci:volume num="55"/&gt;
                    &lt;lnci:refnum num="18001"/&gt;
                &lt;/lnci:caseref&gt;
            &lt;/lnci:case&gt;
            &lt;lnci:content&gt;CITATION: 55 CLLC 18,001 BOARD FILE NUMBER: LR-2270-H-01&lt;/lnci:content&gt;
        &lt;/lnci:cite&gt;
    &lt;/ref:cite4thisresource&gt;
&lt;/ref:citations&gt;

            </xd:pre>
         <!--Changes2012-12-24: Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_nl-Chof-ci.content-LxAdv-SingleSpaceCharacter.dita  -->
   <xsl:template match="nl[parent::ci:content]" priority="10">
      <xsl:value-of select="' '"/>
      <!-- output like this to resist pretty-printing removing the space -->
   </xsl:template>
   <!--<xsl:include href="../../modules/nonamespace/Rosetta_note-LxAdv-note.xsl"/>-->   <!--			<xsl:include href="../../modules/nonamespace/Rosetta_note-Chof-text-LxAdv-inlinenote.xsl"/>		-->   <!--			<xsl:include href="../../modules/nonamespace/Rosetta_note-Chof-entry-LxAdv-inlinenote.xsl"/>		-->   <!--			<xsl:include href="../../modules/nonamespace/Rosetta_note-Chof-ci.content-LxAdv-inlinenote.xsl"/>		-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>num</xd:i> becomes <xd:b>num</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;h align="left"&gt;
&lt;num&gt;103&lt;/num&gt;
&lt;emph typestyle="bf"&gt;Introduction&lt;/emph&gt;
&lt;/h&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;h align="left"&gt;
&lt;num&gt;103&lt;/num&gt;
&lt;emph typestyle="bf"&gt;Introduction&lt;/emph&gt;
&lt;/h&gt;

	</xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!-- PS: templated created for num conversion -->
   <xsl:template match="num">
      <num>
         <xsl:apply-templates select="node()"/>
      </num>
   </xsl:template>
   <!-- Awnatika:2017-11-20- Webstar# 7043263- Suppressed @searchtype. -->
   <xsl:template match="num/@searchtype"/>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>frac</xd:i> becomes <xd:b>frac</xd:b>. The output
          <xd:b>frac</xd:b> must be within a <xd:b>num</xd:b> or
          <xd:b>formula</xd:b> ancestor element (one of these does not have to be an
        immediate parent, just an ancestor). If the output <xd:b>frac</xd:b> does not have
        such an ancestor, then a parent <xd:b>num</xd:b> element must be created to
        contain the <xd:b>frac</xd:b>.</xd:p>
         <xd:p>Within <xd:i>frac</xd:i> the child <xd:i>numer</xd:i> becomes <xd:b>numer</xd:b> 
      	and the child <xd:i>denom</xd:i> becomes <xd:b>denom</xd:b>. Both <xd:b>numer</xd:b> 
      	and <xd:b>denom</xd:b> are required children of <xd:b>frac</xd:b>.
        </xd:p>
         <xd:p>
            <xd:b>Source XML where <xd:i>num</xd:i> occurs as parent of <xd:i>frac</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;&lt;text&gt;...&lt;num&gt;
&lt;frac&gt;
	&lt;numer&gt;2&lt;/numer&gt;
	&lt;denom&gt;5&lt;/denom&gt;
&lt;/frac&gt;
&lt;/num&gt;...&lt;/text&gt;&lt;/p&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;&lt;text&gt;...&lt;num&gt;
&lt;frac&gt;
	&lt;numer&gt;2&lt;/numer&gt;
	&lt;denom&gt;5&lt;/denom&gt;
&lt;/frac&gt;
&lt;/num&gt;...&lt;/text&gt;&lt;/p&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML where <xd:i>frac</xd:i> occurs outside of <xd:i>num</xd:i> (has no ancestor that is <xd:i>num</xd:i>)</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;&lt;text&gt;Given the ratio
&lt;frac&gt;
	&lt;numer&gt;3&lt;/numer&gt;
	&lt;denom&gt;7&lt;/denom&gt;
&lt;/frac&gt; then the ...&lt;/text&gt;&lt;/p&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;&lt;text&gt;Given the ratio 
&lt;num&gt;
&lt;frac&gt;
	&lt;numer&gt;3&lt;/numer&gt;
	&lt;denom&gt;7&lt;/denom&gt;
&lt;/frac&gt;
&lt;/num&gt; then the ...&lt;/text&gt;&lt;/p&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML where <xd:i>emph</xd:i> occurs as parent of <xd:i>frac</xd:i> and the <xd:i>frac</xd:i> itself contains a nested <xd:i>frac</xd:i>.</xd:b>
         </xd:p>
         <xd:pre>

&lt;title&gt;...&lt;emph&gt;
&lt;!-- This is the outer &lt;frac&gt;. --&gt;
&lt;frac&gt;
 &lt;numer&gt;
    &lt;!-- This is a nested &lt;frac&gt;. --&gt;
   &lt;frac&gt;
     &lt;numer&gt;3&lt;/numer&gt;
     &lt;denom&gt;8&lt;/denom&gt;
   &lt;/frac&gt;
 &lt;/numer&gt;
 &lt;denom&gt;7&lt;/denom&gt;
&lt;/frac&gt;
&lt;/emph&gt;...&lt;/title&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;emph&gt;
&lt;!-- 
      This &lt;num&gt; is created to contain the outer &lt;frac&gt;, 
      since otherwise this &lt;frac&gt; would have no ancestor that is &lt;num&gt;.
--&gt;
&lt;num&gt;
&lt;frac&gt;
 &lt;numer&gt;
    &lt;!-- 
          Note the nested &lt;frac&gt; is not wrapped in another &lt;num&gt;, 
          since it already has an ancestor that is &lt;num&gt;. 
    --&gt;
   &lt;frac&gt;
     &lt;numer&gt;3&lt;/numer&gt;
     &lt;denom&gt;8&lt;/denom&gt;
   &lt;/frac&gt;
 &lt;/numer&gt;
 &lt;denom&gt;7&lt;/denom&gt;
&lt;/frac&gt;
&lt;/num&gt;
&lt;/emph&gt;

	</xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!-- 2017-10-04 - MDS: added 'or parent:fracor' to match modified monolith. -->
   <!-- 2017-10-06 - JL: added 'or parent:frac' to match modified monolith for HK01. -->
   <xsl:template match="frac[parent::num or ancestor::formula or ancestor::dispformula or parent::fracor or parent::frac]"><!--  Original Target XPath:  num/frac   -->
      <frac>
         <xsl:apply-templates select="@* | node()"/>
      </frac>
   </xsl:template>

   <xsl:template match="frac[not(parent::num or ancestor::formula or ancestor::dispformula or parent::frac)]"><!--  Original Target XPath:  num/frac   -->
      <num>
         <frac>
            <xsl:apply-templates select="@* | node()"/>
         </frac>
      </num>
   </xsl:template>

   <xsl:template match="numer"><!--  Original Target XPath:  numer   -->
      <numer>
         <xsl:apply-templates select="@* | node()"/>
      </numer>
   </xsl:template>

   <xsl:template match="denom"><!--  Original Target XPath:  denom   -->
      <denom>
         <xsl:apply-templates select="@* | node()"/>
      </denom>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>org</xd:i> becomes <xd:b>entity:org</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
 &lt;text&gt;
  &lt;org&gt;Judges Chambers&lt;/org&gt;
 &lt;/text&gt;
&lt;/p&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
 &lt;text&gt;
  &lt;entity:org&gt;Judges Chambers&lt;/entity:org&gt;
 &lt;/text&gt;
&lt;/p&gt;

	</xd:pre>
         <!--Changes2013-03-14: Created.-->
         <!--  <xsltinclusion>
      <xsl:stylesheet version="2.0">
        <!-\- BRT: the following template is in entity.xsl, match="org" in xsl:otherwise choice. I did not split this out in entity.xsl - left 'as is' -\->
        <xsl:template match="org">
          <xsl:element name="entity:org">
              <xsl:apply-templates/>
          </xsl:element>
        </xsl:template>
      </xsl:stylesheet>
    </xsltinclusion>-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_org-to-LexisAdvance_entity_org.dita  -->
   <!-- BRT: the following template is in entity.xsl, match="org" in xsl:otherwise choice. I did not split this out in entity.xsl - left 'as is' -->
   <xsl:template match="org">
      <xsl:element name="entity:org">
         <xsl:apply-templates/>
      </xsl:element>
   </xsl:template>
   <!-- Vikas Rohilla : Template to match the org -->
   <xsl:template match="org[child::remotelink][parent::contrib[parent::comm:info]]">
      <xsl:apply-templates select="@*|node()"/>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>Except where otherwise noted, <xd:i>p</xd:i> becomes
                        <xd:b>p</xd:b> comes with <xd:i>@indent</xd:i> becomes
                        <xd:b>@indent</xd:b>. <xd:b>@indent</xd:b> has tokenized
                    value in NewLexis schema. And <xd:i>p/@style</xd:i> becomes
                        <xd:b>p/@align</xd:b>. <xd:b>@align</xd:b> has tokenized
                    value in NewLexis Schema. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;blockquote&gt; &lt;p indent="hang"&gt; &lt;text&gt;Note: There is no
                    penalty for this Rule.&lt;/text&gt;&lt;/p&gt; &lt;/blockquote&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;blockquote&gt; &lt;p indent="hang"&gt; &lt;text&gt;Note: There is no
                    penalty for this Rule.&lt;/text&gt; &lt;/p&gt; &lt;/blockquote&gt; </xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>If <xd:i>p</xd:i> comes with <xd:i>@i</xd:i> then
                        <xd:i>@i</xd:i> will get dropped in NewLexis.</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;blockquote&gt; &lt;p i="3.5" indent="hang"&gt; &lt;text&gt;Note:
                    There is no penalty for this Rule.&lt;/text&gt;&lt;/p&gt; &lt;/blockquote&gt;
                </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;blockquote&gt; &lt;p indent="hang"&gt; &lt;text&gt;Note: There is no
                    penalty for this Rule.&lt;/text&gt; &lt;/p&gt; &lt;/blockquote&gt; </xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>If <xd:i>p</xd:i> comes with <xd:i>@nl</xd:i> this means the
                        <xd:b>p</xd:b> should start with the same number of
                        <xd:b>proc:nl</xd:b> elements before any text content in order to
                    maintain vertical white space.</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;p nl="1"&gt; &lt;text&gt; &lt;emph typestyle="bf"&gt;EDITORIAL
                    NOTE&lt;/emph&gt; ... &lt;/text&gt; &lt;/p&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;text&gt; &lt;proc:nl/&gt; &lt;emph
                    typestyle="bf"&gt;EDITORIAL NOTE&lt;/emph&gt; ... &lt;/text&gt; &lt;/p&gt;
                </xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>If <xd:i>p</xd:i> comes with <xd:i>@nl=”0”</xd:i>, this means
                the first <xd:i>&lt;nl/&gt;</xd:i> encountered within the
                    <xd:i>&lt;p&gt;</xd:i> should be omitted.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;p nl="0"&gt; &lt;text&gt; &lt;nl/&gt; &lt;ci:cite
                    searchtype="LEG-REF"&gt; &lt;ci:content&gt;Companies Code (NSW)
                    s129&lt;/ci:content&gt; &lt;/ci:cite&gt; &lt;/text&gt; &lt;/p&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;text&gt; &lt;lnci:cite&gt; &lt;lnci:content&gt;Companies
                    Code (NSW) s129&lt;/lnci:content&gt; &lt;/lnci:cite&gt; &lt;/text&gt; &lt;/p&gt;
                </xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;p style="right"&gt; &lt;text&gt;&lt;emph typestyle="it"&gt;Last
                    updated: June 2011&lt;/emph&gt;&lt;/text&gt; &lt;/p&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;p align="right"&gt; &lt;text&gt;&lt;emph typestyle="it"&gt;Last
                    updated: June 2011&lt;/emph&gt;&lt;/text&gt; &lt;/p&gt; </xd:pre>
         <xd:p>
            <xd:b>Exceptional scenario for NZ07-Linxplus</xd:b>
         </xd:p>
         <xd:p>If <xd:i>p</xd:i> or <xd:i>p/@nl="0"</xd:i> is a child of
                        <xd:i>references</xd:i> element then merge all
                        <xd:i>p</xd:i> or <xd:i>p/@nl="0"</xd:i> in a single
                        <xd:b>p</xd:b> in target. Also all occurences of
                        <xd:i>nl</xd:i> within <xd:i>text</xd:i> becomes
                        <xd:b>proc:nl</xd:b>. Refer below example.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;references referencetype="statutes"&gt; &lt;p&gt; &lt;text&gt;
                    &lt;process-ignore process="kwd"&gt; &lt;emph typestyle="bf"&gt;References to
                    Legislation&lt;/emph&gt; &lt;/process-ignore&gt; &lt;/text&gt; &lt;/p&gt; &lt;p
                    nl="0"&gt; &lt;text&gt;&lt;ci:cite
                    searchtype="LEG-REF"&gt;&lt;ci:content&gt;&lt;citefragment
                    searchtype="LEG-NAME-REF"&gt;&lt;remotelink service="DOC-ID" dpsi="0069"
                    remotekey1="REFPTID" refpt="2000A38"&gt;Bail Act
                    2000&lt;/remotelink&gt;&lt;/citefragment&gt;&lt;/ci:content&gt;&lt;/ci:cite&gt;
                    &lt;ci:cite searchtype="LEG-REF"&gt;&lt;ci:content&gt;&lt;citefragment
                    searchtype="LEG-PROV-REF"&gt;&lt;remotelink service="DOC-ID" dpsi="0069"
                    remotekey1="REFPTID"
                    refpt="2000A38S8"&gt;s8&lt;/remotelink&gt;&lt;/citefragment&gt;&lt;/ci:content&gt;&lt;/ci:cite&gt;,
                    &lt;ci:cite searchtype="LEG-REF"&gt;&lt;ci:content&gt;&lt;citefragment
                    searchtype="LEG-PROV-REF"&gt;&lt;remotelink service="DOC-ID" dpsi="0069"
                    remotekey1="REFPTID" refpt="2000A38S13"
                    &gt;s13&lt;/remotelink&gt;&lt;/citefragment&gt;&lt;/ci:content&gt;&lt;/ci:cite&gt;&lt;/text&gt;
                    &lt;/p&gt; &lt;p nl="0"&gt; &lt;text&gt; &lt;nl/&gt; &lt;ci:cite
                    searchtype="LEG-REF"&gt; &lt;ci:content&gt; &lt;citefragment
                    searchtype="LEG-NAME-REF"&gt; &lt;remotelink service="DOC-ID" dpsi="0069"
                    remotekey1="REFPTID" refpt="1975A116"&gt;Misuse of Drugs Act
                    1975&lt;/remotelink&gt; &lt;/citefragment&gt; &lt;/ci:content&gt;
                    &lt;/ci:cite&gt; &lt;/text&gt; &lt;/p&gt; &lt;p nl="0"&gt; &lt;text&gt;
                    &lt;nl/&gt; &lt;ci:cite searchtype="LEG-REF"&gt; &lt;ci:content&gt;
                    &lt;citefragment searchtype="LEG-NAME-REF"&gt; &lt;remotelink service="DOC-ID"
                    dpsi="0069" remotekey1="REFPTID" refpt="2002A9"&gt;Sentencing Act
                    2002&lt;/remotelink&gt; &lt;/citefragment&gt; &lt;/ci:content&gt;
                    &lt;/ci:cite&gt; &lt;ci:cite searchtype="LEG-REF"&gt; &lt;ci:content&gt;
                    &lt;citefragment searchtype="LEG-PROV-REF"&gt; &lt;remotelink service="DOC-ID"
                    dpsi="0069" remotekey1="REFPTID" refpt="2002A9S65"&gt;s65&lt;/remotelink&gt;
                    &lt;/citefragment&gt; &lt;/ci:content&gt; &lt;/ci:cite&gt; &lt;/text&gt;
                    &lt;/p&gt; &lt;/references&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;ref:relatedrefs referencetype="statutes"&gt; &lt;bodytext&gt;
                    &lt;p&gt; &lt;text&gt; &lt;emph typestyle="bf"&gt;References to
                    Legislation&lt;/emph&gt; &lt;/text&gt; &lt;text&gt; &lt;lnci:cite
                    type="legislation"&gt; &lt;lnci:content&gt; &lt;ref:crossreference
                    crossreferencetype="seeAlso"&gt; &lt;ref:content&gt;Bail Act
                    2000&lt;/ref:content&gt; &lt;ref:locator&gt; &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="DOC-ID"/&gt; &lt;ref:key-value value="0069-2000A38"/&gt;
                    &lt;/ref:locator-key&gt; &lt;/ref:locator&gt; &lt;/ref:crossreference&gt;
                    &lt;/lnci:content&gt; &lt;/lnci:cite&gt; &lt;lnci:cite type="legislation"&gt;
                    &lt;lnci:content&gt; &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
                    &lt;ref:content&gt;s8&lt;/ref:content&gt; &lt;ref:locator&gt;
                    &lt;ref:locator-key&gt; &lt;ref:key-name name="DOC-ID"/&gt; &lt;ref:key-value
                    value="0069-2000A38S8"/&gt; &lt;/ref:locator-key&gt; &lt;/ref:locator&gt;
                    &lt;/ref:crossreference&gt; &lt;/lnci:content&gt; &lt;/lnci:cite&gt;,
                    &lt;lnci:cite type="legislation"&gt;&lt;lnci:content&gt; &lt;ref:crossreference
                    crossreferencetype="seeAlso"&gt; &lt;ref:content&gt;s13&lt;/ref:content&gt;
                    &lt;ref:locator&gt; &lt;ref:locator-key&gt; &lt;ref:key-name name="DOC-ID"/&gt;
                    &lt;ref:key-value value="0069-2000A38S13"/&gt; &lt;/ref:locator-key&gt;
                    &lt;/ref:locator&gt; &lt;/ref:crossreference&gt; &lt;/lnci:content&gt;
                    &lt;/lnci:cite&gt; &lt;proc:nl/&gt; &lt;lnci:cite type="legislation"&gt;
                    &lt;lnci:content&gt; &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
                    &lt;ref:content&gt;Misuse of Drugs Act 1975&lt;/ref:content&gt;
                    &lt;ref:locator&gt; &lt;ref:locator-key&gt; &lt;ref:key-name name="DOC-ID"/&gt;
                    &lt;ref:key-value value="0069-1975A116"/&gt; &lt;/ref:locator-key&gt;
                    &lt;/ref:locator&gt; &lt;/ref:crossreference&gt; &lt;/lnci:content&gt;
                    &lt;/lnci:cite&gt; &lt;proc:nl/&gt; &lt;lnci:cite type="legislation"&gt;
                    &lt;lnci:content&gt; &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
                    &lt;ref:content&gt;Sentencing Act 2002&lt;/ref:content&gt; &lt;ref:locator&gt;
                    &lt;ref:locator-key&gt; &lt;ref:key-name name="DOC-ID"/&gt; &lt;ref:key-value
                    value="0069-2002A9"/&gt; &lt;/ref:locator-key&gt; &lt;/ref:locator&gt;
                    &lt;/ref:crossreference&gt; &lt;/lnci:content&gt; &lt;/lnci:cite&gt;
                    &lt;lnci:cite type="legislation"&gt; &lt;lnci:content&gt; &lt;ref:crossreference
                    crossreferencetype="seeAlso"&gt; &lt;ref:content&gt;s65&lt;/ref:content&gt;
                    &lt;ref:locator&gt; &lt;ref:locator-key&gt; &lt;ref:key-name name="DOC-ID"/&gt;
                    &lt;ref:key-value value="0069-2002A9S65"/&gt; &lt;/ref:locator-key&gt;
                    &lt;/ref:locator&gt; &lt;/ref:crossreference&gt; &lt;/lnci:content&gt;
                    &lt;/lnci:cite&gt; &lt;/text&gt; &lt;/p&gt; &lt;/bodytext&gt;
                    &lt;/ref:relatedrefs&gt; </xd:pre>
         <xd:p>
            <xd:p>
               <xd:b>Note: </xd:b>If source document is having the input scenario
                            "<xd:i>pgrp/p/leg:histnote</xd:i>" then conversion needs to
                        drop '<xd:i>p</xd:i>' markup in target conversion and target
                        mapping xpath is
                        "<xd:b>pgrp/note[@notetype="historical"]</xd:b>".</xd:p>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>For Stream 'HK06'</xd:p>
         <xd:p> When the source has <xd:i>deflist/defitem/p/text</xd:i> then omit
                        <xd:i>p/text</xd:i> and retain <xd:i>defitem</xd:i>.
                </xd:p>
         <!--Changes2014-03-14: Removed Colons from Labels.. DB item
                        #12552012-10-05: Removed @i from the example.2013-03-14: Add instruction and example
                            p/@style.2013-10-09: Added instruction and example
                            p comes with
                    @nl=”0”.2013-10-25: Added instruction and example
                            p/@nl="0" comes in
                            references.2013-11-21: Updated instruction and example
                            p or p/@nl="0" comes in
                            references, this change directly affects
                        NZ07.2013-12-04: Updated target example when
                            p or p/@nl="0" comes in
                            references, this change directly affects
                        NZ07.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_p-LxAdv-p.dita  -->
   <!-- BRT: this template is the otherwise condition in match="p" in base.xsl. 
                 The rules in this topic for handling @nl are different than the existing XSLT, which ignores and suppresses the element. 
                 Adding template match="p[@nl!='']/text" to handle this rule. *** Also, did not address NZ07 exception scenario** 
                 
       JL: seems like the @nl handling  will not behave properly unless we move it to the text template.  
        I moved it to XSLT/ContentArch/Rosetta-to-LA/modules/nonamespace/Rosetta_text-LxAdv-text-with-test-for-whitespace-content.xsl
        PLEASE LOOK THERE!!!!!! IF YOU NEED TO ADD IT TO ANOTHER MODULE FOR ELEMENT <text> WE MIGHT WANT TO FURTHER MODULARIZE IT -->
   <xsl:template match="p">
      <xsl:variable name="docinfoidtext" select="/*/docinfo/docinfo:doc-id/text()"/>
      <xsl:choose><!-- Priya Kaushal: Added below code for UK 15 -->
         <xsl:when test="parent::references[$streamID = 'UK15']">
            <bodytext>
               <p>
                  <xsl:apply-templates select="@* | node()"/>
               </p>
            </bodytext>
         </xsl:when>
         <xsl:when test="parent::in:body[$streamID = 'AU16']">
            <p>
               <xsl:apply-templates select="node()"/>
            </p>
         </xsl:when>
         <xsl:when test="parent::in:body">
            <bodytext>
               <p>
                  <xsl:apply-templates select="node()"/>
               </p>
            </bodytext>
         </xsl:when>
         <!-- Vikas Rohilla : Included for the stream UK12          -->
         <xsl:when test="parent::blockquote[$streamID = 'UK12']">
            <p>
               <xsl:apply-templates select="@* | refpt, node() except refpt"/>
            </p>
         </xsl:when>
         <xsl:when test="child::text/child::note[@notetype!='xref'][$streamID = 'UK12']">
            <xsl:apply-templates select="@* | refpt, node() except refpt"/>
         </xsl:when>
         <xsl:when test="(parent::frm:div                  | parent::frm:body                  | parent::clause[ancestor::frm:div | ancestor::frm:body]                  | parent::li[ancestor::frm:body and not(parent::l/parent::entry)])[not(ancestor::footnote or ancestor::note)]                 [$streamID = ('NZ11','AU10')]">
            <form:p>
               <xsl:if test="not(@style) and child::text[1]/@align[.!='']">
                  <xsl:copy-of select="child::text[1]/@align"/>
               </xsl:if>
               <xsl:apply-templates select="@* | refpt, node() except refpt"/>
            </form:p>
         </xsl:when>
         <xsl:when test="(parent::frm:div | parent::frm:body | parent::clause[ancestor::frm:div | ancestor::frm:body] | parent::li[ancestor::frm:body])[not(ancestor::footnote or ancestor::note)][$streamID = 'UK12']">
            <form:p>
               <xsl:if test="not(@style) and child::text[1]/@align[.!='']">
                  <xsl:copy-of select="child::text[1]/@align"/>
               </xsl:if>
               <xsl:apply-templates select="@* | refpt, node() except refpt"/>
            </form:p>
         </xsl:when>
         <xsl:when test="(parent::sigblock[ancestor::frm:div | ancestor::frm:body])[not(ancestor::footnote)][$streamID = 'UK12']">
            <form:line>
               <xsl:apply-templates select="@* | node()"/>
            </form:line>
         </xsl:when>
         <!-- MDS - occurs in HK04 -  child is leg:histnote then the p element is not output and simply passed through.-->
         <!-- JL revised to handle the many scenarios when p has other children than leg:histnote
            also revised to strip the p wrapper in certain conditions when legfragment is a child
            -->
         <xsl:when test="leg:histnote | blockquote[legfragment and not(child::*[2])][parent::p[parent::*:bodytext or parent::pgrp or parent::li or parent::fnbody or parent::glp:note or parent::case:judgmentbody or parent::case:appendix]]"><!--<xsl:apply-templates select="node()"/>-->
            <xsl:for-each-group select="*"
                                group-adjacent="                     if (self::leg:histnote or self::blockquote[legfragment and not(child::*[2])][parent::p[parent::*:bodytext or parent::pgrp or parent::li or parent::fnbody or parent::glp:note or parent::case:judgmentbody or parent::case:appendix]]) then                             0                         else                             1">
               <xsl:choose>
                  <xsl:when test="current-grouping-key() = 0">
                     <xsl:apply-templates select="current-group()"/>
                  </xsl:when>
                  <!--Satbir: Added below template for changing order of reft before desig in NZ03 only-->
                  <xsl:when test="$streamID = 'NZ03'">
                     <p>
                        <xsl:apply-templates select="following-sibling::refpt[preceding-sibling::pnum]"/>
                        <xsl:for-each select="current-group()">
                           <xsl:apply-templates select="current() except self::refpt"/>
                        </xsl:for-each>
                     </p>
                  </xsl:when>
                  <xsl:otherwise>
                     <p>
                        <xsl:apply-templates select="parent::p/@*"/>
                        <xsl:if test="not(parent::p/@style)">
                           <xsl:copy-of select="parent::p/text[1]/@align"/>
                        </xsl:if>
                        <!-- MDS 2017-08-08 Added handling for refpt to reorder in output-->
                        <xsl:apply-templates select="current-group()[self::refpt]"/>
                        <xsl:for-each select="current-group()">
                           <xsl:apply-templates select=". except(self::refpt)"/>
                        </xsl:for-each>
                     </p>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:for-each-group>
         </xsl:when>
         <!-- JL: funky NZ07 case where we collapse p or p[@nl='0'] element children of references 
            full logic isn't given but I assume we don't do the collapse if the reference has any non-p children or if 
            references has any p children where the @nl value is not zero or we're going to be here all year -->
         <xsl:when test="parent::references[not(child::*[not(self::p[@nl = '0' or not(@nl)])])] and starts-with($streamID, 'NZ07') and (not(@nl) or @nl = '0') and not(preceding-sibling::p)">
            <xsl:element name="p"
                         namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/"><!-- JL this "if" condition that moves text align att value to the parent p is generic and cannot be used for CA -->
               <xsl:apply-templates select="@*"/>
               <xsl:if test="not(@style) and child::text[@align[. != '']] and not(child::text[2]) and not(starts-with($streamID, 'CA'))">
                  <xsl:attribute name="align">
                     <xsl:value-of select="text/@align"/>
                  </xsl:attribute>
               </xsl:if>
               <!-- JL: the sample seems to indicate they want to collapse some of the text child elements too, 
                        but doesn't give the logic for doing that so I'm GUESSING based on the sample!
                        My guess at the logic used: if the @nl has the same value as (or is missing the same as) the previous p, then collapse 
                        text element children too.                          
                        This needs to be very carefully tested when we test  NZ07 data.
                    
                    -->
               <xsl:choose>
                  <xsl:when test="child::*[not(self::text)] or following-sibling::p[child::*[not(self::text)]]">
                     <xsl:apply-templates select="refpt | following-sibling::p/refpt"/>
                     <xsl:apply-templates select="*[not(self::refpt)] | text()"/>
                     <!-- if any p elements have ANY child elements other than <text>, don't merge child text nodes. cleaner -->
                     <xsl:for-each select="following-sibling::p">
                        <xsl:apply-templates select="*[not(self::refpt)] | text()"/>
                     </xsl:for-each>
                  </xsl:when>
                  <xsl:otherwise><!-- can assume p has only text children, yay! And we have also whittled the possibilities down to "p contains an nl att or not" -->
                     <xsl:for-each-group select="self::p | following-sibling::p" group-adjacent="exists(@nl)">
                        <xsl:element name="text"
                                     namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
                           <xsl:apply-templates select="current-group()[1]/text[1]/@*"/>
                           <xsl:for-each select="current-group()">
                              <xsl:apply-templates select="text/node()"/>
                           </xsl:for-each>
                        </xsl:element>
                     </xsl:for-each-group>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:element>
         </xsl:when>
         <!-- suppresses context nodes already accessed in previous condition -->
         <xsl:when test="parent::references[not(child::*[not(self::p[@nl = '0' or not(@nl)])])] and starts-with($streamID, 'NZ07') and (not(@nl) or @nl = '0') and preceding-sibling::p"/>
         <xsl:when test="starts-with($streamID, 'CA') and count(text) &gt; 1 and not(@style) and text[@align]">
            <xsl:for-each-group select="*" group-adjacent="concat('', @align)">
               <xsl:element name="p"
                            namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
                  <xsl:apply-templates select="parent::p/@*"/>
                  <xsl:copy-of select="@align"/>
                  <xsl:for-each select="current-group()">
                     <xsl:apply-templates select="."/>
                  </xsl:for-each>
               </xsl:element>
            </xsl:for-each-group>
         </xsl:when>
         <!-- Awantika: conditional change for AU20, using double slashes as full path is not working here  -->
         <xsl:when test="//source_cttr:annotations/child::heading/note/h[. = 'ActName' or . = 'Act Name'] and $streamID = 'AU20'">
            <xsl:apply-templates/>
         </xsl:when>
         <xsl:when test="parent::bodytext[$streamID = 'CA12']">
            <p>
               <xsl:if test="child::text/ci:cite[not(preceding::p/text/ci:cite)] and not(child::text/@searchtype='CASE-NAME')">
                  <ref:anchor>
                     <xsl:attribute name="id">dict-CASENAME-CITE</xsl:attribute>
                     <xsl:attribute name="anchortype">local</xsl:attribute>
                  </ref:anchor>
               </xsl:if>
               <xsl:apply-templates select="node()"/>
            </p>
         </xsl:when>
         <!-- 2017-10-17 - MDS: Added due to Webstar 7025682 -->
         <xsl:when test="parent::l[$streamID='UK12']">
            <listitem>
               <bodytext>
                  <p>
                     <xsl:apply-templates select="@* | node()"/>
                  </p>
               </bodytext>
            </listitem>
         </xsl:when>
         <xsl:when test="$streamID='UK22CF' and parent::legfragment and (preceding-sibling::leg:prelim or preceding-sibling::leg:info)">
            <xsl:element name="primlaw:bodytext">
               <xsl:element name="p">
                  <xsl:apply-templates select="refpt"/>
                  <xsl:apply-templates select="*[not(self::refpt)] | text()"/>
               </xsl:element>
            </xsl:element>
         </xsl:when>
         <xsl:when test="$streamID='HK07' and parent::bodytext[parent::level[@leveltype='prec' or @leveltype='prec.grp' or @leveltype='precgrp' or @leveltype='precgrp1' or @leveltype='precgrp2' or parent::comm.chap or ancestor::level[@leveltype = 'prec.grp']]]">
            <form:p>
               <xsl:apply-templates select="node()"/>
            </form:p>
         </xsl:when>
         <!--    <xsl:when test="$streamID='AU20' and contains(lower-case($docinfoidtext),'overview') and ancestor::source_cttr:annotations[not(@annotgroup='prov-al')]/heading/note[descendant::lnlink/marker['List of Provisions' or 'Defined Terms' or 'Government Website'][not(@id='OI13')]] | source_cttr:annotations[not(@annotgroup='prov-al')]/heading/remotelink">
                <xsl:apply-templates/>
            </xsl:when>-->
         <xsl:otherwise>
            <xsl:choose><!-- Awantika: 2017-10-26- Added the condition to check multiple text/@align in one p
                   as per CI instructions which is currently only for Canada applying for HK07. 
                   Creating seperate <p> for each text/@align.-->
               <xsl:when test="count(child::text/@align) &gt;= 1 and $streamID='HK07'">
                  <xsl:for-each select="child::*">
                     <xsl:element name="p">
                        <xsl:if test="self::*[1]/@align">
                           <xsl:attribute name="align">
                              <xsl:value-of select="self::*[1]/@align"/>
                           </xsl:attribute>
                        </xsl:if>
                        <xsl:apply-templates select="self::*"/>
                     </xsl:element>
                  </xsl:for-each>
               </xsl:when>
               <!-- Awantika:2017-10-27: p/text will be converted to <textitem> for AU20 for specific scenario -->
               <xsl:when test="$streamID='AU20' and contains(lower-case($docinfoidtext),'history') and /CITATORDOC/source_cttr:body/source_cttr:content/source_cttr:annotations/heading/note[@id='HI4']| /CITATORDOC/source_cttr:body/source_cttr:content/source_cttr:annotations/heading/title[.='Assent']">
                  <xsl:apply-templates select="@* | node()"/>
               </xsl:when>
               <!--Satbir: Added mdule for handling glp:note under p/text-->
               <xsl:when test="$streamID='NZ03' and child::text/child::glp:note[not(child::node except glp:note)][ancestor::case:judgmentbody]">
                  <xsl:apply-templates select="child::text/child::glp:note"/>
               </xsl:when>
               <xsl:otherwise>
                  <p><!-- JL this "if" condition that moves text align att value to the parent p is generic and cannot be used for CA -->
                     <xsl:apply-templates select="@*"/>
                     <!-- <xsl:if
                        test="not(@style) and child::text[@align[. != '']] and not(child::text[2]) and not(starts-with($streamID, 'CA'))">
                        <xsl:attribute name="align">
                            <xsl:value-of select="text/@align"/>
                        </xsl:attribute>
                    </xsl:if>-->
                     <!--                   Chaitanya :Making the for the P/@align as CA08 require this change, Luckabaugh, Joy H. (LNG-HBE) <Joy.Luckabaugh@lexisnexis.com> has approved to change this module  -->
                     <xsl:if test="not(@style) and child::text[@align[. != '']] and not(child::text[2])">
                        <xsl:attribute name="align">
                           <xsl:value-of select="text/@align"/>
                        </xsl:attribute>
                     </xsl:if>
                     <!-- JD: 2017-07-25: modifying the above for NZ18 create @align from only the first text/align so as to not concat -->
                     <xsl:if test="not(@style) and child::text[@align[. != '']]                    and $streamID=('NZ18','AU04','NZ13')">
                        <xsl:attribute name="align"><!-- take the @align from the first child <text> (don't concatenate all child text/@align values) -->
                           <xsl:value-of select="text[1]/@align"/>
                        </xsl:attribute>
                     </xsl:if>
                     <!-- Vikas Rohilla : Created desig altdesig before other element to meet schema ordering                  -->
                     <!-- create ref:anchor before other elements to meet schema ordering -->
                     <xsl:if test="not($streamID=('UK06','UK07'))">
                        <xsl:apply-templates select="(refpt | text/refpt), edpnum, pnum"/>
                     </xsl:if>
                     <!-- the above is the wrong order for legis and regulation if pnum goes to desig and edpnum goes to altdesig  -->
                     <xsl:if test="$streamID=('UK06','UK07')">
                        <xsl:apply-templates select="(refpt | text/refpt), pnum, edpnum"/>
                     </xsl:if>
                     <!-- JD: 2017-07-31: added loop in order to properly wrap p/link elements and proces other children when present -->
                     <xsl:for-each select="*">
                        <xsl:choose><!--SS: Added this condition for p/link becomes p/text/ref:lnlink - HK07--><!-- JD: 2017-07-28: this produces an extra <text> when there is a child <link> AND a child <text>;
                		adding "and not(child::text)" -->
                           <xsl:when test="self::link">
                              <xsl:element name="text"><!--<xsl:apply-templates />-->
                                 <xsl:call-template name="generic-link"/>
                              </xsl:element>
                              <!--SS: Added "except link" condition for handling p/link - HK07-->
                              <!--<xsl:apply-templates
                					select="*[not(self::refpt | self::edpnum | self::pnum)] except link | text()"/>-->
                           </xsl:when>
                           <!--SS: Added template for converting images from inline to figure/inline-->
                           <xsl:when test="child::inlineobject[$streamID='AU18']">
                              <text>
                                 <xsl:apply-templates/>
                              </text>
                           </xsl:when>
                           <xsl:otherwise>
                              <xsl:apply-templates select=".[not(self::refpt | self::edpnum | self::pnum)]"/>
                           </xsl:otherwise>
                        </xsl:choose>
                     </xsl:for-each>
                     <!-- Vikas Rohilla : Created desig altdesig before other element to meet schema ordering                  -->
                     <!-- create ref:anchor before other elements to meet schema ordering -->
                     <!--<xsl:apply-templates select="(refpt | text/refpt), edpnum, pnum"/>
                    <!-\-SS: Added "except link" condition for handling p/link - HK07-\->
                	<!-\- JD: removing 'except link' -\->
                		<xsl:apply-templates
                			select="*[not(self::refpt | self::edpnum | self::pnum)] except link | text()"/>-->
                     <xsl:if test="note[@notetype='xref'] and $streamID='UK11DN'">
                        <xsl:for-each-group select="*" group-adjacent="if (self::note) then 1 else 0">
                           <xsl:choose>
                              <xsl:when test="current-grouping-key()=1"><!--  <xsl:apply-templates select="ancestor::p/text"/>-->
                                 <text>
                                    <marginnote>
                                       <ref:anchor>
                                          <xsl:attribute name="id">
                                             <xsl:value-of select="generate-id()"/>
                                          </xsl:attribute>
                                          <xsl:attribute name="anchortype">
                                             <xsl:text>local</xsl:text>
                                          </xsl:attribute>
                                       </ref:anchor>
                                       <bodytext>
                                          <xsl:for-each select="current-group()">
                                             <xsl:apply-templates select="@* | node()"/>
                                          </xsl:for-each>
                                       </bodytext>
                                    </marginnote>
                                 </text>
                              </xsl:when>
                           </xsl:choose>
                        </xsl:for-each-group>
                     </xsl:if>
                  </p>
               </xsl:otherwise>
            </xsl:choose>
            <xsl:for-each select="following-sibling::level">
               <xsl:call-template name="following_p_level"/>
            </xsl:for-each>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="p/@i"><!-- suppress --></xsl:template>

   <xsl:template match="p/@nl"><!-- suppress --><!-- see module for handling text when parent p has @nl --></xsl:template>

   <xsl:template match="p/@ln.nsprefix"><!-- suppress --></xsl:template>

   <xsl:template match="p/@class"><!-- suppress --></xsl:template>

   <xsl:template match="p/@style">
      <xsl:choose>
         <xsl:when test=". = 'right' or . = 'left' or . = 'center'">
            <xsl:attribute name="align">
               <xsl:value-of select="."/>
            </xsl:attribute>
         </xsl:when>
         <xsl:otherwise>
            <xsl:message>'p' element 'style' attribute has unexpected and unmappable value
                        <xsl:value-of select="."/> and will be omitted on output.</xsl:message>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!-- Vikas Rohilla : Added template for the streamID CA01   -->   <!-- Sudhanshu Srivastava : Added streamID CA02CC -->
   <xsl:template match="p[parent::glp:note[parent::text]][$streamID = 'CA01' or $streamID = 'CA02CC' or $streamID = 'CA04']">
      <xsl:apply-templates/>
   </xsl:template>

   <xsl:template match="p/@indent">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="p[parent::text][$streamID = 'UK12']">
      <xsl:apply-templates select="@* | node()"/>
   </xsl:template>
   <!-- Awantika: Added template to handle p/inlineobject in HK07 to p/text/ref:inlineobject
    JL: this isn't going to account for all scenarios; moved functionality to inlineobject templates-->   <!-- from text dita: <note><b>(For CANADA Content Stream only )</b>Only move the <sourcexml>
        text@align</sourcexml> to the parent <targetxml>p</targetxml> if it is the only
        text in <sourcexml>p</sourcexml>, Otherwise, wrap the <sourcexml>text</sourcexml>
        with <targetxml>p</targetxml> and move the <sourcexml>@align</sourcexml> attribute
        to the newly created <targetxml> p</targetxml>.</note>
    <section>
        <codeblock> &lt;p&gt; &lt;text&gt;Dated at Calgary, Alberta this 31 day of March
            1998.&lt;/text&gt; &lt;text&gt;The Honourable W. Kenneth Moore, Chief Justice of
            the Court of Queen's Bench of Alberta&lt;/text&gt; &lt;text
            align="center"&gt;ALBERTA RULES&lt;/text&gt; &lt;text&gt;Rules of practice made
            pursuant to subsection 745.64 of the Criminal Code to reflect the changes made
            to the Criminal Code regarding applications for reduction in the number of years
            of imprisonment without eligibility for parole.&lt;/text&gt; &lt;/p&gt; </codeblock>
        <b>Becomes</b>
        <codeblock> &lt;p&gt; &lt;text&gt;Dated at Calgary, Alberta this 31 day of March
            1998.&lt;/text&gt; &lt;text&gt;The Honourable W. Kenneth Moore, Chief Justice of
            the Court of Queen's Bench of Alberta&lt;/text&gt; &lt;/p&gt; &lt;p
            align="center"&gt; &lt;text&gt;ALBERTA RULES&lt;/text&gt; &lt;/p&gt; &lt;p&gt;
            &lt;text&gt;Rules of practice made pursuant to subsection 745.64 of the Criminal
            Code to reflect the changes made to the Criminal Code regarding applications for
            reduction in the number of years of imprisonment without eligibility for
            parole.&lt;/text&gt; &lt;/p&gt; </codeblock>
    </section>-->   <!-- JL: seems like the @nl handling  will not behave properly unless we move it to the text template.  
        I moved it to XSLT/ContentArch/Rosetta-to-LA/modules/nonamespace/Rosetta_text-LxAdv-text-with-test-for-whitespace-content.xsl
        PLEASE LOOK THERE!!!!!! IF YOU NEED TO ADD IT TO ANOTHER MODULE FOR ELEMENT <text> -->   <!-- BRT: included this specific text match template because it's part of p[@nl]. Added this template -->   <!--    <xsl:template match="p[@nl != '']/text">
        <xsl:element name="text">
            <xsl:apply-templates select="@*"/>           
            <!-\- BRT add number of nl that are in p/@nl -\->
            <xsl:call-template name="add_nl">
                <xsl:with-param name="length" select="parent::p/@nl"/>
                <xsl:with-param name="i" select="1"/>
            </xsl:call-template>

            <!-\- BRT remove hard-coded nl that are in source -\->
            <xsl:apply-templates select="*[not(self::nl)] | text()"/>
        </xsl:element>
    </xsl:template>



    <xsl:template name="add_nl">
        <xsl:param name="length" select="."/>
        <xsl:param name="i" select="1"/>
        <!-\- BRT: create <nl/> for each iteration of @nl value -\->
        <xsl:if test="$length &gt; 0">
            <xsl:element name="proc:nl"/>
            <xsl:call-template name="add_nl">
                <xsl:with-param name="length" select="$length - 1"/>
                <xsl:with-param name="i" select="$i + 1"/>
            </xsl:call-template>
        </xsl:if>
    </xsl:template>-->
   <xsl:template name="following_p_level">
      <xsl:choose>
         <xsl:when test="child::heading/title/refpt">
            <seclaw:level>
               <xsl:attribute name="leveltype">
                  <xsl:value-of select="@leveltype"/>
               </xsl:attribute>
               <xsl:apply-templates select="child::heading/title/refpt"/>
               <xsl:apply-templates select="@* | node() except (level[preceding-sibling::bodytext])"/>
            </seclaw:level>
         </xsl:when>
      </xsl:choose>
   </xsl:template>
   <!-- JD: 2017-07-21: added trap for p containing only empty node or single whitespace to match DT output.
	e.g., 
	<p>
	  <text/>
	</p>
	-->
   <xsl:template match="p[text[not(node()) or (string() and not(normalize-space()) and not(*))] and count(*)=1 ]"/>
   <!-- 
		JD:		match p that has at least one element child, and don't have any children not named 'text', which doesn't have any text() or children not named 'br' 
		e.g.,
 		 <p>
				<text>
					<nl/>
					<nl/>
				</text>
			</p>
		taken from https://stackoverflow.com/questions/11438787/find-an-element-that-only-has-one-other-kind-of-child
	-->
   <xsl:template match="p[* and not(*[not(self::text[* and not(text()) and not(*[not(self::nl)])])])]"/>
   <!-- MDS 2017-08-11 - Added supression of completely empty paragraph elements.  Only for specific streams -->
   <xsl:template match="p[not(node())][$streamID = 'AU13']"/>
   <xd:doc>
      <xd:desc>
         <xd:p>If <xd:i>p</xd:i> comes within <xd:i>/COMMENTARYDOC/comm:body/level/level/bodytext/form/bodytext/p</xd:i> then
                <xd:i>p</xd:i> becomes <xd:b>form:p</xd:b>. And if <xd:i>@indent</xd:i> occurred into the <xd:i>p</xd:i>
                then <xd:i>@indent</xd:i> becomes <xd:b>@indent</xd:b> and populated as follows:</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
                    
                    &lt;form&gt;
                    &lt;bodytext searchtype="FORM"&gt;
                    &lt;p&gt;&lt;text&gt;&lt;emph typestyle="bf"&gt;THIS AGREEMENT&lt;/emph&gt; is made on&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 2010&lt;/text&gt;&lt;/p&gt;
                    .......
                    .......
                    &lt;h align="center"&gt;1.&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; The Independent Expert has been appointed by the parties under clause .. of the Agreement to assist in resolving the dispute or to resolve the dispute by determining the meaning of clause &amp;hellip;&amp;#160; of
                    the Agreement and also to determine which party or parties should pay the costs of and incidental to the resolution of the dispute.&lt;/h&gt;
                    &lt;h align="center"&gt;2.&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; The Independent Expert has accepted the appointment, and will assist in determining or will determine the dispute in accordance with the terms of this agreement.&lt;/h&gt;
                    ........
                    ........
                    &lt;h align="center"&gt;&amp;#160;&lt;/h&gt;
                    &lt;/bodytext&gt;
                    &lt;/form&gt;
                    
                </xd:pre>
         <xd:b>Becomes</xd:b>
         <xd:pre>
                    
                    &lt;form:form&gt;
                    &lt;form:document annotated="false" official="false" typeofdoc="unnamed"&gt;
                    &lt;form:bodytext&gt;
                    &lt;form:p&gt;
                    &lt;form:text&gt;&lt;emph typestyle="bf"&gt;THIS AGREEMENT&lt;/emph&gt; is made on&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0; 2010&lt;/form:text&gt;&lt;/form:p&gt;
                    ......
                    ......
                    &lt;form:h align="center"&gt;1.&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;The Independent Expert has been appointed by the parties under clause .. of the Agreement to assist in resolving the
                    dispute or to resolve the dispute by determining the meaning of clause &amp;#x2026;&amp;#x00A0;� of the Agreement and also to determine which party or parties should pay the costs of and
                    incidental to the resolution of the dispute.&lt;/form:h&gt;
                    &lt;form:h align="center"&gt;2.&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;The Independent Expert has accepted the appointment, and will assist in determining or will determine the dispute in accordance with the terms of this agreement.&lt;/form:h&gt;
                    ......
                    ......
                    &lt;form:h align="center"&gt;&amp;#x00A0;&lt;/form:h&gt;
                    &lt;/form:bodytext&gt;
                    &lt;/form:document&gt;
                    &lt;/form:form&gt;
                    
                </xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="p[(parent::blockquote|parent::bodytext)[not(ancestor::fnbody)][ancestor::form[ancestor::COMMENTARYDOC]]]"><!--  Original Target XPath:  form:p   -->
      <form:p>
         <xsl:apply-templates select="@* | node()"/>
      </form:p>
   </xsl:template>

   <xsl:template match="p[$streamID=('UK14', 'UK12')][(parent::blockquote)[ancestor::form[ancestor::COMMENTARYDOC]]]"
                 priority="2"><!-- WPK: form:p is not schema valid within blockquote -->
      <p>
         <xsl:apply-templates select="@* | node()"/>
      </p>
   </xsl:template>

   <xsl:template match="@indent"><!--  Original Target XPath:  @indent   -->
      <xsl:attribute name="indent">
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>
   <!--			<xsl:include href="../../modules/glp/Rosetta_p_glp.note-LxAdv-bodytext_note.xsl"/>		-->   <!--<xsl:include href="../../modules/leg/Rosetta_leg.histnote-Chof-p-LxAdv-note.xsl"/>	-->   <!--Priya Kaushal: Commented this-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>p-limited</xd:i> becomes <xd:b>p</xd:b>. Also create a child element <xd:b>text</xd:b> within <xd:b>p</xd:b> for capturing the PCDATA of <xd:i>p-limited</xd:i>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;entry align="center"&gt;
    &lt;p-limited&gt;
        &lt;emph typestyle="bu"&gt;AGENDA&lt;/emph&gt;
    &lt;/p-limited&gt;
&lt;/entry&gt;
			</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;entry align="center"&gt;
    &lt;p&gt;
        &lt;text&gt;
            &lt;emph typestyle="bu"&gt;AGENDA&lt;/emph&gt;
        &lt;/text&gt;
    &lt;/p&gt;
&lt;/entry&gt;
				</xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_p-limited-LxAdv-p.dita  -->
   <!-- BRT: this is the same rule as in Rosetta_p-limited_emph-LxAdv-p_text_emph.dita, and is already addressed there. 
                 The otherwise condition in match="p-limited" creates p (no text), which conflicts with this rule. -->
   <!--Satbir: Define low priority in below template for p-limited because same template created in another xsl (Rosetta_entry_p-limited-LxAdv-entry_p.xsl)-->
   <xsl:template match="p-limited" priority="10">
      <p>
         <text>
            <xsl:apply-templates select="@* | node()"/>
         </text>
      </p>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>When <xd:i>emph</xd:i> occurs as a direct child of <xd:i>p-limited</xd:i> then <xd:i>p-limited/emph</xd:i> becomes <xd:b>p/text/emph</xd:b>.
    </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;entry&gt;
    &lt;p-limited&gt;
        &lt;emph typestyle="caps"&gt;Box&lt;/emph&gt;
    &lt;/p-limited&gt;
&lt;/entry&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;entry&gt;
    &lt;p&gt;
        &lt;text&gt;
            &lt;emph typestyle="caps"&gt;Box&lt;/emph&gt;
        &lt;/text&gt;
    &lt;/p&gt;
&lt;/entry&gt;

	</xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_p-limited_emph-LxAdv-p_text_emph.dita  -->
   <!-- BRT: this template is in one condition of match="p-limited" in base.xsl
             -->
   <xsl:template match="p-limited[child::emph]">
      <xsl:element name="p">
         <xsl:element name="text">
            <xsl:apply-templates/>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <!--			<xsl:include href="../../modules/glp/Rosetta_p-limited_glp.note-LxAdv-entry_note.xsl"/>		-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>entry/p-limited</xd:i> becomes <xd:b>entry/p</xd:b>. Also create a child element <xd:b>text</xd:b> within <xd:b>entry/p</xd:b> for capturing the PCDATA of <xd:i>entry/p-limited</xd:i>.
                </xd:p>
         <xd:p> If multiple consecutive <xd:i>p-limited</xd:i> elements occur within
                    <xd:i>entry</xd:i> then create only one <xd:b>p</xd:b>
                    within <xd:b>entry</xd:b> and multiple child <xd:b>text</xd:b>
                    elements with the single <xd:b>p</xd:b>. Create one
                    <xd:b>p/text</xd:b> element for each <xd:i>p-limited</xd:i>
                    element. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
                    
                    &lt;entry&gt;
                    &lt;p-limited&gt;Pleaded guilty to one charge of cultivating cannabis, one charge of possession for supply and one charge of supply.&lt;/p-limited&gt; 
                    &lt;p-limited&gt;The appellant was the owner of a horticultural property. No criminal history. Four rows of cannabis plants growing in an extension to a hothouse. Maturing plants, stalks from harvested plants, and traces of drying cannabis leaf found. A total of 303 cannabis plants grown in a hydroponic solution.&lt;/p-limited&gt; 
                    &lt;/entry&gt;
                    
                </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
                    
                    &lt;entry&gt;
                    &lt;p&gt;
                    &lt;text&gt;Pleaded guilty to one charge of cultivating cannabis, one charge of possession for supply and one charge of supply.&lt;/text&gt;
                    &lt;text&gt;The appellant was the owner of a horticultural property. No criminal history. Four rows of cannabis plants growing in an extension to a hothouse. Maturing plants, stalks from harvested plants, and traces of drying cannabis leaf found. A total of 303 cannabis plants grown in a hydroponic solution.&lt;/text&gt; 
                    &lt;/p&gt;
                    &lt;/entry&gt;
                    
                </xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>If <xd:i>l</xd:i> is a child of <xd:i>entry/p-limited</xd:i> then
                <xd:i>entry/p-limited/l</xd:i> becomes
                <xd:b>entry/p/list</xd:b>. For further clarification please see the following example.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
                    &lt;entry colname="col2"&gt;
                    &lt;p-limited&gt;Act is partly in force:
                    &lt;l&gt;
                    &lt;li&gt;
                    &lt;p&gt;
                    &lt;text&gt;ss. 61 (a) as it repeals the definition of ...&lt;/text&gt;
                    &lt;/p&gt;
                    &lt;/li&gt;
                    &lt;/l&gt;
                    &lt;/p-limited&gt;
                    &lt;/entry&gt;
                </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
                    &lt;entry colname="col2"&gt;
                    &lt;p&gt;
                    &lt;text&gt;Act is partly in force:&lt;/text&gt;
                    &lt;list&gt;
                    &lt;listitem&gt;
                    &lt;bodytext&gt;
                    &lt;p&gt;
                    &lt;text&gt;ss. 61 (a) as it repeals the definition of ...&lt;/text&gt;
                    &lt;/p&gt;
                    &lt;/bodytext&gt;
                    &lt;/listitem&gt;
                    &lt;/list&gt;
                    &lt;/p&gt;
                    &lt;/entry&gt;
                </xd:pre>
         <!--Changes2014-11-11: Updated instruction when multiple consecutive p-limited elements occur within entry.2014-10-28: Added note to handle scenario when l is a child of entry/p-limited.-->
         <!--<xsltinclusion>
                <xsl:stylesheet version="2.0">
                    <xsl:template match="p-limited">
                        <xsl:choose>
                            <xsl:when test="child::emph">
                                <xsl:element name="p">
                                    <xsl:element name="text">
                                        <xsl:apply-templates/>
                                    </xsl:element>
                                </xsl:element>
                            </xsl:when>
                            <!-\- BRT: added the following case, result is entry/note -\->
                            <xsl:when test="parent::entry and child::glp:note">
                                <xsl:apply-templates/>    
                            </xsl:when>
                            <!-\- generalizing this condition -\->
                            <!-\- AS: As per the instructions for p-limited "p-limited becomes p. Also create a child element text within p for capturing the PCDATA of p-limited." -\->
                            <xsl:when test="parent::entry">
                                <xsl:element name="p">
                                    <xsl:element name="text">
                                        <xsl:apply-templates/>
                                    </xsl:element>
                                </xsl:element>
                            </xsl:when>
                            <!-\- BRT: added the following -\->
                            <xsl:when test="child::remotelink">
                                <xsl:element name="p">
                                    <xsl:element name="text">
                                        <xsl:apply-templates/>
                                    </xsl:element>
                                </xsl:element>
                            </xsl:when>
                            <xsl:when test="child::ci:cite">
                                <xsl:element name="p">
                                    <xsl:element name="text">
                                        <xsl:apply-templates/>
                                    </xsl:element>
                                </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:element name="p">
                                    <xsl:apply-templates/>
                                </xsl:element>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:template>
                </xsl:stylesheet>
            </xsltinclusion>
           -->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_entry_p-limited-LxAdv-entry_p.dita  -->
   <!--<xsl:message>Rosetta_entry_p-limited-LxAdv-entry_p.xsl requires manual development!</xsl:message> -->
   <!--Satbir: Define the high priority in below template for p-limited because same template created in another xsl (Rosetta_p-limited-LxAdv-p.xsl)-->
   <xsl:template match="p-limited" priority="15">
      <xsl:variable name="docinfoidtext"
                    select="/CITATORDOC/docinfo/source_docinfo:doc-id/text()"/>
      <xsl:choose>
         <xsl:when test="parent::table and preceding-sibling::tgroup">
            <xsl:element name="note">
               <xsl:element name="bodytext">
                  <xsl:element name="p">
                     <xsl:element name="text">
                        <xsl:apply-templates/>
                     </xsl:element>
                  </xsl:element>
               </xsl:element>
            </xsl:element>
         </xsl:when>
         <xsl:when test="child::emph">
            <xsl:element name="p">
               <xsl:element name="text"><!-- Awantika:2017-11-24- Webstar # 7048152. If glp:note is coming in p-limited with emph then in target we need to take out glp:note target markup note
                            from p/text as schema does not allow note inside p/text.
                            entry/p-limited/glp:note to entry/note -->
                  <xsl:apply-templates select="node() except glp:note"/>
               </xsl:element>
            </xsl:element>
            <xsl:apply-templates select="glp:note"/>
         </xsl:when>
         <!-- BRT: added the following case, result is entry/note -->
         <xsl:when test="parent::entry and child::glp:note">
            <xsl:apply-templates/>
         </xsl:when>
         <!-- generalizing this condition -->
         <!-- AS: As per the instructions for p-limited "p-limited becomes p. Also create a child element text within p for capturing the PCDATA of p-limited." -->
         <xsl:when test="parent::entry"><!-- Awantika: For AU20 entry/p-limited becomes textitem  -->
            <xsl:choose>
               <xsl:when test="contains(lower-case($docinfoidtext),'history') and parent::entry and $streamID='AU20'">
                  <textitem>
                     <xsl:apply-templates/>
                  </textitem>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:element name="p">
                     <xsl:element name="text">
                        <xsl:apply-templates/>
                     </xsl:element>
                  </xsl:element>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <!-- BRT: added the following -->
         <xsl:when test="child::remotelink">
            <xsl:element name="p">
               <xsl:element name="text">
                  <xsl:apply-templates/>
               </xsl:element>
            </xsl:element>
         </xsl:when>
         <xsl:when test="child::ci:cite">
            <xsl:element name="p">
               <xsl:element name="text">
                  <xsl:apply-templates/>
               </xsl:element>
            </xsl:element>
         </xsl:when>
         <xsl:otherwise>
            <xsl:element name="p">
               <xsl:apply-templates/>
            </xsl:element>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a
					shared topic rather than duplicated to ensure consistency and accuracy. The xml
					snippets contained in this topic reflect markup needed for the Apollo image handling
					application. The UK is the first LBU to move from Apollo to the Blobstore
					application for image handling. Therefore, if this is a UK conversion instruction
					document, please refer to the following topics for correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
							<xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
							images (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to
							<xd:b>ref:inlineobject</xd:b> for BLOBSTORE images
							(id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
							<xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
							images (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>When <xd:i>remotelink</xd:i> occurs as a direct child of <xd:i>p-limited</xd:i> then <xd:i>p-limited/remotelink</xd:i> becomes <xd:b>p/text/lnlink</xd:b>.
				</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;entry colname="col3" colsep="0" rowsep="0" align="right" valign="top"&gt;
    &lt;!-- ETC. --&gt;
    &lt;p-limited&gt;
        &lt;remotelink href="www.kpmg.com.au/default.aspx?tabid=145" hrefclass="http" newwindow="YES"&gt;
            &lt;inlineobject type="image" attachment="ln-server" filename="kpmglogo.gif" /&gt;
        &lt;/remotelink&gt;
    &lt;/p-limited&gt;
&lt;/entry&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;entry colname="col3" colsep="0" rowsep="0" align="right" valign="top"&gt;
    &lt;!-- ETC. --&gt;
    &lt;p&gt;&lt;text&gt;
        &lt;ref:lnlink service="URL"&gt;
            &lt;ref:marker&gt;
                &lt;ref:inlineobject&gt;
                    &lt;ref:locator&gt;
                        &lt;ref:locator-key&gt;
                            &lt;ref:key-name name="object-key"/&gt;
                            &lt;ref:key-value value="X-Y-kpmglogo"/&gt;  &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
                        &lt;/ref:locator-key&gt;
                        &lt;ref:locator-params&gt;
                            &lt;proc:param name="componentseq" value="1"/&gt;
                            &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
                            &lt;proc:param name="object-smi" value=""/&gt;  &lt;!-- This @value assignment is done by conversion program --&gt;
                        &lt;/ref:locator-params&gt;
                    &lt;/ref:locator&gt;
                &lt;/ref:inlineobject&gt;
            &lt;/ref:marker&gt;
            &lt;ref:locator&gt;
                &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="URL"/&gt;
                    &lt;ref:key-value value="http://www.kpmg.com.au/default.aspx?
                            tabid=145"/&gt;
                &lt;/ref:locator-key&gt;
            &lt;/ref:locator&gt;
        &lt;/ref:lnlink&gt;
    &lt;/text&gt;&lt;/p&gt;
&lt;/entry&gt;

			</xd:pre>
         <!--Changes2012-10-26: Updated ref:locator markup in Target sample. 2013-02-18: Target example updated per inlineobject instructions. 2013-02-18: Created two sections, one for "Release 4.0 and after" and another for "Pre-Release 4.0".2013-04-30: Updated target sample according to latest Apollo markup.2013-05-01: Removed instructions for section
					"Pre-Release 4.0" because according to latest Apollo markup, section
					"Release 4.0 and after" and section "Pre-Release 4.0" now have
					similar conversion markup.2013-05-08: Extended the list of allowable values for image handling.2015-07-24: Corrected typo in title (was 
					"p-limited/emph to p/text/emph", corrected to be 
					"p-limited/remotelink to p/text/lnlink".2016-08-03: Added Note about xml snippets that illustrate
					image handling. Note summarizes move from Apollo to Blobstore application. UK is
					first LBU to move to Blobstore.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_p-limited_remotelink-LxAdv-p_text_ref.lnlink.dita  -->
   <!--    The XSLT for this module is covered in Rosetta_remotelink-LxAdv-ref.crossreference.xsl  -->
   <xd:doc>
      <xd:desc>
         <xd:p>When <xd:i>ci:cite</xd:i> occurs as a direct child of <xd:i>p-limited</xd:i> then <xd:i>p-limited/ci:cite</xd:i> becomes <xd:b>p/text/lnci:cite</xd:b>.
    </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;entry&gt;
    &lt;p-limited&gt;Diagram drawn at August 16, 2001 hearing by Mr. Yakimishyn. Location plan NW 4 &lt;ci:cite&gt;&lt;ci:case&gt;&lt;ci:caseref ID="cref00000588" spanref="cspan00000588"&gt;&lt;ci:reporter country="US" value="N.E." normpubcode="627"/&gt;&lt;ci:volume num="8"/&gt;&lt;ci:page num="5"/&gt;&lt;/ci:caseref&gt;&lt;/ci:case&gt;&lt;ci:content&gt;&lt;ci:span spanid="cspan00000588"&gt;8 NE 5&lt;/ci:span&gt;&lt;/ci:content&gt;&lt;/ci:cite&gt;-56-17-4. Submitted by Mr. Yakimishyn.&lt;/p-limited&gt;
&lt;/entry&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;entry&gt;
    &lt;p&gt;&lt;text&gt;Diagram drawn at August 16, 2001 hearing by Mr. Yakimishyn. Location plan NW 4 &lt;lnci:cite&gt;&lt;lnci:case&gt;&lt;lnci:caseref ID="cref00000588"&gt;&lt;lnci:reporter country="US" value="N.E." normpubcode="627"/&gt;&lt;lnci:volume num="8"/&gt;&lt;lnci:page num="5"/&gt;&lt;/lnci:caseref&gt;&lt;/lnci:case&gt;&lt;lnci:content&gt;8 NE 5&lt;/lnci:content&gt;&lt;/lnci:cite&gt;-56-17-4. Submitted by Mr. Yakimishyn.&lt;/text&gt;&lt;/p&gt;
&lt;/entry&gt;

	</xd:pre>
         <!--Changes-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_p-limited_ci.cite-LxAdv-p_text_lnci.cite.dita  -->
   <!-- BRT: this template is in one condition of match="p-limited" in base.xsl
             -->
   <xsl:template match="p-limited[child::ci:cite]">
      <xsl:element name="p">
         <xsl:element name="text">
            <xsl:apply-templates/>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>page</xd:i> becomes <xd:b>ref:page</xd:b> and also create
                    <xd:b>doc:docinfo/doc:pagination/doc:pagination-scheme</xd:b> and
                attributes are mapped as follows: <xd:ul>
               <xd:li>
                  <xd:i>page/@count</xd:i> becomes
                            <xd:b>ref:page/@num</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>page/@reporter</xd:i> becomes
                            <xd:b>ref:page/@page-scheme</xd:b> and
                            <xd:b>doc:pagination-scheme/@page-scheme</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>ref:page/@page-scheme-type</xd:b> and
                            <xd:b>doc:pagination-scheme/@page-scheme-type</xd:b> should be
                        set to "reporter-abbreviation"</xd:li>
               <xd:li>
                  <xd:i>page/@text</xd:i> should be dropped. </xd:li>
               <xd:li>
                  <xd:i>page/@subdoc</xd:i> becomes
                            <xd:b>ref:page/@includeintoc</xd:b>. </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>Do not create multiple <xd:i>identical</xd:i>
            <xd:b>doc:pagination-scheme</xd:b>. Source may have multiple
                <xd:i>page</xd:i> with identical <xd:i>@reporter</xd:i> value.
            Create only one <xd:b>doc:pagination-scheme</xd:b> for each unique
                <xd:i>@reporter</xd:i> value.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>According to the LBU, the presentation spec expects the page references to generate
            the displayable reporter part from the citation. The <xd:i>@text</xd:i> is
            dropped because the stylesheet is expected to generate the displayable portion of the
            page break.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;page count="3" reporter="alr" subdoc="true" text="256 ALR 1 at "/&gt;
...
&lt;page count="4" reporter="alr" subdoc="true" text="256 ALR 1 at "/&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;ref:page num="3" page-scheme="alr" page-scheme-type="reporter-abbreviation" includeintoc="true"/&gt;
...
&lt;ref:page num="4" page-scheme="alr" page-scheme-type="reporter-abbreviation" includeintoc="true"/&gt;

and

&lt;doc:docinfo&gt;
    &lt;doc:pagination&gt;
        &lt;doc:pagination-scheme page-scheme="alr" page-scheme-type="reporter-abbreviation"/&gt;
    &lt;/doc:pagination&gt;
&lt;/doc:docinfo&gt;
	</xd:pre>
         <xd:p>
            <xd:b>If comma ( , ) or periods ( . ) occurs in attribute value of count i.e,
                    <xd:i>page/@count</xd:i> then comma or period should be stripped out
                (removed) from target attribute value i.e, <xd:b>ref:page/@num</xd:b>.</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;page reporter="bpr" count="23,043" text="12 BPR 23,041 at " subdoc="true" /&gt;
		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;ref:page num="23043" page-scheme="bpr" page-scheme-type="reporter-abbreviation" includeintoc="true"/&gt;

and 

&lt;doc:docinfo&gt;
    &lt;doc:pagination&gt;
        &lt;doc:pagination-scheme page-scheme="bpr" page-scheme-type="reporter-abbreviation"/&gt;
    &lt;/doc:pagination&gt;
&lt;/doc:docinfo&gt;
	</xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;page text="(2009) 1(2) JML 159–172 at" count="16…4" reporter="JML" /&gt;
		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;ref:page num="164" page-scheme="JML" page-scheme-type="reporter-abbreviation"/&gt;

and 

&lt;doc:docinfo&gt;
    &lt;doc:pagination&gt;
        &lt;doc:pagination-scheme page-scheme="JML" page-scheme-type="reporter-abbreviation"/&gt;
    &lt;/doc:pagination&gt;
&lt;/doc:docinfo&gt;
	</xd:pre>
         <xd:p>
            <xd:b>If space occurs in attribute value of reporter i.e,
                    <xd:i>page/@reporter</xd:i> then underscore( _ ) should be used at the
                place of space in target attribute value i.e,
                <xd:b>ref:page/@page-scheme</xd:b> and <xd:b>doc:pagination-scheme/@page-scheme</xd:b>.</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;page reporter="Fam LR" count="1033" text="10 Fam LR 1032 at " subdoc="true"/&gt;
		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;ref:page num="1033" page-scheme="Fam_LR" page-scheme-type="reporter-abbreviation" includeintoc="true"/&gt;
	
and 
	
&lt;doc:docinfo&gt;
    &lt;doc:pagination&gt;
        &lt;doc:pagination-scheme page-scheme="Fam_LR" page-scheme-type="reporter-abbreviation"/&gt;
    &lt;/doc:pagination&gt;
&lt;/doc:docinfo&gt;
	</xd:pre>
         <xd:p>
            <xd:b>If <xd:i>page</xd:i> is a child of <xd:i>li</xd:i>, then the
                    <xd:b>ref:page</xd:b> should be placed at the beginning of the
                following <xd:b>label</xd:b> in the target.</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;l&gt;
    &lt;li&gt;
        &lt;lilabel&gt;(a)&lt;/lilabel&gt;
        &lt;p&gt;
            &lt;text&gt;if subparagraph (1)(b)(i) applies &amp;#x2013; under the provision of the new corporations legislation that corresponds to the relevant
                old provision; or&lt;/text&gt;
        &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;page reporter="Qd R" count="147" text="[2004] 1 Qd R 146 at " subdoc="true"/&gt;
        &lt;lilabel&gt;(b)&lt;/lilabel&gt;
        &lt;p&gt;
            &lt;text&gt;if subparagraph (1)(b)(ii) applies &amp;#x2013; as, or connected with, a prosecution for an offence against the provision of the new
                corporations legislation that corresponds to the relevant old provision.&lt;/text&gt;
        &lt;/p&gt;
    &lt;/li&gt;
&lt;/l&gt;
	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
&lt;list&gt;
    &lt;listitem&gt;
        &lt;label&gt;(a)&lt;/label&gt;
        &lt;bodytext&gt;
            &lt;p&gt;
                &lt;text&gt;if subparagraph (1)(b)(i) applies &amp;#x2013; under the provision of the new corporations legislation that corresponds to the
                    relevant old provision; or&lt;/text&gt;
            &lt;/p&gt;
        &lt;/bodytext&gt;
    &lt;/listitem&gt;
    &lt;listitem&gt;
        &lt;label&gt;&lt;ref:page page-scheme-type="reporter-abbreviation" page-scheme="Qd_R" num="147" includeintoc="true"/&gt;(b)&lt;/label&gt;
        &lt;bodytext&gt;
            &lt;p&gt;
                &lt;text&gt;if subparagraph (1)(b)(ii) applies &amp;#x2013; as, or connected with, a prosecution for an offence against the provision of the new
                    corporations legislation that corresponds to the relevant old provision.&lt;/text&gt;
            &lt;/p&gt;
        &lt;/bodytext&gt;
    &lt;/listitem&gt;
&lt;/list&gt;

and

&lt;doc:docinfo&gt;
    &lt;doc:pagination&gt;
        &lt;doc:pagination-scheme page-scheme="Qd_R" page-scheme-type="reporter-abbreviation"/&gt;
    &lt;/doc:pagination&gt;
&lt;/doc:docinfo&gt;
	</xd:pre>
         <!--Changes2015-01-05: Defined handling for page/@count if period (.) occurs in the value.2011-12-15: Created.2012-01-05: Defined handling for page/@count if comma occurs in the value.2012-01-05: Defined handling for page/@reporter if space occurs in the value.2012-02-07: Added a note for dropping page/@text.2012-02-15: Added mapping for @subdoc.2012-03-02: Corrected the value of @page-scheme-type from
                reporterabbreviation to reporter-abbreviation.2012-04-16: Defined handling for /CASEDOC/case:body/case:headnote/page between two
                decisionsummary as sibling.2012-05-09: Added instructions for handling li/page. 2012-08-23: Moved instruction for page occurring between
                decisionsummary elements to separate module
                LNInternational\common\Rosetta_page_with_preceding-following-siblings_case.decisionsummary.dita. 2012-10-05: Corrected the spelling of "attribute".2014-06-03: Added instruction and example to generate
                        doc:pagination/doc:pagination-scheme in target and
                    this immediately applies to all LNI streams.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="page[not(ancestor::entry) and not(parent::catchwordgrp or parent::catchwords)]"
                 name="page-generic">
      <xsl:if test="@count!='' and matches(translate(@count,',.…',''),'^\d+$')"><!-- don't process if there is no value converted to @num (invalid), or if source @count is not a digit -->
         <xsl:element name="ref:page">
            <xsl:attribute name="num">
               <xsl:value-of select="translate(@count,',.…','')"/>
            </xsl:attribute>
            <xsl:if test="@reporter!=''">
               <xsl:attribute name="page-scheme">
                  <xsl:value-of select="translate(@reporter,' ','_')"/>
               </xsl:attribute>
            </xsl:if>
            <xsl:if test="@subdoc!=''">
               <xsl:attribute name="includeintoc">
                  <xsl:value-of select="@subdoc"/>
               </xsl:attribute>
            </xsl:if>
            <xsl:attribute name="page-scheme-type">
               <xsl:text>reporter-abbreviation</xsl:text>
            </xsl:attribute>
         </xsl:element>
      </xsl:if>
   </xsl:template>

   <xsl:template match="page[$streamID='HK03'][parent::case:headnote | parent::case:info | parent::catchwords]"
                 priority="1"><!--[parent::case:info and $streamID='HK03'][not(parent::catchwords and $streamID='HK03')]-->
      <xsl:if test="parent::case:info">
         <classify:classification>
            <classify:classitem>
               <classify:classitem-identifier>
                  <classify:classname>
                     <xsl:element name="ref:page">
                        <xsl:attribute name="num">
                           <xsl:value-of select="translate(@count,',.…','')"/>
                        </xsl:attribute>
                        <xsl:if test="@reporter!=''">
                           <xsl:attribute name="page-scheme">
                              <xsl:value-of select="translate(@reporter,' ','_')"/>
                           </xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@subdoc!=''">
                           <xsl:attribute name="includeintoc">
                              <xsl:value-of select="@subdoc"/>
                           </xsl:attribute>
                        </xsl:if>
                        <xsl:attribute name="page-scheme-type">
                           <xsl:text>reporter-abbreviation</xsl:text>
                        </xsl:attribute>
                     </xsl:element>
                  </classify:classname>
               </classify:classitem-identifier>
            </classify:classitem>
         </classify:classification>
      </xsl:if>
      <xsl:if test="parent::catchwords">
         <classify:classitem>
            <classify:classitem-identifier>
               <classify:classname>
                  <xsl:element name="ref:page">
                     <xsl:attribute name="num">
                        <xsl:value-of select="translate(@count,',.…','')"/>
                     </xsl:attribute>
                     <xsl:if test="@reporter!=''">
                        <xsl:attribute name="page-scheme">
                           <xsl:value-of select="translate(@reporter,' ','_')"/>
                        </xsl:attribute>
                     </xsl:if>
                     <xsl:if test="@subdoc!=''">
                        <xsl:attribute name="includeintoc">
                           <xsl:value-of select="@subdoc"/>
                        </xsl:attribute>
                     </xsl:if>
                     <xsl:attribute name="page-scheme-type">
                        <xsl:text>reporter-abbreviation</xsl:text>
                     </xsl:attribute>
                  </xsl:element>
               </classify:classname>
            </classify:classitem-identifier>
         </classify:classitem>
      </xsl:if>
      <xsl:if test="parent::case:headnote">
         <xsl:element name="ref:page">
            <xsl:attribute name="num">
               <xsl:value-of select="translate(@count,',.…','')"/>
            </xsl:attribute>
            <xsl:if test="@reporter!=''">
               <xsl:attribute name="page-scheme">
                  <xsl:value-of select="translate(@reporter,' ','_')"/>
               </xsl:attribute>
            </xsl:if>
            <xsl:if test="@subdoc!=''">
               <xsl:attribute name="includeintoc">
                  <xsl:value-of select="@subdoc"/>
               </xsl:attribute>
            </xsl:if>
            <xsl:attribute name="page-scheme-type">
               <xsl:text>reporter-abbreviation</xsl:text>
            </xsl:attribute>
         </xsl:element>
      </xsl:if>
   </xsl:template>
   <!--Satbir: Generate this template for handling the 'exception timestamp' error while during the transforming of input files-->
   <xsl:template match="page[ancestor::entry]"/>
   <!-- 20171017 JL: for when page is a child of seclaw:bodytext -->
   <xsl:template match="page[parent::bodytext[parent::level]][$streamID=('AU05' , 'NZ09')]"
                 priority="2">
      <textitem>
         <xsl:call-template name="page-generic"/>
      </textitem>
   </xsl:template>
   <!-- Webstar 7043871 - CSN - 20171108 - adding page wrapper for schema validity. CI does not address this so matching DT. -->
   <xsl:template match="page[parent::case:info][$streamID=('UK01')]" priority="2">
      <note notetype="other">
         <bodytext>
            <xsl:call-template name="page-generic"/>
         </bodytext>
      </note>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>When the <xd:i>page</xd:i> element occurs in between two
                    <xd:i>case:decisionsummary</xd:i> elements, it shall maintain the same
                sequence in the resulting target elements, with the <xd:b>ref:page</xd:b>
                located in between the two <xd:b>casedigest:decisionsummary</xd:b>
                elements. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;case:body&gt;
    &lt;case:headnote&gt;
        &lt;case:decisionsummary summarytype="held"&gt;
            &lt;p&gt;
                &lt;text&gt;&lt;emph typestyle="bf"&gt; Held&lt;/emph&gt;: (i) The actions taken constituted a
                    decision: &lt;/text&gt;
            &lt;/p&gt;
        &lt;/case:decisionsummary&gt;
        &lt;page reporter="aln" count="n155" text="6 ALN 154 at " subdoc="true"/&gt;
        &lt;case:decisionsummary&gt;
            &lt;p&gt;
                &lt;text&gt;(a) The action had a substantial commercial effect so far as the applicant was
                    concerned. Effectively the applicant could not tender a price lower than the
                    stipulated parameter.&lt;/text&gt;
            &lt;/p&gt;
        &lt;/case:decisionsummary&gt;
    &lt;/case:headnote&gt;
&lt;/case:body&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;casedigest:body&gt;
    &lt;casedigest:decision&gt;    
        &lt;casedigest:decisionsummary&gt;
            &lt;bodytext&gt;
                &lt;p&gt;
                    &lt;text&gt;&lt;emph typestyle="bf"&gt; Held&lt;/emph&gt;: (i) The actions taken constituted a
                        decision: &lt;/text&gt;
                &lt;/p&gt;
            &lt;/bodytext&gt;            
        &lt;/casedigest:decisionsummary&gt;        
        &lt;ref:page page-scheme="aln" num="n155" page-scheme-type="reporter-abbreviation" includeintoc="true"/&gt;    
        &lt;casedigest:decisionsummary&gt;
            &lt;bodytext&gt;
                &lt;p&gt;                
                    &lt;text&gt;(a) The action had a substantial commercial effect so far as the applicant was
                        concerned. Effectively the applicant could not tender a price lower than the
                        stipulated parameter.&lt;/text&gt;
                &lt;/p&gt;
            &lt;/bodytext&gt;                
        &lt;/casedigest:decisionsummary&gt;    
    &lt;/casedigest:decision&gt;
&lt;/casedigest:body&gt;

	</xd:pre>
         <!--Changes2011-08-23: Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_page_with_preceding-following-siblings_case.decisionsummary.dita  -->
   <!-- BRT: stylesheets do not include enough context to convert these sample snippets - 
                    no template for casedigest:decisionsummary, casedigest:decision, or  casedigest:body. 
                    There is nothing unique about the rules here; normal processing of casedigest:decision 
                    (which doesn't belong in this intruction) should address this rule-->
   <!--<xsl:include href="../../modules/nonamespace/Rosetta_person-LxAdv-person.person.xsl"/>-->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>pgrp</xd:i> becomes <xd:b>pgrp</xd:b>.</xd:p>
         <xd:p>If <xd:i>pgrp</xd:i> comes with following attributes: <xd:ul>
               <xd:li>
                  <xd:i>@id</xd:i> becomes <xd:b>@xml:id</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>@subdoc</xd:i> becomes
                        <xd:b>@includeintoc</xd:b>
               </xd:li>
               <xd:li>
                  <xd:i>@toc-caption</xd:i> becomes
                            <xd:b>@alternatetoccaption</xd:b>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;pgrp&gt;
    &lt;heading&gt;
        &lt;title&gt;Background&lt;/title&gt;
    &lt;/heading&gt;
    &lt;p&gt;
        &lt;pnum count="1"&gt;[1]&lt;/pnum&gt;
        &lt;text&gt;
            The present applicants are five 
            individuals who at one time or another were engaged by Combined 
            Insurance Company of America (Combined) as insurance agents. 
            In recent times, the five have sued Combined in the 
            Chief Industrial Magistrates&amp;#x2019; Court of New South Wales claiming 
            entitlements both to annual leave and long service leave. 
            One of the principal issues to be resolved in those proceedings is 
            the question of whether the agents were employees of Combined, 
            as they contend, or rather independent contractors, as Combined contends. 
            No doubt the resolution of that issue will involve a close consideration 
            of a broad range of indicia. One of the matters to which 
            Combined points is a term in its contract with each agent by 
            which each agreed, or appears to have agreed, that his relationship 
            with Combined was not one of employment.
        &lt;/text&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pnum count="2"&gt;[2]&lt;/pnum&gt;
        &lt;text&gt;
            That question is, therefore, now pending before the Chief 
            Industrial Magistrates Court. Notwithstanding that circumstance, 
            Combined has commenced the present proceeding in this court 
            seeking three heads of relief:
        &lt;/text&gt;
    &lt;/p&gt;
&lt;/pgrp&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;pgrp&gt;
    &lt;heading&gt;
        &lt;title&gt;Background&lt;/title&gt;
    &lt;/heading&gt;
    &lt;p&gt;
        &lt;desig value="1" inline="true"&gt;[1]&lt;/desig&gt;
        &lt;text&gt;
            The present applicants are five 
            individuals who at one time or another were engaged by Combined 
            Insurance Company of America (Combined) as insurance agents. 
            In recent times, the five have sued Combined in the Chief Industrial 
            Magistrates&amp;#x2019; Court of New South Wales claiming entitlements 
            both to annual leave and long service leave. One of the principal 
            issues to be resolved in those proceedings is the question of whether 
            the agents were employees of Combined, as they contend, or rather 
            independent contractors, as Combined contends. No doubt the resolution
            of that issue will involve a close consideration of a broad range of indicia. 
            One of the matters to which Combined points is a term in its contract 
            with each agent by which each agreed, or appears to have agreed, that 
            his relationship with Combined was not one of employment.
        &lt;/text&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;desig value="2" inline="true"&gt;[2]&lt;/desig&gt;
        &lt;text&gt;
            That question is, therefore, now pending before the Chief
            Industrial Magistrates Court. Notwithstanding that circumstance,
            Combined has commenced the present proceeding in this court 
            seeking three heads of relief:
        &lt;/text&gt;
    &lt;/p&gt;  
&lt;/pgrp&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;pgrp id="BCA.C5.CHECK"&gt;
 &lt;heading&gt;
  &lt;title&gt;Check List for Lease prior to Lodgment (LPI August 2007)&lt;/title&gt;
 &lt;/heading&gt;
 &lt;!-- ETC. --&gt;
&lt;/pgrp&gt; 
        
    </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;pgrp xml:id="BCA.C5.CHECK"&gt;
 &lt;heading&gt;
  &lt;title&gt;Check List for Lease prior to Lodgment (LPI August 2007)&lt;/title&gt;
 &lt;/heading&gt;
 &lt;!-- ETC. --&gt;
&lt;/pgrp&gt; 
        
    </xd:pre>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;pgrp subdoc="true" toc-caption="Contributors"&gt;
 &lt;heading&gt;&lt;title&gt;Authors&lt;/title&gt;&lt;/heading&gt;
 &lt;!-- ETC. --&gt;
&lt;/pgrp&gt; 
        
    </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;pgrp includeintoc="true" alternatetoccaption="Contributors"&gt;
 &lt;heading&gt;&lt;title&gt;Authors&lt;/title&gt;&lt;/heading&gt;
 &lt;!-- ETC. --&gt;
&lt;/pgrp&gt; 
        
    </xd:pre>
         <!--Changes2015-03-17: An attribute @inline
                    get added with desig element even when the
                        sourcepnum is not having that
                        attribute@inline Applicable on CA12 only.2015-02-24: Example updated as per new rule an attribute
                        @inlineget added with
                    desigelement when the sourcepnumis
                    not having that attribute@inline2011-12-15: Created.2013-03-14: Add instruction and example
                        pgrp/@id.2014-02-11: Add instruction and example
                        pgrp/@subdoc and
                        pgrp/@toc-caption. Support Discussion Board: NZ09
                    Commentary, Form and Precedents-->
         <!-- <xsltinclusion>
            <xsl:stylesheet version="2.0">
                <!-\- BRT: this template is in the otherwise condition in base.xsl, but added the attributes to that template. 
                    This rule is similar to a rule in another topic in which pggrp is converted to pggrp.
             -\->
                <xsl:template match="pgrp">
                    <xsl:element name="pgrp">
                        <xsl:if test="@id">
                            <xsl:attribute name="xml:id">
                                <xsl:value-of select="@id"/>
                            </xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@subdoc">
                            <xsl:attribute name="includeintoc">
                                <xsl:value-of select="@subdoc"/>
                            </xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@toc-caption">
                            <xsl:attribute name="alternatetoccaption">
                                <xsl:value-of select="@toc-caption"/>
                            </xsl:attribute>
                        </xsl:if>
                        <xsl:apply-templates/>
                    </xsl:element>
                </xsl:template>
            </xsl:stylesheet>
        </xsltinclusion>-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_pgrp-LxAdv-pgrp.dita  -->
   <!--<xsl:message>Rosetta_pgrp-LxAdv-pgrp.xsl requires manual development!</xsl:message> -->
   <!-- BRT: this template is in the otherwise condition in base.xsl, but added the attributes to that template. 
                    This rule is similar to a rule in another topic in which pggrp is converted to pggrp.
             -->
   <xsl:template match="pgrp">
      <xsl:element name="pgrp">
         <xsl:if test="@id">
            <xsl:apply-templates select="@id"/>
         </xsl:if>
         <xsl:if test="@subdoc">
            <xsl:attribute name="includeintoc">
               <xsl:value-of select="@subdoc"/>
            </xsl:attribute>
         </xsl:if>
         <xsl:if test="@toc-caption">
            <xsl:attribute name="alternatetoccaption">
               <xsl:value-of select="@toc-caption"/>
            </xsl:attribute>
         </xsl:if>
         <xsl:apply-templates/>
      </xsl:element>
   </xsl:template>
   <!-- Vikas Rohilla : Template to match the pgrp and the parrent case:constituents and the streamID UK03   -->
   <xsl:template match="pgrp[parent::case:constituents][$streamID=('UK03', 'UK04')]">
      <courtcase:arguments>
         <bodytext>
            <pgrp>
               <xsl:apply-templates/>
            </pgrp>
         </bodytext>
      </courtcase:arguments>
   </xsl:template>
   <!-- Satbir : Template for creating textitem as a wrapper of ref:link-->
   <xsl:template match="pgrp[child::link][$streamID='AU18']">
      <pgrp>
         <xsl:for-each select="node()">
            <xsl:choose>
               <xsl:when test="self::link">
                  <textitem>
                     <xsl:apply-templates select="self::link"/>
                  </textitem>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:apply-templates select="."/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:for-each>
      </pgrp>
   </xsl:template>
   <!-- Awantika: update to create wrapper around pgrp -->   <!--Awantika: Removed this and added it to case:appendix -->   <!-- <xsl:template xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" match="pgrp[parent::case:appendix and $streamID='HK03']">
        <xsl:variable name="name" select="local-name()"/>
        
        
        <xsl:if test="local-name(preceding-sibling::*[position()=1]) != $name">
            <bodytext>
            <pgrp>
                <xsl:apply-templates />
                
                <!-\- Match the next sibling if it has the same name -\->
                <xsl:apply-templates select="following-sibling::*[1][local-name()=$name]" mode="nextpg"/>
            </pgrp>
            </bodytext>
        </xsl:if>
    </xsl:template>
    
    
    <xsl:template match="pgrp" mode="nextpg">
        <xsl:variable name="name" select="local-name()"/>
        <pgrp xmlns="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/"><xsl:apply-templates /></pgrp>
        <xsl:apply-templates select="following-sibling::*[1][local-name()=$name]" mode="nextpg"/>
    </xsl:template>-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>pgrp/@searchtype="QUOTED-TEXT"</xd:i> becomes <xd:b>blockquote</xd:b>.</xd:p>
         <xd:pre>&lt;pgrp searchtype="QUOTED-TEXT"&gt;
    &lt;p&gt;
        &lt;pnum count="34"&gt;34&lt;/pnum&gt;
        &lt;text&gt;Deux collègues de notre Cour ont déjà circonscrit l'infraction commise avec violence
            comme étant celle au cours de laquelle il y a eu l'utilisation d'une force intense,
            extrême et brutale [Voir Note 2 ci-dessous].&lt;/text&gt;
    &lt;/p&gt;
    &lt;hrule align="left" width="30%"/&gt;
    ...
&lt;/pgrp&gt;

<xd:b>Becomes</xd:b>

&lt;blockquote&gt;
    &lt;p&gt;
        &lt;desig value="34"&gt;34&lt;/desig&gt;
        &lt;text&gt;Deux collègues de notre Cour ont déjà circonscrit l'infraction commise avec violence
            comme étant celle au cours de laquelle il y a eu l'utilisation d'une force intense,
            extrême et brutale [Voir Note 2 ci-dessous].&lt;/text&gt;
    &lt;/p&gt;
    &lt;hrule/&gt;
    ...
&lt;/blockquote&gt;
</xd:pre>
         <!--Changes2014-10-24: Changed ID because it was same as a topic
                    handling conversion to pgrp applicable to Canadian
                    streams. Note this change is not a rule change, just an fix of the ID value for
                    this topic.2013-01-28: Removed CR number to allow
                        hrule to the content model of
                        blockquote.2013-01-08: Created.-->
         <!--        <xsltinclusion>
            <xsl:stylesheet version="2.0">
                <!-\- BRT: taken from one conditional statement in match="pgrp" template in base.xsl -\->
                <xsl:template match="pgrp[@searchtype='QUOTED-TEXT']">
                    <xsl:element name="blockquote">
                        <xsl:apply-templates/>
                    </xsl:element>
                </xsl:template>
            </xsl:stylesheet>
        </xsltinclusion>
-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated (although the DITA file already has embedded XSLT).  Remove this comment after manual development complete!  (also remove the embedded XSLT within the DITA above) @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_pgrp_searchtype-LxAdv-blockquote.dita  -->
   <!--	<xsl:message>Rosetta_pgrp_searchtype-LxAdv-blockquote.xsl requires manual development!</xsl:message> -->
   <!-- BRT: taken from one conditional statement in match="pgrp" template in base.xsl -->
   <xsl:template xmlns="http://dita.oasis-open.org/architecture/2005/"
                 match="pgrp[@searchtype='QUOTED-TEXT']">
      <xsl:element name="blockquote">
         <xsl:apply-templates/>
      </xsl:element>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>pnum</xd:i> becomes <xd:b>desig</xd:b> attribute
						<xd:i>@count</xd:i> becomes <xd:b>@value</xd:b> and
						<xd:i>@inline</xd:i> becomes <xd:b>@inline</xd:b>. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;pnum count="2" inline="true"&gt;[2]&lt;/pnum&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;desig value="2" inline="true"&gt;[2]&lt;/desig&gt; </xd:pre>
         <xd:p>When <xd:i>pnum</xd:i>is not having attribute
						<xd:i>@inline</xd:i>present in the source than the conversion will
					add <xd:b>@inline</xd:b> attribute in the target along with element
						<xd:b>desig</xd:b>. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;pnum count="2"&gt;[2]&lt;/pnum&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;desig value="2" inline="true"&gt;[2]&lt;/desig&gt; </xd:pre>
         <!--Changes2015-03-17: An attribute
							@inline get added with
							desig element even when the
							sourcepnum is not having that
							attribute@inline Applicable on CA12
					only.2015-02-24: An attribute
							@inlineget added with
							desigelement even when the
							sourcepnumis not having that
							attribute@inline2011-12-15: Created. Instruction added for handling of @inline and changed the example.-->
         <!-- <xsltinclusion>
		<xsl:stylesheet version="2.0">  
			... BRT: Modified existing template in base.xsl to add @inline='true' when not present ... 
			<xsl:template match="pnum">
				<xsl:element name="desig">
					<xsl:if test="@count">
						<xsl:attribute name="value">
							<xsl:value-of select="@count"/>
						</xsl:attribute>
					</xsl:if>
					<xsl:attribute name="inline">
						<xsl:choose>
							<xsl:when test="@inline">
								<xsl:value-of select="@inline"/>
							</xsl:when>
							... BRT: added this condition according to existing instruction in Rosetta_pnum-LxAdv-desig.dita.
                        Creates @inline='true' when value isn't present  ...
							<xsl:otherwise>
								<xsl:value-of select="'true'"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
					
					<xsl:apply-templates/>
				</xsl:element>
			</xsl:template>
		</xsl:stylesheet>
	</xsltinclusion> -->
      </xd:desc>
   </xd:doc>
   <!-- BRT: Modified existing template in base.xsl to add @inline='true' when not present -->
   <xsl:template match="pnum">
      <xsl:element name="desig">
         <xsl:apply-templates select="@count"/>
         <!-- JD: 2017-06-19: it appears that this should only be set for CA12 -->
         <!--pawan: inline should for created for CA15 -->
         <!-- 2017/10/04 - CSN - added UK07 to match GDS-->
         <xsl:if test="$streamID=('CA12','CA15','UK07')">
            <xsl:attribute name="inline">
               <xsl:choose>
                  <xsl:when test="@inline">
                     <xsl:value-of select="@inline"/>
                  </xsl:when>
                  <!-- BRT: added this condition according to existing instruction in Rosetta_pnum-LxAdv-desig.dita.
	                        Creates @inline='true' when value isn't present  -->
                  <xsl:otherwise>
                     <xsl:value-of select="'true'"/>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:attribute>
         </xsl:if>
         <!-- MDS 2017-08-10 - In order to match the output of DT, that I believe to be incorrect, ref:para must be added when creating a desig.
				BUT ONLY FOR AU13 -->
         <xsl:if test="$streamID = ('AU13','HK09')">
            <ref:para>
               <xsl:attribute name="num" select="@count"/>
               <xsl:attribute name="para-scheme">
                  <xsl:value-of select="/CASEDOC/case:body/case:headnote/case:info/case:reportercite[1]/ci:cite/ci:case/ci:caseref/ci:reporter/@value"/>
               </xsl:attribute>
               <xsl:attribute name="para-scheme-type">reporter-abbrev</xsl:attribute>
            </ref:para>
         </xsl:if>
         <xsl:apply-templates select="node()"/>
      </xsl:element>
   </xsl:template>

   <xsl:template match="pnum/@count">
      <xsl:attribute name="value">
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Please note that the conversion of <xd:i>refpt</xd:i> into
							<xd:b>ref:anchor</xd:b> must follow specific rules based on
						its location in the source document.</xd:b> These context sensitive aspects are
					not all discussed in detail in the general instructions given here. Please see
					the specific document type instructions for more information regarding the
					context sensitive conversion details of this element. If there is any
					contradiction between these general instructions and the document type specific
					instructions, the specific instructions should be given precedence.</xd:p>
         <xd:p>Drop <xd:i>refpt</xd:i> when it occurs as a child of
						<xd:i>ci:content</xd:i> or
					<xd:i>case:casename</xd:i>.</xd:p>
         <xd:p>
            <xd:i>refpt</xd:i> becomes <xd:b>ref:anchor</xd:b>. Attribute
						<xd:i>@id</xd:i> becomes <xd:b>@id</xd:b> and
						<xd:i>@type</xd:i> becomes <xd:b>@anchortype</xd:b> with
					values tokenized as follows: <xd:ul>
               <xd:li>
                  <xd:b>ref:anchor[@anchortype="global"]</xd:b>
               </xd:li>
               <xd:li>
                  <xd:b>ref:anchor[@anchortype="local"]</xd:b>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>All occurrences of refpt/@type="ext" should map to
					ref:anchor/@anchortype="global". If value of refpt/@type="local", or is omitted
					or any other value the mapping should be ref:anchor/@anchortype="local" </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>ref:anchor/@id</xd:b> that begins with a number must have an
					underscore added at start. </xd:p>
         <xd:p>Duplicate anchors should be suppressed. Repeating anchors are ok however (non
					duplicate multiple anchors). Need to remove duplicates. </xd:p>
         <xd:p>If <xd:i>refpt</xd:i> comes within <xd:i>l/li/lilabel</xd:i>
					then <xd:b>ref:anchor</xd:b> will become the first child of
						<xd:b>listitem</xd:b>.</xd:p>
         <xd:p>
            <xd:i>entry/refpt</xd:i> becomes
						<xd:b>entry/ref:anchor</xd:b>
         </xd:p>
         <xd:p>If <xd:i>refpt</xd:i> comes within <xd:i>figure</xd:i> then
					drop the <xd:i>refpt</xd:i> since id has dummy values.</xd:p>
         <xd:p>If <xd:i>refpt</xd:i> comes with <xd:i>page</xd:i> as sibling
					then drop the <xd:i>refpt</xd:i> element.</xd:p>
         <xd:p>If <xd:i>refpt</xd:i> and <xd:i>remotelink</xd:i> occur as
					adjacent siblings, refer to topic <xd:i>
               <xd:i>endnote</xd:i> to
							<xd:b>endnote</xd:b>
            </xd:i>.</xd:p>
         <!-- 2013-11-14 (JCG): Removed the xref to the endnote topic in the above sentence because there are times when the refpt topic is used in a CI but the endnote topic is not. In this case, the xref causes a validation warning because endnote is xref'ed but is not in the DITAMAP. 
		    NOTE: I purposely made this a comment rather than a change log entry because there is no need for it to appear in a change log. -->
         <xd:p>
            <xd:b>Note: </xd:b>Whenever an <xd:b>@xml:id</xd:b> has the same value as ANY
						<xd:b>ref:anchor/@id</xd:b>, suppress the
						<xd:b>@xml:id</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML 1</xd:b>
         </xd:p>
         <xd:pre> &lt;case:judgments&gt; &lt;glp:note&gt; &lt;refpt id="257_ALR_1_2"
					type="ext"/&gt; &lt;remotelink dpsi="000G" refpt="257_ALR_1_1"
					remotekey1="REFPTID" service="DOC-ID"&gt; Previous page in this case
					&lt;/remotelink&gt; &lt;/glp:note&gt; &lt;case:order subdoc="true"
					toc-caption="Orders"&gt; &lt;heading&gt; &lt;title&gt;Orders&lt;/title&gt;
					&lt;/heading&gt; &lt;p&gt; &lt;text&gt; Order that the questions stated in the
					amended special case be answered as follows: &lt;/text&gt; &lt;/p&gt;
					&lt;/case:order&gt; &lt;/case:judgments&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML 1</xd:b>
         </xd:p>
         <xd:pre> &lt;courtcase:opinions&gt; &lt;note&gt; &lt;ref:anchor id="_257_ALR_1_2"
					anchortype="global"/&gt; ... &lt;/note&gt; courtcase:order will be moved under
					courtcase:body... &lt;courtcase:opinions&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML 2</xd:b>
         </xd:p>
         <xd:p>Here is an example of <xd:i>refpt</xd:i> occurring within
						<xd:i>ci:content</xd:i>. </xd:p>
         <xd:pre> &lt;ci:cite type="cite4thisdoc"&gt; &lt;ci:case&gt; &lt;ci:caseref&gt;
					&lt;ci:reporter value="urj"/&gt; &lt;ci:refnum num="BC200702133"/&gt;
					&lt;/ci:caseref&gt; &lt;/ci:case&gt; &lt;ci:content&gt; &lt;citefragment
					searchtype="CASE-CITE-REF"&gt;BC200702133&lt;/citefragment&gt; &lt;refpt
					id="BC200702133" type="ext"&gt;&lt;/refpt&gt; &lt;/ci:content&gt;
					&lt;/ci:cite&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML 2</xd:b>
         </xd:p>
         <xd:p>When <xd:i>refpt</xd:i> occurs within
					<xd:i>ci:content</xd:i>, it is dropped. </xd:p>
         <xd:pre> &lt;ref:cite4thisresource citetype="reporter"&gt; &lt;lnci:case&gt;
					&lt;lnci:caseref&gt; &lt;lnci:reporter value="urj"/&gt; &lt;lnci:refnum
					num="BC200702133"/&gt; &lt;/lnci:caseref&gt; &lt;/lnci:case&gt;
					&lt;lnci:content&gt;BC200702133&lt;/lnci:content&gt;
					&lt;/ref:cite4thisresource&gt; </xd:pre>
         <xd:p>
            <xd:b>Source XML 3: Element refpt comes with page element.</xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;text&gt; &lt;refpt id="PAGE6" type="ext"/&gt; &lt;page
					reporter="PBAP" text="Page " count="6"/&gt; In civil trials the position is
					summarised by Wrottesley, &lt;emph typestyle="it"&gt;Principles of
					Advocacy&lt;/emph&gt;, p13: &lt;/text&gt; &lt;/p&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML 3</xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;text&gt; &lt;ref:page num="6" page-scheme="PBAP"
					page-scheme-type="reporter-abbreviation"/&gt; In civil trials the position is
					summarised by Wrottesley, &lt;emph typestyle="it"&gt;Principles of
					Advocacy&lt;/emph&gt;, p13: &lt;/text&gt; &lt;/p&gt; </xd:pre>
         <!--Changes2012-08-30: Major revision for modularization.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_refpt-LxAdv-ref.anchor.dita  -->
   <xsl:template match="refpt" name="refpt-generic"><!--  Original Target XPath:  ref:anchor   -->
      <xsl:variable name="dup">
         <xsl:call-template name="amIaDuplicate"/>
      </xsl:variable>
      <xsl:choose>
         <xsl:when test="parent::leg:bodytext or parent::ci:content or parent::case:casename or ancestor::figure or preceding-sibling::page      or following-sibling::*[1][self::page] or $dup='true'"/>
         <xsl:otherwise>
            <ref:anchor>
               <xsl:apply-templates select="@*"/>
               <xsl:if test="not(@type)">
                  <xsl:attribute name="anchortype" select="'local'"/>
               </xsl:if>
               <xsl:if test="node()">
                  <ref:anchortext>
                     <xsl:apply-templates select="node()"/>
                  </ref:anchortext>
               </xsl:if>
            </ref:anchor>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!-- JL: @id and @xml:id transformations handled by module
		XSLT/ContentArch/Rosetta-to-LA/modules/nonamespace/Rosetta_identifier-LxAdv-ID_data_type-HandlingDuplicates.xsl -->
   <xsl:template match="refpt/@type"><!--  Original Target XPath:  @anchortype   -->
      <xsl:attribute name="anchortype">
         <xsl:value-of select="if(.='ext') then 'global' else 'local'"/>
      </xsl:attribute>
   </xsl:template>
   <!--			<xsl:include href="../../modules/nonamespace/Rosetta_refpt_isChildOf_level_heading_edpnum-to-LexisAdvance_seclaw.level_ref.anchor.xsl"/>			-->   <xd:doc>
      <xd:desc>refpt child of level/heading/title to
		seclaw:level/ref:anchor, primlaw:level/ref:anchor and section/ref:anchor id-CCCC-10454
	
		
			If refpt is a child of level/heading/title then ref:anchor will become the first child of seclaw:level, primlaw:level and section depending on the target schema.
			AU Commentary-Form-Precedents: If refpt is a child of level/heading/edpnum and refpt element has text then ref:anchor will become the first child of seclaw:level and refpt text will retain seclaw:level/heading/altdesig
		
		
			Source XML
			

&lt;level id="ABCA_ASICA_ACT.SGM_ABCA.ASICA.PT1" leveltype="comm.chap"&gt;
  &lt;heading searchtype="COMMENTARY"&gt;
	  &lt;title&gt;
	  	&lt;refpt type="ext" id="ABCA.ASICA.PT1"/&gt;
	  	Part 1 &amp;mdash; Preliminary [ss 1&amp;ndash;6]
	  &lt;/title&gt;
  &lt;/heading&gt;
  ...

		
		
		
			Target XML
			

&lt;seclaw:level xml:id="ABCA_ASICA_ACT.SGM_ABCA.ASICA.PT1" leveltype="unclassified"&gt;
  &lt;ref:anchor id="ABCA.ASICA.PT1" anchortype="global"/&gt;
  &lt;heading&gt;
  	&lt;title&gt;Part 1 &amp;#x2014; Preliminary [ss 1&amp;#x2013;6]&lt;/title&gt;
  &lt;/heading&gt;
  ...
  
		
		
		
		
		
			Source XML
			

&lt;level id="BCA.C2.AGRP1.ATTJ" leveltype="attachment" subdoc="false" toc-caption="[14,090] Attachment J Deed of Subcontractor's Warranty"&gt;
 &lt;heading&gt;
  &lt;edpnum&gt;
   &lt;refpt id="BCA.C2.AGRP1.ATTJ" type="ext"&gt;[14,090]&lt;/refpt&gt;
  &lt;/edpnum&gt;
  &lt;desig&gt;&lt;designum&gt;Attachment J&lt;/designum&gt;&lt;/desig&gt;
  &lt;title&gt;Deed of Subcontractor's Warranty&lt;/title&gt;
 &lt;/heading&gt;
 ...

		
		
		
			Target XML
			

&lt;seclaw:level leveltype="attachment" toc-caption="&amp;#x005B;14,090&amp;#x005D; Attachment J Deed of Subcontractor&amp;#x0027;s Warranty"&gt;
 &lt;ref:anchor id="BCA.C2.AGRP1.ATTJ" anchortype="global"/&gt;
 &lt;heading&gt;
  &lt;altdesig&gt;&amp;#x005B;14,090&amp;#x005D;&lt;/altdesig&gt;
  &lt;desig&gt;Attachment J&lt;/desig&gt;
  &lt;title&gt;Deed of Subcontractor&amp;#x0027;s Warranty&lt;/title&gt;
&lt;/heading&gt;
...
  
		
		
		
		
			Changes
			2012-08-30: Created
			2012-12-07: Instruction and Example added: refpt has text.
		
      </xd:desc>
   </xd:doc>
   <!-- ************************** -->
   <!-- DO NOT USE - already handled in '/nonamespace/Rosetta_p-LxAdv-p.xsl' 
	and '/nonamespace/Rosetta_text-LxAdv-text-with-test-for-whitespace-content.xsl'-->
   <!-- ************************** -->
   <xd:doc>
      <xd:desc>refpt child of p/text to
			p/ref:anchor id-CCCC-10456
	
		
			If refpt occurs under p/text then
					ref:anchor will become the first child of
					p.
			All occurrences of refpt[@type="ext"] should map to ref:anchor[@anchortype="global"]. If value of refpt[@type="local", or is omitted or any other value the mapping should be ref:anchor[@anchortype="local"].
		
		
			Source XML 1
			

&lt;p&gt;
	 &lt;text&gt;
		 &lt;refpt id="x98-525a1"/&gt;
	 	Section 115 contains the general right of 
	 	appeal given to a defendant in proceedings 
	 	governed by the Summary Proceedings Act. 
	 	...
	 &lt;/text&gt;
&lt;/p&gt;

		
		
		
			Target XML 1
			

&lt;p&gt;
		&lt;ref:anchor id="x98-525a1" anchortype="local"/&gt;
        &lt;text&gt;
	        Section 115 contains the general right of 
	 		appeal given to a defendant in proceedings 
	 		governed by the Summary Proceedings Act.
	 		...
	 	&lt;/text&gt;
&lt;/p&gt;
  
		
		
		
		
			Source XML 2
			
&lt;p&gt;
    &lt;text&gt;
        &lt;refpt id="28050" type="ext"/&gt;
        &lt;emph typestyle="bf"&gt;[¶28,050] Form of Interim Order Relating to an Arrangement under
            Section 193&lt;/emph&gt;
    &lt;/text&gt;
&lt;/p&gt;
		
		
		
			Target XML 2
			
&lt;p&gt;
    &lt;ref:anchor id="_28050" anchortype="global"/&gt;
    &lt;text&gt;
        &lt;emph typestyle="bf"&gt;[¶28,050] Form of Interim Order Relating to an Arrangement under
            Section 193&lt;/emph&gt;
    &lt;/text&gt;
&lt;/p&gt;
		
		
		
			Changes
			2012-08-30: Created. 
			2013-10-11: Added a note and update the target examples when refpt
					comes without attribute [@type="ext"] and
						[@type="local"] in source documents.
			2016-04-28: Added one more source and target example.
		
	
		</xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--<xsl:message>Requires manual development!</xsl:message> -->
   <xd:doc>
      <xd:desc>refpt child of p/text/emph to
			p/ref:anchor id-CCCC-10457
	
		
			p/text/emph/refpt becomes p/ref:anchor.
			All occurrences of refpt[@type="ext"] should map to ref:anchor[@anchortype="global"]. If value of refpt[@type="local"], or is omitted or any other value the mapping should be ref:anchor[@anchortype="local"].
			If any text comes under the refpt then conversion needs to map in
				target ref:anchor/ref:anchortext. (i.e.
					p/text/emph/refpt becomes
					p/ref:anchor/ref:anchortext).
		
		
			Source XML
			

&lt;p&gt;
	 &lt;text&gt;
	 	&lt;emph&gt;
			 &lt;refpt id="x98-525a1"/&gt;
		 	Section 115 contains the general right of 
		 	appeal given to a defendant in proceedings 
		 	governed by the Summary Proceedings Act. 
		 	...
	 	&lt;/emph&gt;
	 &lt;/text&gt;
&lt;/p&gt;

		
		
		
			Target XML
			

&lt;p&gt;
		&lt;ref:anchor id="x98-525a1" anchortype="local"/&gt;
        &lt;text&gt;
	        Section 115 contains the general right of 
	 		appeal given to a defendant in proceedings 
	 		governed by the Summary Proceedings Act.
	 		...
	 	&lt;/text&gt;
&lt;/p&gt;
  
		
		
		
		
			Changes
			2016-07-27: Added a note for handling of text which is
					comes under the refpt in source.
			2013-10-11: Added a note and update the target examples when refpt
				comes without attribute [@type="ext"] and
				[@type="local"] in source documents.
			2012-08-30: Created. 
		
		</xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>This topic is used in numerous conversion instructions for several LBUs. It is a
			shared topic rather than duplicated to ensure consistency and accuracy. The xml
			snippets contained in this topic reflect markup needed for the Apollo image handling
			application. The UK is the first LBU to move from Apollo to the Blobstore
			application for image handling. Therefore, if this is a UK conversion instruction
			document, please refer to the following topics for correct image handling markup.<xd:ul>
               <xd:li>
                  <xd:i>lnlink[@service="ATTACHMENT"]</xd:i> to
				<xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
				images (id-CCCC-10542)</xd:li>
               <xd:li>
                  <xd:i>inlineobject</xd:i> to
				<xd:b>ref:inlineobject</xd:b> for BLOBSTORE images
				(id-CCCC-10540)</xd:li>
               <xd:li>
                  <xd:i>link[@filename]</xd:i> to
				<xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b> for BLOBSTORE
				images (id-CCCC-10541)</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>Regardless of which of the use cases described below occurs, the attribute <xd:i>remotelink/@status</xd:i> is always suppressed, it is never output to the target document.</xd:p>
         <xd:ul>
            <xd:li>Use case: <xd:i>remotelink[@service='SEARCH']</xd:i>. The service type
			  "SEARCH" is not supported in New Lexis. Unless
				<xd:i>remotelink[@hrefclass='http']</xd:i> it is recommended that such
			  remotelink elements be copied into an xml comment. This retains the content for future
			  analysis without creating unsupported target markup. The risk of this approach is the loss
			  of ref:marker text content from display to the user. If there is a
				<xd:i>remotelink/@hrefclass]</xd:i> attribute equal to "http" then the
			  remotelink is <xd:b>not</xd:b> copied into a comment but is instead converted to either a
				<xd:b>url</xd:b> or <xd:b>ref:lnlink</xd:b>, see below for details. </xd:li>
            <xd:li>Use case: <xd:i>remotelink[@service='QUERY']</xd:i>: <xd:ul>
                  <xd:li>In General, convert the pcdata, but suppress the <xd:i>remotelink</xd:i>
				  tag and its attributes.</xd:li>
                  <xd:li>
                     <xd:p>For the following exceptional contexts, do not convert the pcdata of
					  <xd:i>remotelink[@service="QUERY"]</xd:i>. Instead, suppress both the
					pcdata and <xd:i>remotelink</xd:i> markup: <xd:ul>
                           <xd:li>
                              <xd:p> docinfo:assoc-links/remotelink[@service="QUERY"] </xd:p>
                              <xd:p>
                                 <xd:b>Note: </xd:b>For CA05-CA07 please follow <xd:a href="../common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">
                                    <xd:i>docinfo:assoc-links/remotelink[@service="QUERY"]</xd:i>
                                 </xd:a>
                              </xd:p>
                           </xd:li>
                           <xd:li>
                              <xd:p> docinfo:assoc-links-grp/remotelink[@service="QUERY"] </xd:p>
                           </xd:li>
                           <xd:li>
                              <xd:p> NZ-Cases only:   glp:note/remotelink[@service="QUERY"]</xd:p>
                           </xd:li>
                        </xd:ul>
                     </xd:p>
                  </xd:li>
               </xd:ul>
               <xd:p>A corresponding product requirement shall be created with an instruction to build
				the link on retrieval based on semantic markup in the document. </xd:p>
            </xd:li>
            <xd:li>Use case: <xd:i>remotelink[@service='DOC-ID']</xd:i> becomes
				<xd:b>ref:crossreference</xd:b> with required child
				<xd:b>ref:content</xd:b> and attribute
				<xd:i>remotelink/@xml:lang</xd:i> becomes
				<xd:b>ref:content/@xml:lang</xd:b>. For multiple, immediate, sibling
			  occurrences without intermediary text, group within a
				<xd:b>ref:crossreferencegroup</xd:b> parent except for
				<xd:b>lnci:content</xd:b> and <xd:b>title</xd:b>.<xd:ul>
                  <xd:li>The value of <xd:b>ref:crossreference/@crossreferencetype</xd:b> should be
				  set to "seeAlso".</xd:li>
                  <xd:li>
                     <xd:p> Create <xd:b>ref:crossreference/ref:locator/ref:locator-key</xd:b> with
					attributes and children as follows: <xd:ul>
                           <xd:li>If <xd:i>@remotekey1="DOC-ID"</xd:i> or
						  <xd:i>@remotekey1="DOCID"</xd:i> then <xd:ul>
                                 <xd:li>
                                    <xd:b>ref:key-name/@name</xd:b> will have the value
							"DOC-ID".</xd:li>
                                 <xd:li>
                                    <xd:b>key-value/@value</xd:b> will be the value of
							  <xd:i>@dpsi</xd:i> followed by hyphen and concatenated with
							  <xd:i>@refpt</xd:i> or <xd:i>@remotekey2</xd:i>, which
							ever is present (if both are present, use
							<xd:i>@remotekey2</xd:i>).</xd:li>
                              </xd:ul>
                           </xd:li>
                           <xd:li>If <xd:i>@remotekey1="REFPTID"</xd:i> or
						  <xd:i>@remotekey1="REFPT"</xd:i> then <xd:ul>
                                 <xd:li>
                                    <xd:b>ref:key-name/@name</xd:b> will have the value
							"DOC-ID".</xd:li>
                                 <xd:li>
                                    <xd:b>ref:key-value/@value</xd:b> will be the value of
							  <xd:i>@dpsi</xd:i> followed by hyphen and concatenated with
							  <xd:i>@docidref</xd:i>.</xd:li>
                                 <xd:li>Create <xd:b>ref:locator/@anchoridref</xd:b> with value from
							  <xd:i>@refpt</xd:i> or <xd:i>@remotekey2</xd:i>, which
							ever is present (if both are present, use
							<xd:i>@refpt</xd:i>).  If <xd:i>@refpt</xd:i> is empty or only whitespace, do not output a <xd:b>@anchoridref</xd:b>.</xd:li>
                              </xd:ul>
                           </xd:li>
                        </xd:ul>
                     </xd:p>
                     <xd:p>
                        <xd:b>Note: </xd:b>If <xd:i>remotelink/@dpsi</xd:i> is not present, use value from
					  <xd:i>docinfo:dpsi/@id-string</xd:i> or capture value from the LBU
					manifest file.</xd:p>
                     <xd:p>
                        <xd:b>Note: </xd:b>
                        <xd:b>ref:locator/@anchoridref</xd:b> that begins with a number must
					have an underscore added at start. Also apply other identifier data type format as
					used for <xd:b>xml:id</xd:b> and <xd:b>ref:anchor/@id</xd:b>
					(e.g. change colon to underscore). Refer to the section titled "Identifiers to ID Data Type - 
					Handling Pattern Restrictions", if that section exists in this CI.</xd:p>
                  </xd:li>
               </xd:ul>
            </xd:li>
            <xd:li>Use case: <xd:i>remotelink[@service='URL']</xd:i> or
				<xd:i>remotelink[@hrefclass='http'][@href]</xd:i> or
				<xd:i>remotelink[@href]</xd:i>
               <!-- SP: added 2013-10-03 -->
               <xd:b>and</xd:b> the data content of the remotelink is a URL. That is, the data content of
				<xd:i>remotelink</xd:i> starts with text such as "http://...", "https://...",
			  "www.some.domain", or is of type (http | https | nohttp | mailto | ftp). In this case,
				<xd:i>remotelink</xd:i> becomes <xd:b>url</xd:b>, and populated as follows:<xd:ul>
                  <xd:li>
                     <xd:p>If the <xd:i>remotelink/@hrefclass</xd:i> attribute is present in the
					source document, the <xd:i>remotelink[@hrefclass="http"]</xd:i> becomes
					  <xd:b>url</xd:b> and <xd:i>@href</xd:i> becomes
					  <xd:b>@normval</xd:b>. The value of the attribute
					  <xd:i>@hrefclass</xd:i> is prepended to the value of
					  <xd:i>@href</xd:i> with the addition of '://' to form the
					  <xd:b>@normval</xd:b>.</xd:p>
                     <xd:ul>
                        <xd:li>Exception: If content of <xd:i>@hrefclass</xd:i> is already present in
						<xd:i>@href</xd:i> then do not concatenate. Populate
						<xd:b>@normval</xd:b> with content of
					  <xd:i>@href</xd:i>.</xd:li>
                     </xd:ul>
                  </xd:li>
                  <xd:li>
                     <xd:p>When <xd:i>remotelink/@hrefclass</xd:i> does not exist in
					  <xd:i>remotelink</xd:i> then nothing will be prepended to the
					  <xd:i>@href</xd:i> value. That is, <xd:i>remotelink</xd:i>
					with <xd:i>@href</xd:i> attribute but no <xd:i>@hrefclass</xd:i>
					attribute converts to <xd:b>url</xd:b> where the
					  <xd:b>@normval</xd:b> attribute is set to
					  <xd:i>remotelink/@href</xd:i>. </xd:p>
                  </xd:li>
               </xd:ul>
            </xd:li>
            <xd:li>Use case: <xd:i>remotelink[@service='URL']</xd:i> or
				<xd:i>remotelink[@hrefclass='http'][@href]</xd:i>
               <xd:b>but</xd:b> the data content of the remotelink is <xd:b>not</xd:b> a URL. That is, the data
			  content of <xd:i>remotelink</xd:i>
               <xd:b>does not</xd:b> start with text such as "http://...", "https://...", "www.some.domain",
			  nor is it of type (http | https | nohttp | mailto | ftp). In this case,
				<xd:i>remotelink</xd:i> becomes <xd:b>ref:lnlink</xd:b> with
			  children <xd:b>ref:marker</xd:b> and <xd:b>ref:locator</xd:b>,
			  populated as follows: <xd:ol>
                  <xd:li>The <xd:b>ref:lnlink/@service</xd:b> attribute is set to "URL".</xd:li>
                  <xd:li>The contents of <xd:i>remotelink</xd:i> becomes the contents of child
					<xd:b>ref:lnlink/ref:marker</xd:b>. Any subelements (such as
					<xd:i>emph</xd:i> and <xd:i>inlineobject</xd:i>) are converted
				  as described elsewhere by instructions given for those specific elements. </xd:li>
                  <xd:li>The child <xd:b>ref:lnlink/ref:locator</xd:b> is created, and within it
				  the child <xd:b>ref:lnlink/ref:locator/ref:locator-key</xd:b> is created,
				  and within it the children
					<xd:b>ref:lnlink/ref:locator/ref:locator-key/ref:key-name</xd:b> and
					<xd:b>ref:lnlink/ref:locator/ref:locator-key/ref:key-value</xd:b> are
				  created.</xd:li>
                  <xd:li>The <xd:b>ref:key-name/@name</xd:b> attribute is set to "URL".</xd:li>
                  <xd:li>If the <xd:i>remotelink/@hrefclass</xd:i> attribute is present,
					<xd:b>ref:key-value/@value</xd:b> is set to the combined value of
					<xd:i>remotelink/@hrefclass</xd:i>, followed by "://", followed by the
				  value of <xd:i>remotelink/@href</xd:i>.<xd:ul>
                        <xd:li>Exception: If content of <xd:i>@hrefclass</xd:i> is already present in
						<xd:i>@href</xd:i> then do not concatenate. Populate
						<xd:b>@value</xd:b> with content of <xd:i>@href</xd:i>.</xd:li>
                     </xd:ul>
                  </xd:li>
                  <xd:li>If the <xd:i>remotelink/@hrefclass</xd:i> attribute is <xd:b>not</xd:b> present,
					<xd:b>ref:key-value/@value</xd:b> is set to the value of
					<xd:i>remotelink/@href</xd:i>.</xd:li>
               </xd:ol>
            </xd:li>
            <xd:li>Use case: <xd:i>remotelink[@href]</xd:i>
            </xd:li>
            <xd:li>If <xd:i>remotelink</xd:i> doesn't have any attributes, then
				<xd:i>remotelink</xd:i> should be suppressed, but any elements contained
			  within <xd:i>remotelink</xd:i> should be processed according to the appropriate
			  instructions.</xd:li>
         </xd:ul>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:p>In the source documents, <xd:i>remotelink</xd:i> is used for two distinct
			purposes:</xd:p>
            <xd:ul>
               <xd:li>To create an inter-document link; a link to a location outside the containing
				document.</xd:li>
               <xd:li>To create link for a traditional URL.</xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>If <xd:i>refpt</xd:i> and <xd:i>remotelink</xd:i> occurs as adjacent
			siblings then refer to the instructions for converting <xd:i>endnote</xd:i>.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>Exception for NZ17CC:</xd:b> When <xd:i>remotelink</xd:i> is a child of
				<xd:i>emph</xd:i> then conversion should suppress <xd:i>emph</xd:i>
			  element only and process <xd:i>remotelink</xd:i> as per above instruction. See
			  example 17.</xd:p>
         <xd:p>
            <xd:b>Source XML 1: showing service type "DOC-ID" converted to ref:crossreference.</xd:b>
         </xd:p>
         <xd:pre>
					
	&lt;remotelink service="DOC-ID" remotekey1="DOC-ID" dpsi="0062"
				refpt="QLD_ACT_1992-48_20050831"&gt;31/8/2005 to
				18/11/2005&lt;/remotelink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Target XML 1</xd:b>
         </xd:p>
         <xd:pre>
				                              
	&lt;ref:crossreference crossreferencetype="seeAlso"&gt;                                        
		&lt;ref:content&gt;31/8/2005 to 18/11/2005&lt;/ref:content&gt;                                        
			&lt;ref:locator&gt;                                            
				&lt;ref:locator-key&gt;
					&lt;ref:key-name name="DOC-ID"/&gt;
					&lt;ref:key-value value="0062-QLD_ACT_1992-48_20050831"/&gt;
				&lt;/ref:locator-key&gt;		
			&lt;/ref:locator&gt;                                 
	&lt;/ref:crossreference&gt;
			</xd:pre>
         <xd:p>
            <xd:b>Source XML 2: showing <xd:i>remotelink/@xml:lang</xd:i>.</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;remotelink dpsi="03JC" remotekey1="DOC-ID" remotekey2="currentness" 
service="DOC-ID" xml:lang="en"&gt;Current&amp;#x20;to&amp;#x20;June&amp;#x20;23,&amp;#x20;2012&lt;/remotelink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Target XML 2</xd:b>
         </xd:p>
         <xd:pre>
				                              
	&lt;ref:crossreference&gt;                                        
		&lt;ref:content xml:lang="en"&gt;Current&amp;#x20;to&amp;#x20;June&amp;#x20;23,&amp;#x20;2012&lt;/ref:content&gt;
    &lt;ref:locator&gt;
      &lt;ref:locator-key&gt;
         &lt;ref:key-name name="DOC-ID"/&gt;
         &lt;ref:key-value value="03JC-currentness"/&gt;
     &lt;/ref:locator-key&gt;
   &lt;/ref:locator&gt;                                 
	&lt;/ref:crossreference&gt;
				</xd:pre>
         <xd:p>
            <xd:b>Source XML 3: showing service type "DOC-ID" converted to ref:crossreference (multiple,
			immediate siblings).</xd:b>
         </xd:p>
         <xd:pre>
				           
&lt;remotelink service="DOC-ID" remotekey1="REFPTID" dpsi="0062" docidref="ABCD_5641"      
            refpt="QLD_ACT_1992-48_20050831"&gt;31/8/2005 to
            18/11/2005&lt;/remotelink&gt;
&lt;remotelink service="DOC-ID" remotekey1="DOC-ID" dpsi="0000"
            refpt="QLD_ACT_1992-48_00000000"&gt;31/8/2005 to
            18/11/2005&lt;/remotelink&gt;
&lt;remotelink service="DOC-ID" remotekey1="REFPTID" dpsi="1111" docidref="EFGH_2468"  
            refpt="QLD_ACT_1992-48_11111111"&gt;31/8/2005 to
            18/11/2005&lt;/remotelink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Target XML 3</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;ref:crossreferencegroup&gt;
	&lt;ref:crossreference crossreferencetype="seeAlso"&gt;                                        
		&lt;ref:content&gt;31/8/2005 to 18/11/2005&lt;/ref:content&gt;                                        
			&lt;ref:locator anchoridref="QLD_ACT_1992-48_20050831"&gt;                                             
				&lt;ref:locator-key&gt;
					&lt;ref:key-name name="DOC-ID"/&gt;
					&lt;ref:key-value value="0062-ABCD_5641"/&gt;
				&lt;/ref:locator-key&gt;			
			&lt;/ref:locator&gt;                                 
	&lt;/ref:crossreference&gt;
	&lt;ref:crossreference crossreferencetype="seeAlso"&gt;                                        
		&lt;ref:content&gt;31/8/2005 to 18/11/2005&lt;/ref:content&gt;                                        
			&lt;ref:locator&gt;                                            
				&lt;ref:locator-key&gt;
					&lt;ref:key-name name="DOC-ID"/&gt;
					&lt;ref:key-value value="0000-QLD_ACT_1992-48_00000000"/&gt;
				&lt;/ref:locator-key&gt;			
			&lt;/ref:locator&gt;                                 
	&lt;/ref:crossreference&gt;
	&lt;ref:crossreference crossreferencetype="seeAlso"&gt;                                        
		&lt;ref:content&gt;31/8/2005 to 18/11/2005&lt;/ref:content&gt;                                        
			&lt;ref:locator anchoridref="QLD_ACT_1992-48_11111111"&gt;                                            
				&lt;ref:locator-key&gt;
					&lt;ref:key-name name="DOC-ID"/&gt;
					&lt;ref:key-value value="1111-EFGH_2468"/&gt;
				&lt;/ref:locator-key&gt;	
			&lt;/ref:locator&gt;                                 
	&lt;/ref:crossreference&gt;
&lt;/ref:crossreferencegroup&gt;
				</xd:pre>
         <xd:p>
            <xd:b>Source XML 4: showing remotelink/sup</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;remotelink remotekey1="REFPTID" service="DOC-ID" dpsi="0062" docidref="ABCD_5641" refpt="VIC_ACT_6231_FN31"&gt;
&lt;sup&gt;31&lt;/sup&gt;
&lt;/remotelink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Target XML 4</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;ref:crossreferencegroup&gt;
	&lt;ref:crossreference crossreferencetype="seeAlso"&gt;
		&lt;ref:content&gt;&lt;sup&gt;31&lt;/sup&gt;&lt;/ref:content&gt;
			&lt;ref:locator anchoridref="VIC_ACT_6231_FN31"&gt;                                                
				&lt;ref:locator-key&gt;
					&lt;ref:key-name name="DOC-ID"/&gt;
					&lt;ref:key-value value="0062-ABCD_5641"/&gt;
				&lt;/ref:locator-key&gt;                                                    
			&lt;/ref:locator&gt;                                 
	&lt;/ref:crossreference&gt;                                    
&lt;/ref:crossreferencegroup&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Source XML 5: for link to URL, with URL as content</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;remotelink href="www.statedevelopment.qld.gov.au" hrefclass="http" newwindow="YES"&gt;www.statedevelopment.qld.gov.au&lt;/remotelink&gt;

&lt;!-- The following illustrates scenario where content of @hrefclass is already present in @href and so values are not concatenated for target --&gt;

&lt;remotelink href="http://www.acmecorp.com" hrefclass="http" newwindow="YES"&gt;www.acmecorp.com&lt;/remotelink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Target XML 5: for link to URL, with URL as content</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;url normval="http://www.statedevelopment.qld.gov.au"&gt;www.statedevelopment.qld.gov.au&lt;/url&gt;

&lt;url normval="http://www.acmecorp.com"&gt;www.acmecorp.com&lt;/url&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>As shown here in Example 6, the use of an @href attribute without @hrefclass, where 
			the @href attribute does not itself contain an hrefclass, ("http://" for example),
			is not advised because the resulting @normval would not contain
			the hrefclass. Normalized values should be consistent in providing the href class.
			The link to the target may not work.</xd:p>
         <xd:p>
            <xd:b>Source XML 6: for link to URL with no hrefclass attribute, and with URL as
			content</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;remotelink href="www.asx.com" newwindow="YES" service="SEARCH"&gt;www.asx.com&lt;/remotelink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Target XML 6: for link to URL with no hrefclass attribute, and with URL as
			content</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;url normval="www.asx.com"&gt;www.asx.com&lt;/url&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Source XML 7: for link to URL, with non-URL text content</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;remotelink href="www.asx.com" hrefclass="http" newwindow="YES" service="SEARCH" status="valid"&gt;Australian Securities Exchange (ASX)&lt;/remotelink&gt;

&lt;!-- The following illustrates scenario where content of @hrefclass is already present in @href and so values are not concatenated for target --&gt;

&lt;remotelink href="http://www.acmecorp.com" hrefclass="http" newwindow="YES"&gt;Acme Corporation&lt;/remotelink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Target XML 7: for link to URL, with non-URL text content</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;ref:lnlink service="URL"&gt;
  &lt;ref:marker&gt;Australian Securities Exchange (ASX)&lt;/ref:marker&gt;
  &lt;ref:locator&gt;
    &lt;ref:locator-key&gt;
      &lt;ref:key-name name="URL"/&gt;
      &lt;ref:key-value value="http://www.asx.com"/&gt;
    &lt;/ref:locator-key&gt;
  &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;

&lt;ref:lnlink service="URL"&gt;
  &lt;ref:marker&gt;Acme Corporation&lt;/ref:marker&gt;
  &lt;ref:locator&gt;
    &lt;ref:locator-key&gt;
      &lt;ref:key-name name="URL"/&gt;
      &lt;ref:key-value value="http://www.acmecorp.com"/&gt;
    &lt;/ref:locator-key&gt;
  &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Note: </xd:b>Please note that XML comments need to be added around markup <xd:b>ref:marker
		  </xd:b> if it is in <xd:b>ref:lnlink@service=”URL”</xd:b>and the
			<xd:b>ref:key-value@value</xd:b> starts-with
			(<xd:b>'http://www.lexisnexis.com/au/legal/api'</xd:b>). Please see the below target xml for more
		  details. </xd:p>
         <xd:p>
            <xd:b>Source XML 7a: for link to URL, with non-URL text content</xd:b>
         </xd:p>
         <xd:pre>

    &lt;remotelink href=”www.lexisnexis.com/au/legal/api/version1/sr?csi=357205&amp;sr=FILE%2DCODE(%28%23LL00093CF%23+OR+%23LL000CQNJ%23%29)&amp;shr=T&amp;oc=00254"
 hrefclass="http" newwindow="YES" service="SEARCH" status="valid"&gt;Search LexisNexisAU&lt;/remotelink&gt;

		  </xd:pre>
         <xd:p>
            <xd:b>Target XML 7a: for link to URL, with non-URL text content</xd:b>
         </xd:p>
         <xd:pre>

&lt;ref:lnlink service="URL"&gt;
  &lt;!--&lt;ref:marker&gt;Search LexisNexisAU&lt;/ref:marker&gt;--&gt;
  &lt;ref:locator&gt;
    &lt;ref:locator-key&gt;
      &lt;ref:key-name name="URL"/&gt;
      &lt;ref:key-value value="http://www.lexisnexis.com/au/legal/api/version1/sr?csi=357205&amp;sr=FILE%2DCODE(%28%23LL00093CF%23+OR+%23LL000CQNJ%23%29)&amp;shr=T&amp;oc=00254"/&gt;
    &lt;/ref:locator-key&gt;
  &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;

		  </xd:pre>
         <xd:p>
            <xd:b>Source XML 8: for link to URL with no hrefclass attribute, and with non-URL text
			content</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;remotelink href="http://www.legislation.vic.gov.au/Domino/Web_Notes/LDMS/PubStatbook.nsf/b05145073fa2a882ca256da4001bc4e7/DDB2D286D7B9C8E2CA2578C6001CCC82/$FILE/11-058sr%20authorised.pdf" service="URL" newwindow="YES"&gt;Government Website&lt;/remotelink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Target XML 8: for link to URL with no hrefclass attribute, and with non-URL text
			content</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;ref:lnlink service="URL"&gt;
  &lt;ref:marker&gt;Government Website&lt;/ref:marker&gt;
  &lt;ref:locator&gt;
    &lt;ref:locator-key&gt;
      &lt;ref:key-name name="URL"/&gt;
      &lt;ref:key-value value="http://www.legislation.vic.gov.au/Domino/Web_Notes/LDMS/PubStatbook.nsf/b05145073fa2a882ca256da4001bc4e7/DDB2D286D7B9C8E2CA2578C6001CCC82/$FILE/11-058sr%20authorised.pdf"/&gt;
    &lt;/ref:locator-key&gt;
  &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;

				</xd:pre>
         <xd:p>
            <xd:ul>
               <xd:li>If <xd:i>remotelink[@service= ‘DOC-ID’]</xd:i> is a child of
				  <xd:i>glp:note</xd:i>; glp:note becomes
				  <xd:b>note/bodytext/p/text</xd:b>, <xd:i>remotelink[@service=
				  ‘DOC-ID’]</xd:i> becomes <xd:b>ref:crossreference</xd:b> (see
				conversion rules in remotelink section). </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML 9:</xd:b>
         </xd:p>
         <xd:pre>

&lt;glp:note&gt;
    &lt;remotelink dpsi="006P" refpt="AFL.FL.FLA75.PT1_2" remotekey1="REFPTID" service="DOC-ID"  docidref="ABCD_5641" status="unval"&gt;
        Next page in this legislation
    &lt;/remotelink&gt;
&lt;/glp:note&gt;

		  </xd:pre>
         <xd:p>
            <xd:b>Target XML 9</xd:b>
         </xd:p>
         <xd:pre>

&lt;note&gt;
    &lt;bodytext&gt;
        &lt;p&gt;
            &lt;text&gt;					                            
                &lt;ref:crossreference crossreferencetype="seeAlso"&gt;                                        
                    &lt;ref:content&gt;Next page in this legislation&lt;/ref:content&gt;                                        
                    &lt;ref:locator anchoridref="AFL.FL.FLA75.PT1_2"&gt;                                            
                        &lt;ref:locator-key&gt;
                            &lt;ref:key-name name="DOC-ID"/&gt;
                            &lt;ref:key-value value="006P-ABCD_5641"/&gt;
                        &lt;/ref:locator-key&gt;		
                    &lt;/ref:locator&gt;                                 
                &lt;/ref:crossreference&gt;                             
            &lt;/text&gt;
        &lt;/p&gt;
    &lt;/bodytext&gt;
&lt;/note&gt;

		  </xd:pre>
         <xd:p>
            <xd:b>Source XML 10: <xd:i>remotelink</xd:i> as a child of
			  <xd:i>ci:cite/ci:content</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
			
      &lt;ci:cite searchtype="LEG-REF"&gt;
        &lt;ci:content&gt;
          &lt;remotelink refpt="CTH_ACT_1993-80" dpsi="005X" docidref="ABCD_9876" 
            remotekey1="REFPTID" service="DOC-ID" 
            alttext="Click to link to LawNow Legislation"&gt;Superannuation (Resolution of Complaints) Act 1993&lt;/remotelink&gt;.
        &lt;/ci:content&gt;
      &lt;/ci:cite&gt;			
			
			</xd:pre>
         <xd:p>
            <xd:b>Target XML 10: <xd:i>remotelink</xd:i> as a child of
			  <xd:i>ci:cite/ci:content</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;lnci:cite type="legislation"&gt;
    &lt;lnci:content&gt;
        &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
            &lt;ref:content&gt;Superannuation (Resolution of Complaints) Act 1993&lt;/ref:content&gt;
            &lt;ref:locator anchoridref="CTH_ACT_1993-80"&gt;
                &lt;ref:locator-key&gt;
                    &lt;ref:key-name name="DOC-ID"/&gt;  
                    &lt;ref:key-value value="005X-ABCD_9876"/&gt;
                &lt;/ref:locator-key&gt;
            &lt;/ref:locator&gt;
        &lt;/ref:crossreference&gt;
    &lt;/lnci:content&gt;
&lt;/lnci:cite&gt;			

			</xd:pre>
         <xd:p>
            <xd:b>Source XML 11: <xd:i>remotelink</xd:i> as a child of
			  <xd:i>title</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
				
&lt;level id="ACLPP_C1.SGM_ACLP.1.2.0015" leveltype="para0" toc-caption="[1.2.0015] Interpretation rules applicable to the Corporations Act: Pt&amp;#x00A0;1.2" subdoc="true"&gt;
    &lt;!-- ETC. --&gt;
    &lt;heading searchtype="COMMENTARY"&gt;
        &lt;edpnum&gt;
            &lt;refpt type="ext" id="ACLP.1.2.0015"&gt;&lt;/refpt&gt;[1.2.0015]&lt;/edpnum&gt;
        &lt;title&gt;Interpretation rules applicable to the Corporations Act:
            &lt;remotelink refpt="ACLL.CL.PT1-2" dpsi="006K" remotekey1="REFPTID" service="DOC-ID"  docidref="EFGH_2468"&gt;Pt&amp;#x00A0;1.2&lt;/remotelink&gt;
        &lt;/title&gt;
    &lt;/heading&gt;
    &lt;bodytext searchtype="COMMENTARY"&gt;
        &lt;!-- ETC. --&gt;
    &lt;/bodytext&gt;
&lt;/level&gt;
				</xd:pre>
         <xd:p>
            <xd:b>Target XML 11: <xd:i>remotelink</xd:i> as a child of
			  <xd:i>title</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
				
&lt;seclaw:level xml:id="ACLPP_C1.SGM_ACLP.1.2.0015" leveltype="paragraph" alternatetoccaption="&amp;#x005B;1.2.0015&amp;#x005D; Interpretation rules applicable to the Corporations Act: Pt&amp;#x00A0;1.2" includeintoc="true"&gt;
    &lt;ref:anchor id="ACLP.1.2.0015" anchortype="global"/&gt;
    &lt;heading&gt;
        &lt;desig&gt;&amp;#x005B;1.2.0015&amp;#x005D;&lt;/desig&gt;
        &lt;title&gt;Interpretation rules applicable to the Corporations Act: &lt;ref:crossreferencegroup&gt;
                    &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
                        &lt;ref:content&gt;Pt&amp;#x00A0;1.2&lt;/ref:content&gt;
                        &lt;ref:locator anchoridref="ACLL.CL.PT1-2"&gt;
                            &lt;ref:locator-key&gt;
                                &lt;ref:key-name name="DOC-ID"/&gt;
                                &lt;ref:key-value value="006K-EFGH_2468"/&gt;
                            &lt;/ref:locator-key&gt;
                        &lt;/ref:locator&gt;
                    &lt;/ref:crossreference&gt;
                &lt;/ref:crossreferencegroup&gt;&lt;/title&gt;
    &lt;/heading&gt;
    &lt;!-- ETC. --&gt;
    &lt;seclaw:bodytext&gt;
        &lt;!-- ETC. --&gt;
    &lt;/seclaw:bodytext&gt;
&lt;/seclaw:level&gt;
				</xd:pre>
         <xd:p>
            <xd:b>Source XML 12: <xd:i>remotelink</xd:i> with no attributes</xd:b>
         </xd:p>
         <xd:pre>

&lt;remotelink&gt;&lt;emph typestyle="smcaps"&gt;agency&lt;/emph&gt;&lt;/remotelink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Target XML 12: <xd:i>remotelink</xd:i> with no attributes</xd:b>
         </xd:p>
         <xd:pre>

&lt;emph typestyle="smcaps"&gt;agency&lt;/emph&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Source XML 13: for link to URL with inlineobject as content</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;remotelink href="www.kpmg.com.au/default.aspx?tabid=145" hrefclass="http" newwindow="YES"&gt;
  &lt;inlineobject type="image" attachment="ln-server" filename="kpmglogo.gif"/&gt;
&lt;/remotelink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Target XML 13: for link to URL with inlineobject as content</xd:b>
         </xd:p>
         <xd:pre>
				
&lt;ref:lnlink service="URL"&gt;
  &lt;ref:marker&gt;
    &lt;ref:inlineobject&gt;
      &lt;ref:locator&gt;
        &lt;ref:locator-key&gt;
            &lt;ref:key-name name="object-key"/&gt;
            &lt;ref:key-value value="X-Y-kpmglogo"/&gt;   &lt;!-- X and Y are LNI and SMI values obtained from CSSM --&gt;
        &lt;/ref:locator-key&gt;
        &lt;ref:locator-params&gt;
            &lt;proc:param name="componentseq" value="1"/&gt;
            &lt;proc:param name="object-type" value="image"/&gt; &lt;!-- allowable values: “image”; (from .jpg, .gif, .png, .bmp)--&gt;
            &lt;proc:param name="object-smi" value=""/&gt;    &lt;!-- This @value assignment is done by conversion program --&gt;
        &lt;/ref:locator-params&gt;
      &lt;/ref:locator&gt;
    &lt;/ref:inlineobject&gt;
  &lt;/ref:marker&gt;
  &lt;ref:locator&gt;
    &lt;ref:locator-key&gt;
      &lt;ref:key-name name="URL"/&gt;
      &lt;ref:key-value value="http://www.kpmg.com.au/default.aspx?tabid=145"/&gt;
    &lt;/ref:locator-key&gt;
  &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Source XML 14: <xd:i>emph</xd:i> as child of
			  <xd:i>remotelink</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

    &lt;remotelink service="DOC-ID" remotekey1="REFPTID" refpt="04M2_1_1662:HTCOMM-PARAGRAPH" dpsi="04M2"&gt;
           HEC &lt;emph typestyle="bf"&gt;[1662]&lt;/emph&gt;
     &lt;/remotelink&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Source XML 14: <xd:i>emph</xd:i> as child of
			  <xd:i>remotelink</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
				
 &lt;ref:crossreference crossreferencetype="seeAlso"&gt;                                        
		&lt;ref:content&gt;HEC &lt;emph typestyle="bf"&gt;[1662]&lt;/emph&gt;&lt;/ref:content&gt;                                        
			&lt;ref:locator anchoridref="04M2_1_1662:HTCOMM-PARAGRAPH"&gt;                                             
				&lt;ref:locator-key&gt;
					&lt;ref:key-name name="DOC-ID"/&gt;
					&lt;ref:key-value value="04M2-ABC"/&gt;
				&lt;/ref:locator-key&gt;			
			&lt;/ref:locator&gt;                                 
	&lt;/ref:crossreference&gt;

				</xd:pre>
         <xd:p>
            <xd:b>Source XML 15: <xd:i>remotelink</xd:i> occurs as multiple, immediate siblings
			and without intermediary text within <xd:i>title</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;leg:level&gt;
 &lt;leg:level-vrnt leveltype="prov1"&gt;
  &lt;leg:heading&gt;
   &lt;title&gt;&lt;refpt id="EU_LEGISLATION:31998L0096R_02:" type="ext"/&gt;Corrigendum to Council &lt;remotelink service="DOC-ID" remotekey1="REFPTID" refpt="EU_LEGISLATION:Directive_98_96_EC_" dpsi="08LU" docidref="08LU_EU_LEGISLATION:Directive_98_96_EC_"&gt;Directive 98/96/EC&lt;/remotelink&gt; of 14 December 1998 amending, inter alia, as regards unofficial field inspections under &lt;remotelink service="DOC-ID" remotekey1="REFPTID" refpt="EU_LEGISLATION:Directives_66_400_EEC__" dpsi="08LU" docidref="08LU_EU_LEGISLATION:Directives_66_400_EEC__"&gt;Directives 66/400/EEC, &lt;/remotelink&gt;66/401/EEC, 66/402/EEC, 66/403/EEC, 69/208/EEC, 70/457/EEC and 70/458/EEC on the marketing of beet seed, fodder plant seed, cereal seed, seed potatoes, seed of oil and fibre plants and vegetable seed and on the common catalogue of varieties of agricultural plant species (OJ L 25 of 1.2
   &lt;remotelink service="DOC-ID" remotekey1="REFPTID" refpt="EU_LEGISLATION:_EEC__66_401" dpsi="08LU" docidref="08LU_EU_LEGISLATION:_EEC__66_401"&gt;/EEC, 66/401&lt;/remotelink&gt;
   &lt;remotelink service="DOC-ID" remotekey1="REFPTID" refpt="EU_LEGISLATION:_EEC__66_402" dpsi="08LU" docidref="08LU_EU_LEGISLATION:_EEC__66_402"&gt;/EEC, 66/402&lt;/remotelink&gt;
   &lt;remotelink service="DOC-ID" remotekey1="REFPTID" refpt="EU_LEGISLATION:_EEC__66_403" dpsi="08LU" docidref="08LU_EU_LEGISLATION:_EEC__66_403"&gt;/EEC, 66/403&lt;/remotelink&gt;
   &lt;remotelink service="DOC-ID" remotekey1="REFPTID" refpt="EU_LEGISLATION:_EEC__69_208" dpsi="08LU" docidref="08LU_EU_LEGISLATION:_EEC__69_208"&gt;/EEC, 69/208&lt;/remotelink&gt;
   &lt;remotelink service="DOC-ID" remotekey1="REFPTID" refpt="EU_LEGISLATION:_EEC__70_457" dpsi="08LU" docidref="08LU_EU_LEGISLATION:_EEC__70_457"&gt;/EEC, 70/457&lt;/remotelink&gt;/EEC and
   &lt;remotelink service="DOC-ID" remotekey1="REFPTID" refpt="EU_LEGISLATION:_70_458" dpsi="08LU" docidref="08LU_EU_LEGISLATION:_70_458"&gt; 70/458&lt;/remotelink&gt;/EEC on the marketing of beet seed, fodder plant seed, cereal seed, seed potatoes, seed of oil and fibre plants and vegetable seed and on the common catalogue of varieties of agricultural plant species (OJ L 25 of 1.2.1999)&lt;/title&gt;
  &lt;/leg:heading&gt;
  &lt;!-- ETC. --&gt;
 &lt;/leg:level-vrnt&gt;
&lt;/leg:level&gt;
		  </xd:pre>
         <xd:p>
            <xd:b>Target XML 15: <xd:i>remotelink</xd:i> occurs as multiple, immediate siblings
			and without intermediary text within <xd:i>title</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;primlaw:level leveltype="section"&gt;
 &lt;heading&gt;
  &lt;title&gt;Corrigendum to Council &lt;ref:crossreference crossreferencetype="seeAlso"&gt;&lt;ref:content&gt;Directive 98/96/EC &lt;/ref:content&gt;&lt;ref:locator anchoridref="EU_LEGISLATION_Directive_98_96_EC_"&gt;&lt;ref:locator-key&gt;&lt;ref:key-name name="DOC-ID"/&gt;&lt;ref:key-value value="08LU-08LU_EU_LEGISLATION_Directive_98_96_EC_"/&gt;&lt;/ref:locator-key&gt;&lt;/ref:locator&gt;&lt;/ref:crossreference&gt; of 14 December 1998 amending, inter alia, as regards unofficial field inspections under &lt;ref:crossreference crossreferencetype="seeAlso"&gt;&lt;ref:content&gt;Directives 66/400/EEC, &lt;/ref:content&gt;&lt;ref:locator anchoridref="EU_LEGISLATION_Directives_66_400_EEC__"&gt;&lt;ref:locator-key&gt;&lt;ref:key-name name="DOC-ID"/&gt;&lt;ref:key-value value="08LU-08LU_EU_LEGISLATION_Directives_66_400_EEC__"/&gt;&lt;/ref:locator-key&gt;&lt;/ref:locator&gt;&lt;/ref:crossreference&gt;66/401/EEC, 66/402/EEC, 66/403/EEC, 69/208/EEC, 70/457/EEC and 70/458/EEC on the marketing of beet seed, fodder plant seed, cereal seed, seed potatoes, seed of oil and fibre plants and vegetable seed and on the common catalogue of varieties of agricultural plant species (OJ L 25 of 1.2
   &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
    &lt;ref:content&gt;/EEC, 66/401&lt;/ref:content&gt;
    &lt;ref:locator anchoridref="EU_LEGISLATION__EEC__66_401"&gt;
     &lt;ref:locator-key&gt;
      &lt;ref:key-name name="DOC-ID"/&gt;
      &lt;ref:key-value value="08LU-08LU_EU_LEGISLATION__EEC__66_401"/&gt;
     &lt;/ref:locator-key&gt;
    &lt;/ref:locator&gt;
   &lt;/ref:crossreference&gt;
   &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
    &lt;ref:content&gt;/EEC, 66/402&lt;/ref:content&gt;
    &lt;ref:locator anchoridref="EU_LEGISLATION__EEC__66_402"&gt;
     &lt;ref:locator-key&gt;
      &lt;ref:key-name name="DOC-ID"/&gt;
      &lt;ref:key-value value="08LU-08LU_EU_LEGISLATION__EEC__66_402"/&gt;
     &lt;/ref:locator-key&gt;
    &lt;/ref:locator&gt;
   &lt;/ref:crossreference&gt;
   &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
    &lt;ref:content&gt;/EEC, 66/403&lt;/ref:content&gt;
    &lt;ref:locator anchoridref="EU_LEGISLATION__EEC__66_403"&gt;
     &lt;ref:locator-key&gt;
      &lt;ref:key-name name="DOC-ID"/&gt;
      &lt;ref:key-value value="08LU-08LU_EU_LEGISLATION__EEC__66_403"/&gt;
     &lt;/ref:locator-key&gt;
    &lt;/ref:locator&gt;
   &lt;/ref:crossreference&gt;
   &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
    &lt;ref:content&gt;/EEC, 69/208&lt;/ref:content&gt;
    &lt;ref:locator anchoridref="EU_LEGISLATION__EEC__69_208"&gt;
     &lt;ref:locator-key&gt;
      &lt;ref:key-name name="DOC-ID"/&gt;
      &lt;ref:key-value value="08LU-08LU_EU_LEGISLATION__EEC__69_208"/&gt;
     &lt;/ref:locator-key&gt;
    &lt;/ref:locator&gt;
   &lt;/ref:crossreference&gt;
   &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
    &lt;ref:content&gt;/EEC, 70/457&lt;/ref:content&gt;
    &lt;ref:locator anchoridref="EU_LEGISLATION__EEC__70_457"&gt;
     &lt;ref:locator-key&gt;
      &lt;ref:key-name name="DOC-ID"/&gt;
      &lt;ref:key-value value="08LU-08LU_EU_LEGISLATION__EEC__70_457"/&gt;
     &lt;/ref:locator-key&gt;
    &lt;/ref:locator&gt;
   &lt;/ref:crossreference&gt;/EEC and
   &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
    &lt;ref:content&gt; 70/458&lt;/ref:content&gt;
    &lt;ref:locator anchoridref="EU_LEGISLATION__70_458"&gt;
     &lt;ref:locator-key&gt;
      &lt;ref:key-name name="DOC-ID"/&gt;
      &lt;ref:key-value value="08LU-08LU_EU_LEGISLATION__70_458"/&gt;
     &lt;/ref:locator-key&gt;
    &lt;/ref:locator&gt;
   &lt;/ref:crossreference&gt;/EEC on the marketing of beet seed, fodder plant seed, cereal seed, seed potatoes, seed of oil and fibre plants and vegetable seed and on the common catalogue of varieties of agricultural plant species (OJ L 25 of 1.2.1999)&lt;/title&gt;
  &lt;/heading&gt;
  &lt;!-- ETC. --&gt;
&lt;/primlaw:level&gt;  

		  </xd:pre>
         <xd:p>
            <xd:b>Source XML 16: <xd:i>remotelink[@service="QUERY"]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;text&gt;Consultation Paper: The Award of Costs from Central Funds in Criminal
        Cases - &lt;remotelink service="QUERY"
            remotekey1="DIGEST-CITATION(LNB News 06/11/2008 25)"
            remotekey2="All Subscribed Current Awareness Sources" cmd="f:exp"
            alttext="References to"&gt;LNB News 06/11/2008 25&lt;/remotelink&gt;; &lt;/text&gt;
&lt;/p&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML 16: <xd:i>remotelink[@service="QUERY"]</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;text&gt;Consultation Paper: The Award of Costs from Central Funds in Criminal
        Cases - LNB News 06/11/2008 25; &lt;/text&gt;
&lt;/p&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Source XML 17: <xd:i>remotelink</xd:i> as a child of <xd:i>emph</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
&lt;ci:cite searchtype="LEG-REF"&gt;
    &lt;ci:content&gt;
        &lt;citefragment searchtype="LEG-NAME-REF"&gt;
            &lt;emph typestyle="it"&gt;
                &lt;remotelink dpsi="0069" remotekey1="REFPTID" service="DOC-ID" refpt="1952A52"
                    docidref="1952A52.BODY"&gt;Land Transfer Act 1952&lt;/remotelink&gt;
            &lt;/emph&gt;
        &lt;/citefragment&gt;
        &lt;emph typestyle="it"&gt;, ss 62, 105 and 119&lt;/emph&gt;
    &lt;/ci:content&gt;
&lt;/ci:cite&gt;
	</xd:pre>
         <xd:p>
            <xd:b>Target XML 17: <xd:i>remotelink</xd:i> as a child of <xd:i>emph</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
&lt;lnci:cite type="legislation"&gt;
    &lt;lnci:content&gt;
            &lt;ref:crossreference crossreferencetype="seeAlso"&gt;
                &lt;ref:content&gt;Land Transfer Act 1952&lt;/ref:content&gt;
                &lt;ref:locator anchoridref="_1952A52"&gt;
                    &lt;ref:locator-key&gt;
                        &lt;ref:key-name name="DOC-ID"/&gt;
                        &lt;ref:key-value value="0069-1952A52.BODY"/&gt;
                    &lt;/ref:locator-key&gt;
                &lt;/ref:locator&gt;
            &lt;/ref:crossreference&gt;
        &lt;emph typestyle="it"&gt;, ss 62, 105 and 119&lt;/emph&gt;
    &lt;/lnci:content&gt;
&lt;/lnci:cite&gt;
	</xd:pre>
         <!--Changes2016-11-16: Added to note regarding applying any rules related to 
			@anchoridref, referring specifically to section for "Identifiers to ID Data Type - 
			Handling Pattern Restrictions".2011-12-16: Created. 2011-12-16: Changed URL/Email link instructions and example to map to url target element. 2011-12-22: Defined a rule for glp:note/remotelink, per linking strategy.2011-12-22: Removed reference to Email links, these do not happen in AU nor NZ data. 2011-12-22: Fixed formating of a sublist. 2011-12-22: Updated to match linking strategy. 2012-01-17: Updated instruction and example for handling remotelink[@service="DOC-ID"].2012-01-17: Added example for handling of remotelink/sup.2012-02-23: Added conversion instructions and the NL example for /remotelink @dpsi for the
			use case - remotelink @service='DOC-ID'.2012-02-28: Instruction update for handling remotelink appear in
			  title.2012-02-28: Example added for handling remotelink appear in
			  title.2012-02-29: Added instruction and example when remotelink has no
			  @hrefclass.2012-03-12: Added instruction and example for handling of scenario glp:note/remotelink in
			AU legislation/Courtrule.2012-03-15: Added instruction for single versus multiple, sibling occurrences of
			  remotelink.2012-03-16: Corrected target markup for ref:key-name/@name value.
			Changed from "DOC-ID" to "REFPTID.2012-04-26: Modified the instructions for the use case:
			  remotelink[@service='DOC-ID'] to include the text -'without
			intermediary text'.2012-04-27: Made fundemental modifications the instructions regarding
			  remotelink[@service='URL']. This is now usually converted to
			  ref:lnlink and only converted to url under
			certain conditions as described in the instructions. 2012-05-09: Removed the reference to AU Legislation/Courtrule: for the rule when
			  remotelink is the child of glp:note . This
			instruction is common across content types and not just AU Legis/Courtrule2012-05-14: Removed a note for handling remotelink appear in
			  title.2012-05-14: Example updated for handling title/remotelink.2012-05-24: Instructions updated for handling
			  glp:note/remotelink/@service='QUERY'.2012-06-06: Updated the instruction The ref:marker/@service attribute is set to "URL"
			  to The ref:lnlink/@service attribute is set to "URL".2012-06-12: Updated the instructions for use case:
			  remotelink[@service='DOC-ID']. Described exactly how to obtain a
			value for ref:key-value/@value depending on what other attributes and
			values are present.2012-07-04: Added instructions for the situation when remotelink
			doesn't have any attributes.2012-07-12: modified instruction for glp:note/remotelink handling when
			remotelink@service="DOC-ID".2012-07-31: Replaced the instruction "some other form of a URL" with dtd values (http |
			https | nohttp | mailto | ftp).2012-07-31: Updated the instructions for use case
			  remotelink[@service='DOC-ID'] with directions to set the value of
			  ref:crossreference/@crossreferencetype to "seeAlso".2012-08-17: Updated the instructions for use case
			  remotelink[@service='DOC-ID'] with new instructions for
			  ref:crossreference/ref:locator/ref:locator-key.2012-08-17: Moved handling for NZ Cases to a separate module.2012-09-05: Added to note for ref:locator/@anchoridref that begins
			with a number... Also apply other identifier data type format as used for
			  xml:id and ref:anchor/@id (e.g. change colon
			to underscore).2012-12-03: Instruction and example added for
			remotelink/@xml:lang.2013-01-22: Instruction and example added for
			  ci:cite/ci:content/remotelink specifying that the
			  remotelink is to be converted to
			  ref:crossreference but the containing elements' start-tags and
			end-tags (ci:cite and ci:content) are
			dropped.2013-02-18: Target example updated per inlineobject instructions. 2013-02-18: Created two sections, one for "Release 4.0 and
				after" and another for "Pre-Release 4.0".2013-03-11: Instruction and example added on how to handle
				ref:marker  if it is in
				ref:lnlink@service=”URL”and the
				ref:key-value@value starts-with (.,
				'http://www.lexisnexis.com/au/legal/api')2013-04-10: Added Source XML 7a: for link to URL, with non-URL
			  text content because it was previously missing, only the target example was here.2013-04-30: Updated target sample according to latest Apollo
			  markup.2013-05-01: Removed instructions for section "Pre-Release
				4.0" because according to latest Apollo markup, section "Release 4.0 and
				after" and section "Pre-Release 4.0" now have similar conversion
			markup.2013-05-01: "Instruction added for
				ci:cite/ci:content/remotelink specifying that the
				remotelink is to be converted to
				ref:crossreference but the containing elements' start-tags and
			  end-tags (ci:cite and ci:content) are
			  dropped", has been removed from the instructions and now remotelink
			  will be converted to the resulting mapping where it is. For more details you can see
			  example: Source XML 10: remotelink as a child of
				  ci:cite/ci:content2013-05-08: Extended the list of allowable values for image
			  handling.2013-06-03: Updated the Target XML 2 by removing the
				@crossreferencetype for Canada example.2013-08-22: Not a rule change. Modified Sample #10 on
				ci:cite/ci:content/remotelink. Removed target attribute
				lnci:cite[@citeref] because value captured in
				ref:crossreference/ref:locator[@anchoridref].2013-10-03: Added use case where remotelink contains @href
			  which is a URL but does not contain @hrefclass='http'.2013-10-23: Added Example when
				remotelink having child emph. Webteam #
			  2398162014-02-03: Instruction updated if
				remotelink occurs as multiple, immediate siblings and without
			  intermediary text within title. Also added a example for the same
			  scenario. Phase 5 UK discussion-defect tracking issue #1612014-02-25: Updated instruction and created new example (#16)
			  for handling remotelink[@service="QUERY"]. New instruction
			  preserves pcdata but suppresses remotelink markup. Webstar #250335.
			  Change applies immediately to all Pacific streams, and in the long run to all
			  streams.2014-10-27: Minor. Within use case for
				@service="DOC-ID", rule for
				@remotekey1="REFPTID" now also applies when
				@remotekey1="REFPT". That is, the condition is expanded to
			  include value "REFPT"; the mapping is unchanged. The value
				"REFPT" is new in Oct 2014 redelivery of UK11-DN but the rule
			  applies to any stream where @remotekey1="REFPT" may occur. R4.5
			  Content Issue 2003.2015-01-09: For the two use cases associated with url (target
				url or ref:lnlink): Added exceptional rule
			  to not concatenate values when @hrefclass content is already
			  present in @href. Expanded examples 5 and 7 to illustrate the
			  scenario. Responds to data for UK10 Dictionaries but applies in general. R4.5 Content
			  Issue 2120.2015-05-22: Added an instruction to explicitly indicate remotelink/@status is always dropped (suppressed). This is a very low-priority change and has been added for technical correctness, particularly with respect to new CIs. Existing scripts do not have to implement this change unless needed since prior to the change remotelink/@status handling was not explicitly specified.2015-06-24: Added clarification note about url, @normval, and @hrefclass. Webstar 302055.2016-02-05: Added note and example when
				remotelink is a child of emph. Applicable
			on NZ17CC, Webstar: 319232 and 318735.2016-08-03: Added Note about xml snippets that illustrate
			image handling. Note summarizes move from Apollo to Blobstore application. UK is
			first LBU to move to Blobstore.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_remotelink-LxAdv-ref.crossreference.dita  -->
   <xsl:template match="remotelink/@status"/>
   <!-- JL: suppressing attributes as templates because they are used in more complex ways below -->
   <xsl:template match="remotelink/@refpt"/>

   <xsl:template match="remotelink/@dpsi"/>

   <xsl:template match="remotelink/@service"/>

   <xsl:template match="remotelink/@remotekey1"/>

   <xsl:template match="remotelink[@hrefclass ne 'http'  and @service = 'SEARCH']">
      <xsl:comment>
         <xsl:copy-of select="."/>
      </xsl:comment>
   </xsl:template>

   <xsl:template match="remotelink[ @service = 'QUERY' ][ not( ancestor::docinfo:assoc-links or parent::glp:note[ not( starts-with( $streamID , 'NZ' ) ) ] ) ]"><!--  Original Target XPath:  ref:crossreference   --><!-- Suppress remotelink and retain the content -->
      <xsl:apply-templates/>
   </xsl:template>

   <xsl:template match="remotelink[ancestor::docinfo:assoc-links][ @service = 'QUERY' ][ not( $streamID = ( 'CA03', 'CA05' , 'CA06' , 'CA07', 'CA08' ) ) ]"/>
   <!--Commeted below line for stop the warning of duplicate rule of glp:note/remotelink-->   <!--<xsl:template match="glp:note/remotelink[ @service = 'QUERY' ][ starts-with( $streamID , 'NZ' ) ]"/>-->
   <xsl:template name="remotelinkDOCID"><!--  Original Target XPath:  ref:crossreference   -->
      <ref:crossreference><!-- following atts and inlineobject template from modules/cttr/HK08k_subseqcases_cttr.annot.xsl --><!-- Sudhanshu Srivastava : Added condition for parent cttr:annot and streamID CA03. --><!-- Awantika: Added inlineobject for AU01 -->
         <xsl:attribute name="crossreferencetype"
                        select="if (((parent::source_cttr:annot or parent::source_cttr:annot or ancestor::citefragment[ancestor::case:references]) and $streamID=('HK08' , 'AU02', 'AU04','UK05','CA03')) or (ancestor::citefragment and inlineobject and $streamID=('NZ09', 'AU17'))or (parent::ci:content and $streamID='AU20') or inlineobject and $streamID='AU01') then 'citatorAlert' else 'seeAlso'"/>
         <xsl:if test="(parent::source_cttr:annot or parent::source_cttr:annot and $streamID=('HK08' , 'AU02', 'AU04','UK05','CA03')) or (ancestor::citefragment and inlineobject and $streamID=('NZ09', 'AU17')) or (parent::ci:content and $streamID='AU20') or inlineobject and $streamID='AU01'">
            <xsl:attribute name="referencedresourcetype" select="'citator'"/>
            <xsl:apply-templates select="inlineobject" mode="citator-ref"/>
         </xsl:if>
         <!-- JD: 20170525: (from UK05) following if test for att 'referencedresourcesentiment' from modules/cttr/UK05_Citator_annotations_cttr.annot-LxAdv-cttr.refs.xsl -->
         <xsl:if test="parent::source_cttr:annot/@signal or parent::source_cttr:annot/@signal and $streamID=('UK05','CA03')">
            <xsl:attribute name="referencedresourcesentiment">
               <xsl:choose>
                  <xsl:when test="parent::source_cttr:annot/@signal='citation'">
                     <xsl:value-of select="'none'"/>
                  </xsl:when>
                  <xsl:when test="not(parent::source_cttr:annot/@signal='citation') and parent::source_cttr:annot/@signal">
                     <xsl:value-of select="parent::source_cttr:annot/@signal"/>
                  </xsl:when>
                  <xsl:when test="parent::source_cttr:annot/@signal='citation'">
                     <xsl:value-of select="'none'"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:copy-of select="parent::source_cttr:annot/@signal"/>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:attribute>
         </xsl:if>
         <xsl:if test="ancestor::citefragment and inlineobject and $streamID=('AU17')">
            <xsl:attribute name="referencedresourcesentiment">
               <xsl:value-of select="lower-case(substring-before(inlineobject/@alttext, ' '))"/>
            </xsl:attribute>
         </xsl:if>
         <!-- JL: Ok to output empty ref:content as ref:content is a required element -->
         <!-- Awantika:24-07-2017: for AU20 added parent::ci:content -->
         <ref:content>
            <xsl:if test="$streamID='AU19_CC'">
               <xsl:attribute name="xml:lang">
                  <xsl:value-of select="/CASEDOC/docinfo/docinfo:doc-lang/@lang"/>
               </xsl:attribute>
            </xsl:if>
            <xsl:copy-of select="@xml:lang"/>
            <xsl:apply-templates select="if($streamID='UK12') then @* except(@xml:lang,@refpt) else @* except@xml:lang"/>
            <xsl:if test="parent::source_cttr:annot and $streamID=('HK08' , 'AU02', 'AU04') or parent::ci:content and $streamID='AU20'">
               <xsl:value-of select="if (contains(inlineobject/@alttext, ' - Click for CaseBase entry')) then substring-before(inlineobject/@alttext, ' - Click for CaseBase entry') else inlineobject/@alttext"/>
            </xsl:if>
            <xsl:if test=" $streamID=('NZ09', 'AU17','AU01','NZ11','AU10','HK07')">
               <xsl:value-of select="if (contains(inlineobject/@alttext, ' - Click for CaseBase entry')) then substring-before(inlineobject/@alttext, ' - Click for CaseBase entry') else inlineobject/@alttext"/>
            </xsl:if>
            <!-- Sudhanshu Srivastava: Added if condition for getting ref content for CA03 -->
            <xsl:if test="parent::source_cttr:annot and $streamID=('CA03')">
               <xsl:value-of select="if (contains(inlineobject/@alttext, 'QuickCITE - ')) then substring-after(inlineobject/@alttext, 'QuickCITE - ') else inlineobject/@alttext"/>
            </xsl:if>
            <!-- Awantika:24-07-2017: blobstore mapping was getting created therefore added 'except' for AU20 not to create that instead create the 
					below ref:locator-->
            <xsl:apply-templates select="node() except inlineobject[parent::remotelink[parent::ci:content][$streamID=('AU20','HK07')]] except inlineobject[$streamID='AU01']"/>
         </ref:content>
         <ref:locator>
            <xsl:for-each select=" if (@refpt) then @refpt else @remotekey2"><!-- MDS - 2017-05-12 - Created choose statement to deal with empty @refpt in source resulting in empty @anchoridref in target. -->
               <xsl:choose>
                  <xsl:when test="normalize-space(.) = ''"/>
                  <xsl:otherwise><!-- JD: 2017-05-26: adding 'if' to prevent @anchoridref being added from markup like this:
							<remotelink remotekey1="DOC-ID" service="DOC-ID" remotekey2="a1baecf6-dc1f-4bd0-ba0c-a91177f0efe6" dpsi="03W6" status="valid"/>
							so as to match DT output.
							--><!-- Sudhanshu Srivastava: addrd StreamID CA03, no need to generate anchoridref attribute. --><!-- Paul: this is often the case.  May want "and @remotekey1="REFPTID" in this somewhere.
								I'm getting it with DOC-ID in the attribute.  AU08
								PS2017042700263627135LNIAUCOURTRULES_input_VIC_REG_2008-14810000.xml
			                    <remotelink dpsi="03AP" remotekey1="DOC-ID" remotekey2="LAWNOW_LEG_LAUNCH_VIC" service="DOC-ID">LawNow Home Page</remotelink>
							If @remotekey1="REFPTID" then
								– Create ref:locator/@anchoridref with value from @refpt or @remotekey2, which ever is present (if both are present, use
								@refpt).-->
                     <xsl:if test="not($streamID='UK05' or $streamID='CA03' or $streamID='AU19_CC') and parent::remotelink/@remotekey1='REFPTID'">
                        <xsl:attribute name="anchoridref">
                           <xsl:call-template name="normalizeIdString"/>
                        </xsl:attribute>
                     </xsl:if>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:for-each>
            <ref:locator-key>
               <xsl:choose><!-- Awantika: Added choose as it is required to capture URL in ref:key-name while creating ref:crossreference for p/remotelink in AU20 -->
                  <xsl:when test="parent::p[parent::note][$streamID='AU20']">
                     <ref:key-name name="URL"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <ref:key-name name="DOC-ID"/>
                  </xsl:otherwise>
               </xsl:choose>
               <ref:key-value>
                  <xsl:attribute name="value"><!-- Awantika: Added choose as it is required to capture value of @href while creating ref:crossreference for p/remotelink in AU20 -->
                     <xsl:choose>
                        <xsl:when test="@dpsi">
                           <xsl:value-of select="@dpsi"/>
                        </xsl:when>
                        <xsl:when test="parent::p[parent::note][$streamID='AU20']">
                           <xsl:value-of select="@href"/>
                        </xsl:when>
                        <xsl:when test="not(@dpsi) and //docinfo/docinfo:dpsi/@id-string">
                           <xsl:value-of select="//docinfo/docinfo:dpsi/@id-string"/>
                        </xsl:when>
                        <xsl:when test="not(@dpsi) and not(//docinfo/docinfo:dpsi/@id-string)">
                           <xsl:value-of select="$dpsi"/>
                        </xsl:when>
                        <!-- JL if @dpsi isn't present, use DPSI from document or LBU manifest file as in CI above. 
									Verified with Pacific LBU 2017-11-06 -->
                        <!-- JL : dpsi may be validly missing if the link is invalid -->
                        <xsl:when test="@status=('unval','invalid')"><!-- no @dpsi however status is unvalidated or invalid so don't throw error  --></xsl:when>
                        <xsl:otherwise><!--<xsl:value-of select="$dpsi"/>-->
                           <xsl:call-template name="outputErrorMessage">
                              <xsl:with-param name="messageText"
                                              as="xs:string"
                                              select=" 'remotelink/@dpsi is missing and link cannot be correctly completed' "/>
                              <xsl:with-param name="errorType" as="xs:string" select=" 'ICCE' "/>
                              <xsl:with-param name="errorCode" as="xs:string*" select=" 'TBD' "/>
                              <xsl:with-param name="context" as="xs:string">
                                 <xsl:value-of select="base-uri()"/>
                              </xsl:with-param>
                           </xsl:call-template>
                        </xsl:otherwise>
                     </xsl:choose>
                     <xsl:text>-</xsl:text>
                     <xsl:choose>
                        <xsl:when test="$streamID='AU19_CC'">
                           <xsl:value-of select="@refpt"/>
                        </xsl:when>
                        <!-- CSN - 2017/11/06 - Backing this change out from the last SVN Version becuase it may fix AU08 but it breaks links for the other Conversions
								<xsl:when test=" @remotekey1 = 'DOC-ID' or @remotekey1 = 'DOCID' or @service='DOC-ID'">
								-->
                        <xsl:when test=" @remotekey1 = 'DOC-ID' or @remotekey1 = 'DOCID'">
                           <xsl:value-of select="if (@remotekey2) then @remotekey2 else @refpt"/>
                        </xsl:when>
                        <xsl:when test=" @remotekey1 = 'REFPTID' or @remotekey1 = 'REFPT' ">
                           <xsl:choose>
                              <xsl:when test="@docidref">
                                 <xsl:value-of select="@docidref"/>
                              </xsl:when>
                              <xsl:when test="@status=('unval','invalid')"><!-- no @docidref however status is unvalidated or invalid so don't throw error  --></xsl:when>
                              <xsl:otherwise><!-- This should be an error message -->
                                 <xsl:text>XXXX</xsl:text>
                                 <xsl:call-template name="outputErrorMessage">
                                    <xsl:with-param name="messageText"
                                                    as="xs:string"
                                                    select=" 'remotelink/@docidref is missing and link cannot be correctly completed' "/>
                                    <xsl:with-param name="errorType" as="xs:string" select=" 'ICCE' "/>
                                    <xsl:with-param name="errorCode" as="xs:string*" select=" '403' "/>
                                    <!--SNB: 2017-10-27 adding the XPATH of problem link to error output instead of previous base:uri() -->
                                    <xsl:with-param name="context" as="xs:string">
                                       <xsl:call-template name="generateXPath"/>
                                    </xsl:with-param>
                                    <!--<xsl:with-param name="context" as="xs:string"><xsl:value-of select="base-uri()"/> </xsl:with-param>-->
                                 </xsl:call-template>
                              </xsl:otherwise>
                           </xsl:choose>
                        </xsl:when>
                     </xsl:choose>
                  </xsl:attribute>
               </ref:key-value>
            </ref:locator-key>
         </ref:locator>
      </ref:crossreference>
   </xsl:template>
   <!--  multiple immediate sibling remotelinks will get grouped, see further below  -->
   <xsl:template match="remotelink[not(ancestor::docinfo:assoc-links)][ @service = 'DOC-ID' ][ preceding-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ] ] ]"/>
   <!--  process immediate sibling remotelink elements one by one  -->
   <xsl:template match="remotelink[not(ancestor::docinfo:assoc-links)][ @service = 'DOC-ID' ]"
                 mode="combineSiblingRemotelinks"><!--  output  ref:crossreference for the current remotelink  -->
      <xsl:call-template name="remotelinkDOCID"/>
      <!--  process immediate sibling remotelink elements one by one  -->
      <xsl:apply-templates select="following-sibling::node()[1][self::remotelink[not(ancestor::docinfo:assoc-links)][ @service = 'DOC-ID' ] ]"
                           mode="combineSiblingRemotelinks"/>
   </xsl:template>
   <!-- JD: 2017-10-13: trap remotelink as child of <li>  -->
   <xsl:template match="remotelink[not(ancestor::docinfo:assoc-links)][ @service = 'DOC-ID' ][ not( preceding-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ] ] ) ]     [parent::li]"
                 priority="1">
      <p>
         <text>
            <xsl:choose>
               <xsl:when test=" following-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ] ] and not(parent::ci:content)"><!--  multiple immediate sibling remotelinks, so group in ref:crossreferencegroup  -->
                  <ref:crossreferencegroup><!--  output  ref:crossreference for the current remotelink  -->
                     <xsl:call-template name="remotelinkDOCID"/>
                     <!--  process immediate sibling remotelink elements one by one  -->
                     <xsl:apply-templates select="following-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ] ]"
                                          mode="combineSiblingRemotelinks"/>
                  </ref:crossreferencegroup>
               </xsl:when>
               <xsl:otherwise><!--  no grouping needed, so just output  ref:crossreference for the current remotelink  -->
                  <xsl:call-template name="remotelinkDOCID"/>
               </xsl:otherwise>
            </xsl:choose>
         </text>
      </p>
   </xsl:template>
   <!-- For multiple, immediate, sibling
			  occurrences without intermediary text, group within a
				<targetxml>ref:crossreferencegroup</targetxml> parent except for
				<targetxml>lnci:content</targetxml> and <targetxml>title</targetxml>.<ul>  -->   <!--  @@@ SBy:  I do not understand what is meant by "except for lnci:content and title" since the examples have those under ref:crossreferencegroup even if there is only one remotelink[ @service = 'DOC-ID' ] sibling !!!  -->   <!-- JL: seems like lnci:content/ref:crossreferencegroup is not schema valid -->
   <xsl:template match="remotelink[not(ancestor::docinfo:assoc-links)][ @service = 'DOC-ID' ][ not( preceding-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ] ] ) ]"
                 priority="2">
      <xsl:choose><!-- BRT 1/30/17 fix issue with missing p element -->
         <xsl:when test="parent::bodytext and $streamID = ('UK15_DS')">
            <p>
               <text>
                  <xsl:call-template name="remotelinkDOCID"/>
               </text>
            </p>
         </xsl:when>
         <xsl:when test="$streamID=('AU10','NZ11') and ancestor::level/@leveltype='landingpage'"><!--  no grouping needed, it becomes seclaw:subjectmatterreference 
					which doesn't allow groupings so just output  ref:crossreference for the current remotelink  -->
            <xsl:call-template name="remotelinkDOCID"/>
         </xsl:when>
         <xsl:when test=" following-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ] ] and not(parent::ci:content)"><!--  multiple immediate sibling remotelinks, so group in ref:crossreferencegroup  -->
            <ref:crossreferencegroup><!--  output  ref:crossreference for the current remotelink  -->
               <xsl:call-template name="remotelinkDOCID"/>
               <!--  process immediate sibling remotelink elements one by one  -->
               <xsl:apply-templates select="following-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ] ]"
                                    mode="combineSiblingRemotelinks"/>
            </ref:crossreferencegroup>
         </xsl:when>
         <xsl:otherwise><!--  no grouping needed, so just output  ref:crossreference for the current remotelink  -->
            <xsl:call-template name="remotelinkDOCID"/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!--  If there is a
				<sourcexml>remotelink/@hrefclass]</sourcexml> attribute equal to "http" then the
			  remotelink is <b>not</b> copied into a comment but is instead converted to either a
				<targetxml>url</targetxml> or <targetxml>ref:lnlink</targetxml>   -->   <!-- remotelink[@service='URL'] or remotelink[@hrefclass='http'][@href] or remotelink[@href] and the data content of the remotelink is a URL -->   <!--  @@@ SBy:  how does one check for "... or is of type (http | https | nohttp | mailto | ftp ..."  ??? using contains...  -->
   <xsl:template match="remotelink[ ( @service = 'URL' or @href ) and ( contains( . , 'www' ) or contains( . , 'http' ) or contains( . , 'mailto' ) or contains( . , 'ftp' ) ) ][not(parent::ci:content)]"
                 name="remotelink-url-urltext"><!--   @@@TODO:  perhaps fix type (http | https | nohttp | mailto | ftp handling.  Probably @hrefclass ?  also check for case insensitivity  --><!-- <li>Use case: <sourcexml>remotelink[@service='URL']</sourcexml> or
				<sourcexml>remotelink[@hrefclass='http'][@href]</sourcexml> or
				<sourcexml>remotelink[@href]</sourcexml>
			  <b>and</b> the data content of the remotelink is a URL. That is, the data content of
				<sourcexml>remotelink</sourcexml> starts with text such as "http://...", "https://...",
			  "www.some.domain", or is of type (http | https | nohttp | mailto | ftp). In this case,
				<sourcexml>remotelink</sourcexml> becomes <targetxml>url</targetxml>		-->
      <url>
         <xsl:attribute name="normval">
            <xsl:if test=" @hrefclass and not( contains( @href , @hrefclass ) ) ">
               <xsl:value-of select="@hrefclass"/>
               <xsl:text>://</xsl:text>
            </xsl:if>
            <xsl:value-of select="normalize-space( @href )"/>
         </xsl:attribute>
         <xsl:apply-templates/>
      </url>
   </xsl:template>
   <!-- JL emph is invalid as a child of url, so adding this: -->
   <xsl:template match="emph[parent::remotelink [( @service = 'URL' or @href ) and ( contains( . , 'www' ) or contains( . , 'http' ) or contains( . , 'mailto' ) or contains( . , 'ftp' ) ) ][not(parent::ci:content)]]"
                 priority="35">
      <xsl:apply-templates/>
   </xsl:template>
   <!--Awantika: If lnci:content/remotelink have the following scenarios:if it's href,url,or www.... then retain the content of remotelink and suppress the element-->   <!-- Awantika:11-07-2017: Added priority to resolve the conflict on template "remotelink[not(ancestor::docinfo:assoc-links)][ @service = 'DOC-ID' ][ not( preceding-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ] ] ) ]" -->
   <xsl:template match="remotelink[ ( @service = 'URL' or @href ) and ( contains( . , 'www' ) or contains( . , 'http' ) or contains( . , 'mailto' ) or contains( . , 'ftp' ) ) ][parent::ci:content]"
                 priority="5">
      <xsl:apply-templates/>
   </xsl:template>
   <!-- 2017-11-28 - MDS: person/remotelink output does not allow for ref:lnlink.  url is sufficient for UK12 stream -->
   <xsl:template match="person/remotelink[$streamID='UK12']" priority="25">
      <url>
         <xsl:attribute name="normval">
            <xsl:value-of select="@hrefclass"/>
            <xsl:text>://</xsl:text>
            <xsl:value-of select="@href"/>
         </xsl:attribute>
         <xsl:apply-templates select="node()"/>
      </url>
   </xsl:template>
   <!-- remotelink[@service='URL'] or remotelink[@hrefclass='http'][@href] but the data content of the remotelink is not a URL. -->   <!--  @@@ SBy:  how does one check for "... nor is it of type (http | https | nohttp | mailto | ftp ..."  ??? using contains...  -->
   <xsl:template match="remotelink[ ( @service = 'URL' or @href ) and not( ( contains( . , 'www' ) or contains( . , 'http' ) or contains( . , 'mailto' ) or contains( . , 'ftp' ) ) ) ]"
                 name="remotelink-url"><!--   @@@TODO:  perhaps fix type (http | https | nohttp | mailto | ftp handling.  Probably @hrefclass ?  also check for case insensitivity  --><!-- <li>Use case: <sourcexml>remotelink[@service='URL']</sourcexml> or
				<sourcexml>remotelink[@hrefclass='http'][@href]</sourcexml>
			  <b>but</b> the data content of the remotelink is <b>not</b> a URL. That is, the data
			  content of <sourcexml>remotelink</sourcexml>
			  <b>does not</b> start with text such as "http://...", "https://...", "www.some.domain",
			  nor is it of type (http | https | nohttp | mailto | ftp). In this case,
				<sourcexml>remotelink</sourcexml> becomes <targetxml>ref:lnlink</targetxml> with
			  children <targetxml>ref:marker</targetxml> and <targetxml>ref:locator</targetxml>	-->
      <ref:lnlink service="URL">
         <ref:marker>
            <xsl:apply-templates/>
         </ref:marker>
         <ref:locator>
            <ref:locator-key>
               <ref:key-name name="URL"/>
               <ref:key-value>
                  <xsl:attribute name="value">
                     <xsl:if test=" @hrefclass and not( contains( @href , @hrefclass ) ) ">
                        <xsl:value-of select="@hrefclass"/>
                        <xsl:text>://</xsl:text>
                     </xsl:if>
                     <xsl:value-of select="normalize-space( @href )"/>
                  </xsl:attribute>
               </ref:key-value>
            </ref:locator-key>
         </ref:locator>
      </ref:lnlink>
   </xsl:template>

   <xsl:template match="remotelink/@href"/>
   <!-- suppress remotelink and retain its content as text -->
   <xsl:template match="remotelink[not(@*)]">
      <xsl:apply-templates/>
   </xsl:template>
   <!-- @@@  SBy:  TODO, need to coordinate with Mark S footnote/endote logic:   <p>If <sourcexml>refpt</sourcexml> and <sourcexml>remotelink</sourcexml> occurs as adjacent
				siblings then refer to the instructions for converting <sourcexml>endnote</sourcexml>.</p>  

				There's another separate module for this... -->
   <xsl:template match="emph[ remotelink and $streamID = 'NZ17-CCD' ]">
      <xsl:apply-templates/>
   </xsl:template>

   <xsl:template match="remotelink/@remotekey2"/>
   <!-- it doesn't seem like we use this att -->
   <xsl:template match="remotelink/@newwindow"/>

   <xsl:template match="remotelink/@docidref"/>

   <xsl:template match="remotelink[parent::in:entry-text][$streamID='AU16']"
                 priority="25">
      <index:locator><!-- <in:entry-text>
          <remotelink dpsi="009K" remotekey1="REFPTID" service="DOC-ID" refpt="CTH_BIL_2017-74"
            status="unval">ASIC SUPERVISORY COST RECOVERY LEVY BILL 2017</remotelink>
        </in:entry-text> -->
         <ref:lnlink>
            <xsl:attribute name="service">DOCUMENT</xsl:attribute>
            <ref:marker>
               <xsl:apply-templates select="node()"/>
            </ref:marker>
            <ref:locator>
               <xsl:choose>
                  <xsl:when test="not(@refpt)">
                     <xsl:attribute name="anchoridref">
                        <xsl:choose>
                           <xsl:when test="string(number(substring(@remotekey2, 1, 1))) = 'NaN'">
                              <xsl:value-of select="@remotekey2"/>
                           </xsl:when>
                           <xsl:otherwise>
                              <xsl:value-of select="concat('_', @remotekey2)"/>
                           </xsl:otherwise>
                        </xsl:choose>
                     </xsl:attribute>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:attribute name="anchoridref">
                        <xsl:choose>
                           <xsl:when test="string(number(substring(@refpt, 1, 1))) = 'NaN'">
                              <xsl:value-of select="@refpt"/>
                           </xsl:when>
                           <xsl:otherwise>
                              <xsl:value-of select="concat('_', @refpt)"/>
                           </xsl:otherwise>
                        </xsl:choose>
                     </xsl:attribute>
                  </xsl:otherwise>
               </xsl:choose>
               <ref:locator-key>
                  <ref:key-name name="DOC-ID"/>
                  <ref:key-value>
                     <xsl:attribute name="value">
                        <xsl:choose><!-- <in:entry-text>Insurance Premiums Order (January-June) 2014 <remotelink dpsi="005Y"
              remotekey1="REFPTID" service="DOC-ID" refpt="NSW_REG_2013-622_WA"
              docidref="NSW_REG_2013-622_SCH11">SCH11CL1SUB1</remotelink></in:entry-text> -->
                           <xsl:when test="@remotekey1 = 'DOC-ID'">
                              <xsl:value-of select="concat(@dpsi, '-')"/>
                              <xsl:choose>
                                 <xsl:when test="not(@remotekey2)">
                                    <xsl:value-of select="@refpt"/>
                                 </xsl:when>
                                 <xsl:otherwise>
                                    <xsl:value-of select="@remotekey2"/>
                                 </xsl:otherwise>
                              </xsl:choose>
                           </xsl:when>
                           <xsl:when test="@remotekey1 = 'REFPTID'">
                              <xsl:value-of select="concat(@dpsi, '-')"/>
                              <xsl:choose>
                                 <xsl:when test="@docidref">
                                    <xsl:value-of select="@docidref"/>
                                 </xsl:when>
                                 <xsl:otherwise>
                                    <xsl:text>XXXX</xsl:text>
                                 </xsl:otherwise>
                              </xsl:choose>
                           </xsl:when>
                        </xsl:choose>
                     </xsl:attribute>
                  </ref:key-value>
               </ref:locator-key>
            </ref:locator>
         </ref:lnlink>
      </index:locator>
   </xsl:template>
   <!--Vikas Rohilla : Template to match the remotelink-->
   <xsl:template match="remotelink[ ( @service = 'URL' or @href ) and not(( contains( . , 'www' ) or contains( . , 'http' ) or contains( . , 'mailto' ) or contains( . , 'ftp' ) )) ][$streamID='UK11DA']"
                 priority="20">
      <url>
         <xsl:attribute name="normval">
            <xsl:if test=" @hrefclass and not( contains( @href , @hrefclass ) ) ">
               <xsl:value-of select="@hrefclass"/>
               <xsl:text>://</xsl:text>
            </xsl:if>
            <xsl:value-of select="normalize-space( @href )"/>
         </xsl:attribute>
         <xsl:apply-templates/>
      </url>
   </xsl:template>

   <xsl:template match="remotelink/@alttext"/>
   <!-- Priya Kaushal added below for UK15 -->
   <xsl:template match="remotelink[(ancestor::docinfo:assoc-links)| (ancestor::docinfo:assoc-links-grp)] [parent::text] [ @service = 'DOC-ID' ][ not( preceding-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ] ] ) ] [$streamID='UK15' or $streamID='UK12' or $streamID='UK14']"
                 priority="40">
      <xsl:choose>
         <xsl:when test=" following-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ] ] and not(parent::ci:content)"><!--  multiple immediate sibling remotelinks, so group in ref:crossreferencegroup  --><!--<doc:related-content-item>
					<doc:related-content-desc>
						<p>
							<text>-->
            <ref:crossreferencegroup><!--  output  ref:crossreference for the current remotelink  -->
               <xsl:call-template name="remotelinkDOCID"/>
               <!--  process immediate sibling remotelink elements one by one  -->
               <xsl:apply-templates select="following-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ] ][not($streamID='UK15')]"
                                    mode="combineSiblingRemotelinks"/>
            </ref:crossreferencegroup>
            <!--</text>
											</p>
											</doc:related-content-desc>
				</doc:related-content-item>-->
         </xsl:when>
         <xsl:otherwise><!--  no grouping needed, so just output  ref:crossreference for the current remotelink  -->
            <xsl:call-template name="remotelinkDOCID"/>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="remotelink[(ancestor::docinfo:assoc-links)| (ancestor::docinfo:assoc-links-grp)][parent::text][preceding-sibling::node()[1][self::remotelink[ @service = 'DOC-ID' ]]][$streamID='UK15']"
                 priority="2">
      <xsl:call-template name="remotelinkDOCID"/>
   </xsl:template>
   <!-- Vikas Rohilla : included for the UK12	-->
   <xsl:template match="remotelink[@refpt=''][$streamID='UK12']" priority="25">
      <ref:lnlink>
         <ref:marker>
            <xsl:apply-templates select="node()"/>
         </ref:marker>
         <ref:locator>
            <xsl:apply-templates select="@refpt"/>
         </ref:locator>
      </ref:lnlink>
   </xsl:template>

   <xsl:template match="remotelink/@refpt[$streamID='UK12']" priority="25">
      <xsl:choose>
         <xsl:when test="normalize-space(.)!=''">
            <xsl:attribute name="anchoridref">
               <xsl:call-template name="normalizeIdString"/>
            </xsl:attribute>
         </xsl:when>
         <xsl:otherwise>
            <xsl:comment>Mandatory element according to the CI</xsl:comment>
            <xsl:call-template name="outputErrorMessage">
               <xsl:with-param name="messageText"
                               as="xs:string"
                               select=" 'remotelink/@refpt is missing and link cannot be correctly completed' "/>
               <xsl:with-param name="errorType" as="xs:string" select=" 'ICCE' "/>
               <xsl:with-param name="errorCode" as="xs:string*" select=" 'TBD' "/>
               <xsl:with-param name="context" as="xs:string">
                  <xsl:value-of select="base-uri()"/>
               </xsl:with-param>
            </xsl:call-template>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!--SS 28-11-2017: Added handling of remotelink/@refpt='dummy' value comes in HK07.-->
   <xsl:template match="remotelink[@refpt='dummy' and @status='unval'][$streamID='HK07']">
      <xsl:apply-templates/>
   </xsl:template>
   <!-- @@@  SBy:  below is from Awntika and likely from QC code base, but not mentioned in DITA so commenting out for now -->   <!--xsl:template match="remotelink[@service=ATTACHMENT]">
		<!-/-  Original Target XPath:  ref:lnlink[@service="ATTACHMENT"]   -/->
		<xsl:element name="ref:lnlink">
			<xsl:attribute name="service"><xsl:text>URL</xsl:text></xsl:attribute>
			<xsl:element name="ref:marker">
				<xsl:apply-templates/>
			</xsl:element>
			<xsl:element name="ref:locator">
				<xsl:element name="ref:locator-key">
					<xsl:element name="ref:key-name">
						<xsl:attribute name="name"><xsl:value-of select="@remotekey1='DOC-ID' or @remotekey1='DOCID'"/></xsl:attribute>
					</xsl:element>
					<xsl:element name="ref:key-value">
						<xsl:attribute name="value"><xsl:value-of select="@dpsi"/><xsl:text>_</xsl:text><xsl:choose><xsl:when test="@docidref"><xsl:value-of select="./@docidref"/></xsl:when><xsl:otherwise><xsl:value-of select="./@refpt"/></xsl:otherwise></xsl:choose></xsl:attribute>
					</xsl:element>
				</xsl:element>
			</xsl:element>
		</xsl:element>
	</xsl:template>

	<xsl:template match="remotelink[parent::glp:note]">
		<xsl:element name="note">
			<xsl:element name="bodytext">
				<xsl:element name="p">
					<xsl:element name="text">
						<ref:crossreference>
							<xsl:attribute name="crossreferencetype">See Also</xsl:attribute>
							<ref:content>
								<xsl:if test="remotelink[@xml:lang]">
									<xsl:attribute name="xml:lang"><xsl:value-of select="@xml:lang"/></xsl:attribute>
								</xsl:if>
								<xsl:apply-templates/>
							</ref:content>
							<xsl:element name="ref:locator">
								<xsl:choose>
									<xsl:when test="@remotekey1='DOC-ID' or @remotekey1='DOCID'">
										<xsl:element name="ref:locator-key">
											<xsl:element name="ref:key-name">
												<xsl:attribute name="name"><xsl:text>DOC-ID</xsl:text></xsl:attribute>
											</xsl:element>
											<xsl:element name="ref:key-value">
												<xsl:attribute name="value"><xsl:choose><xsl:when test="@dpsi"><xsl:value-of select="@dpsi"/><xsl:text>-</xsl:text></xsl:when><xsl:when test="../docinfo:dpsi/@id-string"><xsl:value-of select="../docinfo:dpsi/@id-string"/></xsl:when><xsl:otherwise>***no dpsi</xsl:otherwise></xsl:choose><xsl:choose><xsl:when test="@remotekey2"><xsl:value-of select="@remotekey2"/></xsl:when><xsl:otherwise><xsl:value-of select="@refpt"/></xsl:otherwise></xsl:choose></xsl:attribute>
											</xsl:element>
										</xsl:element>
									</xsl:when>
									<xsl:when test="@remotekey1='REFPTID'">
										<xsl:attribute name="anchoridref"><xsl:choose><xsl:when test="contains('0123456789', substring(@refpt,1,1))"><xsl:text>_</xsl:text><xsl:value-of select="@refpt or @remotelink2"/></xsl:when><xsl:otherwise><xsl:value-of select="@refpt"/></xsl:otherwise></xsl:choose></xsl:attribute>
									</xsl:when>
								</xsl:choose>
							</xsl:element>
						</ref:crossreference>
					</xsl:element>
				</xsl:element>
			</xsl:element>
		</xsl:element>
	</xsl:template>

	<xsl:template match="remotelink[child::inlineobject]">
		<xsl:element name="ref:lnlink">
			<xsl:attribute name="service"><xsl:text>URL</xsl:text></xsl:attribute>
			<xsl:element name="ref:marker">
				<xsl:apply-templates/>
			</xsl:element>
			<xsl:element name="ref:locator">
				<xsl:element name="ref:locator-key">
					<xsl:element name="ref:key-name">
						<xsl:attribute name="name"><xsl:text>URL</xsl:text></xsl:attribute>
					</xsl:element>
					<xsl:element name="ref:key-value">
						<xsl:attribute name="value"><xsl:value-of select="normalize-space(@href)"/></xsl:attribute>
					</xsl:element>
				</xsl:element>
			</xsl:element>
		</xsl:element>
	</xsl:template>

	<xsl:template match="docinfo:assoc-links/remotelink[@service='DOC-ID']">
		<!-/-  Original Target XPath:  ref:crossreference   -/->
		<xsl:element name="doc:related-content">
			<xsl:element name="doc:related-content-item">
				<xsl:element name="doc:related-content-link">
					<xsl:element name="ref:lnlink">
						<xsl:attribute name="service"><xsl:text>DOCUMENT</xsl:text></xsl:attribute>
						<xsl:element name="ref:marker">
							<xsl:value-of select="./remotelink[@service='DOC-ID']"/>
						</xsl:element>
						<xsl:element name="ref:locator">
							<xsl:attribute name="anchoridref"><xsl:choose><xsl:when test="./remotelink[@service='DOC-ID']/@refpt"><xsl:value-of select="./remotelink[@service='DOC-ID']/@refpt"/></xsl:when><xsl:otherwise><xsl:value-of select="./remotelink[@service='DOC-ID']/@remotekey2"/></xsl:otherwise></xsl:choose></xsl:attribute>
							<xsl:element name="ref:locator-key">
								<xsl:element name="ref:key-name">
									<xsl:attribute name="name"><xsl:value-of select="./remotelink[@service='DOC-ID']/@service"/></xsl:attribute>
								</xsl:element>
								<xsl:element name="ref:key-value">
									<xsl:attribute name="value"><xsl:value-of select="./remotelink[@service='DOC-ID']/@dpsi"/><xsl:text>-</xsl:text><xsl:value-of select="remotelink[@service='DOC-ID']/@remotekey2"/></xsl:attribute>
								</xsl:element>
							</xsl:element>
						</xsl:element>
					</xsl:element>
				</xsl:element>
			</xsl:element>
		</xsl:element>
	</xsl:template-->   <!-- BRT 12/11/17 - added active doc conversion -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>This topic applies to <xd:i>remotelink for UK active documents, where
                    @service='CHECKLIST' | 'PROCESSFLOW' | 'DOCBUILDER' | 'CALCULATOR'</xd:i>. For links
                    to other document types, refer to <xd:a href="Rosetta_remotelink-LxAdv-ref.crossreference.dita#Rosetta_remotelink-to-LexisAdvance_ref.crossreference"/>. Also note that the attribute <xd:i>remotelink/@status</xd:i> is always
                    suppressed, it is never output to the target document.</xd:p>
         <xd:p>
                    remotelink[@service='CHECKLIST' | 'PROCESSFLOW' | 'DOCBUILDER' | 'CALCULATOR'] becomes
                    <xd:b>ref:lnlink[@service='CHECKLIST' | 'PROCESSFLOW' | 'DOCBUILDER' |
                        'CALCULATOR']</xd:b> respectively. The attribute value is retained in @service in
                    the target.<xd:ul>
               <xd:li>
                  <xd:p> Create <xd:b>ref:lnlink/ref:locator/ref:locator-key</xd:b> with
                                the following children: <xd:ul>
                        <xd:li>
                           <xd:b>ref:key-name/@name</xd:b> has the value
                                        "DOC-ID".</xd:li>
                        <xd:li>
                           <xd:b>key-value/@value</xd:b> will be the value of <xd:i>remotelink/@refpt</xd:i>.</xd:li>
                     </xd:ul>
                  </xd:p>
               </xd:li>
               <xd:li>The text of <xd:i>remotelink</xd:i> becomes <xd:b>ref:lnlink/ref:marker</xd:b>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>
                    
&lt;remotelink refpt="urn:editdocauto:6DCF281E-514F-4F58-83EE-84B442B511" 
    service="DOCBUILDER"&gt;Link to docbuilder doc&lt;/remotelink&gt;


                </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>
                                                  
&lt;ref:lnlink service="DOCBUILDER"&gt;
    &lt;ref:marker&gt;Link to docbuilder doc&lt;/ref:marker&gt;
    &lt;ref:locator&gt;
        &lt;ref:locator-key&gt;
            &lt;ref:key-name name=""DOC-ID"/&gt; 
            &lt;ref:key-value value="urn:editdocauto:6DCF281E-514F-4F58-83EE-84B442B511"/&gt; 
        &lt;/ref:locator-key&gt;
    &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;

                </xd:pre>
         <!--Changes2017-08-11: Created.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="remotelink[@service] [@service = ('CHECKLIST','PROCESSFLOW','DOCBUILDER','CALCULATOR')]"
                 name="activeDocsRemotelink"
                 priority="2">
      <ref:lnlink>
         <xsl:attribute name="service">
            <xsl:value-of select="@service"/>
         </xsl:attribute>
         <ref:marker>
            <xsl:value-of select="."/>
         </ref:marker>
         <ref:locator>
            <ref:locator-key>
               <ref:key-name>
                  <xsl:attribute name="name">
                     <xsl:text>DOC-ID</xsl:text>
                  </xsl:attribute>
               </ref:key-name>
               <ref:key-value>
                  <xsl:attribute name="value">
                     <xsl:value-of select="@refpt"/>
                  </xsl:attribute>
               </ref:key-value>
            </ref:locator-key>
         </ref:locator>
      </ref:lnlink>
   </xsl:template>
   <!-- WPK be aware of this related file in terms of priorities and matching.
    /svn/dataArch/XSLT/ContentArch/Rosetta-to-LA/modules/docinfo/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.xsl
    -->
   <xsl:template match="remotelink[@service='DOCBUILDER'][parent::docinfo:assoc-links or parent::docinfo:assoc-links-grp][$streamID='UK14']"
                 priority="10">
      <doc:related-content-item>
         <xsl:if test="parent::docinfo:assoc-links[@assoc-content='external-content-location']">
            <xsl:attribute name="content-type">external-content-location</xsl:attribute>
         </xsl:if>
         <doc:related-content-link>
            <xsl:call-template name="activeDocsRemotelink"/>
         </doc:related-content-link>
      </doc:related-content-item>
   </xsl:template>
   <!--<xsl:include href="../../modules/nonamespace/TEMP-RULE_Rosetta_remotelink-missing_docidref-LxAdv-ref.crossreference.xsl"/>-->   <xd:doc>
      <xd:desc>
         <xd:p>This rule only applies when the XPaths <xd:i>text/ci:cite/ci:content/remotelink</xd:i> or
            <xd:i>entry/ci:cite/ci:content/remotelink</xd:i> occur. In this scenario, each <xd:i>remotelink</xd:i> (the
            direct child of <xd:i>ci:content</xd:i>) is moved outside the 
            <xd:i>ci:cite</xd:i> so that the <xd:i>remotelink</xd:i> becomes the <xd:i>ci:cite</xd:i> element's immediate next sibling (and also now a
            direct child of <xd:i>text</xd:i> or <xd:i>entry</xd:i>). Conversion
            is then done on the <xd:i>ci:cite</xd:i> element as described in the section <xd:b>
               <xd:i>General Markup</xd:i>
            </xd:b>. The moved <xd:i>remotelink</xd:i> element is converted as described in the topic <xd:a href="Rosetta_remotelink-LxAdv-ref.crossreference.dita"/>.</xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>Depending on the attribute values and contents of the <xd:i>remotelink</xd:i>, it is converted to <xd:b>ref:crossreference</xd:b>, <xd:b>ref:lnlink</xd:b>, or <xd:b>url</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML </xd:b>
         </xd:p>
         <xd:pre>

&lt;text&gt;
    ...
    &lt;ci:cite searchtype="LEG-REF" status="invalid"&gt;
        &lt;ci:sesslaw&gt;
            &lt;ci:sesslawinfo&gt;
                &lt;ci:sesslawnum num="1970_9a"/&gt;
                &lt;ci:hierpinpoint&gt;
                    &lt;ci:hierlev label="section" num="109BCT"/&gt;
                &lt;/ci:hierpinpoint&gt;
            &lt;/ci:sesslawinfo&gt;
            &lt;ci:sesslawref&gt;
                &lt;ci:standardname normpubcode="UK_ACTS"/&gt;
            &lt;/ci:sesslawref&gt;
        &lt;/ci:sesslaw&gt;
        &lt;ci:content&gt;
            &lt;remotelink hrefclass="http" href="www.somedomain.com/practice-statments/cpi"&gt;Statement of Practice 2/90, page 97&lt;/remotelink&gt;CT
        &lt;/ci:content&gt;
    &lt;/ci:cite&gt;
    ...
&lt;/text&gt;

            </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;text&gt;
    ...
    &lt;lnci:cite&gt;
        &lt;lnci:sesslaw&gt;
            &lt;lnci:sesslawinfo&gt;
                &lt;lnci:sesslawnum num="1970_9a"/&gt;
                &lt;lnci:hierpinpoint&gt;
                    &lt;lnci:hierlev label="section" num="109BCT"/&gt;
                &lt;/lnci:hierpinpoint&gt;
            &lt;/lnci:sesslawinfo&gt;
            &lt;lnci:sesslawref&gt;
                &lt;lnci:standardname normpubcode="UK_ACTS"/&gt;
            &lt;/lnci:sesslawref&gt;
        &lt;/lnci:sesslaw&gt;
        &lt;lnci:content&gt;CT&lt;/lnci:content&gt;
    &lt;/lnci:cite&gt;
    &lt;ref:lnlink service="URL"&gt;
        &lt;ref:marker&gt;Statement of Practice 2/90, page 97&lt;/ref:marker&gt;
        &lt;ref:locator&gt;
            &lt;ref:locator-key&gt;
                &lt;ref:key-name name="URL"/&gt;
                &lt;ref:key-value value="http://www.somedomain.com/practice-statments/cpi"/&gt;
            &lt;/ref:locator-key&gt;
        &lt;/ref:locator&gt;
    &lt;/ref:lnlink&gt;
    ...
&lt;/text&gt;

            </xd:pre>
         <!--Changes2014-10-24: Added this instruction. (R4.5 Content Issue List #1997)-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_remotelink-Chof-ci.content-LxAdv-ref.crossreference.dita  -->
   <xsl:template match="text/ci:cite/ci:content[remotelink] | entry/ci:cite/ci:content[remotelink]"
                 priority="25">
      <xsl:if test="node()[not(self::remotelink)]">
         <lnci:content>
            <xsl:apply-templates select="@* |node() except remotelink"/>
         </lnci:content>
      </xsl:if>
   </xsl:template>

   <xsl:template match="text/ci:cite[ci:content[remotelink]] | entry/ci:cite[ci:content[remotelink]]"
                 priority="25">
      <lnci:cite>
         <xsl:if test="ci:content/link">
            <xsl:attribute name="citeref" select="ci:content/link/@refpt"/>
         </xsl:if>
         <xsl:apply-templates select="@* | node()"/>
      </lnci:cite>
      <xsl:apply-templates select="ci:content/remotelink"/>
   </xsl:template>
   <!--<xsl:include href="../../modules/nonamespace/Rosetta_remotelink-self-inter-document-link-LxAdv-intra-document-link.xsl"/>	-->   <!--<xsl:include href="../../modules/nonamespace/Rosetta_remotelink-Chof-lilabel-LxAdv-Suppress.xsl"/>-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>sub</xd:i> becomes <xd:b>sub</xd:b>. </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;emph typestyle="it"&gt;
  &lt;sub&gt;*&lt;/sub&gt;
&lt;/emph&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;emph typestyle="it"&gt;
  &lt;sub&gt;*&lt;/sub&gt;
&lt;/emph&gt;

	</xd:pre>
         <!--Changes2011-12-15: Created. -->
      </xd:desc>
   </xd:doc>
   <xsl:template match="sub">
      <sub>
         <xsl:apply-templates select="@* | node()"/>
      </sub>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>subtitle</xd:i> becomes <xd:b>subtitle</xd:b>
         </xd:p>
         <!--<p>If the input document has subtitle/defterm scenario then
                    <sourcexml>defterm</sourcexml> within a subtitle can be dropped, but the child
                element and content of the tag is retained and no text is dropped. </p>-->
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
	&lt;subtitle&gt;Applications for leave to appeal against sentence not heard by a single judge of appeal&lt;/subtitle&gt;
&lt;/heading&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
	&lt;subtitle&gt;Applications for leave to appeal against sentence not heard by a single judge of appeal&lt;/subtitle&gt;
&lt;/heading&gt;

	</xd:pre>
         <!-- <example>
            <title>Source XML having subtitle/defterm scenario:</title>
            <codeblock>

&lt;subtitle&gt;
   &lt;defterm&gt;
      &lt;emph typestyle="bf"&gt;&amp;#x201C;Greenhouse Gas Storage Act 2009&amp;#x201D;&lt;/emph&gt;
   &lt;/defterm&gt;
&lt;/subtitle&gt;

	</codeblock>
        </example>
        <example>
            <title>Target XML</title>
            <codeblock>

&lt;subtitle&gt;   
      &lt;emph typestyle="bf"&gt;&amp;#x201C;Greenhouse Gas Storage Act 2009&amp;#x201D;&lt;/emph&gt;   
&lt;/subtitle&gt;

	</codeblock>
        </example>-->
         <!--Changes2011-12-15: Created.-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="subtitle"><!--  Original Target XPath:  subtitle   -->
      <subtitle>
         <xsl:apply-templates select="@* | node() except refpt"/>
      </subtitle>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>sup</xd:i> becomes <xd:b>sup</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;emph typestyle="it"&gt;
  &lt;sup&gt;*&lt;/sup&gt;
&lt;/emph&gt;

	</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;emph typestyle="it"&gt;
  &lt;sup&gt;*&lt;/sup&gt;
&lt;/emph&gt;

	</xd:pre>
         <!--Changes2011-12-15: Created.
		-->
      </xd:desc>
   </xd:doc>
   <xsl:template match="sup">
      <sup>
         <xsl:apply-templates select="@* | node()"/>
      </sup>
   </xsl:template>
   <xd:doc>
						xmlns:primlawhist="http://www.lexisnexis.com/xmlschemas/content/legal/primarylaw-history/1/"
		<xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>Contains the titling content for a table, and titled groups that contain rows of
					cells ("entries"). Table now allows an optional heading element, which contains
					the titling content as well. The titling elements directly within table - title
					and subtitle - are deprecated in favor of using these elements inside the
					heading. </xd:p>
         <xd:ul>
            <xd:li>
               <xd:i>table</xd:i> becomes <xd:b>table</xd:b> comes with
							<xd:i>@frame</xd:i> becomes <xd:b>@frame</xd:b>
						which has tokenized values as (top | bottom | topbot | all | sides | none)
						and required child element is described below: <xd:ul>
                  <xd:li>
                     <xd:i>tgroup</xd:i> becomes <xd:b>tgroup</xd:b>
								with attributes <xd:i>@cols</xd:i> becomes
									<xd:b>@cols</xd:b> is the required attribute.
									<xd:i>@colsep</xd:i> becomes
									<xd:b>@colsep</xd:b>
                     <xd:i>@rowsep</xd:i> becomes
									<xd:b>@rowsep</xd:b> and child element includes: <xd:ul>
                        <xd:li>
                           <xd:i>colspec</xd:i> becomes
											<xd:b>colspec</xd:b> and attributes are
										converted as follows: <xd:ul>
                              <xd:li>
                                 <xd:i>@align</xd:i> becomes
												<xd:b>@align</xd:b>
                              </xd:li>
                              <xd:li>
                                 <xd:i>@char</xd:i> becomes
												<xd:b>@char</xd:b>
                              </xd:li>
                              <xd:li>
                                 <xd:i>@charoff</xd:i> becomes
												<xd:b>@charoff</xd:b>
                              </xd:li>
                              <xd:li>
                                 <xd:i>@colname</xd:i> becomes
												<xd:b>@colname</xd:b>
                              </xd:li>
                              <xd:li>
                                 <xd:i>@colnum</xd:i> becomes
												<xd:b>@colnum</xd:b>
                              </xd:li>
                              <xd:li>
                                 <xd:i>@colsep</xd:i> becomes
												<xd:b>@colsep</xd:b>
                              </xd:li>
                              <xd:li>
                                 <xd:i>@colwidth</xd:i> becomes
												<xd:b>@colwidth</xd:b>
                              </xd:li>
                              <xd:li>
                                 <xd:i>@id</xd:i> may be dropped or may
												require special handling. It may become
												<xd:b>@ref:anchor</xd:b> and if so is
												moved to the parent or higher ancestor element. This
												will be specified in the the particular CI as it
												will be done on a stream by stream basis and will
												depend on the particular XPath of the table element.
												In the absence of specific instructions elsewhere in
												the CI, <xd:i>@id</xd:i> is dropped.</xd:li>
                              <xd:li>
                                 <xd:i>@rowsep</xd:i> becomes
												<xd:b>@rowsep</xd:b>
                              </xd:li>
                              <xd:li>
                                 <xd:i>@searchtype</xd:i> is dropped</xd:li>
                              <xd:li>
                                 <xd:i>@xml:lang</xd:i> becomes
												<xd:b>@xml:lang</xd:b>
                              </xd:li>
                           </xd:ul>
                           <xd:p>
                              <xd:b>Note: </xd:b>
                              <xd:p>CALS table markup allows for units to be embedded in
												the column width. Lexis Advance only recognizes an
												integer in pixels and proportional, identified by a
												number ending with "*".</xd:p>
                              <xd:p>If a non-Lexis Advance format is discovered a warning
												should be raised.</xd:p>
                              <xd:p>If the LBU requires a conversion of CALS units to LA
												accepted units, some of the conversions are detailed
												below.</xd:p>
                              <xd:p>If colspec@colwidth ends in “in” (inch) them remove
												“in” and multiply the value by 96 to convert to
												pixel. Only keep the integer portion of the result.
												These are not valid: 0.1, 12.86. These are valid:
												12, 185</xd:p>
                              <xd:p>cm; follow the inches example above but use a
												conversion value of 37.7952755904</xd:p>
                              <xd:p>mm; follow the inches example above but use a
												conversion value of 3.77952755904</xd:p>
                              <xd:p>pt; follow the inches example above but use a
												conversion value of 1.0</xd:p>
                           </xd:p>
                        </xd:li>
                     </xd:ul>
                     <xd:p>The following instructions apply to all table markup (table
									element and its decendents) with @morerows, @colsep, and @rowsep
										attributes:<xd:ul>
                           <xd:li>Remove any instances of @morerows=0</xd:li>
                           <xd:li>If ALL occurrences of @colsep in one table have a value
											of zero, remove them all from that table. </xd:li>
                           <xd:li>If ALL occurrences of @rowsep in one table have a value
											of zero, remove them all from that table. </xd:li>
                        </xd:ul>
                        <xd:p>
                           <xd:b>Note: </xd:b>Although these instructions apply to all content streams,
										only the UK content streams and AU18 are known to have these
										issues.</xd:p>
                     </xd:p>
                     <xd:ul>
                        <xd:li>
                           <xd:i>thead</xd:i> becomes
											<xd:b>thead</xd:b> below is the required child
										element: <xd:ul>
                              <xd:li>
                                 <xd:i>row</xd:i> becomes
												<xd:b>row</xd:b> below is the required
												child element: <xd:ul>
                                    <xd:li>
                                       <xd:i>entry</xd:i> becomes
												<xd:b>entry</xd:b> and comes with
												<xd:i>@nameend</xd:i> becomes
												<xd:b>@nameend</xd:b>
                                       <xd:i>@namest</xd:i> becomes
												<xd:b>@namest</xd:b>
                                       <xd:i>@align</xd:i> becomes
												<xd:b>@align</xd:b> with tokenized
												values as (left | right | center | justify | char)
												</xd:li>
                                 </xd:ul>
                              </xd:li>
                           </xd:ul>
                        </xd:li>
                     </xd:ul>
                     <xd:ul>
                        <xd:li>
                           <xd:i>tbody</xd:i> becomes
											<xd:b>tbody</xd:b> and child element includes: <xd:ul>
                              <xd:li>
                                 <xd:i>row</xd:i> becomes
												<xd:b>row</xd:b> and child element
												includes: <xd:ul>
                                    <xd:li>
                                       <xd:i>entry</xd:i> becomes
												<xd:b>entry</xd:b> and comes with
												<xd:i>@nameend</xd:i> becomes
												<xd:b>@nameend</xd:b>
                                       <xd:i>@namest</xd:i> becomes
												<xd:b>@namest</xd:b>
                                       <xd:i>@char</xd:i> becomes
												<xd:b>@char</xd:b>
                                       <xd:i>@align</xd:i> becomes
												<xd:b>@align</xd:b> with tokenized
												values as (left | right | center | justify | char)
												</xd:li>
                                 </xd:ul>
                              </xd:li>
                           </xd:ul>
                        </xd:li>
                     </xd:ul>
                  </xd:li>
               </xd:ul>
            </xd:li>
         </xd:ul>
         <xd:p>
            <xd:b>Note: </xd:b> Multiple <xd:i>tgroup</xd:i> are retained for conversion.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;table frame="none"&gt; &lt;tgroup cols="3" colsep="0" rowsep="0"&gt;
					&lt;colspec colname="col1" colnum="1" colwidth="5*"/&gt; &lt;colspec
					colname="col2" colnum="2" colwidth="83*"/&gt; &lt;colspec align="left"
					colname="col3" colnum="3" colwidth="12*"/&gt; &lt;thead&gt; &lt;row&gt;
					&lt;entry align="center" nameend="col3" namest="col1"&gt;&lt;emph
					typestyle="bf"&gt;Table of contents&lt;/emph&gt;&lt;/entry&gt; &lt;/row&gt;
					&lt;row&gt; &lt;entry/&gt;&lt;entry/&gt; &lt;entry align="right"
					colname="col3"&gt;&lt;emph typestyle="bf"&gt;Para no&lt;/emph&gt;&lt;/entry&gt;
					&lt;/row&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;row&gt; &lt;entry align="left"
					nameend="col2" namest="col1"&gt;Introduction&lt;/entry&gt; &lt;entry
					align="right" colname="col3"&gt;[1]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt;
					&lt;entry align="left" nameend="col2" namest="col1"&gt;Mental health legislation
					concerning informal patients&lt;/entry&gt; &lt;entry align="right"
					colname="col3"&gt;[6]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt; &lt;entry
					align="left" nameend="col2" namest="col1"&gt;Procedural background&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[15]&lt;/entry&gt; &lt;/row&gt;
					&lt;row&gt; &lt;entry align="left" nameend="col2" namest="col1"&gt;Applicable
					statutory provisions&lt;/entry&gt; &lt;entry align="right"
					colname="col3"&gt;[22]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt; &lt;entry
					align="left" nameend="col2" namest="col1"&gt;The English position&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[33]&lt;/entry&gt; &lt;/row&gt;
					&lt;row&gt; &lt;entry align="left" nameend="col2" namest="col1"&gt;Submissions
					of parties&lt;/entry&gt; &lt;entry align="right"
					colname="col3"&gt;[39]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt; &lt;entry
					align="left" nameend="col2" namest="col1"&gt;Protective provisions&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[43]&lt;/entry&gt; &lt;/row&gt;
					&lt;row&gt; &lt;entry align="left" nameend="col2" namest="col1"&gt;The 1961 Act:
					Crown authority to treat informal patients&lt;/entry&gt; &lt;entry align="right"
					colname="col3"&gt;[45]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt; &lt;entry
					align="left" nameend="col2" namest="col1"&gt;Leave requirements&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[50]&lt;/entry&gt; &lt;/row&gt;
					&lt;row&gt; &lt;entry align="left" nameend="col2" namest="col1"&gt;The 1969
					Act&lt;/entry&gt; &lt;entry align="right" colname="col3"&gt; &lt;/entry&gt;
					&lt;/row&gt; &lt;row&gt; &lt;entry/&gt; &lt;entry align="left"
					colname="col2"&gt;(a) Crown authority to treat informal patients&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[54]&lt;/entry&gt; &lt;/row&gt;
					&lt;row&gt; &lt;entry/&gt; &lt;entry align="left" colname="col2"&gt;(b)
					Authority of hospital boards to treat informal patients&lt;/entry&gt; &lt;entry
					align="right" colname="col3"&gt;[56]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt;
					&lt;entry align="left" nameend="col2" namest="col1"&gt;Conclusion&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[75]&lt;/entry&gt; &lt;/row&gt;
					&lt;/tbody&gt; &lt;/tgroup&gt; &lt;/table&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;table frame="none"&gt; &lt;tgroup cols="3"&gt; &lt;colspec
					colname="col1" colnum="1" colwidth="5*"/&gt; &lt;colspec colname="col2"
					colnum="2" colwidth="83*"/&gt; &lt;colspec align="left" colname="col3"
					colnum="3" colwidth="12*"/&gt; &lt;thead&gt; &lt;row&gt; &lt;entry
					align="center" nameend="col3" namest="col1"&gt;&lt;emph typestyle="bf"&gt;Table
					of contents&lt;/emph&gt;&lt;/entry&gt; &lt;/row&gt; &lt;row&gt;
					&lt;entry/&gt;&lt;entry/&gt; &lt;entry align="right" colname="col3"&gt;&lt;emph
					typestyle="bf"&gt;Para no&lt;/emph&gt;&lt;/entry&gt; &lt;/row&gt; &lt;/thead&gt;
					&lt;tbody&gt; &lt;row&gt; &lt;entry align="left" nameend="col2"
					namest="col1"&gt;Introduction&lt;/entry&gt; &lt;entry align="right"
					colname="col3"&gt;[1]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt; &lt;entry
					align="left" nameend="col2" namest="col1"&gt;Mental health legislation
					concerning informal patients&lt;/entry&gt; &lt;entry align="right"
					colname="col3"&gt;[6]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt; &lt;entry
					align="left" nameend="col2" namest="col1"&gt;Procedural background&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[15]&lt;/entry&gt; &lt;/row&gt;
					&lt;row&gt; &lt;entry align="left" nameend="col2" namest="col1"&gt;Applicable
					statutory provisions&lt;/entry&gt; &lt;entry align="right"
					colname="col3"&gt;[22]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt; &lt;entry
					align="left" nameend="col2" namest="col1"&gt;The English position&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[33]&lt;/entry&gt; &lt;/row&gt;
					&lt;row&gt; &lt;entry align="left" nameend="col2" namest="col1"&gt;Submissions
					of parties&lt;/entry&gt; &lt;entry align="right"
					colname="col3"&gt;[39]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt; &lt;entry
					align="left" nameend="col2" namest="col1"&gt;Protective provisions&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[43]&lt;/entry&gt; &lt;/row&gt;
					&lt;row&gt; &lt;entry align="left" nameend="col2" namest="col1"&gt;The 1961 Act:
					Crown authority to treat informal patients&lt;/entry&gt; &lt;entry align="right"
					colname="col3"&gt;[45]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt; &lt;entry
					align="left" nameend="col2" namest="col1"&gt;Leave requirements&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[50]&lt;/entry&gt; &lt;/row&gt;
					&lt;row&gt; &lt;entry align="left" nameend="col2" namest="col1"&gt;The 1969
					Act&lt;/entry&gt; &lt;entry align="right" colname="col3"&gt; &lt;/entry&gt;
					&lt;/row&gt; &lt;row&gt; &lt;entry/&gt; &lt;entry align="left"
					colname="col2"&gt;(a) Crown authority to treat informal patients&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[54]&lt;/entry&gt; &lt;/row&gt;
					&lt;row&gt; &lt;entry/&gt; &lt;entry align="left" colname="col2"&gt;(b)
					Authority of hospital boards to treat informal patients&lt;/entry&gt; &lt;entry
					align="right" colname="col3"&gt;[56]&lt;/entry&gt; &lt;/row&gt; &lt;row&gt;
					&lt;entry align="left" nameend="col2" namest="col1"&gt;Conclusion&lt;/entry&gt;
					&lt;entry align="right" colname="col3"&gt;[75]&lt;/entry&gt; &lt;/row&gt;
					&lt;/tbody&gt; &lt;/tgroup&gt; &lt;/table&gt; </xd:pre>
         <!--Changes2014-07-08: Updated instruction for added the
						following rarely occurring attributes @char inside
						the entry.2014-06-04: For completeness, added instructions for
						the following rarely occurring attributes of
							table/tgroup/colspec:
							@align, @char,
							@charoff, @colsep,
							@id, @rowsep,
							@searchtype, and
						@xml:lang. This is in response to various minor
						questions on message boards that have been asked and answered over the past
						two years. These instructions should not trigger changes to existing
						conversion programs, as the programs have already been changed in response
						to previous message board answers. These instructions have been added so
						this topic is up-to-date with respect to current conversion program behavior
						for these rarely occuring attributes.2013-09-16: Removed an obsolete note regarding
						visual styling of tables.2013-09-12: WebTeam #s 235116, 235130, 235126: Added instructions for deleting
						extraneous instances of @morerows, @colsep and @rowsep. These instructions
						apply immediately to all UK streams and also to AU18.2012-01-12: Added a note for handling multiple tgroup. 2011-12-15: Created. -->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_table-LxAdv-table.dita  -->
   <!--  @SBy:  this is from QC XSLT.  Should it appear here?  -->
   <!-- BRT: process table with page elements (break table in row before each row//page, create ref:page, create another table starting from row//page -->
   <xsl:template match="table[descendant::entry/descendant::page]" priority="15"><!-- BRT create a separate table before the start of a row that contains entry/descendant::page -->
      <xsl:for-each-group select=".//row" group-starting-with="row[entry/descendant::page]"><!-- BRT: If there is a ref:page in the current-group(), create the ref:page first -->
         <xsl:if test="current-group()//page">
            <xsl:element name="ref:page">
               <xsl:attribute name="num">
                  <xsl:value-of select="translate(current-group()//page/@count, ',', '')"/>
               </xsl:attribute>
               <xsl:if test="current-group()//page/@reporter">
                  <xsl:attribute name="page-scheme">
                     <xsl:value-of select="translate(current-group()//page/@reporter, ' ', '_')"/>
                  </xsl:attribute>
               </xsl:if>
               <xsl:if test="current-group()//page/@subdoc">
                  <xsl:attribute name="includeintoc">
                     <xsl:value-of select="current-group()//page/@subdoc"/>
                  </xsl:attribute>
               </xsl:if>
               <xsl:attribute name="page-scheme-type">
                  <xsl:text>reporter-abbreviation</xsl:text>
               </xsl:attribute>
            </xsl:element>
         </xsl:if>
         <!-- BRT create separate table for each group -->
         <xsl:element name="table"
                      namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/"><!-- BRT: Convert table, tgroup, and colspec  -->
            <xsl:copy-of select="ancestor::table/(@* except @id)"/>
            <xsl:if test="ancestor::table/@id">
               <xsl:variable name="count" select="position()"/>
               <xsl:for-each select="ancestor::table/@id">
                  <xsl:attribute name="xml:id">
                     <xsl:value-of select="concat(ancestor::table/@id, '_', $count)"/>
                  </xsl:attribute>
               </xsl:for-each>
            </xsl:if>
            <xsl:element name="tgroup"
                         namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
               <xsl:copy-of select="ancestor::table[1]/tgroup/@*"/>
               <xsl:for-each select="ancestor::table[1]//colspec">
                  <xsl:element name="colspec"
                               namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
                     <xsl:copy-of select="@*"/>
                     <xsl:apply-templates/>
                  </xsl:element>
               </xsl:for-each>
               <xsl:for-each select="ancestor::table[1]//thead">
                  <xsl:element name="thead"
                               namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
                     <xsl:copy-of select="@*"/>
                     <xsl:apply-templates/>
                  </xsl:element>
               </xsl:for-each>
               <xsl:element name="tbody"
                            namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
                  <xsl:copy-of select="ancestor::table[1]//tbody/@*"/>
                  <!-- apply all the rows of the current group to the current table -->
                  <xsl:apply-templates select="current-group()"/>
               </xsl:element>
            </xsl:element>
         </xsl:element>
      </xsl:for-each-group>
   </xsl:template>
   <!--  @SBy:  modified from QC XSLT  -->   <!-- 2017-10-17 - MDS: Added choose statment due to webstar 7025682.   -->   <!-- 2017-11-16 - CSN: Added UK03|case:dicisionsummary to existing 'when'.  webstar 7050317.   -->
   <xsl:template match="table" name="table">
      <xsl:choose>
         <xsl:when test="parent::entry or ((parent::case:decisionsummary or parent::case:typeofcase) and $streamID='UK03')">
            <p>
               <table>
                  <xsl:copy-of select="@frame | @pgwide"/>
                  <!--  @SBy:  only @frame is in DITA  -->
                  <!--  @SBy:  note @colsep | @rowsep addressed specifically in other template rules below  -->
                  <xsl:apply-templates select="@* except (@frame, @pgwide)"/>
                  <xsl:apply-templates/>
               </table>
            </p>
         </xsl:when>
         <xsl:otherwise>
            <table>
               <xsl:copy-of select="@frame"/>
               <!-- BRT 11/16/17 added special handling for @pgwide in UK content. If value is '0', output is '0', otherwise, the output is '1' -->
               <xsl:choose>
                  <xsl:when test="$streamID = ('UK01', 'UK02', 'UK05', 'UK08CA','UK08OR', 'UK09', 'UK10', 'UK15', 'UK17', 'UK18','UK20','UK22LF')">
                     <xsl:if test="@pgwide">
                        <xsl:attribute name="pgwide">
                           <xsl:choose>
                              <xsl:when test="@pgwide='0'">
                                 <xsl:value-of select="'0'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                 <xsl:value-of select="'1'"/>
                              </xsl:otherwise>
                           </xsl:choose>
                        </xsl:attribute>
                     </xsl:if>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:copy-of select="@pgwide"/>
                  </xsl:otherwise>
               </xsl:choose>
               <xsl:copy-of select="@frame"/>
               <!--  @SBy:  only @frame is in DITA  -->
               <!--  @SBy:  note @colsep | @rowsep addressed specifically in other template rules below  -->
               <xsl:apply-templates select="@* except (@frame, @pgwide)"/>
               <xsl:apply-templates/>
            </table>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="tgroup">
      <tgroup>
         <xsl:copy-of select="@cols"/>
         <!--  @SBy:  note @colsep | @rowsep addressed specifically in other template rules below  -->
         <xsl:apply-templates select="@* except @cols"/>
         <xsl:apply-templates/>
      </tgroup>
   </xsl:template>

   <xsl:template match="tgroup/@align">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="colspec">
      <colspec>
         <xsl:copy-of select="@align | @char | @charoff | @colname | @colnum | @xml:lang"/>
         <!--  @SBy:  note @colsep | @rowsep addressed specifically in other template rules below  -->
         <xsl:apply-templates select="@* except (@align, @char, @charoff, @colname, @colnum, @xml:lang)"/>
         <xsl:apply-templates/>
         <!--  ***NOTE  -  see DITA regarding conversions of @colwidth values; does the DT code do any of that?  ***  -->
      </colspec>
   </xsl:template>

   <xsl:template match="colspec/@colwidth">
      <xsl:attribute name="colwidth"><!--<xsl:value-of select="."/>-->
         <xsl:analyze-string select="." regex="([0-9]+)([*]|[a-z]+)">
            <xsl:matching-substring>
               <xsl:choose>
                  <xsl:when test="regex-group(2) = 'in'">
                     <xsl:variable name="var1">
                        <xsl:value-of select="number(regex-group(1)) * 96"/>
                     </xsl:variable>
                     <xsl:value-of select="$var1"/>
                     <xsl:value-of select="concat($var1, '*')"/>
                  </xsl:when>
                  <xsl:when test="regex-group(2) = 'cm'">
                     <xsl:variable name="var1">
                        <xsl:value-of select="number(regex-group(1)) * 37.7952755904"/>
                     </xsl:variable>
                     <xsl:value-of select="concat(substring-before($var1, '.'), '*')"/>
                  </xsl:when>
                  <xsl:when test="regex-group(2) = 'mm'">
                     <xsl:variable name="var1">
                        <xsl:value-of select="number(regex-group(1)) * 3.77952755904"/>
                     </xsl:variable>
                     <xsl:value-of select="concat(substring-before($var1, '.'), '*')"/>
                  </xsl:when>
                  <xsl:when test="regex-group(2) = 'pt'">
                     <xsl:variable name="var1">
                        <xsl:value-of select="number(regex-group(1)) * 1"/>
                     </xsl:variable>
                     <xsl:value-of select="concat($var1, '*')"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:value-of select="concat(regex-group(1), '*')"/>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:matching-substring>
         </xsl:analyze-string>
      </xsl:attribute>
   </xsl:template>
   <!-- SNB 2017-10-17 creating a new template that I think probably oght to be the template for all rosetta conversions for colwidth... 
		the above template creates flat out WRONG rarget markup when here's a decimal ( colwidth="78.50pt" resulted in 
		  colwidth="50*", and  colwidth="80.00pt" resulted in  colwidth="0*"), and catching an empty column width seems wise in general. 
		  For LPA, we need to catch numbers with no * or units, which none of these templates do. The ones below for NZ111 and AU10 catch 
		  decimal numbers well, but not the case of no units or *. -->
   <xsl:template match="colspec[$streamID=('USLPA')]/@colwidth" priority="3">
      <xsl:attribute name="colwidth">
         <xsl:choose><!-- empty colwidth -->
            <xsl:when test="normalize-space(.)=''"><!-- converts empty colwidth to "*" -->
               <xsl:value-of select="'*'"/>
            </xsl:when>
            <!-- only a number, no decimal, no units, add * at end -->
            <xsl:when test="(not(matches(.,'[a-z\.*]+','i')))">
               <xsl:value-of select="concat(., '*')"/>
            </xsl:when>
            <!-- only a DECIMAL number, no units, strip decimal and following numbers and add * at end -->
            <xsl:when test="(not(matches(.,'[a-z*]+','i')))">
               <xsl:analyze-string select="." regex="([0-9]+)(\.+)([0-9]+)">
                  <xsl:matching-substring><!--Dont need to choose; just use regex-group(1) and throw rest away-->
                     <xsl:value-of select="concat(regex-group(1), '*')"/>
                  </xsl:matching-substring>
                  <xsl:non-matching-substring/>
               </xsl:analyze-string>
            </xsl:when>
            <!-- number with decimal, with units, strip decimal, convert to specified unit, and add * at end -->
            <xsl:when test="(matches(.,'[0-9]+[\.][0-9]*([*]|[a-z]+)','i'))">
               <xsl:analyze-string select="." regex="([0-9\.]+)([*]|[a-zA-Z]+)">
                  <xsl:matching-substring>
                     <xsl:variable name="wholenumber"
                                   select="number(substring-before(regex-group(1),'.'))"/>
                     <xsl:choose>
                        <xsl:when test="lower-case(regex-group(2)) = 'in'">
                           <xsl:variable name="var1">
                              <xsl:value-of select="number($wholenumber) * 96"/>
                           </xsl:variable>
                           <xsl:value-of select="concat($var1, '*')"/>
                        </xsl:when>
                        <xsl:when test="lower-case(regex-group(2)) = 'cm'">
                           <xsl:variable name="var1">
                              <xsl:value-of select="number($wholenumber) * 37.7952755904"/>
                           </xsl:variable>
                           <xsl:value-of select="concat(substring-before($var1, '.'), '*')"/>
                        </xsl:when>
                        <xsl:when test="lower-case(regex-group(2)) = 'mm'">
                           <xsl:variable name="var1">
                              <xsl:value-of select="number($wholenumber) * 3.77952755904"/>
                           </xsl:variable>
                           <xsl:value-of select="concat(substring-before($var1, '.'), '*')"/>
                        </xsl:when>
                        <xsl:when test="lower-case(regex-group(2)) = 'pt'">
                           <xsl:variable name="var1">
                              <xsl:value-of select="number($wholenumber) * 1"/>
                           </xsl:variable>
                           <xsl:value-of select="concat($var1, '*')"/>
                        </xsl:when>
                        <xsl:otherwise>
                           <xsl:value-of select="concat($wholenumber, '*')"/>
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:matching-substring>
               </xsl:analyze-string>
            </xsl:when>
            <!-- number without decimal, with units, convert to specified unit, and add * at end -->
            <xsl:when test="(matches(.,'[0-9]+([*]|[a-z]+)','i'))">
               <xsl:analyze-string select="." regex="([0-9]+)([*]|[a-zA-Z]+)">
                  <xsl:matching-substring>
                     <xsl:choose>
                        <xsl:when test="lower-case(regex-group(2)) = 'in'">
                           <xsl:variable name="var1">
                              <xsl:value-of select="number(regex-group(1)) * 96"/>
                           </xsl:variable>
                           <xsl:value-of select="concat($var1, '*')"/>
                        </xsl:when>
                        <xsl:when test="lower-case(regex-group(2)) = 'cm'">
                           <xsl:variable name="var1">
                              <xsl:value-of select="number(regex-group(1)) * 37.7952755904"/>
                           </xsl:variable>
                           <xsl:value-of select="concat(substring-before($var1, '.'), '*')"/>
                        </xsl:when>
                        <xsl:when test="lower-case(regex-group(2))= 'mm'">
                           <xsl:variable name="var1">
                              <xsl:value-of select="number(regex-group(1)) * 3.77952755904"/>
                           </xsl:variable>
                           <xsl:value-of select="concat(substring-before($var1, '.'), '*')"/>
                        </xsl:when>
                        <xsl:when test="lower-case(regex-group(2)) = 'pt'">
                           <xsl:variable name="var1">
                              <xsl:value-of select="number(regex-group(1)) * 1"/>
                           </xsl:variable>
                           <xsl:value-of select="concat($var1, '*')"/>
                        </xsl:when>
                        <xsl:otherwise>
                           <xsl:value-of select="concat(regex-group(1), '*')"/>
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:matching-substring>
               </xsl:analyze-string>
            </xsl:when>
            <!-- unsupported format -->
            <xsl:otherwise><!-- output whatever was in colwidth -->
               <xsl:value-of select="."/>
               <!-- generate warning -->
               <xsl:call-template name="outputErrorMessage">
                  <xsl:with-param name="messageText"
                                  as="xs:string"
                                  select="concat('ERROR: unexpected format for @colwidth: ',.) "/>
                  <xsl:with-param name="errorType" as="xs:string" select=" 'ROCKET' "/>
                  <xsl:with-param name="errorCode" as="xs:string*" select=" '405' "/>
                  <xsl:with-param name="context" as="xs:string">
                     <xsl:call-template name="generateXPath"/>
                  </xsl:with-param>
               </xsl:call-template>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:attribute>
   </xsl:template>

   <xsl:template match="colspec[$streamID=('NZ11','AU10')]/@colwidth[.='']" priority="2"><!-- converts empty colwidth to "*" -->
      <xsl:attribute name="colwidth">*</xsl:attribute>
   </xsl:template>

   <xsl:template match="colspec[$streamID=('NZ11','AU10')]/@colwidth[contains(.,'.')]"
                 priority="2"><!-- for use when there is a decimal value in @colwidth.  it truncates the whole number and passes it through -->
      <xsl:attribute name="colwidth"><!--<xsl:value-of select="."/>-->
         <xsl:analyze-string select="." regex="([0-9\.]+)([*]|[a-z]+)">
            <xsl:matching-substring>
               <xsl:variable name="wholenumber"
                             select="number(substring-before(regex-group(1),'.'))"/>
               <xsl:choose>
                  <xsl:when test="regex-group(2) = 'in'">
                     <xsl:variable name="var1">
                        <xsl:value-of select="number($wholenumber) * 96"/>
                     </xsl:variable>
                     <xsl:value-of select="$var1"/>
                     <xsl:value-of select="concat($var1, '*')"/>
                  </xsl:when>
                  <xsl:when test="regex-group(2) = 'cm'">
                     <xsl:variable name="var1">
                        <xsl:value-of select="number($wholenumber) * 37.7952755904"/>
                     </xsl:variable>
                     <xsl:value-of select="concat(substring-before($var1, '.'), '*')"/>
                  </xsl:when>
                  <xsl:when test="regex-group(2) = 'mm'">
                     <xsl:variable name="var1">
                        <xsl:value-of select="number($wholenumber) * 3.77952755904"/>
                     </xsl:variable>
                     <xsl:value-of select="concat(substring-before($var1, '.'), '*')"/>
                  </xsl:when>
                  <xsl:when test="regex-group(2) = 'pt'">
                     <xsl:variable name="var1">
                        <xsl:value-of select="number($wholenumber) * 1"/>
                     </xsl:variable>
                     <xsl:value-of select="concat($var1, '*')"/>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:value-of select="concat($wholenumber, '*')"/>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:matching-substring>
         </xsl:analyze-string>
      </xsl:attribute>
   </xsl:template>

   <xsl:template match="colspec/@searchtype"/>
   <!--	  .... In the absence of specific instructions elsewhere
			  in the CI, <sourcexml>@id</sourcexml> is dropped.</li>  -->   <!--  ***NOTE  -  NEED TO ADD TO THE $streamID LIST ALL STREAMS THAT HAVE SPECIFIC INSTRUCTIONS ON colspec/@id HANDLING!!!  ***  -->
   <xsl:template match="colspec/@id[not($streamID = ('XX', 'YY', 'ZZ'))]"/>

   <xsl:template match="*[self::table or self::tgroup or self::colspec or self::thead or self::tbody or self::row or self::entry]/@morerows[. = '0']"/>
   <!-- I think we want to preserve morerows if they're not 0, otherwise we lose formatting -->
   <xsl:template match="*[self::table or self::tgroup or self::colspec or self::thead or self::tbody or self::row or self::entry]/@morerows[. != '0']">
      <xsl:copy-of select="."/>
   </xsl:template>
   <!--  <li>If ALL occurrences of @colsep in one table have a value of
						zero, remove them all from that table.
				</li>
				<li>If ALL occurrences of @rowsep in one table have a value of zero,
					remove them all from that table. </li>  -->
   <xsl:template match="*[self::table or self::tgroup or self::colspec or self::thead or self::tbody or self::row or self::entry]/@colsep[. = '0'][not(ancestor-or-self::table//@colsep[. != '0'])]"/>

   <xsl:template match="*[self::table or self::tgroup or self::colspec or self::thead or self::tbody or self::row or self::entry]/@rowsep[. = '0'][not(ancestor-or-self::table//@rowsep[. != '0'])]"/>

   <xsl:template match="*[self::table or self::tgroup or self::colspec or self::thead or self::tbody or self::row or self::entry]/@colsep[ancestor-or-self::table//@colsep[. != '0']]">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="*[self::table or self::tgroup or self::colspec or self::thead or self::tbody or self::row or self::entry]/@rowsep[ancestor-or-self::table//@rowsep[. != '0']]">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="thead">
      <thead>
         <xsl:apply-templates select="@* | node()"/>
      </thead>
   </xsl:template>

   <xsl:template match="row">
      <row>
         <xsl:apply-templates select="@* | node()"/>
      </row>
   </xsl:template>

   <xsl:template match="entry"><!-- Awantika: For AU20 entry becomes  primlawhist:histitemdiv/textitem for different @id-->
      <xsl:variable name="docinfoidtext" select="/*/docinfo/docinfo:doc-id/text()"/>
      <xsl:choose>
         <xsl:when test="contains(lower-case($docinfoidtext),'history') and $streamID='AU20'"><!--<primlawhist:histitem>-->
            <xsl:if test="@id='HI5'">
               <primlawhist:histitemdiv>
                  <xsl:attribute name="divtype">heading</xsl:attribute>
                  <xsl:attribute name="status">assent</xsl:attribute>
                  <textitem>
                     <xsl:apply-templates/>
                  </textitem>
               </primlawhist:histitemdiv>
            </xsl:if>
            <xsl:if test="@id='HI7'">
               <primlawhist:histitemdiv>
                  <xsl:attribute name="divtype">text</xsl:attribute>
                  <xsl:attribute name="status">assent</xsl:attribute>
                  <textitem>
                     <date>
                        <xsl:apply-templates/>
                     </date>
                  </textitem>
               </primlawhist:histitemdiv>
            </xsl:if>
            <xsl:if test="@id='HI6'">
               <primlawhist:histitemdiv><!-- Awantika:2017-11-02: Updated for entry/p-limited to create only one textitem -->
                  <xsl:choose>
                     <xsl:when test="child::p-limited">
                        <xsl:apply-templates/>
                     </xsl:when>
                     <xsl:otherwise>
                        <textitem>
                           <xsl:apply-templates/>
                        </textitem>
                     </xsl:otherwise>
                  </xsl:choose>
               </primlawhist:histitemdiv>
            </xsl:if>
            <xsl:if test="normalize-space(.)='Date of assent'">
               <primlawhist:histitemdiv>
                  <textitem>
                     <xsl:apply-templates/>
                  </textitem>
               </primlawhist:histitemdiv>
            </xsl:if>
            <!--</primlawhist:histitem>-->
         </xsl:when>
         <xsl:when test="contains(lower-case($docinfoidtext),'cases') and $streamID='AU20'">
            <xsl:apply-templates/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:choose>
               <xsl:when test="$streamID='AU20' and contains(lower-case($docinfoidtext),'overview')">
                  <xsl:apply-templates/>
               </xsl:when>
               <xsl:otherwise>
                  <entry><!-- NOTE: @colsep and @rowsep should be handled above -->
                     <xsl:copy-of select="@align | @char | @charoff | @colname | @nameend | @namest | @valign"/>
                     <xsl:apply-templates select="@* except (@align, @char, @charoff, @colname, @nameend, @namest, @valign)"/>
                     <xsl:apply-templates/>
                  </entry>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template match="tbody">
      <tbody>
         <xsl:apply-templates select="@* | node()"/>
      </tbody>
   </xsl:template>

   <xsl:template match="tbody/@valign">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="row/@valign">
      <xsl:copy-of select="."/>
   </xsl:template>
   <!-- Suppressed the highlight 	-->
   <xsl:template match="entry/@highlight"/>
   <!-- JD: 2017-06-13: added to "entry" above -->   <!--	<xsl:template match="entry/@valign">
		<xsl:copy-of select="."/>
	</xsl:template>
	
	<xsl:template match="entry/@align">
		<xsl:copy-of select="."/>
	</xsl:template>
-->   <!--JL Got an error due to not dealing with thead/@valign -->
   <xsl:template match="thead/@valign">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="table/@frame">
      <xsl:copy-of select="."/>
   </xsl:template>

   <xsl:template match="table/@pgwide"/>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>text</xd:i> becomes <xd:b>text</xd:b>, and optional attributes <xd:i>@cont</xd:i> should be suppressed from conversion, <xd:i>@align</xd:i> becomes <xd:b>@align</xd:b> must only be used to preserve mandated horizontal spacing and <xd:b>@align</xd:b> will be moved in parent <xd:b>p</xd:b> in New Lexis conversion.
                <xd:pre>
                    &lt;p&gt;&lt;text align="right"&gt;TOBY HALLIGAN&lt;/text&gt;&lt;/p&gt;
                </xd:pre>
            <xd:b>Becomes</xd:b>
            <xd:pre>
                    &lt;p align="right"&gt;&lt;text&gt;TOBY HALLIGAN&lt;/text&gt;&lt;/p&gt;
                </xd:pre>
         </xd:p>
         <xd:p>
            <xd:b>Note: </xd:b>
            <xd:b>(For CANADA Content Stream only )</xd:b>Only move the <xd:i> text@align</xd:i> to the parent <xd:b>p</xd:b> if it is the only text in <xd:i>p</xd:i>,  Otherwise, wrap the <xd:i>text</xd:i> with <xd:b>p</xd:b> and move the <xd:i>@align</xd:i> attribute to the newly created <xd:b> p</xd:b>.</xd:p>
         <xd:pre>

&lt;p&gt;
    &lt;text&gt;Dated at Calgary, Alberta this 31 day of March 1998.&lt;/text&gt;
    &lt;text&gt;The Honourable W. Kenneth Moore, Chief Justice of the Court of Queen's Bench of Alberta&lt;/text&gt;
    &lt;text align="center"&gt;ALBERTA RULES&lt;/text&gt;
    &lt;text&gt;Rules of practice made pursuant to subsection 745.64 of the Criminal
        Code to reflect the changes made to the Criminal Code regarding
        applications for reduction in the number of years of imprisonment
        without eligibility for parole.&lt;/text&gt;
&lt;/p&gt;                     
                    

</xd:pre>
         <xd:b>Becomes</xd:b>
         <xd:pre>

&lt;p&gt;
    &lt;text&gt;Dated at Calgary, Alberta this 31 day of March 1998.&lt;/text&gt;
    &lt;text&gt;The Honourable W. Kenneth Moore, Chief Justice of the Court of Queen's Bench of Alberta&lt;/text&gt;
&lt;/p&gt;
&lt;p align="center"&gt;
    &lt;text&gt;ALBERTA RULES&lt;/text&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;text&gt;Rules of practice made pursuant to subsection 745.64 of the Criminal
        Code to reflect the changes made to the Criminal Code regarding
        applications for reduction in the number of years of imprisonment
        without eligibility for parole.&lt;/text&gt;
&lt;/p&gt;

</xd:pre>
         <!--Changes2011-12-21: Added instruction for attribute align. 2011-04-28: Added instruction for attribute cont. 2012-08-30: Moved form/bodytext/text scenario to Rosetta_form_bodytext_text-to-LexisAdvance_form.text.dita.2014-01-31: Updated instruction, align will be moved in p in NL conversion. NZ09 commentary discussion board issue for handling text/@align2014-08-12: For CANADA Content Stream: Only move the
                         text@align to the parent p if
                    it is the only text in p, Otherwise, wrap the
                        text with p and move the
                        @align attribute to the newly created 
                        p.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_text-LxAdv-text.dita  -->
   <!-- *****************************************************************************
         * NOTE: @align handling including CA exception is addressed in              *
         * /XSLT/ContentArch/Rosetta-to-LA/modules/nonamespace/Rosetta_p-LxAdv-p.xsl *
         * because it can't be run from p/text context node.                         *
         * NOTE: @nl is addressed here and not in                                    *
         * /XSLT/ContentArch/Rosetta-to-LA/modules/nonamespace/Rosetta_p-LxAdv-p.xsl *
         * because it can't be run from p context node.                              *
          ****************************************************************************-->
   <!-- JD: 2017-07-21: added trap for empty node or single whitespace to match DT output.  -->
   <xsl:template match="text[not(node()) or string() and normalize-space(replace(., '^[\t\p{Zs}]+$', '')) = '']"
                 priority="2"/>

   <xsl:template match="text">
      <xsl:variable name="docinfoidtext" select="/*/docinfo/docinfo:doc-id/text()"/>
      <!--  Original Target XPath:  text   -->
      <xsl:choose>
         <xsl:when test="parent::p[@nl]">
            <xsl:call-template name="insert-vertical-space"/>
         </xsl:when>
         <xsl:otherwise><!-- Awantika: For AU20 history text becomes textitem -->
            <xsl:choose>
               <xsl:when test="$streamID='AU20' and parent::p[parent::note[@notetype='xref'][parent::heading]] and contains(lower-case($docinfoidtext),'history')">
                  <textitem>
                     <xsl:apply-templates/>
                  </textitem>
               </xsl:when>
               <xsl:when test="$streamID='AU20' and parent::p[ancestor::source_cttr:annotations[@annotgroup='prov-am']] and contains(lower-case($docinfoidtext),'history')">
                  <textitem>
                     <xsl:apply-templates/>
                  </textitem>
               </xsl:when>
               <!-- Awantika:2017-10-27: p/text will be converted to <textitem> for AU20 for specific scenario -->
               <xsl:when test="$streamID='AU20' and contains(lower-case($docinfoidtext),'history') and parent::p[ancestor::source_cttr:annotations/heading/note[@id='HI4']]| child::heading/title[.='Assent']">
                  <textitem>
                     <xsl:apply-templates/>
                  </textitem>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:choose>
                     <xsl:when test="$streamID='AU20' and contains(lower-case($docinfoidtext),'overview') and ancestor::source_cttr:annotations[@id='OP3' or @id='OI7']/heading/note/l/li">
                        <xsl:apply-templates/>
                     </xsl:when>
                     <xsl:when test="$streamID='AU20' and contains(lower-case($docinfoidtext),'overview') and ancestor::source_cttr:annotations[@id='OP15']">
                        <xsl:apply-templates/>
                     </xsl:when>
                     <!-- Vikas Rohilla : Updated for the UK12                            -->
                     <xsl:when test="child::note[@notetype!='xref'][$streamID = 'UK12']">
                        <xsl:apply-templates/>
                     </xsl:when>
                     <xsl:when test="$streamID='HK07' and parent::p[parent::bodytext[parent::level[@leveltype='prec' or @leveltype='prec.grp' or @leveltype='precgrp' or @leveltype='precgrp1' or @leveltype='precgrp2' or parent::comm.chap or ancestor::level[@leveltype = 'prec.grp']]]]">
                        <form:text>
                           <xsl:apply-templates select="node()"/>
                        </form:text>
                     </xsl:when>
                     <!-- Awantika:2017-11-02: p/text will be converted to <textitem> for AU20 for specific scenario -->
                     <xsl:when test="$streamID='AU20' and contains(lower-case($docinfoidtext),'overview') and parent::p[ancestor::source_cttr:annotations[child::heading/note/h[.='Former Title'] or child::heading/title[.='Former Title']]/source_cttr:annot/leg:info/note]">
                        <xsl:apply-templates/>
                     </xsl:when>
                     <xsl:when test="$streamID='AU20' and contains(lower-case($docinfoidtext),'overview') and parent::p[ancestor::heading[child::title[starts-with(lower-case(.),'international equivalents') or starts-with(lower-case(.),'uniform equivalents')]]/note/l/li]">
                        <xsl:apply-templates/>
                     </xsl:when>
                     <xsl:otherwise>
                        <text><!-- <xsl:apply-templates select="node() except refpt"/>--><!-- Awantika: Updated, as refpt should not be created in the text element --><!-- Priya Bardhan: Added ci:cite[@type='cite4thisdoc'] in except condition. Since, not required inside text -->
                           <xsl:apply-templates select="@*"/>
                           <xsl:apply-templates select="node() except (refpt,ci:cite[@type='cite4thisdoc'],copyright[$streamID='UK06'])"/>
                           <!-- Awantika: UK11DN- Need to merge the adjacent notes and move them to the end of the existing text  -->
                           <xsl:if test="parent::p[note[@notetype='xref']] and $streamID='UK11DN'">
                              <xsl:for-each-group select="parent::p[note[@notetype='xref']]/node()"
                                                  group-adjacent="if (self::note) then 0 else 1">
                                 <xsl:choose>
                                    <xsl:when test="current-grouping-key()=0"><!--  <xsl:apply-templates select="ancestor::p/text"/>-->
                                       <marginnote>
                                          <ref:anchor>
                                             <xsl:attribute name="id">
                                                <xsl:value-of select="generate-id()"/>
                                             </xsl:attribute>
                                             <xsl:attribute name="anchortype">
                                                <xsl:text>local</xsl:text>
                                             </xsl:attribute>
                                          </ref:anchor>
                                          <bodytext>
                                             <xsl:for-each select="current-group()">
                                                <xsl:apply-templates select="@* | node()"/>
                                             </xsl:for-each>
                                          </bodytext>
                                       </marginnote>
                                    </xsl:when>
                                 </xsl:choose>
                              </xsl:for-each-group>
                           </xsl:if>
                        </text>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!-- it doesn't make sense to address @align here, but to address it at the paragraph level.
        What do we do for <p> elements that get emptied by having now-empty text? Right now they remain, 
        as passively specified through omission of use case. -->   <!--    Updated by Chaitanya foe the text Alignment-->
   <xsl:template match="text/@align[$streamID!='CA09']"/>
   <!--<xsl:copy-of select="."></xsl:copy-of>-->
   <xsl:template match="text/@cont"/>

   <xsl:template match="text/@ln.nsprefix"/>

   <xsl:template match="text[$streamID='CA12']/@searchtype"/>

   <xsl:template name="insert-vertical-space">
      <xsl:element name="text"
                   namespace="http://www.lexisnexis.com/xmlschemas/content/shared/base/1/">
         <xsl:apply-templates select="@*"/>
         <!--- BRT add number of nl that are in p/@nl -->
         <xsl:call-template name="add_nl">
            <xsl:with-param name="length" select="parent::p/@nl"/>
            <xsl:with-param name="i" select="1"/>
         </xsl:call-template>
         <!-- BRT remove hard-coded nl that are in source -->
         <xsl:apply-templates select="*[not(self::nl or self::refpt)] | text()"/>
      </xsl:element>
   </xsl:template>

   <xsl:template name="add_nl">
      <xsl:param name="length" select="."/>
      <xsl:param name="i" select="1"/>
      <!-- BRT: create <nl/> for each iteration of @nl value -->
      <xsl:if test="$length &gt; 0">
         <xsl:element name="proc:nl"/>
         <xsl:call-template name="add_nl">
            <xsl:with-param name="length" select="$length - 1"/>
            <xsl:with-param name="i" select="$i + 1"/>
         </xsl:call-template>
      </xsl:if>
   </xsl:template>
   <!-- Vikas Rohilla : Added the template for the streamID CA01    -->   <!-- Sudhanshu Srivastava : Added StreamID for passthrough. -->
   <xsl:template match="text[parent::p[parent::glp:note[parent::text]]][$streamID='CA01' or $streamID='CA02CC' or $streamID='CA04']">
      <xsl:apply-templates/>
   </xsl:template>
   <!--Satbir: Set the low priority in below template because this is common template which is already define in "Rosetta_strike-LxAdv-strike.xsl"-->   <!-- JD: 2017-07-14: just use common template "Rosetta_strike-LxAdv-strike.xsl"; removing this version because: 
				1) this is the module for the <text> element, not the <strike> element 
				2) the handling is nearly identical
				3) this version generates an empty @typestyle attribute, which causes validation errors.
		-->   <!--<xsl:template match="strike" priority="10">
        <strike>
            <xsl:attribute name="typestyle">
                <xsl:value-of select="@typestyle"/>   
            </xsl:attribute>
            <xsl:apply-templates select="node()"/>
        </strike>
    </xsl:template>-->   <!-- <!-\- Vikas Rohilla :Added template for the streamID CA01-\->
    <xsl:template match="text[matches(.,'^ARRÊT') or matches(.,'^HELD:') or matches(.,'^DISPOSITIF :')]">
        <xsl:element name="text">
            <xsl:choose>
                <xsl:when test="child::*">
                    <xsl:apply-templates/>
                </xsl:when>
                <xsl:when test="contains(.,'- ')">
                    <xsl:value-of select="substring-after(.,'- ')"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="substring-after(.,'. ')"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:element>
    </xsl:template>-->   <!-- Vikas Rohilla : created the template for text when ancestor frm:div    -->
   <xsl:template match="text[parent::p[parent::frm:div |                               parent::frm:body |                               parent::li[ancestor::frm:body] |                               parent::clause[ancestor::frm:div or ancestor::frm:body]]][not(ancestor::footnote or ancestor::note)][$streamID='UK12']">
      <form:text>
         <xsl:apply-templates select="@*|node()"/>
      </form:text>
   </xsl:template>
   <!-- Vikas Rohilla : created the template for text when ancestor frm:div    -->
   <xsl:template match="text[parent::p[parent::sigblock[ancestor::frm:div or ancestor::frm:body]]][$streamID='UK12']">
      <xsl:apply-templates select="@*|node()"/>
   </xsl:template>

   <xsl:template match="text[parent::p[parent::text]][$streamID='UK12']" priority="25">
      <xsl:apply-templates select="@*|node()"/>
   </xsl:template>

   <xsl:template match="text[preceding-sibling::note[@notetype='xref']]">
      <text>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:if test="$streamID='UK12'">
            <xsl:apply-templates select="preceding-sibling::note[@notetype='xref']" mode="note-xref"/>
         </xsl:if>
      </text>
   </xsl:template>
   <!-- suppress the empty text    -->
   <xsl:template match="text[normalize-space(.)=''][$streamID=('UK12','UK03')]"/>

   <xsl:template match="text[matches(.,'^ $')][$streamID='NZ13']" priority="25">
      <text>
         <xsl:text xml:space="preserve"> </xsl:text>
      </text>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>form/bodytext/p/text</xd:i> becomes <xd:b>form:text</xd:b>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;form&gt;
    &lt;bodytext searchtype="FORM"&gt;
        &lt;p&gt;
            &lt;text&gt;
                &lt;emph typestyle="bf"&gt;THIS AGREEMENT&lt;/emph&gt; 
                is made on&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;
                &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;
                &amp;#160;&amp;#160; 2010
            &lt;/text&gt;
        &lt;/p&gt;
    .......
    .......
        &lt;h align="center"&gt;
            1.&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 
            The Independent Expert has been appointed by the parties under clause
            .. of the Agreement to assist in resolving the dispute or to 
            resolve the dispute by determining the meaning of clause &amp;hellip;&amp;#160; of
            the Agreement and also to determine which party or parties should 
            pay the costs of and incidental to the resolution of the dispute.
        &lt;/h&gt;
        &lt;h align="center"&gt;
            2.&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; 
            The Independent Expert has accepted the appointment, and will assist
            in determining or will determine the dispute in accordance with the 
            terms of this agreement.
        &lt;/h&gt;
    ........
    ........
        &lt;h align="center"&gt;&amp;#160;&lt;/h&gt;
    &lt;/bodytext&gt;
&lt;/form&gt;

        </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;form:form&gt;
    &lt;form:document annotated="false" official="false" typeofdoc="unnamed"&gt;
        &lt;form:bodytext&gt;
            &lt;form:p&gt;
                &lt;form:text&gt;
                    &lt;emph typestyle="bf"&gt;THIS AGREEMENT&lt;/emph&gt; 
                    is made on&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;
                    &amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;
                    &amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0; 2010
                &lt;/form:text&gt;
            &lt;/form:p&gt;
                ......
                ......
            &lt;form:h align="center"&gt;
                1.&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;
                The Independent Expert has been appointed by the parties under clause .. 
                of the Agreement to assist in resolving the dispute or to resolve 
                the dispute by determining the meaning of clause &amp;#x2026;&amp;#x00A0;  
                of the Agreement and also to determine which party or parties 
                should pay the costs of and incidental to the resolution of the dispute.
            &lt;/form:h&gt;
            &lt;form:h align="center"&gt;
                2.&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;&amp;#x00A0;
                The Independent Expert has accepted the appointment, and will 
                assist in determining or will determine the dispute in accordance
                with the terms of this agreement.
            &lt;/form:h&gt;
                ......
                ......
            &lt;form:h align="center"&gt;&amp;#x00A0;&lt;/form:h&gt;
        &lt;/form:bodytext&gt;
    &lt;/form:document&gt;
&lt;/form:form&gt;

        </xd:pre>
         <!--Changes2012-08-30: Created. -->
      </xd:desc>
   </xd:doc>
   <xsl:template match="text[parent::p[(parent::blockquote|parent::bodytext)[not(ancestor::fnbody)][ancestor::form[ancestor::COMMENTARYDOC|ancestor::LEGDOC]]]]"><!--  Original Target XPath:  form:text   -->
      <form:text>
         <xsl:apply-templates select="@* | node()"/>
      </form:text>
   </xsl:template>

   <xsl:template match="text[$streamID=('UK14', 'UK12')][parent::p[(parent::blockquote)[ancestor::form[ancestor::COMMENTARYDOC]]]]"
                 priority="2"><!-- WPK: form:text is not schema valid within blockquote/p -->
      <text>
         <xsl:apply-templates select="@* | node()"/>
      </text>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>title</xd:i> becomes <xd:b>title</xd:b> with attributes:
					<xd:ul>
               <xd:li>
                  <xd:i>@inline</xd:i> becomes <xd:b>@inline</xd:b> with tokenized values of "true" and "false"</xd:li>
               <xd:li>
                  <xd:i>@align</xd:i> becomes <xd:b>@align</xd:b> with tokenized
							values and populated as: 
							<xd:ul>
                     <xd:li>
                        <xd:b>title[@align="left"]</xd:b>
                     </xd:li>
                     <xd:li>
                        <xd:b>title[@align="right"]</xd:b>
                     </xd:li>
                     <xd:li>
                        <xd:b>title[@align="center"]</xd:b>
                     </xd:li>
                  </xd:ul>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
					If the input document has title/defterm scenario then <xd:i>defterm</xd:i> within a title can be dropped, but the content of
					the tag is retained and no text is dropped.		
				</xd:p>
         <xd:p>Exceptional scenario for <xd:b>CA Indices</xd:b> and <xd:b>CA06 Regs</xd:b>: <xd:i>title/nl</xd:i>
					becomes <xd:b>title</xd:b>. <xd:i>nl</xd:i> will be replaces by
					a white space in the target.</xd:p>
         <xd:p>Exceptional scenario for CA Indices: When <xd:i>title</xd:i> is an child of
						<xd:i>docinfo:hierlev/heading</xd:i> and contains word <xd:b>TITLE: </xd:b>
					or <xd:b>NAME: </xd:b> or <xd:b>SITE: </xd:b> then conversion should drop the word <xd:b>TITLE: </xd:b> or <xd:b>NAME:
					</xd:b> or <xd:b>SITE: </xd:b> from conversion.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
	  &lt;title align="center"&gt;Consideration&lt;/title&gt;
&lt;/heading&gt;
....
....
&lt;heading&gt;
	  &lt;title inline="false"&gt;Summary&lt;/title&gt;
&lt;/heading&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;heading&gt;
  &lt;title align="center"&gt;Consideration&lt;/title&gt;
&lt;/heading&gt;
....
....
&lt;heading&gt;
	  &lt;title inline="false"&gt;Summary&lt;/title&gt;
&lt;/heading&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Source XML having <xd:i>title/nl</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;title&gt; English-French&lt;nl/&gt;Trade-mark Lexicon&lt;/title&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Target XML </xd:b>
         </xd:p>
         <xd:pre>

&lt;title&gt; English-French Trade-mark Lexicon&lt;/title&gt;

		</xd:pre>
         <xd:p>
            <xd:b>Source XML contains word "TITLE: " in <xd:i>title</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>
&lt;docinfo:hierlev role="me"&gt;
    &lt;heading&gt;
        &lt;title&gt;TITLE: Criminal Code French/English consolidation 2010 / Code criminal codification bilingue
            2010. 2010 ed. &lt;/title&gt;
    &lt;/heading&gt;
&lt;/docinfo:hierlev&gt;
		</xd:pre>
         <xd:p>
            <xd:b>Target XML </xd:b>
         </xd:p>
         <xd:pre>
&lt;doc:hierlev&gt;
    &lt;heading&gt;
        &lt;title&gt;Criminal Code French/English consolidation 2010 / Code criminal codification bilingue
            2010. 2010 ed. &lt;/title&gt;
    &lt;/heading&gt;
&lt;/doc:hierlev&gt;
	</xd:pre>
         <!--Changes2011-12-15: Created.2013-01-08: Removed CR number to allow ref:crossreference to the content model of title and subtitle.2013-01-08: Added Instruction for title/@searchtype="DIGEST-SUBJECT".2013-04-10: Added Instruction for title/nl.2013-07-05: Added Instruction when title contains word "TITLE: ".2013-07-30: Updated Instruction when title contains word "TITLE: " or "NAME: ".2013-09-03: Updated Instruction when title contains word "TITLE: " or "NAME: " or "SITE: ".2014-10-07: Removed instruction and example to convert attribute @searchtype="DIGEST-SUBJECT". Applicable to CA12.2014-12-19: Added CA06-Regs stream name inside the existing
						instruction for handling title/nl.-->
      </xd:desc>
   </xd:doc>
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_title-LxAdv-title.dita  -->
   <!-- JD: 2017-07-24: added 'replace()' function to get rid of characters not handled by normalize-space(e.g., nbsp) -->
   <xsl:template match="title[not( normalize-space(replace(., '^[\t\p{Zs}]+$', '')) = '')]"><!--<xsl:param name="titleStringsToRemove" as="xs:string*" select="( 'TITLE:' , 'NAME:' , 'SITE:' ,':' )"/>	--><!-- these are regular expressions  --><!--pawan:added for CA15-->
      <xsl:param name="titleStringsToRemove"
                 as="xs:string*"
                 select="if ($streamID = 'CA15') then ( 'TITLE: ' , 'TITRE: ' , 'TITLE/TITRE:' , 'TITRE/TITLE:','CITED/CITÉ: ', 'CITÉ/CITED: ', 'CITE/CITED: ', 'CITED: ' )  else  ( 'TITLE:' , 'NAME:' , 'SITE:' ,':' )"/>
      <xsl:variable name="outputText" as="xs:string*">
         <xsl:apply-templates/>
      </xsl:variable>
      <xsl:variable name="subtitletext"/>
      <!--  Original Target XPath:  title   -->
      <xsl:choose><!-- Due to jrnl:prelim outputting as nitf:hedline/nitf:h1, which does not have a child title. - See HK02_Articles for example -->
         <xsl:when test="parent::heading/parent::jrnl:prelim">
            <xsl:apply-templates/>
         </xsl:when>
         <!-- do not output empty element title when it only contains refpt and is a child of heading -->
         <xsl:when test="parent::heading and refpt and not(text()) and not(child::*[2])"/>
         <!--SNB 2017-10-17 add title child of transcript for new embedded video content. Note that transcript 
				is a new element, so this cant interfere with any other processing-->
         <xsl:when test="parent::transcript">
            <h>
               <xsl:apply-templates select="@*"/>
               <!-- refpts can't be output in title elements in target schemas -->
               <xsl:apply-templates select="node() except refpt"/>
            </h>
         </xsl:when>
         <xsl:otherwise>
            <title>
               <xsl:apply-templates select="@*"/>
               <xsl:choose>
                  <xsl:when test=" $streamID = 'CA11' or $streamID = 'CA15' and parent::heading[parent::docinfo:hierlev] "><!--  remove any occurrence of $titleStringsToRemove strings but assume case sensitive   -->
                     <xsl:sequence select=" lnf:removeSequenceOfStrings( string-join( $outputText , '' ) , $titleStringsToRemove , false() ) "/>
                  </xsl:when>
                  <!-- Vikas Rohilla : Added for the streamID CA01	-->
                  <xsl:when test="$streamID ='CA01' and ancestor::case:constituents">
                     <xsl:sequence select=" lnf:removeSequenceOfStrings( string-join( $outputText , '' ) , $titleStringsToRemove , false() ) "/>
                  </xsl:when>
                  <!-- Awantika: Added for AU20 -->
                  <xsl:when test="$streamID='AU20' and following-sibling::subtitle">
                     <xsl:value-of select="concat(.,' ','(',following-sibling::subtitle,')')"/>
                  </xsl:when>
                  <xsl:otherwise><!-- refpts can't be output in title elements in target schemas -->
                     <xsl:apply-templates select="node() except refpt"/>
                  </xsl:otherwise>
               </xsl:choose>
            </title>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   <!--    From Rosetta_Elements-LxAdv-Empty_Elements.dita / .xsl   -->   <!--<xsl:template match="title[ normalize-space(string-join( . , '') ) = '' ]"/>-->   <!-- JD: 2017-07-24: could probably be combined with above, but shouldn't hurt -->
   <xsl:template match="title[normalize-space(replace(., '^[\t\p{Zs}]+$', '')) = '']"/>

   <xsl:template match="title/@inline"><!--  Original Target XPath:  @inline   -->
      <xsl:copy-of select=" . "/>
   </xsl:template>

   <xsl:template match="title/@align"><!--  Original Target XPath:  @align   -->
      <xsl:copy-of select=" . "/>
   </xsl:template>

   <xsl:template match="title/defterm"><!--  Original Target XPath:  title   -->
      <xsl:apply-templates select="@* | node()"/>
   </xsl:template>

   <xsl:template match="title/nl[ $streamID = ( 'CA11' ) ]"><!--  output a space.  Note that otherwise nl becomes proc:nl which is allowed under title   -->
      <xsl:text> </xsl:text>
   </xsl:template>
   <!-- JL suppress searchtype -->
   <xsl:template match="title/@searchtype"/>

   <xsl:template match="title/num[$streamID='CA09']/@searchtype" priority="30"/>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>toc</xd:i> becomes <xd:b>toc</xd:b> with optional child <xd:b>heading</xd:b>
         </xd:p>
         <xd:ul>
            <xd:li>
               <xd:i>toc-entry</xd:i> becomes <xd:b>toc-entry</xd:b>
               <xd:ul>
                  <xd:li>
                     <xd:i>heading</xd:i> becomes <xd:b>heading</xd:b> and is one of the required child element for <xd:b>toc-entry</xd:b>. </xd:li>
                  <xd:li>
                     <xd:i>entry-pageref</xd:i> becomes <xd:b>toc-pageref</xd:b>. This is optional.</xd:li>
               </xd:ul>
            </xd:li>
         </xd:ul>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;toc&gt; &lt;heading&gt; &lt;title&gt; &lt;emph typestyle="bf"&gt;Table of sections&lt;/emph&gt; &lt;/title&gt; &lt;/heading&gt; &lt;toc-entry&gt; &lt;heading&gt; &lt;desig&gt;
                    &lt;designum&gt;1-1&lt;/designum&gt; &lt;/desig&gt; &lt;title&gt;Short title&lt;/title&gt; &lt;/heading&gt; &lt;entry-pageref&gt;5&lt;/entry-pageref&gt; &lt;/toc-entry&gt; &lt;/toc&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;toc&gt; &lt;heading&gt; &lt;title&gt; &lt;emph typestyle="bf"&gt;Table of sections&lt;/emph&gt; &lt;/title&gt; &lt;/heading&gt; &lt;toc-entry&gt; &lt;heading&gt;
                    &lt;desig&gt;1-1&lt;/desig&gt; &lt;title&gt;Short title&lt;/title&gt; &lt;/heading&gt; &lt;toc-pageref&gt;5&lt;/toc-pageref&gt; &lt;/toc-entry&gt; &lt;/toc&gt; </xd:pre>
         <xd:p>If <xd:i>toc</xd:i> has a child <xd:i>page</xd:i> with a following sibling <xd:i>toc-entry</xd:i>, <xd:i>page</xd:i> should map to
                        <xd:b>toc-entry/ref:page</xd:b>. The parent of <xd:b>ref:page</xd:b> should be the <xd:b>toc-entry</xd:b> that has been mapped from the following sibling of
                        <xd:i>toc/page</xd:i>.</xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;toc&gt; ... &lt;toc-entry&gt; &lt;heading&gt; &lt;title&gt;Cash flow problems..............................................................&lt;/title&gt; &lt;desig&gt;
                    &lt;designum&gt;22&lt;/designum&gt; &lt;/desig&gt; &lt;/heading&gt; &lt;/toc-entry&gt; &lt;page reporter="urj" count="2" text="BC9801738 at " subdoc="true"/&gt; &lt;toc-entry&gt; &lt;heading&gt;
                    &lt;title&gt;Lack of accounting information..................................................&lt;/title&gt; &lt;desig&gt; &lt;designum&gt;23&lt;/designum&gt; &lt;/desig&gt; &lt;/heading&gt;
                    &lt;/toc-entry&gt; ... &lt;/toc&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;toc&gt; ... &lt;toc-entry&gt; &lt;heading&gt; &lt;title&gt;Cash flow problems..............................................................&lt;/title&gt; &lt;desig
                    value="22"&gt;22&lt;/desig&gt; &lt;/heading&gt; &lt;/toc-entry&gt; &lt;toc-entry&gt; &lt;ref:page num="2" page-scheme-type="reporter-abbreviation" page-scheme="urj"/&gt; &lt;heading&gt;
                    &lt;title&gt;Lack of accounting information..................................................&lt;/title&gt; &lt;desig value="23"&gt;23&lt;/desig&gt; &lt;/heading&gt; &lt;/toc-entry&gt; ...
                    &lt;/toc&gt; </xd:pre>
         <!--Changes2014-03-20: New rule. Added mapping for entry-pageref to toc-pageref. Initially for UK12 but will apply for any stream if the
                        use case occurs. Responds to data added in UK12 delivery Mar 2014; known to occur in dpsi 02FL and 03VY. Phase 6 UK Discussion Item 79. Webteam 252434.2012-06-05: Added instructions for handling toc/page with a following sibling toc-entry.2011-12-21: Created. -->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_toc-LxAdv-toc.dita  -->
   <!-- MDS 2017-06-29 - Added ordering of heading|refpt|page in order to correctly output the elements based on schema -->
   <!-- Vikas Rohilla : Template to match the toc and create the toc-->
   <xsl:template match="toc">
      <toc>
         <xsl:apply-templates select="@*"/>
         <xsl:apply-templates select="heading | refpt | page[not($streamID = ('AU09','UK06','UK07'))]"/>
         <xsl:apply-templates select="node() except (heading | refpt | page)"/>
      </toc>
   </xsl:template>
   <!-- Template to match the toc-entry   -->
   <xsl:template match="toc-entry">
      <toc-entry>
         <xsl:if test="preceding-sibling::*[1][self::page][$streamID = ('AU09','UK06','UK07')]">
            <xsl:apply-templates select="preceding-sibling::*[1][self::page]"/>
         </xsl:if>
         <xsl:choose>
            <xsl:when test="$streamID = ('UK12','UK06','UK07') and child::note">
               <xsl:apply-templates select="@* | node() except note"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:apply-templates select="@* | node()"/>
            </xsl:otherwise>
         </xsl:choose>
      </toc-entry>
   </xsl:template>
   <!-- Template to match the entry-pageref   -->
   <xsl:template match="entry-pageref">
      <toc-pageref>
         <xsl:apply-templates select="@* | node()"/>
      </toc-pageref>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:ul>
            <xd:li>Use case: <xd:i>url/remotelink</xd:i> when the content of
            <xd:i>remotelink</xd:i> begins with "http".<xd:ul>
                  <xd:li>
                     <xd:i>url</xd:i> becomes <xd:b>url</xd:b>.</xd:li>
                  <xd:li>
                     <xd:i>remotelink</xd:i> is suppressed, but its content is mapped as
              folllows: <xd:ul>
                        <xd:li>The content of <xd:i>remotelink</xd:i> is mapped to
                    <xd:b>url/@normval</xd:b>.</xd:li>
                        <xd:li>The content of <xd:i>remotelink</xd:i> also becomes the content of
                    <xd:b>url</xd:b>.</xd:li>
                     </xd:ul>
                  </xd:li>
                  <xd:li>If <xd:i>emph</xd:i> occurs as a child <xd:i>remotelink</xd:i>,
              it should be omitted.</xd:li>
               </xd:ul>
            </xd:li>
            <xd:li>Use case: <xd:i>url/remotelink</xd:i> when the content of
            <xd:i>remotelink</xd:i> begins with "www." (4 characters, a period must follow "www").<xd:ul>
                  <xd:li>
                     <xd:i>url</xd:i> becomes <xd:b>url</xd:b>.</xd:li>
                  <xd:li>
                     <xd:i>remotelink</xd:i> is suppressed, but its content is mapped as
              follows: <xd:ul>
                        <xd:li>The content of <xd:i>remotelink</xd:i> is mapped to
                    <xd:b>url/@normval</xd:b>, with the text "http://" prepended to the
                  value of <xd:b>url/@normval</xd:b>.</xd:li>
                        <xd:li>The content of <xd:i>remotelink</xd:i> also becomes the content of
                    <xd:b>url</xd:b>. Note that “http://” is <xd:b>not</xd:b> prepended to the
                  content of <xd:b>url</xd:b>.</xd:li>
                        <xd:li>If <xd:i>emph</xd:i> occurs as a child
                    <xd:i>remotelink</xd:i>, it should be omitted.</xd:li>
                     </xd:ul>
                  </xd:li>
               </xd:ul>
            </xd:li>
            <xd:li>Use case: <xd:i>url/remotelink</xd:i> when the content of
            <xd:i>remotelink</xd:i> does <xd:b>not</xd:b> begin with "http" or "www.". Drop
            <xd:i>url</xd:i> start-tag and end-tag, but not its content. The
            <xd:i>remotelink</xd:i> becomes <xd:b>ref:lnlink</xd:b> with
          children <xd:b>ref:marker</xd:b> and <xd:b>ref:locator</xd:b>,
          populated as follows: <xd:ul>
                  <xd:li>The attribute <xd:i>remotelink/@status</xd:i> is always suppressed, it is never output to the target document.</xd:li>
                  <xd:li>The <xd:b>ref:lnlink/@service</xd:b> attribute is set to "URL".</xd:li>
                  <xd:li>The contents of <xd:i>remotelink</xd:i> becomes the contents of child
                <xd:b>ref:lnlink/ref:marker</xd:b>. Any subelements (such as
                <xd:i>emph</xd:i> and <xd:i>inlineobject</xd:i>) are converted
              as described elsewhere by instructions given for those specific elements. </xd:li>
                  <xd:li>The child <xd:b>ref:lnlink/ref:locator</xd:b> is created, and within it
              the child <xd:b>ref:lnlink/ref:locator/ref:locator-key</xd:b> is created,
              and within it the children
                <xd:b>ref:lnlink/ref:locator/ref:locator-key/ref:key-name</xd:b> and
                <xd:b>ref:lnlink/ref:locator/ref:locator-key/ref:key-value</xd:b> are
              created.</xd:li>
                  <xd:li>The <xd:b>ref:key-name/@name</xd:b> attribute is set to "URL".</xd:li>
                  <xd:li>If the <xd:i>remotelink/@hrefclass</xd:i> attribute is present,
                <xd:b>ref:key-value/@value</xd:b> is set to the combined value of
                <xd:i>remotelink/@hrefclass</xd:i>, followed by "://" (a colon and two
              slashes), followed by the value of <xd:i>remotelink/@href</xd:i>.<xd:ul>
                        <xd:li>Exception: If content of <xd:i>@hrefclass</xd:i> is already present in
                    <xd:i>@href</xd:i> then do not concatenate. Populate
                    <xd:b>@value</xd:b> with content of <xd:i>@href</xd:i>.</xd:li>
                     </xd:ul>
                  </xd:li>
                  <xd:li>If the <xd:i>remotelink/@hrefclass</xd:i> attribute is <xd:b>not</xd:b> present,
                <xd:b>ref:key-value/@value</xd:b> is set to the value of
                <xd:i>remotelink/@href</xd:i>.</xd:li>
                  <xd:li>Drop <xd:i>remotelink/@newwindow</xd:i>.</xd:li>
               </xd:ul>
            </xd:li>
         </xd:ul>
         <xd:p>
            <xd:b>Source XML showing <xd:i>url/remotelink</xd:i> when the content of
          <xd:i>remotelink</xd:i> begins with "http"</xd:b>
         </xd:p>
         <xd:pre>

&lt;url&gt;
  &lt;remotelink href="www.uspto.gov/trademarks/teas/index.jsp" hrefclass="http" newwindow="YES"&gt;http://www.uspto.gov/trademarks/teas/index.jsp&lt;/remotelink&gt;
&lt;/url&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;url normval="http://www.uspto.gov/trademarks/teas/index.jsp"&gt;http://www.uspto.gov/trademarks/teas/index.jsp&lt;/url&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Source XML showing <xd:i>emph</xd:i> inside
          <xd:i>url/remotelink</xd:i>
            </xd:b>
         </xd:p>
         <xd:pre>

&lt;url&gt;
    &lt;remotelink href="www.lawandarts.co.uk/" hrefclass="http"&gt;
        &lt;emph typestyle="it"&gt;
            &lt;emph typestyle="un"&gt;www.lawandarts.co.uk&lt;/emph&gt;
        &lt;/emph&gt;
    &lt;/remotelink&gt;
&lt;/url&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;url normval="http://www.lawandarts.co.uk"&gt;www.lawandarts.co.uk&lt;/url&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Source XML showing <xd:i>url/remotelink</xd:i> when the content of
          <xd:i>remotelink</xd:i> begins with "www."</xd:b>
         </xd:p>
         <xd:pre>

&lt;url&gt;
  &lt;remotelink href="http://www.uspto.gov/trademarks/teas/index.jsp" newwindow="YES"&gt;www.uspto.gov/trademarks/teas/index.jsp&lt;/remotelink&gt;
&lt;/url&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre>

&lt;url normval="http://www.uspto.gov/trademarks/teas/index.jsp"&gt;www.uspto.gov/trademarks/teas/index.jsp&lt;/url&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Source XML showing <xd:i>url/remotelink</xd:i> when the content of
          <xd:i>remotelink</xd:i> does <xd:b>not</xd:b> begin with "http" or "www."</xd:b>
         </xd:p>
         <xd:pre>
           
&lt;url&gt;
  &lt;remotelink href="www.ato.gov.au" hrefclass="http" newwindow="YES"
    service="SEARCH" status="valid"&gt; Australian Tax Office (ATO)&lt;/remotelink&gt;
&lt;/url&gt;
&lt;!-- The following illustrates scenario where content of @hrefclass is already present in @href and so values are not concatenated for target --&gt;
&lt;url&gt;
  &lt;remotelink href="http://www.acmecorp.com" hrefclass="http"&gt;Acme Corporation&lt;/remotelink&gt;
&lt;/url&gt;

			</xd:pre>
         <xd:p>
            <xd:b>Target XML showing <xd:i>url/remotelink</xd:i> when the content of
          <xd:i>remotelink</xd:i> does <xd:b>not</xd:b> begin with "http" or "www"</xd:b>
         </xd:p>
         <xd:pre>

&lt;ref:lnlink service="URL"&gt;
  &lt;ref:marker&gt;Australian Tax Office (ATO)&lt;/ref:marker&gt;
  &lt;ref:locator&gt;
    &lt;ref:locator-key&gt;
      &lt;ref:key-name name="URL"/&gt;
      &lt;ref:key-value value="http://www.ato.gov.au"/&gt;
    &lt;/ref:locator-key&gt;
  &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;

&lt;ref:lnlink service="URL"&gt;
  &lt;ref:marker&gt;Acme Corporation&lt;/ref:marker&gt;
  &lt;ref:locator&gt;
    &lt;ref:locator-key&gt;
      &lt;ref:key-name name="URL"/&gt;
      &lt;ref:key-value value="http://www.acmecorp.com"/&gt;
    &lt;/ref:locator-key&gt;
  &lt;/ref:locator&gt;
&lt;/ref:lnlink&gt;

			</xd:pre>
         <!--Changes2015-05-22: Added an instruction to explicitly indicate remotelink/@status is always dropped (suppressed). This is a very low-priority change and has been added for technical correctness, particularly with respect to new CIs. Existing scripts do not have to implement this change unless needed since prior to the change remotelink/@status handling was not explicitly specified.2015-01-09: Within use case that maps to
            ref:lnlink, added exceptional rule to not concatenate values when
            @hrefclass content is already present in
            @href. Expanded example to illustrate the scenario. Responds to
          data for UK10 Dictionaries but applies in general. R4.5 Content Issue 2120.2013-03-11: Added instructions for omitting
            emph when it occurs as a child of
            url/remotelink. Added an sample mapping demonstrating this
          scenario.2012-06-28: Added instructions for the use case where remotelink
        begins with "www." as well as an example of this conversion.2012-06-22: Corrected to show mapping to ref:lnlink (instead of
          ref:crossreference) when content of
          remotelink does not begin with "http" or "www.".2012-05-21: Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_remotelink-Chof-url-LxAdv-url.dita  -->
   <!--<xsl:message>Rosetta_remotelink-Chof-url-LxAdv-url.xsl requires manual development!</xsl:message> -->
   <xsl:template match="url/remotelink" priority="25">
      <xsl:choose><!-- SNB: 2017-11-10 : add logic for LPA CI Section 6.103. remotelink/@href (id-CCCC-10467) 
         (Rosetta_remotelink-LxAdv-url_(special).dita"), which is different from logic below. Fix for webstar 7045572. -->
         <xsl:when test="(not(@service) or @service!='DOC-ID') and @href and $streamID=('USLPA')">
            <xsl:choose>
               <xsl:when test="(starts-with(., 'http://') or starts-with(., 'https://')                             or starts-with(., 'nohttp://') or starts-with(., 'mailto://')                            or starts-with(., 'ftp://') or starts-with(., 'www.')                            )">
                  <url>
                     <xsl:attribute name="normval">
                        <xsl:choose>
                           <xsl:when test="@hrefclass">
                              <xsl:value-of select="concat(@hrefclass,'://', ./@href)"/>
                           </xsl:when>
                           <xsl:otherwise>
                              <xsl:value-of select="./@href"/>
                           </xsl:otherwise>
                        </xsl:choose>
                     </xsl:attribute>
                     <xsl:apply-templates/>
                  </url>
               </xsl:when>
               <xsl:otherwise>
                  <ref:lnlink service="URL">
                     <ref:marker>
                        <xsl:apply-templates/>
                     </ref:marker>
                     <ref:locator>
                        <ref:locator-key>
                           <ref:key-name name="URL"/>
                           <ref:key-value>
                              <xsl:attribute name="value">
                                 <xsl:choose>
                                    <xsl:when test="@hrefclass and not(starts-with(./@href, ./@hrefclass))">
                                       <xsl:value-of select="concat(@hrefclass,'://', ./@href)"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                       <xsl:value-of select="./@href"/>
                                    </xsl:otherwise>
                                 </xsl:choose>
                              </xsl:attribute>
                           </ref:key-value>
                        </ref:locator-key>
                     </ref:locator>
                  </ref:lnlink>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <!-- SNB: 2017-11-10 : end change -->
         <xsl:when test="starts-with(., 'http') or starts-with(., 'www')">
            <url>
               <xsl:attribute name="normval">
                  <xsl:if test="starts-with(./@href, 'http')">
                     <xsl:value-of select="./@href"/>
                  </xsl:if>
                  <xsl:if test="starts-with(./@href, 'www')">
                     <xsl:value-of select="concat('http://', ./@href)"/>
                  </xsl:if>
               </xsl:attribute>
               <xsl:choose>
                  <xsl:when test="$streamID='UK09'">
                     <xsl:apply-templates select="text()"/>
                     <!-- AS:child element under url/remotelink should be suppressed -->
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:apply-templates/>
                  </xsl:otherwise>
               </xsl:choose>
            </url>
         </xsl:when>
         <xsl:when test="descendant::emph[starts-with(.,'http')] or descendant::emph[starts-with(.,'www')]">
            <url>
               <xsl:attribute name="normval">
                  <xsl:if test="starts-with(./@href, 'http')">
                     <xsl:value-of select="./@href"/>
                  </xsl:if>
                  <xsl:if test="starts-with(./@href, 'www')">
                     <xsl:value-of select="concat('http://', ./@href)"/>
                  </xsl:if>
               </xsl:attribute>
               <xsl:apply-templates/>
            </url>
         </xsl:when>
         <xsl:when test="(starts-with(., 'http') or starts-with(., 'www') or starts-with(@href, 'http') or starts-with(@href, 'www')) and $streamID='AU21'">
            <url>
               <xsl:attribute name="normval">
                  <xsl:if test="starts-with(./@href, 'http')">
                     <xsl:value-of select="./@href"/>
                  </xsl:if>
                  <xsl:if test="starts-with(./@href, 'www')">
                     <xsl:value-of select="concat('http://', ./@href)"/>
                  </xsl:if>
               </xsl:attribute>
               <xsl:apply-templates select="node()"/>
            </url>
         </xsl:when>
         <xsl:when test="not(starts-with(., 'http')) and not(starts-with(., 'www'))">
            <ref:lnlink>
               <xsl:attribute name="service">
                  <xsl:text>URL</xsl:text>
               </xsl:attribute>
               <ref:marker>
                  <xsl:choose>
                     <xsl:when test="$streamID='AU21'">
                        <ref:inlineobject>
                           <ref:locator>
                              <ref:locator-key>
                                 <ref:key-name name="object-key"/>
                                 <ref:key-value value="5DT1-HR81-66TK-240F-00000-00-12633-4354-CM-{ancestor::p[1]/preceding-sibling::h[1]}-2"/>
                              </ref:locator-key>
                              <ref:locator-params>
                                 <proc:param name="componentseq" value="1"/>
                                 <proc:param name="object-type" value="image"/>
                                 <proc:param name="object-smi" value="12633"/>
                              </ref:locator-params>
                           </ref:locator>
                        </ref:inlineobject>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:apply-templates/>
                     </xsl:otherwise>
                  </xsl:choose>
               </ref:marker>
               <ref:locator>
                  <ref:locator-key>
                     <ref:key-name>
                        <xsl:attribute name="name">
                           <xsl:text>URL</xsl:text>
                        </xsl:attribute>
                     </ref:key-name>
                     <ref:key-value>
                        <xsl:attribute name="value">
                           <xsl:choose>
                              <xsl:when test="starts-with(./@href, 'http')">
                                 <xsl:value-of select="./@href"/>
                              </xsl:when>
                              <xsl:when test="starts-with(./@href, 'www')">
                                 <xsl:value-of select="concat('http://', ./@href)"/>
                              </xsl:when>
                              <xsl:when test="./@hrefclass='http'">
                                 <xsl:value-of select="concat('http://', ./@href)"/>
                              </xsl:when>
                              <xsl:otherwise>
                                 <xsl:value-of select="./@href"/>
                              </xsl:otherwise>
                           </xsl:choose>
                        </xsl:attribute>
                     </ref:key-value>
                  </ref:locator-key>
               </ref:locator>
            </ref:lnlink>
         </xsl:when>
      </xsl:choose>
      <!--  Original Target XPath:  url   -->
      <!--<url>
			<xsl:apply-templates select="@* | node()"/>
		</url>-->
   </xsl:template>

   <xsl:template match="url[remotelink]">
      <xsl:apply-templates select="@*|node()"/>
   </xsl:template>
   <!-- JL need to add emph passthrough to make this validate! -->
   <xsl:template match="emph[ancestor::remotelink[parent::url]]" priority="30">
      <xsl:apply-templates/>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>Instructions <xd:i>[common element]</xd:i>
            </xd:b>
         </xd:p>
         <xd:p>
            <xd:i>verbatim</xd:i> becomes <xd:b>verbatim</xd:b> with attribute
            <xd:i>@verbatimclass</xd:i> becomes <xd:b>@verbatimclass</xd:b>
         </xd:p>
         <xd:p>
            <xd:b>Source XML</xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;text&gt; &lt;verbatim verbatimclass="verbatim"&gt;** Editor's
          Table **&lt;nl/&gt; &lt;nl/&gt; Provision Changed by In force Authority&lt;nl/&gt;
          &lt;nl/&gt; 487.0911 2005 c25 s11 2008 Jan 1 SI/2007-108&lt;nl/&gt; *****
          &lt;/verbatim&gt; &lt;/text&gt; &lt;/p&gt; </xd:pre>
         <xd:p>
            <xd:b>Target XML</xd:b>
         </xd:p>
         <xd:pre> &lt;p&gt; &lt;text&gt; &lt;verbatim verbatimclass="verbatim"&gt;** Editor's
          Table **&lt;proc:nl/&gt; &lt;proc:nl/&gt; Provision Changed by In force
          Authority&lt;proc:nl/&gt; &lt;proc:nl/&gt; 487.0911 2005 c25 s11 2008 Jan 1
          SI/2007-108&lt;proc:nl/&gt; *****&lt;/verbatim&gt; &lt;/text&gt; &lt;/p&gt; </xd:pre>
         <!--Changes2012-11-27: Created. -->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\common_newest\Rosetta_verbatim-LxAdv-verbatim.dita  -->
   <!--<xsl:message>Rosetta_verbatim-LxAdv-verbatim.xsl requires manual development!</xsl:message> -->
   <xsl:template match="verbatim"><!--  Original Target XPath:  verbatim   -->
      <verbatim>
         <xsl:apply-templates select="@* | node()"/>
      </verbatim>
   </xsl:template>

   <xsl:template match="@verbatimclass"><!--  Original Target XPath:  @verbatimclass   -->
      <xsl:attribute name="verbatimclass">
         <xsl:value-of select="."/>
      </xsl:attribute>
   </xsl:template>
   <!-- end topichead  General Markup  -->   <xd:doc>
      <xd:desc>
         <xd:p>When <xd:i>person/bio/figure</xd:i> occurs inside
                    <xd:i>docinfo:assoc-links-grp</xd:i>, <xd:i>person</xd:i>
                and <xd:i>bio</xd:i> are suppressed, but <xd:i>figure</xd:i>
                maps to <xd:b>figure</xd:b> as described in <xd:a href="../../common_newest/Rosetta_figure-LxAdv-figure.dita"/>.</xd:p>
         <xd:pre>
&lt;docinfo:assoc-links-grp assoc-content="recommended-documents"&gt;
    &lt;heading&gt;
        &lt;title&gt;Lawrence Milner recommends&lt;/title&gt;
    &lt;/heading&gt;
    &lt;text&gt;
        &lt;person&gt;
            &lt;bio&gt;
                &lt;figure&gt;
                    &lt;caption&gt;Head of PSL IP&amp;amp;IT&lt;/caption&gt;
                    &lt;inlineobject filename="Lawrence Milner.jpg"/&gt;
                &lt;/figure&gt;
            &lt;/bio&gt;
        &lt;/person&gt;
    &lt;/text&gt;
    ...
&lt;/docinfo:assoc-links-grp&gt;
            </xd:pre>
         <xd:b>becomes</xd:b>
         <xd:pre>
&lt;doc:related-content-grp grptype="recommended-documents"&gt;
    &lt;heading&gt;
        &lt;title&gt;Lawrence Milner recommends&lt;/title&gt;
    &lt;/heading&gt;
    &lt;doc:related-content-item&gt;
        &lt;doc:related-content-desc&gt;
            &lt;p&gt;
                &lt;text&gt;
                    &lt;figure&gt;
                        &lt;caption&gt;
                            &lt;p&gt;
                                &lt;text&gt;Head of PSL IP&amp;amp;IT&lt;/text&gt;
                            &lt;/p&gt;
                        &lt;/caption&gt;
                        &lt;ref:inlineobject&gt;
                            &lt;ref:locator&gt;
                                &lt;ref:locator-key&gt;
                                    &lt;ref:key-name name="object-key"/&gt;
                                    &lt;ref:key-value value="Lawrence Milner.jpg"/&gt;
                                &lt;/ref:locator-key&gt;
                                &lt;ref:locator-params&gt;
                                    &lt;proc:param name="object-type" value="IMG"/&gt;
                                    &lt;proc:param name="external-or-local" value="external"/&gt;
                                    &lt;proc:param name="object-server" value="Blobstore"/&gt;
                                    &lt;proc:param name="object-pguid" value="urn:contentItem:0000-0000-0000-0000-00000-00"/&gt;
                                    &lt;proc:param name="componentseq" value="1"/&gt;
                                &lt;/ref:locator-params&gt;
                            &lt;/ref:locator&gt;
                        &lt;/ref:inlineobject&gt;
                    &lt;/figure&gt;
                &lt;/text&gt;
            &lt;/p&gt;
        &lt;/doc:related-content-desc&gt;
    &lt;/doc:related-content-item&gt;
    ...
&lt;/doc:related-content-grp&gt;
           </xd:pre>
         <!--Changes2016-12-14: Not a rule change directly to this module.
                    Modified Example Target to reflect blobstore markup for ref:inlineobject; all
                    paramater names that formerly contained the word "attachment" are now
                    "object".2016-08-03: Not a rule change directly to this module.
                    Modified Example Target to reflect blobstore markup.2013-07-15: Created.-->
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_person_bio_figure.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_person_bio_figure.xsl requires manual development!</xsl:message> -->
   <xsl:template match="person/bio/figure"><!--  Original Target XPath:  figure   -->
      <figure>
         <xsl:apply-templates select="@* | node()"/>
      </figure>
   </xsl:template>
   <!--<xsl:template match="docinfo:assoc-links-grp">

		<!-\-  Original Target XPath:  figure   -\->
		<figure>
			<xsl:apply-templates select="@* | node()"/>
		</figure>

	</xsl:template>-->
   <xsl:template match="person"><!--  Original Target XPath:  figure   -->
      <xsl:apply-templates select="@* | node()"/>
   </xsl:template>

   <xsl:template match="bio"><!--  Original Target XPath:  figure   -->
      <xsl:apply-templates select="@* | node()"/>
   </xsl:template>

   <xsl:template match="figure"><!--  Original Target XPath:  figure   -->
      <figure>
         <xsl:apply-templates select="@* | node()"/>
      </figure>
   </xsl:template>

   <xsl:template match="caption">
      <xsl:element name="caption">
         <xsl:element name="p">
            <xsl:element name="text">
               <xsl:apply-templates/>
            </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <!--**End of UK15**-->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>heading</xd:i> becomes <xd:b>heading</xd:b> as described in the
            General Markup instructions.</xd:p>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_heading.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_heading.xsl requires manual development!</xsl:message> -->
   <xsl:template match="heading"><!--  Original Target XPath:  heading   -->
      <heading>
         <xsl:apply-templates select="@* | node()"/>
      </heading>
   </xsl:template>
   <!-- Priya Kaushal: updated -->   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:i>title</xd:i> becomes <xd:b>title</xd:b> as described in the
            General Markup instructions.</xd:p>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_title.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_title.xsl requires manual development!</xsl:message> -->
   <xsl:template match="title"><!--  Original Target XPath:  title   -->
      <title>
         <xsl:apply-templates select="@* | node()"/>
      </title>
   </xsl:template>
   <xd:doc>
      <xd:desc>
         <xd:p>
            <xd:b>seclaw 8.19 PROD</xd:b>
         </xd:p>
         <xd:p>2017-02-06 - RS: </xd:p>
         <xd:ul>
            <xd:li>
               <xd:a href="../../../Rosetta/DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_alt.rendition-ref.marker.dita">2017-02-06 - docinfo:alt-rendition/link without text id-UK15-30450: New rule. Handles
            <xd:i>docinfo:alt-rendition/link</xd:i> occurring without pcdata.
            Uses <xd:i>docinfo:doc-heading</xd:i> to populate
            <xd:b>ref:marker</xd:b>. VSTS Issue 226835.</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_UK_docinfo.custom-metafields-LxAdv-dc.date_or_doc.docinfo_classify.classification.dita">2017-01-31 - (UK) docinfo:custom-metafield to dc:date or doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"] id-CCCC-10547: Added rule for "isCorePrecedent"; and updated the
            example.</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.doc-heading-LxAdv-dc.title.dita">2017-01-17 - docinfo:doc-heading to dc:title id-CCCC-10292: concatenate the #PCDATA value for dc:title and create a new attribute lnmeta:titlepurpose="resultDisplayList" with fixed value ('resultDisplayList').</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_UK_docinfo.custom-metafields-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta.meta.metaitem.dita">2017-01-12 - docinfo:custom-metafields to doc:legacy-metadata[@metadatasource="lbu-meta"]/meta/metaitem id-CCCC-10485: Updated
            <xd:i>docinfo:custom-metafield"</xd:i> for
            "is-first-document-in-enactment" or "is-last-document-in-enactment". VSTS
            #162173</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_UK_docinfo.custom-metafields-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta.meta.metaitem.dita">2017-01-04 - docinfo:custom-metafields to doc:legacy-metadata[@metadatasource="lbu-meta"]/meta/metaitem id-CCCC-10485: Updated
            <xd:i>docinfo:custom-metafield"</xd:i> for
            "is-first-document-in-enactment" or "is-last-document-in-enactment". VSTS
            #162173</xd:a>
            </xd:li>
         </xd:ul>
         <xd:p>
            <xd:b>seclaw 8.18 PROD</xd:b>
         </xd:p>
         <xd:p>2016-12-15 - RS: </xd:p>
         <xd:ul>
            <xd:li>
               <xd:a href="../../../Rosetta/DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_level_leveltype_related-content-pod.dita">2016-12-14 - level[@leveltype="related-content-pod"] id-UK15-30421: Not a rule change directly to this module.
            Modified Example Targets to reflect blobstore markup; within ref:lnlink value
            now cased as value="BlobStore"; within ref:inlineobject, paramater names that
            formerly contained the word "attachment" are now "object".</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_person_bio_figure.dita">2016-12-14 - person[ancestor::docinfo:assoc-links-grp]/bio/figure id-UK15-30426: Not a rule change directly to this module.
            Modified Example Target to reflect blobstore markup for ref:inlineobject; all
            paramater names that formerly contained the word "attachment" are now
            "object".</xd:a>
            </xd:li>
         </xd:ul>
         <xd:p>
            <xd:b>seclaw 8.18 PROD</xd:b>
         </xd:p>
         <xd:p>2016-12-09 - RS: </xd:p>
         <xd:ul>
            <xd:li>
               <xd:a href="../../../Rosetta/DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_form-frmdivs-clause.dita">2016-12-09 - form, frm:divs and clause id-UK15-30449: Created.
        <xd:i>form</xd:i> to <xd:b>form:form</xd:b>. </xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_deflist-Chof-p_text-LxAdv-p_deflist.dita">2016-12-08 - p/text/deflist to p/deflist id-CCCC-10276: Added instruction to handle running text
        which is comes before <xd:i>deflist</xd:i> and it comes under
        <xd:i>p/text</xd:i>.</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_UK_docinfo.custom-metafields-LxAdv-dc.date_or_doc.docinfo_classify.classification.dita">2016-11-30 - (UK) docinfo:custom-metafield to dc:date or doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"] id-CCCC-10547: Added rule for "isDocBuilderAvailable"; and
        updated the example.</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2016-11-16 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Added to note regarding applying any rules related to 
        <xd:b>@anchoridref</xd:b>, referring specifically to section for "Identifiers to ID Data Type - 
        Handling Pattern Restrictions".</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_endnote-LxAdv-endnote.dita">2016-11-16 - endnote to endnote id-CCCC-10317: Added to note regarding applying any rules related to 
        <xd:b>@anchoridref</xd:b>, referring specifically to section for "Identifiers to ID Data Type - 
        Handling Pattern Restrictions".</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_link_refpt-LxAdv-ref.lnlink-ref.locator_anchoridref.dita">2016-11-16 - link/@refpt to ref:lnlink/ref.locator/@anchoridref id-CCCC-10395: Added to note regarding applying any rules related to 
        <xd:b>@anchoridref</xd:b>, referring specifically to section for "Identifiers to ID Data Type - 
        Handling Pattern Restrictions".</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2016-11-16 - remotelink to ref:crossreference id-CCCC-10465: Added to note regarding applying any rules related to 
        <xd:b>@anchoridref</xd:b>, referring specifically to section for "Identifiers to ID Data Type - 
        Handling Pattern Restrictions".</xd:a>
            </xd:li>
         </xd:ul>
         <xd:p>
            <xd:b>seclaw 8.17 PROD</xd:b>
         </xd:p>
         <xd:p>2016-11-17 - RS: </xd:p>
         <xd:ul>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-LxAdv-ref.inlineobject_BLOBSTORE.dita">2016-11-07 - inlineobject to ref:inlineobject for BLOBSTORE images id-CCCC-10540: Updated the instruction for ref:key-name and
            proc:param attribute values.</xd:a>
            </xd:li>
         </xd:ul>
         <xd:p>
            <xd:b>seclaw 8.17 PROD</xd:b>
         </xd:p>
         <xd:p>2016-11-02 - RS: </xd:p>
         <xd:ul>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-LxAdv-ref.inlineobject_BLOBSTORE.dita">2016-10-21 - inlineobject to ref:inlineobject for BLOBSTORE images id-CCCC-10540: Changed one proc:param name for target. Formerly
            <xd:b>@name="attachment-server"</xd:b>; changed to
            <xd:b>@name="object-server"</xd:b>.</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_link-LxAdv-ref.lnlink_BLOBSTORE.dita">2016-10-21 - link[@filename] to ref:lnlink[@service="ATTACHMENT"] for BLOBSTORE images id-CCCC-10541: Updated the Blobstore related instruction for
            use standardize specific output parameters.</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_lnlink_service_ATTACHMENT-LxAdv-ref.lnlink_BLOBSTORE.dita">2016-10-21 - lnlink[@service="ATTACHMENT"] to ref:lnlink[@service="ATTACHMENT"] for BLOBSTORE images id-CCCC-10542: Updated the Blobstore related instruction for use standardize specific output parameters.</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.versioninfo-LxAdv-doc.versioninfo-scheme.dita">2016-10-17 - docinfo:versioninfo to doc:versioninfo id-CCCC-10307: Updated the instruction for handling the
            target attribute <xd:b>@normdate</xd:b>.
            [Webstar#6676189]</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_edpnum-LxAdv-desig.dita">2016-10-12 - edpnum to desig id-CCCC-10308: Added rule for handling scenario when
            <xd:i>pnum</xd:i> and <xd:i>edpnum </xd:i> occur as
            siblings (applicable for UK22CS and UK06).</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_note-LxAdv-note.dita">2016-10-12 - note to note id-CCCC-10405: Added instruction for handling input scenario <xd:i>note/legfragment</xd:i>.
          </xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_UK_docinfo.custom-metafields-LxAdv-dc.date_or_doc.docinfo_classify.classification.dita">2016-10-04 - (UK) docinfo:custom-metafield to dc:date or doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"] id-CCCC-10547: Added rule for "word-toc"; and updated the example.</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.versioninfo-LxAdv-doc.versioninfo-scheme.dita">2016-09-14 - docinfo:versioninfo to doc:versioninfo id-CCCC-10307: Note added for handling the input markup '<xd:b>docinfo:versioninfo@startdate-tbd</xd:b>'.</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_UK_docinfo.custom-metafields-LxAdv-dc.date_or_doc.docinfo_classify.classification.dita">2016-09-08 - (UK) docinfo:custom-metafield to dc:date or doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"] id-CCCC-10547: Added rule for attribute
            <xd:i>@name</xd:i> with value "containsAppealTracker"; and
            updated the example.</xd:a>
            </xd:li>
            <xd:li>
               <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.versioninfo-LxAdv-doc.versioninfo-scheme.dita">2016-09-02 - docinfo:versioninfo to doc:versioninfo id-CCCC-10307: Special Rule for added
            <xd:b>@normdate</xd:b> attribute inside the
            <xd:b>doc:startdate</xd:b> and
            <xd:b>doc:enddate</xd:b>.</xd:a>
            </xd:li>
         </xd:ul>
         <xd:p>
            <xd:b>seclaw 8.14 PROD</xd:b>
         </xd:p>
         <xd:p>2016-08-10 - SS: <xd:ol>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_footnote-LxAdv-footnote.dita">2016-08-08 - footnotegrp and footnote to footnotegrp and footnote id-CCCC-10322: Removing duplicate entry of
            <xd:i>lilabel/fnr</xd:i>
                  </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_glp.note_blockquote_p_text_inlineobject-LxAdv-note_bodytext_p_text.dita">2016-08-05 - glp:note id-CCCC-10341: Added Note about xml snippets that
            illustrate image handling. Note summarizes move from Apollo to Blobstore
            application. UK is first LBU to move to Blobstore. </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_footnote-LxAdv-footnote.dita">2016-08-04 - footnotegrp and footnote to footnotegrp and footnote id-CCCC-10322: Added note for handling
            <xd:i>lilabel/fnr</xd:i> Applicable for AU05,
            Incident #6597893</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_level_leveltype_related-content-pod.dita">2016-08-03 - level[@leveltype="related-content-pod"] id-UK15-30421: Not a rule change directly to this module. Modified Example Targets to reflect blobstore markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_person_bio_figure.dita">2016-08-03 - person[ancestor::docinfo:assoc-links-grp]/bio/figure id-UK15-30426: Not a rule change directly to this module.
            Modified Example Target to reflect blobstore markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_blockquote-link-LxAdv-blockquote-p-text-ref.lnlink.dita">2016-08-03 - blockquote/link to blockquote/p/text/ref:lnlink id-CCCC-10246: Added Note about xml snippets that illustrate image
            handling. Note summarizes move from Apollo to Blobstore application. UK is first LBU to
            move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_glp.note-Chof-figure-LxAdv-figure.dita">2016-08-03 - (Legislation &amp; Regulation) figure/glp:note to figure id-CCCC-10330: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_h-Chof-figure-glp.note-LxAdv-figure-note-bodytext-h.dita">2016-08-03 - (Commentary &amp; Regulatroy) figure/glp:note/h to figure/note/bodytext/h id-CCCC-10346: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-remotelink-LxAdv-ref.crossreference_ref.content_ref.inlineobject.dita">2016-08-03 - inlineobject Child of remotelink to ref:inlineobject id-CCCC-10364: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_leg.histnote-Chof-p-LxAdv-note.dita">2016-08-03 - p/leg:histnote to note[@notetype="historical"] id-CCCC-10380: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_p-limited_remotelink-LxAdv-p_text_ref.lnlink.dita">2016-08-03 - p-limited/remotelink to p/text/lnlink id-CCCC-10423: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2016-08-03 - remotelink to ref:crossreference id-CCCC-10465: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-emph-LxAdv-figure_ref.inlinobject.dita">2016-08-01 - emph/inlineobject to figure/ref:inlineobject id-CCCC-10359: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-sub-LxAdv-figure_ref.inlineobject.dita">2016-08-01 - sub/inlineobject to figure/ref:inlineobject id-CCCC-10365: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-dispformula-LxAdv-formula_ref.inlineobject.dita">2016-08-01 - dispformula/inlineobject to formula/ref:inlineobject id-CCCC-10358: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_bodytext-link-LxAdv-seclaw.bodytext-p-text-ref.lnlink.dita">2016-08-01 - bodytext/link to seclaw:bodytext/p/text/ref:lnlink id-CCCC-10248: Added Note about xml snippets that illustrate image handling. Note summarizes move from Apollo to Blobstore application. UK is first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2016-07-29 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Added Note about xml snippets that illustrate image
            handling. Note summarizes move from Apollo to Blobstore application. UK is first LBU to
            move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_blockquote-LxAdv-blockquote.dita">2016-07-29 - blockquote to blockquote id-CCCC-10247: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore. VSTS 76146</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_figure-LxAdv-figure.dita">2016-07-29 - figure to figure id-CCCC-10320: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-LxAdv-figure_ref.inlineobject.dita">2016-07-29 - inlineobject to figure/ref:inlineobject id-CCCC-10368: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-h-LxAdv-figure_ref.inlineobject.dita">2016-07-29 - h/inlineobject to figure/ref:inlineobject id-CCCC-10362: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-bodytext-LxAdv-bodytext_p_text_figure_ref.inlineobject.dita">2016-07-29 - bodytext/inlineobject to bodytext/p/text/figure/ref:inlineobject id-CCCC-10354: Added Note about xml snippets that illustrate
            image handling. Note summarizes move from Apollo to Blobstore application. UK is
            first LBU to move to Blobstore. VSTS 76146</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_refpt-Chof-p_text_emph-LxAdv-p_ref.anchor.dita">2016-07-27 - refpt child of p/text/emph to p/ref:anchor id-CCCC-10457: Added a note for handling of text which is
            comes under the <xd:i>refpt</xd:i> in source.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_UK_docinfo.custom-metafields-LxAdv-dc.date_or_doc.docinfo_classify.classification.dita">2016-07-26 - (UK) docinfo:custom-metafield to dc:date or doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"] id-CCCC-10547: Added rule for "resultType"; and updated the
            example.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_note-Chof-figure_caption-LxAdv-note.dita">2016-07-26 - figure/caption/note to figure/note id-CCCC-10514:  Added Note about xml snippets that illustrate image handling. Note summarizes move from Apollo to Blobstore application. UK is first LBU to move to Blobstore. </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-p_blockquote-LxAdv-p_figure_ref.inlineobject.dita">2016-07-26 - p/blockquote/inlineobject to p/figure/ref:inlineobject id-CCCC-10363: Added Note about xml snippets that
            illustrate image handling. Note summarizes move from Apollo to Blobstore
            application. UK is first LBU to move to Blobstore. </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_note-Chof-figure_caption-LxAdv-note.dita">2016-07-26 - figure/caption/note to figure/note id-CCCC-10514:  Added Note about xml snippets that illustrate image handling. Note summarizes move from Apollo to Blobstore application. UK is first LBU to move to Blobstore. </xd:a>
               </xd:li>
            </xd:ol>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 8.14 PROD</xd:b>
         </xd:p>
         <xd:p>2016-07-19 - JCG: <xd:ol>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_UK_docinfo-LxAdv-doc.docinfo_classify.classification.dita">2016-06-17 - (UK) docinfo to
              doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"]
              id-CCCC-10546: Created. New rules.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_UK_docinfo.custom-metafields-LxAdv-dc.date_or_doc.docinfo_classify.classification.dita">2016-06-17 - (UK) docinfo:custom-metafield to dc:date or
              doc:metadata/doc:docinfo/classify:classification[@classscheme="uk-functional-information"]
              id-CCCC-10547: Created. New rules.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_l-LxAdv-list.dita">2016-04-01 - l to
              list id-CCCC-10372: Added mapping instruction for handling h within listitem.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_footnote-LxAdv-footnote.dita">2016-01-05 - footnotegrp and footnote to footnotegrp and footnote id-CCCC-10322:
              Added instructions for <xd:i>footnotegrp</xd:i> within
                <xd:i>frm:div</xd:i>. To generate <xd:b>form:p/form:text</xd:b>
              wrapper for target <xd:b>footnotegroup</xd:b>. Immediately affects UK12 but
              will apply to any stream if the use case occurs. RFA 2653.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-p_blockquote-LxAdv-p_figure_ref.inlineobject.dita">2015-12-08 - p/blockquote/inlineobject to p/figure/ref:inlineobject id-CCCC-10363:
              Added '.tiff' to the list of allowable values for
                <xd:i>proc:param[@name="object-type"]/@value="image"</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-p_blockquote-LxAdv-p_figure_ref.inlineobject.dita">2015-11-17 - p/blockquote/inlineobject to p/figure/ref:inlineobject id-CCCC-10363:
              Added note to use a different instruction if <xd:i>inlineobject</xd:i>
              contains siblings.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-LxAdv-ref.inlineobject.dita">2015-11-16 - inlineobject to ref:inlineobject id-CCCC-10369: Added instruction for
                <xd:i>inlineobject/@key</xd:i> to be suppressed.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-Chof-ci.content-LxAdv-ref.crossreference.dita">2015-11-11 - ci:cite/ci:content/remotelink id-CCCC-10512: Removed this special
              instruction. The source <xd:i>ci:content/remotelink</xd:i> will be converted
              in-place and the target <xd:b>ref:crossreference</xd:b> will be created
              within target <xd:b>lnci:content</xd:b>.</xd:a> For an example see "Source
            XML 10" and "Target XML 10" in topic <xd:a href="../../common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita"/>.</xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_url-Chof-ci.content-LxAdv-url.dita">2015-11-11
              - ci:cite/ci:content/url/remotelink id-CCCC-10513: Removed this special instruction.
              The source <xd:i>ci:content/url/remotelink</xd:i> will be converted in-place
              and the target <xd:b>ref:lnlink</xd:b> will be created within target
                <xd:b>lnci:content</xd:b>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2015-09-11 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Correction to
              target XPATHs for <xd:i>lnlink[@service="QUERYLINK"]</xd:i>,
                <xd:i>lnlink[@service="ATTACHMENT"]</xd:i>, and
                <xd:i>lnlink[@service="TRAVERSE"]</xd:i> to add
                <xd:b>doc:related-content-item/doc:related-content-link</xd:b> before the
              existing <xd:b>ref:lnlink</xd:b> element in the XPATH.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2015-09-11 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Added
              instruction for handling of <xd:i>lnlink[@service="URL"]</xd:i> inside
                <xd:i>docinfo:assoc-links</xd:i> or
                <xd:i>docinfo:assoc-links-grp</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_link-LxAdv-ref.lnlink.dita">2015-09-08 - link to ref:lnlink[@service="ATTACHMENT"] id-CCCC-10394: Minor XPATH
              correction in title to change <xd:b>ref:lnlink/@service="ATTACHMENT"</xd:b>
              to be <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_lnlink_service_SEARCH-LxAdv-SUPPRESS.dita">2015-09-08 - lnlink[@service='SEARCH'] is SUPPRESSED id-CCCC-10397: Minor XPATH
              correction in instruction title and body to change
                <xd:i>lnlink/@service='SEARCH'</xd:i> to be
                <xd:i>lnlink[@service='SEARCH']</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_lnlink_service_ATTACHMENT-LxAdv-ref.lnlink.dita">2015-09-08 - lnlink[@service="ATTACHMENT"] to ref:lnlink[@service="ATTACHMENT"]
              id-CCCC-10396: Minor XPATH correction in instruction title and body to change
                <xd:i>lnlink/@service="ATTACHMENT"</xd:i> to be
                <xd:i>lnlink[@service="ATTACHMENT"]</xd:i>,
                <xd:b>ref:lnlink</xd:b> to be
                <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b>, and
                <xd:b>ref:lnlink/@service="ATTACHMENT"</xd:b> to be
                <xd:b>ref:lnlink[@service="ATTACHMENT"]</xd:b>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2015-09-03 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Minor
              correction to bullet heading text for children of
                <xd:i>docinfo:assoc-links</xd:i> or
                <xd:i>docinfo:assoc-links-grp</xd:i> to change from
                <xd:i>lnlink/@service="QUERYLINK"</xd:i> to be
                <xd:i>lnlink[@service="QUERYLINK"]</xd:i> and
                <xd:i>lnlink/@service="ATTACHMENT"</xd:i> to be
                <xd:i>lnlink[@service="ATTACHMENT"]</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2015-09-03 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Added
                <xd:b>doc:related-content-item/@content-type="external-content-location"</xd:b>
              when the parent
                <xd:i>docinfo:assoc-links[@assoc-content="external-content-location"]</xd:i>
              exists, for children: <xd:i>remotelink[@service="DOC-ID"]</xd:i>,
                <xd:i>remotelink[@href]</xd:i>,
                <xd:i>lnlink[@service="TRAVERSE"]</xd:i> and
                <xd:i>ci:cite</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2015-09-03 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Added
              instruction for handling of <xd:i>lnlink[@service="TRAVERSE"]</xd:i> inside
                <xd:i>docinfo:assoc-links</xd:i> or
                <xd:i>docinfo:assoc-links-grp</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-emph-LxAdv-figure_ref.inlinobject.dita">2015-07-24 - emph/inlineobject to figure/ref:inlineobject id-CCCC-10359: When
              Inlineobject is followed by two emph elements of same typestyle
                <xd:i>sup/emph/emph/inlineobject</xd:i>then from Target we should drop the
              one emph element and the followed <xd:i>emph/inlineobject</xd:i> should
              mapped with <xd:b>emph/ref:inlineobject</xd:b> in Target.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_p-limited_remotelink-LxAdv-p_text_ref.lnlink.dita">2015-07-24 - p-limited/remotelink to p/text/lnlink id-CCCC-10423: Corrected typo in
              title (was "<xd:i>p-limited/emph</xd:i> to
                <xd:b>p/text/emph</xd:b>", corrected to be
                "<xd:i>p-limited/remotelink</xd:i> to
              <xd:b>p/text/lnlink</xd:b>".</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-emph-LxAdv-figure_ref.inlinobject.dita">2015-07-21 - emph/inlineobject to figure/ref:inlineobject id-CCCC-10359: When
              Inlineobject is followed by two emph elements of same typestyle then from Target we
              should drop the one emph element and the followed
                <xd:i>emph/inlineobject</xd:i> should mapped with
                <xd:b>figure/ref:inlineobject</xd:b> in Target.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2015-07-16 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Updated
              conversion for handling of <xd:i>ci:cite/@normprotocol</xd:i>,
                <xd:b>proc:param[@name="countrycode"]</xd:b>; added instructions for
                <xd:i>docinfo:assoc-resource</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_person-LxAdv-person.person.dita">2015-07-16 - person to person:person id-CCCC-10428: Added instruction for
                <xd:i>person/remotelink</xd:i> mapping to
                <xd:b>ref:lnlink</xd:b>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2015-06-24 - remotelink to ref:crossreference id-CCCC-10465: Added clarification note
              about url, @normval, and @hrefclass. Webstar 302055.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-Chof-emph-LxAdv-figure_ref.inlinobject.dita">2015-06-18 - emph/inlineobject to figure/ref:inlineobject id-CCCC-10359: When source
              is having emph followed by inlineobject inside base:h element
                <xd:i>h/emph/inlineobject</xd:i> than in Target it should Map it like
                <xd:b>emph/ref:inlineobject</xd:b> as emph containing text under
              it.</xd:a>
               </xd:li>
            </xd:ol>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 8.5 PROD</xd:b>
         </xd:p>
         <xd:p>2015-06-09 - JCG: <xd:ol>
               <xd:li>For this stream (UK15cs), the following updates are related to item #108 on the Phase
            6 UK issue tracking message board:<xd:ul>
                     <xd:li>
                        <xd:a href="../../../Rosetta/common_newest/Rosetta_link-LxAdv-ref.lnlink.dita">2015-05-22 - link to ref:lnlink/@service="ATTACHMENT" id-CCCC-10394: Changed the
                  instructions to indicate <xd:i>link/@status</xd:i> is always dropped and
                  removed <xd:b>ref:lnlink/@status</xd:b> from target example. This is a
                  very low-priority change and has been added for technical correctness,
                  particularly with respect to new CIs. Existing scripts do not have to implement
                  this change since <xd:b>ref:lnlink/@status</xd:b> is ignored by
                  LexisAdvance if it is present.</xd:a>
                     </xd:li>
                     <xd:li>
                        <xd:a href="../../../Rosetta/common_newest/Rosetta_lnlink_service_ATTACHMENT-LxAdv-ref.lnlink.dita">2015-05-22 - lnlink/@service="ATTACHMENT" to ref:lnlink id-CCCC-10396: Added an
                  instruction to explicitly indicate <xd:i>lnlink/@status</xd:i> is always
                  dropped (suppressed). This is a very low-priority change and has been added for
                  technical correctness, particularly with respect to new CIs. Existing scripts do
                  not have to implement this change unless needed since prior to the change
                    <xd:b>lnlink/@status</xd:b> handling was not explicitly
                  specified.</xd:a>
                     </xd:li>
                     <xd:li>
                        <xd:a href="../../../Rosetta/common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2015-05-22 - remotelink to ref:crossreference id-CCCC-10465: Added an instruction
                  to explicitly indicate <xd:i>remotelink/@status</xd:i> is always dropped
                  (suppressed). This is a very low-priority change and has been added for technical
                  correctness, particularly with respect to new CIs. Existing scripts do not have to
                  implement this change unless needed since prior to the change
                    <xd:b>remotelink/@status</xd:b> handling was not explicitly
                  specified.</xd:a>
                     </xd:li>
                     <xd:li>
                        <xd:a href="../../../Rosetta/common_newest/Rosetta_remotelink-self-inter-document-link-LxAdv-intra-document-link.dita">2015-05-22 - remotelink (self inter-document link) to ref:lnlink (intra-document
                  link) id-CCCC-10468: Added an instruction to explicitly indicate
                    <xd:i>remotelink/@status</xd:i> is always dropped (suppressed). This
                  is a very low-priority change and has been added for technical correctness,
                  particularly with respect to new CIs. Existing scripts do not have to implement
                  this change unless needed since prior to the change
                    <xd:b>remotelink/@status</xd:b> handling was not explicitly
                  specified.</xd:a>
                     </xd:li>
                     <xd:li>
                        <xd:a href="../../../Rosetta/common_newest/Rosetta_remotelink-Chof-url-LxAdv-url.dita">2015-05-22 - url/remotelink to url id-CCCC-10464: Added an instruction to
                  explicitly indicate <xd:i>remotelink/@status</xd:i> is always dropped
                  (suppressed). This is a very low-priority change and has been added for technical
                  correctness, particularly with respect to new CIs. Existing scripts do not have to
                  implement this change unless needed since prior to the change
                    <xd:b>remotelink/@status</xd:b> handling was not explicitly
                  specified.</xd:a>
                     </xd:li>
                  </xd:ul>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2015-05-22 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Clarification.
              Not a new rule or target. Within rules handling
                <xd:i>remotelink[@service="DOC-ID"]</xd:i>, added statement to create
              containing elements <xd:b>ref:locator/ref:locator-key</xd:b> which hold
                <xd:b>ref:key-name</xd:b> and <xd:b>ref:key-value</xd:b>. The
              xpath is controlled by schema and so conversions have been correct. CI examples were
              correct. The narrative rule is now explicit. R4.5 Content Issue 2326.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_footnote-LxAdv-footnote.dita">2015-05-14 - footnotegrp and footnote to footnotegrp and footnote id-CCCC-10322:
              Added instructions for <xd:i>footnotegrp</xd:i> within
                <xd:i>frm:body</xd:i> and <xd:i>clause</xd:i>. To generate
                <xd:b>form:p/form:text</xd:b> wrapper for target
                <xd:b>footnotegroup</xd:b>. Immediately affects UK12 but will apply to any
              stream if the use case occurs. R4.5 Content Issues 2316 and 2317.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo-LxAdv-doc.metadata_doc.docinfo.dita">2015-04-14 - docinfo to doc:metadata/doc:docinfo id-CCCC-10282: Remove bullet icon in
              sub nested list for handling Indentation isssue.</xd:a>
               </xd:li>
            </xd:ol>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 8.3 PROD</xd:b>
         </xd:p>
         <xd:p>2015-03-10 - JCG: <xd:ol>
               <xd:li>
                  <xd:a href="../../../Rosetta/DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_level_leveltype_related-content-pod.dita">2015-02-27 - level[@leveltype="related-content-pod"] id-UK15-30421: Changed target
              LexisAdv XML examples so that the <xd:b>proc:param@value</xd:b> attribute
              contains "PDF" (uppercase) instead of "pdf" (lowercase).</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_ci.cite-LxAdv-lnci.cite.dita">2015-02-24 - ci.cite to lnci.cite id-CCCC-10268: Example updated as per new rule an
              attribute <xd:b>@inline</xd:b>get added with
              <xd:b>desig</xd:b>element when the source<xd:i>pnum</xd:i>is not
              having that attribute<xd:i>@inline</xd:i>
                  </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_pgrp-LxAdv-pgrp.dita">2015-02-24 -
              pgrp to pgrp id-CCCC-10431: Example updated as per new rule an attribute
                <xd:b>@inline</xd:b>get added with <xd:b>desig</xd:b>element
              when the source<xd:i>pnum</xd:i>is not having that
                attribute<xd:i>@inline</xd:i>
                  </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_pnum-LxAdv-desig.dita">2015-02-24 -
              pnum to desig id-CCCC-10434: An attribute <xd:b>@inline</xd:b>get added with
                <xd:b>desig</xd:b>element even when the
              source<xd:i>pnum</xd:i>is not having that
                attribute<xd:i>@inline</xd:i>
                  </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_person-LxAdv-person.person.dita">2015-02-03 - person to person:person id-CCCC-10428: Added instruction for
                <xd:i>name.detail/name.honorific</xd:i> mapping to
                <xd:b>person:name.detail/person:name.honorific</xd:b>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.hier-LxAdv-doc.hier.dita">2015-01-23 - docinfo:hier to doc:hier id-CCCC-10297: Added note to convert
                <xd:i>docinfo:hierlev/@exclude-from-displayunits="true"</xd:i> into
                <xd:b>doc:hier/@includeintoc="false"</xd:b>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.hier-LxAdv-doc.hier.dita">2015-01-13 - docinfo:hier to doc:hier id-CCCC-10297: Added a note to repalce
                <xd:i>nl</xd:i> to a white space when <xd:i>nl</xd:i> is coming
              as child of <xd:i>docinfo:hierlev/heading/title</xd:i>
                  </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2015-01-09 - remotelink to ref:crossreference id-CCCC-10465: For the two use cases
              associated with url (target <xd:b>url</xd:b> or
                <xd:b>ref:lnlink</xd:b>): Added exceptional rule to not concatenate values
              when <xd:i>@hrefclass</xd:i> content is already present in
                <xd:i>@href</xd:i>. Expanded examples 5 and 7 to illustrate the scenario.
              Responds to data for UK10 Dictionaries but applies in general. R4.5 Content Issue
              2120.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_remotelink-Chof-url-LxAdv-url.dita">2015-01-09 - url/remotelink to url id-CCCC-10464: Within use case that maps to
                <xd:b>ref:lnlink</xd:b>, added exceptional rule to not concatenate values
              when <xd:i>@hrefclass</xd:i> content is already present in
                <xd:i>@href</xd:i>. Expanded example to illustrate the scenario. Responds
              to data for UK10 Dictionaries but applies in general. R4.5 Content Issue 2120.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_page-LxAdv-ref.page.dita">2015-01-05
              - page to ref:page id-CCCC-10426: Defined handling for page/@count if period (.)
              occurs in the value.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_classification_classitem_topic.topicreference-Chof-docinfo-LxAdv-doc.docinfo_classify.classification.dita">2014-12-15 - classification/classitem[@classscheme="topic:topicReference"] to
              classify:classification/classify:classitem/topic:topicReference id-CCCC-10516: New
              section. Responds to discussion board item for UK11-DA but markup expected for all UK
              streams and rule will apply for any jurisdiction where the markup occurs. R4.5 Content
              Issue 2073.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_ci.cite-LxAdv-lnci.cite.dita">2014-12-08 - ci.cite to lnci.cite id-CCCC-10268: Addition of mapping for
                <xd:i>ci:pinpoint</xd:i> to <xd:b>lnci:pinpoint</xd:b> and
              example from US LPA content.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_entry_p-limited-LxAdv-entry_p.dita">2014-11-11 - entry/p-limited to entry/p id-CCCC-10319: Updated instruction when
              multiple consecutive <xd:i>p-limited</xd:i> elements occur within
                <xd:i>entry</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_figure-LxAdv-figure.dita">2014-10-28
              - figure to figure id-CCCC-10320: Moved instruction regarding the XPath XPath
                <xd:i>caption/note</xd:i> into a separate topic. Not a rule change, just a
              minor reorganization of the instructions.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_note-Chof-figure_caption-LxAdv-note.dita">2014-10-28 - figure/caption/note to figure/note id-CCCC-10514: Moved this instruction
              into a separate topic. Not a rule change, just a minor reorganization of the
              instructions.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_note-Chof-figure_caption-LxAdv-note.dita">2014-10-28 - figure/caption/note to figure/note id-CCCC-10514: Moved this instruction
              into a separate topic. Not a rule change, just a minor reorganization of the
              instructions.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_entry_p-limited-LxAdv-entry_p.dita">2014-10-28 - entry/p-limited to entry/p id-CCCC-10319: Added note to handle scenario
              when <xd:i>l</xd:i> is a child of
              <xd:i>entry/p-limited</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2014-10-27 - remotelink to ref:crossreference id-CCCC-10465: Minor. Within use case
              for <xd:i>@service="DOC-ID"</xd:i>, rule for
                <xd:i>@remotekey1="REFPTID"</xd:i> now also applies when
                <xd:i>@remotekey1="REFPT"</xd:i>. That is, the condition is expanded to
              include value <xd:i>"REFPT"</xd:i>; the mapping is unchanged. The value
                <xd:i>"REFPT"</xd:i> is new in Oct 2014 redelivery of UK11-DN but the rule
              applies to any stream where <xd:i>@remotekey1="REFPT"</xd:i> may occur. R4.5
              Content Issue 2003.</xd:a>
               </xd:li>
            </xd:ol>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 8.1 PROD</xd:b>
         </xd:p>
         <xd:p>2014-10-24 - JCG: <xd:ol>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_ci.cite-Chof-ci.content-LxAdv-lnci.cite.dita">2014-10-24 - ci:cite/ci:content/ci:cite to lnci:cite id-CCCC-10507: Added this
              instruction. (R4.5 Content Issue List #1995)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_remotelink-Chof-ci.content-LxAdv-ref.crossreference.dita">2014-10-24 - ci:cite/ci:content/remotelink id-CCCC-10512: Added this instruction.
              (R4.5 Content Issue List #1997)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_url-Chof-ci.content-LxAdv-url.dita">2014-10-24 - ci:cite/ci:content/url/remotelink id-CCCC-10513: Added this instruction.
              (R4.5 Content Issue List #1997)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_note-Chof-ci.content-LxAdv-inlinenote.dita">2014-10-24 - ci:cite/ci:content/note to inlinenote id-CCCC-10508: Added this
              instruction. (R4.5 Content Issue List #1994)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_figure-LxAdv-figure.dita">2014-10-24
              - figure to figure id-CCCC-10320: Added instructions and example to handle the new
              XPath <xd:i>caption/note</xd:i>. (R4.5 Content Issue List #1993)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_note-Chof-text-LxAdv-inlinenote.dita">2014-10-24 - text/note to text/inlinenote id-CCCC-10510: Added this instruction.
              (R4.5 Content Issue List #1994)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_note-Chof-entry-LxAdv-inlinenote.dita">2014-10-24 - entry/note to entry/inlinenote id-CCCC-10509: Added this instruction.
              (R4.5 Content Issue List #1994)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_pgrp_searchtype-LxAdv-blockquote.dita">2014-10-24 - pgrp/@searchtype="QUOTED-TEXT" id-CCCC-10511: Changed ID because it was
              same as a topic handling conversion to <xd:b>pgrp</xd:b> applicable to
              Canadian streams. Note this change is not a rule change, just an fix of the ID value
              for this topic.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_emp-Chof-heading_title-LxAdv-heading_title.dita">2014-10-22 - heading/title/emph to heading/title id-CCCC-10313: Added an example to
              explicitly show child elements of <xd:i>emph</xd:i> being retained. (R4.5
              Content Issue List #1998)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_lnlink_service_ATTACHMENT-LxAdv-ref.lnlink.dita">2014-10-15 - lnlink/@service="ATTACHMENT" to ref:lnlink id-CCCC-10396: Rewrote
              instructions, including the correction of a typographic error, and added an
              example.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-LxAdv-figure_ref.inlineobject.dita">2014-10-13 - inlineobject to figure/ref:inlineobject id-CCCC-10368: Added note and
              example to suppress <xd:b>proc:nl</xd:b> from before and after of
                <xd:b>figure/inlineobject</xd:b> when it comes inside
                <xd:b>verbatim</xd:b> element.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2014-09-16 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Added a note
              to create <xd:b>proc:param/@name="attachment-smi"</xd:b> and
                <xd:b>proc:param/@value</xd:b> as these was there in the snippet but was
              missing in instruction and also added a note in to simplify in output
                <xd:b>ref:key-value/@value</xd:b>
                  </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_inlineobject-LxAdv-ref.inlineobject.dita">2014-07-08 - inlineobject to ref:inlineobject id-CCCC-10369: Not a rule change.
              Clarification added to note regarding suppression of
                <xd:i>inlineobject</xd:i> when
                <xd:i>inlineobject/@filename</xd:i> contains certain values.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_table-LxAdv-table.dita">2014-07-08 -
              table to table id-CCCC-10475: Updated instruction for added the following rarely
              occurring attributes <xd:i>@char</xd:i> inside the
                <xd:i>entry</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2014-06-18 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Corrected
              minor typos in <xd:i>lnlink[@service="QUERYLINK"]</xd:i>
              instructions.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2014-06-13 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Added
              instructions and an example for converting
                <xd:i>lnlink[@service="QUERYLINK"]</xd:i> to
                <xd:b>ref:lnlink</xd:b>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_emp-Chof-heading_title-LxAdv-heading_title.dita">2014-06-04 - heading/title/emph to heading/title id-CCCC-10313: Clarified
              instructions and added an example to show multiple <xd:i>emph</xd:i>
              elements being handled.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_table-LxAdv-table.dita">2014-06-04 -
              table to table id-CCCC-10475: For completeness, added instructions for the following
              rarely occurring attributes of <xd:i>table/tgroup/colspec</xd:i>:
                <xd:i>@align</xd:i>, <xd:i>@char</xd:i>,
                <xd:i>@charoff</xd:i>, <xd:i>@colsep</xd:i>,
                <xd:i>@id</xd:i>, <xd:i>@rowsep</xd:i>,
                <xd:i>@searchtype</xd:i>, and <xd:i>@xml:lang</xd:i>. This is in
              response to various minor questions on message boards that have been asked and
              answered over the past two years. These instructions should not trigger changes to
              existing conversion programs, as the programs have already been changed in response to
              previous message board answers. These instructions have been added so this topic is
              up-to-date with respect to current conversion program behavior for these rarely
              occuring attributes.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../../Rosetta/common_newest/Rosetta_page-LxAdv-ref.page.dita">2014-06-03
              - page to ref:page id-CCCC-10426: Added instruction and example to generate
                <xd:b>doc:pagination/doc:pagination-scheme</xd:b> in target and this
              immediately applies to all LNI streams.</xd:a>
               </xd:li>
            </xd:ol>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 7.10 PROD</xd:b>
         </xd:p>
         <xd:p>2014-05-23 - JCG: <xd:ol>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.currencystatement-LxAdv-currencystatement.dita">2014-05-23 - docinfo:currencystatement to doc:docinfo/currencystatement
              id-CCCC-10289: Added this instruction. (Response to Phase 6 UK issue board item
              #98)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_defterm-Chof-text_outside_deflist-LxAdv-defterm.dita">2014-05-23 - text/defterm when outside deflist, etc. id-CCCC-10494: Added this
              instruction. (Response to Phase 6 UK issue board item #99)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2014-04-28 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Clarified
              instructions regarding <xd:i>link</xd:i> elements and added an example (#4)
              illustrating the special <xd:i>text/link</xd:i> conversion. No mapping rules
              where changed or added.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2014-04-21 - docinfo:assoc-links to doc:related-content id-CCCC-10284: Added an
              instruction to handle <xd:i>link</xd:i> elements. These can potentially
              occur in any future UK data and will be present in stream UK21fl when those documents
              become available later in 2014.</xd:a>
               </xd:li>
            </xd:ol>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 7.10 PROD</xd:b>
         </xd:p>
         <xd:p>2014-04-17 - JCG: <xd:ol>
               <xd:li>
                  <xd:a href="../../../Rosetta/DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_note-xref.dita">2014-04-17 - note[@notetype="xref"]: Added A note and example to specify that
              multiple consecutive <xd:i>note</xd:i> elements are converted to a single
                <xd:b>marginnote</xd:b> element. (Responds to issue #1389 on R4.5
              post-initial launch issue list for UK15cs.)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2014-04-03 - docinfo:assoc-links to doc:related-content: Illustrative changes.
              Examples modified. Mapping for <xd:i>ci:cite</xd:i> added to Example 3.
              Former Examples 4 and 5 removed to avoid confusion with special AU-NZ use case
              described in a separate module. R4.5 Content issue #1125, for AU-NZ, has prompted the
              changes for this general module.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2014-03-25 - docinfo:assoc-links to doc:related-content: Added rule and example for
                <xd:i>docinfo:assoc-links/docinfo:assoc-links-grp/ci:cite</xd:i>. R4.5
              Content issue #1125</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_figure-LxAdv-figure.dita">2014-03-20 - figure to
              figure: Illustrative change. Added example to explicitly show standard conversion of
              child link to ref:lnlink. Prompted by Phase 6 UK Discussion Item 77. Webteam
              252434.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_toc-LxAdv-toc.dita">2014-03-20 - toc to toc: New
              rule. Added mapping for <xd:i>entry-pageref</xd:i> to
                <xd:b>toc-pageref</xd:b>. Initially for UK12 but will apply for any stream
              if the use case occurs. Responds to data added in UK12 delivery Mar 2014; known to
              occur in dpsi 02FL and 03VY. Phase 6 UK Discussion Item 79. Webteam 252434.</xd:a>
               </xd:li>
            </xd:ol>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 7.9 PROD</xd:b>
         </xd:p>
         <xd:p>2014-03-04 - JCG: <xd:ol>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2014-02-25 - remotelink to ref:crossreference: Updated instruction and created new
              example (#16) for handling <xd:i>remotelink[@service="QUERY"]</xd:i>. New
              instruction preserves pcdata but suppresses <xd:i>remotelink</xd:i> markup.
              Webstar #250335. Change applies immediately to all Pacific streams, and in the long
              run to all streams.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_level_leveltype_related-documents-POD.dita">2014-02-18 - level[@leveltype="related-documents-POD"]: Corrected mark-up in the
              example so that <xd:b>ref:lnlink</xd:b> specifies the attribute
                <xd:b>service="DOCUMENT"</xd:b>. Note that no conversion instructions were
              modified, only the example was corrected. (Webteam #)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_level_leveltype_related-content-pod.dita">2014-02-18 - level[@leveltype="related-content-pod"]: Corrected mark-up in all
              examples so that <xd:b>ref:lnlink</xd:b> specifies the attribute
                <xd:b>service="DOCUMENT"</xd:b>. Note that no conversion instructions were
              modified, only the examples were corrected. (Webteam #)</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.doc-heading-LxAdv-dc.title.dita">2014-02-11 - docinfo:doc-heading to dc:title: Updated note when
                <xd:i>emph</xd:i> is child of <xd:i>docinfo:doc-heading</xd:i>
              then suppress <xd:i>emph</xd:i> element and retain its content in
                <xd:b>dc:title</xd:b>, These instructions apply immediately to
              CA12.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_pgrp-LxAdv-pgrp.dita">2014-02-11 - pgrp to pgrp:
              Add instruction and example <xd:i>pgrp/@subdoc</xd:i> and
                <xd:i>pgrp/@toc-caption</xd:i>. Support Discussion Board: NZ09 Commentary,
              Form and Precedents</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.topiccodes-to-LxAdv-classify.classification_classscheme_docinfo-topiccodes.dita">2014-02-03 - docinfo:topiccodes to
              classify:classification[@classscheme="docinfo:topiccodes"]: Added a special rule for
              UK07 contents, When element <xd:i>docinfo:topiccode</xd:i> contains
              attribute <xd:i>@scheme="source-by-date"</xd:i>, then conversion will
              suppress it including its contents as well. Phase 5 UK discussion-defect tracking:
              issue #156. </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2014-02-03 - remotelink to ref:crossreference: Instruction updated if
                <xd:i>remotelink</xd:i> occurs as multiple, immediate siblings and without
              intermediary text within <xd:i>title</xd:i>. Also added a example for the
              same scenario. Phase 5 UK discussion-defect tracking issue #161</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_text-LxAdv-text.dita">2014-01-31 - text to text:
              Updated instruction, <xd:b>align</xd:b> will be moved in
                <xd:b>p</xd:b> in NL conversion. NZ09 commentary discussion board issue
              for handling <xd:i>text/@align</xd:i>
                  </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.lbu.juris-LxAdv-classify.classification_classscheme_docinfolbu-juris.dita">2014-01-19 - docinfo:lbu-juris to
              classify:classification[@classscheme="docinfo:lbu-juris"]: Added a special scenario
              for handling <xd:i>docinfo:lbu-juris</xd:i> along with input and output
              examples for CANADA CA02 contents ONLY.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_Elements-LxAdv-Empty_Elements.dita">2014-01-16 -
              Suppress each empty element unless otherwise stated: Added list of elements to
              suppress if empty.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_date-Chof-docinfo.load-date-LxAdv-dc.date_lnmeta.datetype_load-date-scheme.dita">2014-01-07 - docinfo:load-date/date to dc:date[@lnmeta:datetype="load-date"]: Added a
              note along with example which contains "00" value in <xd:i>@day="00"</xd:i>
              and <xd:i>@month="00"</xd:i> attributes encountered in CANADA
              contents.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_footnote-LxAdv-footnote.dita">2014-01-06 -
              footnotegrp and footnote to footnotegrp and footnote: Updated target example for
              applying the rule of "deleting extraneous instances of @morerows, @colsep and @rowsep"
              in sample documents.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_l-LxAdv-list.dita">2014-01-06 - l to list: Added
              mapping instruction for nested lists.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_ci.cite-LxAdv-lnci.cite.dita">2013-12-30 -
              ci.cite to lnci.cite: Minor illustrative change. Added "(AU Journals/Newsitem)" to
              headings for last example to clarify that retention of
                <xd:i>@type="cite4thisdoc"</xd:i> is an exception for that content, as
              already described in narrative rules.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_deflist-LxAdv-deflist.dita">2013-12-20 - deflist
              to deflist: Added note to place a <xd:i>footnote</xd:i> or
                <xd:i>fnr</xd:i> that is a child of <xd:i>defitem</xd:i> into
              one of its children. WebTeam #5158742 - AU04.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_glp.note_blockquote_p_text_inlineobject-LxAdv-note_bodytext_p_text.dita">2013-12-20 - glp:note: Corrected the target example (added ref:corssreference).
              WebTeam #5158742 - AU04. Applies generally to all LBUs and streams.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_endnote-LxAdv-endnote.dita">2013-12-18 - endnote
              to endnote: Instruction added to convert <xd:i>remotelink/@refpt</xd:i> to
                <xd:b>footnote-ref/@anchoridref</xd:b>. WebTeam #5158742 - AU04. Applies
              generally to all LBUs and streams.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_p-LxAdv-p.dita">2013-12-04 - p to p: Updated
              target example when <xd:i>p</xd:i> or <xd:i>p/@nl="0"</xd:i> comes
              in <xd:i>references</xd:i>, this change directly affects NZ07.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_p-LxAdv-p.dita">2013-11-21 - p to p: Updated
              instruction and example <xd:i>p</xd:i> or <xd:i>p/@nl="0"</xd:i>
              comes in <xd:i>references</xd:i>, this change directly affects NZ07.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_UK_docinfo.custom-metafields-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta.meta.metaitem.dita">2013-11-20 - docinfo:custom-metafields to
              doc:legacy-metadata[@metadatasource="lbu-meta"]/meta/metaitem: Added instruction to
              handle
                <xd:i>docinfo:custom-metafields/docinfo:custom-metafield/@name="jurisdiction"</xd:i>
              is "European" Webteam # 239816 </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_glp.note-Chof-li-LxAdv-listitem-note.dita">2013-11-07 - l/glp:note to list/note: Fixed title to correctly indicate mapping
              described. Not a rule change.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_p-LxAdv-p.dita">2013-10-25 - p to p: Added
              instruction and example <xd:i>p/@nl="0"</xd:i> comes in
                <xd:i>references</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_figure-LxAdv-figure.dita">2013-10-23 - figure to
              figure: Added instruction for handling figure/p/text/inlineobject Webteam #
              239816</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2013-10-23 - remotelink to ref:crossreference: Added Example when
                <xd:i>remotelink</xd:i> having child <xd:i>emph</xd:i>. Webteam
              # 239816</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_edpnum-LxAdv-desig.dita">2013-10-22 - edpnum to
              desig: Not a rule change. Modified 2nd example for clarity. Removed
                <xd:i>refpt</xd:i> from source markup. Not pertinent to
                <xd:i>edpnum</xd:i> rules. Separate rules for <xd:i>refpt</xd:i>
              provide details. Responds to UK LBU query.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.doc-heading-LxAdv-dc.title.dita">2013-10-18 - docinfo:doc-heading to dc:title: Updated Instruction when
                <xd:i>docinfo:doc-heading</xd:i> contains word RULE: " or STATUTE:
              .</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_Elements-LxAdv-Empty_Elements.dita">2013-10-14 -
              Suppress each empty element unless otherwise stated: Changed antecedent to singular to
              match instructions.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_deflist-LxAdv-deflist.dita">2013-10-14 - deflist
              to deflist: Added new rule to create a blank defitem/defdesc element after the defterm
              element. WebTeam # 237242 and #247307.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_refpt-Chof-p_text-LxAdv-p_ref.anchor.dita">2013-10-11 - refpt child of p/text to p/ref:anchor: Added a note and update the
              target examples when refpt comes without attribute
                <xd:i>[@type="ext"]</xd:i> and <xd:i>[@type="local"]</xd:i> in
              source documents.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_refpt-Chof-p_text_emph-LxAdv-p_ref.anchor.dita">2013-10-11 - refpt child of p/text/emph to p/ref:anchor: Added a note and update the
              target examples when refpt comes without attribute
                <xd:i>[@type="ext"]</xd:i> and <xd:i>[@type="local"]</xd:i> in
              source documents.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_p-LxAdv-p.dita">2013-10-09 - p to p: Added
              instruction and example <xd:i>p</xd:i> comes with
                <xd:i>@nl=”0”</xd:i>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_endnote-LxAdv-endnote.dita">2013-10-07 - endnote
              to endnote: Instruction and example for added for the Xpath
                <xd:i>leg:bodytext/glp:note/l/li</xd:i> related to
                <xd:b>endnote</xd:b> handling. WebTeam # is 238790.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2013-10-03 - remotelink to ref:crossreference: Added use case where remotelink
              contains @href which is a URL but does not contain @hrefclass='http'.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_footnote-LxAdv-footnote.dita">2013-10-02 -
              footnotegrp and footnote to footnotegrp and footnote: Not a rule change. Cleaned up
              the note regarding the scenario when footnote/@fntoken has a value of "0" in an
              attempt to make the directions clearer.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_link-LxAdv-ref.lnlink.dita">2013-09-24 - link to
              ref:lnlink/@service="ATTACHMENT": Not a rule change. Modified examples to illustrate
              when <xd:i>@status</xd:i> suppressed and when retained.</xd:a>
               </xd:li>
            </xd:ol>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 7.4 PROD</xd:b>
         </xd:p>
         <xd:p>2013-09-19 - JCG: <xd:ol>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_desiglabel-Chof-desig-LxAdv-desig.dita">2013-09-19 - desig/desiglabel to desig: Added rules to insert space between label and
              number when none present in source. Rule required for UK content. Immediately known to
              occur in UK06, UK07, and UK12. R4.5 Post Iterative Testing Issue 431. WebTeam #
              236033.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_table-LxAdv-table.dita">2013-09-16 - table to
              table: Removed an obsolete note regarding visual styling of tables.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_table-LxAdv-table.dita">2013-09-12 - table to
              table: WebTeam #s 235116, 235130, 235126: Added instructions for deleting extraneous
              instances of @morerows, @colsep and @rowsep. These instructions apply immediately to
              all UK streams and also to AU18.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_title-LxAdv-title.dita">2013-09-03 - title to
              title: Updated Instruction when <xd:i>title</xd:i> contains word "TITLE: "
              or "NAME: " or "SITE: ".</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.doc-heading-LxAdv-dc.title.dita">2013-09-03 - docinfo:doc-heading to dc:title: Updated Instruction when
                <xd:i>docinfo:doc-heading</xd:i> contains word "TITLE: " or NAME: or SITE:
              or SUBJECT:.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_desiglabel-Chof-desig-LxAdv-desig.dita">2013-08-23 - desig/desiglabel to desig: Removed <xd:b>@value</xd:b> from
              target example element <xd:b>desig</xd:b>, as it was decided, that if source
              element doesn't contain <xd:i>@value</xd:i> then target element
                <xd:b>desig</xd:b> will not contain <xd:b>@value</xd:b>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_footnote-LxAdv-footnote.dita">2013-08-22 -
              footnotegrp and footnote to footnotegrp and footnote: Not a rule change. Second target
              sample modified to remove attribute <xd:b>lnci:cite[@citeref]</xd:b> because
              value captured in descendant
                <xd:b>ref:crossreference/ref:locator[@anchoridref]</xd:b>.
              Ancillary/illustrative within this module. Change made to promote uniformity across
              samples.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_glp.note-Chof-level_heading-LxAdv-seclaw.level_seclaw.prelim_note.dita">2013-08-22 - level/heading/glp:note to seclaw:level/seclaw:prelim/note: Not a rule
              change. Target sample modified to remove attribute
                <xd:b>lnci:cite[@citeref]</xd:b> because value captured in descendant
                <xd:b>ref:crossreference/ref:locator[@anchoridref]</xd:b>.
              Ancillary/illustrative within this module. Change made to promote uniformity across
              samples.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2013-08-22 - remotelink to ref:crossreference: Not a rule change. Modified Sample #10
              on <xd:i>ci:cite/ci:content/remotelink</xd:i>. Removed target attribute
                <xd:b>lnci:cite[@citeref]</xd:b> because value captured in
                <xd:b>ref:crossreference/ref:locator[@anchoridref]</xd:b>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_link-LxAdv-ref.lnlink.dita">2013-08-21 - link to
              ref:lnlink/@service="ATTACHMENT": Added instruction for when to suppress
                <xd:i>@status</xd:i>.</xd:a>
               </xd:li>
            </xd:ol>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 7.4 PROD</xd:b>
         </xd:p>
         <xd:p>2013-08-12<xd:ul>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.lbu-meta-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta-scheme.dita">2013-08-12 - docinfo:lbu-meta to doc:legacy-metadata[@metadatasource="lbu-meta"]: We
              removed the docinfo:lbu-meta "include" list so now there is only a "drop" list.
              Anything not on the "drop" list should be passed through. Webteam 230557.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/TEMP-RULE_Rosetta_remotelink-missing_docidref-LxAdv-ref.crossreference.dita">2013-08-12 - remotelink[@service="DOC-ID"][not(@docidref)] (TEMPORARY RULE):
              Created.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo-LxAdv-doc.metadata_doc.docinfo.dita">2013-08-09 - docinfo to doc:metadata/doc:docinfo: Added instruction for creating
                <xd:b>dc:date[@lnmeta:datetype="conversion-date"]</xd:b>. Previously,
              "conversion-date" was created only if "load-date" was not present. Going forward,
              conversion should always create "conversion-date". This is not a retroactive change.
              It should be applied only to streams developed after Aug. 9 2013.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_XML_Character_Entities-LxAdv-Unicode.dita">2013-08-08 - XML Character Entities to Unicode code points: This change does not
              represent a change to conversion but rather documentation of the existing
              behavior.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_date-Chof-docinfo.load-date-LxAdv-dc.date_lnmeta.datetype_load-date-scheme.dita">2013-08-07 - docinfo:load-date/date to dc:date[@lnmeta:datetype="load-date"]: Removed
              instructions for creating
                <xd:b>dc:date[@lnmeta:datetype="conversion-date"]</xd:b>.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-self-inter-document-link-LxAdv-intra-document-link.dita">2013-08-07 - remotelink (self inter-document link) to ref:crossreference
              (intra-document link): Changed target to <xd:b>ref:lnlink</xd:b>; formerly
                <xd:b>ref:crossreference</xd:b>. Changed because the only supported markup
              for intradoc linking is <xd:b>ref:lnlink</xd:b>, as per Bency Thomas.
              WebTeam # 230229. Affects all streams.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.lbu-meta-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta-scheme.dita">2013-08-02 - docinfo:lbu-meta to doc:legacy-metadata[@metadatasource="lbu-meta"]:
              Added <xd:i>@name="selection_criteria_variant"</xd:i> to the list of values
              in docinfo:metaitem/@name that should be retained. And added a example.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_title-LxAdv-title.dita">2013-07-30 - title to
              title: Updated Instruction when <xd:i>title</xd:i> contains word "TITLE: "
              or "NAME: ".</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.doc-heading-LxAdv-dc.title.dita">2013-07-30 - docinfo:doc-heading to dc:title: Added Instruction when
                <xd:i>docinfo:doc-heading</xd:i> contains word "TITLE: " or NAME: .</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.assoc-links-LxAdv-doc.related-content.dita">2013-07-19 - docinfo:assoc-links to doc:related-content: Added rule mapping attribute
                <xd:i>remotelink[@service="DOC-ID"]</xd:i> to
                <xd:b>ref:lnlink[@service="DOCUMENT"]</xd:b>
                  </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo-LxAdv-doc.metadata_doc.docinfo.dita">2013-07-18 - docinfo to doc:metadata/doc:docinfo: Added
                <xd:i>@excludefromalerts</xd:i> as one of the
                <xd:i>docinfo</xd:i> attributes to carry through</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.doc-lang-and-doc-country-LxAdv-ROOT_xml.lang.dita">2013-07-16 - docinfo:doc-lang and docinfo:doc-country to @xml:lang and @xml:ID:
              Instruction narrative edited for language; no changes to mappings, no impact to
              stylesheets.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_person_bio_figure.dita">2013-07-15 - person[ancestor::docinfo:assoc-links-grp]/bio/figure: Created.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_figure-LxAdv-figure.dita">2013-07-15 - figure to
              figure: Added instructions for handling figure/caption and an example demonstrating
              the mapping.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_note-xref.dita">2013-07-14 - note[@notetype="xref"]: Added directions and example for the scenario
              when note[@notetype="xref"] is a child of p.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_title-LxAdv-title.dita">2013-07-05 - title to
              title: Added Instruction when <xd:i>title</xd:i> contains word "TITLE:
              ".</xd:a>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 7.3 PROD</xd:b>
         </xd:p>
         <xd:p>2013-07-15<xd:ul>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_person_bio_figure.dita">2013-07-15 - person[ancestor::docinfo:assoc-links-grp]/bio/figure: Created.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_figure-LxAdv-figure.dita">2013-07-15 - figure to
              figure: Added instructions for handling figure/caption and an example demonstrating
              the mapping.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_note-xref.dita">2013-07-14 - note[@notetype="xref"]: Added directions and example for the scenario
              when note[@notetype="xref"] is a child of p.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_title-LxAdv-title.dita">2013-07-05 - title to
              title: Added Instruction when <xd:i>title</xd:i> contains word "TITLE:
              ".</xd:a>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 7.0 PROD</xd:b>
         </xd:p>
         <xd:p>2013-06-21<xd:ul>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_link-dpsi.dita">2013-06-21 - link with @dpsi: Created.</xd:a>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 7.0 PROD</xd:b>
         </xd:p>
         <xd:p>2013-06-19<xd:ul>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_level_leveltype_related-content-pod.dita">2013-06-19 - level[@leveltype="related-content-pod"]: Added instructions and example
              for when bodytext does not contain any references children.; Updated instructions to
              make it clear that p/text should map to
              doc:related-content-item/doc:related-content-desc/p/text when text contains mixed
              content.; Added an example of mapping p/text to
              doc:related-content-item/doc:related-content-desc/p/text when text contains mixed
              content.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_copyright-LxAdv-copyright.dita">2013-06-17 -
              copyright to copyright: Added an example when <xd:i>copyright-holder</xd:i>
              is not present in the source.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_note-LxAdv-note.dita">2013-06-12 - note to note:
              Remove note for CR "DACH2013041605253700" to allow element <xd:b>note</xd:b>
              before element <xd:b>heading</xd:b> within
                <xd:b>admindoc:level</xd:b>
                  </xd:a>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 7.0 PROD</xd:b>
         </xd:p>
         <xd:p>2013-06-19<xd:ul>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_level_leveltype_related-content-pod.dita">2013-06-19 - level[@leveltype="related-content-pod"]: Added instructions and example
              for when bodytext does not contain any references children.; Updated instructions to
              make it clear that p/text should map to
              doc:related-content-item/doc:related-content-desc/p/text when text contains mixed
              content.; Added an example of mapping p/text to
              doc:related-content-item/doc:related-content-desc/p/text when text contains mixed
              content.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_copyright-LxAdv-copyright.dita">2013-06-17 -
              copyright to copyright: Added an example when <xd:i>copyright-holder</xd:i>
              is not present in the source.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_note-LxAdv-note.dita">2013-06-12 - note to note:
              Remove note for CR "DACH2013041605253700" to allow element <xd:b>note</xd:b>
              before element <xd:b>heading</xd:b> within
                <xd:b>admindoc:level</xd:b>
                  </xd:a>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 6.3 PROD</xd:b>
         </xd:p>
         <xd:p>2013-06-05<xd:ul>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_references.dita">2013-06-05 - references: Created.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_level_leveltype_related-content-pod.dita">2013-06-05 - level[@leveltype="related-content-pod"]: Added instructions and example
              for when level[@leveltype="related-content-pod"] contains multiple bodytext
              children.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2013-06-03 - remotelink to ref:crossreference: Updated the Target XML 2 by removing
              the <xd:b>@crossreferencetype</xd:b> for Canada example.</xd:a>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 6.3 PROD</xd:b>
         </xd:p>
         <xd:p>2013-05-31<xd:ul>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_note-xref.dita">2013-05-31 - note[@notetype="xref"]: Added directions and example for the scenario
              when note[@notetype="xref"] is a descendant of text.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_bodytext_remotelink.dita">2013-05-31 - remotelink[parent::bodytext]: Created.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../DITA-UK/UK15-PracticalGuidance/UK15PG_COMMENTARYDOC_level_leveltype_related-content-pod.dita">2013-05-31 - level[@leveltype="related-content-pod"]: Modified instructions to make
              it clearer which mapping should be used depending on the children of p/text.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.lbu-meta-LxAdv-doc.legacy-metadata_metadatasource_lbu-meta-scheme.dita">2013-05-31 - docinfo:lbu-meta to doc:legacy-metadata[@metadatasource="lbu-meta"]:
              Added "document-type" to the list of values in docinfo:metaitem/@name that should be
              retained.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_glp.note_blockquote_p_text_inlineobject-LxAdv-note_bodytext_p_text.dita">2013-05-29 - glp:note: Corrected the file name for
                <xd:i>inlineobject</xd:i> in order to make it linkable.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo.versioninfo-LxAdv-doc.versioninfo-scheme.dita">2013-05-24 - docinfo:versioninfo to doc:versioninfo: Instructions added for handling
              empty use cases of <xd:i>docinfo:versioninfo</xd:i> for Canada content
              stream.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-LxAdv-ref.inlineobject.dita">2013-05-24 - inlineobject to ref:inlineobject: Updated instruction for handling of
              inlineobject when smi is present and some of the verbiage is changed.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-LxAdv-figure_ref.inlineobject.dita">2013-05-24 - inlineobject to figure/ref:inlineobject: Updated target example, "when
              smi is present".</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_link-LxAdv-ref.lnlink.dita">2013-05-24 - link to
              ref:lnlink/@service="ATTACHMENT": Updated instruction for handling of link when smi is
              present and some of the verbiage is changed.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_docinfo-LxAdv-doc.metadata_doc.docinfo.dita">2013-05-16 - docinfo to doc:metadata/doc:docinfo: Fixed typo updating urn:contentitem
              to urn:contentItem</xd:a>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 6.3 PROD</xd:b>
         </xd:p>
         <xd:p>2013-05-15<xd:ul>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_blockquote-LxAdv-blockquote.dita">2013-05-08 -
              blockquote to blockquote: Extended the list of allowable values for image
              handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_figure-LxAdv-figure.dita">2013-05-08 - figure to
              figure: Extended the list of allowable values for image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_glp.note-Chof-figure-LxAdv-figure.dita">2013-05-08 - (Legislation &amp; Regulation) figure/glp:note to figure: Extended the
              list of allowable values for image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_h-Chof-figure-glp.note-LxAdv-figure-note-bodytext-h.dita">2013-05-08 - (Commentary &amp; Regulatroy) figure/glp:note/h to
              figure/note/bodytext/h: Extended the list of allowable values for image
              handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-LxAdv-ref.inlineobject.dita">2013-05-08 - inlineobject to ref:inlineobject: Extended the list of allowable values
              for image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-remotelink-LxAdv-ref.crossreference_ref.content_ref.inlineobject.dita">2013-05-08 - inlineobject Child of remotelink to ref:inlineobject: Extended the list
              of allowable values for image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-LxAdv-figure_ref.inlineobject.dita">2013-05-08 - inlineobject to figure/ref:inlineobject: Extended the list of allowable
              values for image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-h-LxAdv-figure_ref.inlineobject.dita">2013-05-08 - h/inlineobject to figure/ref:inlineobject: Extended the list of
              allowable values for image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-emph-LxAdv-figure_ref.inlinobject.dita">2013-05-08 - emph/inlineobject to figure/ref:inlineobject: Extended the list of
              allowable values for image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-sub-LxAdv-figure_ref.inlineobject.dita">2013-05-08 - sub/inlineobject to figure/ref:inlineobject: Extended the list of
              allowable values for image handling.</xd:a>
               </xd:li>
               <xd:li>2013-05-08 - glp:note/inlineobject to: Extended the list of allowable values for image
            handling.</xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-dispformula-LxAdv-formula_ref.inlineobject.dita">2013-05-08 - dispformula/inlineobject to formula/ref:inlineobject: Extended the list
              of allowable values for image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-p_blockquote-LxAdv-p_figure_ref.inlineobject.dita">2013-05-08 - p/blockquote/inlineobject to p/figure/ref:inlineobject: Extended the
              list of allowable values for image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-bodytext-LxAdv-bodytext_p_text_figure_ref.inlineobject.dita">2013-05-08 - bodytext/inlineobject to bodytext/p/text/figure/ref:inlineobject:
              Extended the list of allowable values for image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_p-limited_remotelink-LxAdv-p_text_ref.lnlink.dita">2013-05-08 - p-limited/emph to p/text/emph: Extended the list of allowable values for
              image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2013-05-08 - remotelink to ref:crossreference: Extended the list of allowable values
              for image handling.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-LxAdv-ref.inlineobject.dita">2013-05-02 - inlineobject to ref:inlineobject: Some of the verbiage is changed and
              updated target example to if the SMI is present then a
                <xd:b>ref:inliineobject/@status</xd:b> attribute is set to “valid”.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-LxAdv-figure_ref.inlineobject.dita">2013-05-02 - inlineobject to figure/ref:inlineobject: Updated target example to if
              the SMI is present then a <xd:b>ref:inliineobject/@status</xd:b> attribute
              is set to “valid”.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_link-LxAdv-ref.lnlink.dita">2013-05-02 - link to
              ref:lnlink/@service="ATTACHMENT": Some of the verbiage is changed and updated target
              example to if the SMI is present then a <xd:b>ref:lnlink/@status</xd:b>
              attribute is set to “valid”.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_blockquote-LxAdv-blockquote.dita">2013-05-01 -
              blockquote to blockquote: Removed instructions for section "Pre-Release 4.0" because
              according to latest Apollo markup, section "Release 4.0 and after" and section
              "Pre-Release 4.0" now have similar conversion markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_blockquote-link-LxAdv-blockquote-p-text-ref.lnlink.dita">2013-05-01 - blockquote/link to blockquote/p/text/ref:lnlink: Updated instructions
              and target example per latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_ci.cite-LxAdv-lnci.cite.dita">2013-05-01 -
              ci.cite to lnci.cite: Removed special rule for
                <xd:i>ci:cite/ci:content/remotelink</xd:i> which required suppression of
                <xd:i>ci:cite/ci:content</xd:i> tags. The elements are now retained and
              convert according to common rules.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_figure-LxAdv-figure.dita">2013-05-01 - figure to
              figure: Removed instructions for section "Pre-Release 4.0" because according to latest
              Apollo markup, section "Release 4.0 and after" and section "Pre-Release 4.0" now have
              similar conversion markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_glp.note-Chof-figure-LxAdv-figure.dita">2013-05-01 - (Legislation &amp; Regulation) figure/glp:note to figure: Removed
              instructions for section "Pre-Release 4.0" because according to latest Apollo markup,
              section "Release 4.0 and after" and section "Pre-Release 4.0" now have similar
              conversion markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_h-Chof-figure-glp.note-LxAdv-figure-note-bodytext-h.dita">2013-05-01 - (Commentary &amp; Regulatroy) figure/glp:note/h to
              figure/note/bodytext/h: Removed instructions for section "Pre-Release 4.0" because
              according to latest Apollo markup, section "Release 4.0 and after" and section
              "Pre-Release 4.0" now have similar conversion markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-LxAdv-ref.inlineobject.dita">2013-05-01 - inlineobject to ref:inlineobject: Removed instructions for section
              "Pre-Release 4.0" because according to latest Apollo markup, section "Release 4.0 and
              after" and section "Pre-Release 4.0" now have similar conversion markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-remotelink-LxAdv-ref.crossreference_ref.content_ref.inlineobject.dita">2013-05-01 - inlineobject Child of remotelink to ref:inlineobject: Removed
              instructions for section "Pre-Release 4.0" because according to latest Apollo markup,
              section "Release 4.0 and after" and section "Pre-Release 4.0" now have similar
              conversion markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-LxAdv-figure_ref.inlineobject.dita">2013-05-01 - inlineobject to figure/ref:inlineobject: Removed instructions for
              section "Pre-Release 4.0" because according to latest Apollo markup, section "Release
              4.0 and after" and section "Pre-Release 4.0" now have similar conversion
              markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-h-LxAdv-figure_ref.inlineobject.dita">2013-05-01 - h/inlineobject to figure/ref:inlineobject: Removed instructions for
              section "Pre-Release 4.0" because according to latest Apollo markup, section "Release
              4.0 and after" and section "Pre-Release 4.0" now have similar conversion
              markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-emph-LxAdv-figure_ref.inlinobject.dita">2013-05-01 - emph/inlineobject to figure/ref:inlineobject: Removed instructions for
              section "Pre-Release 4.0" because according to latest Apollo markup, section "Release
              4.0 and after" and section "Pre-Release 4.0" now have similar conversion
              markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-sub-LxAdv-figure_ref.inlineobject.dita">2013-05-01 - sub/inlineobject to figure/ref:inlineobject: Removed instructions for
              section "Pre-Release 4.0" because according to latest Apollo markup, section "Release
              4.0 and after" and section "Pre-Release 4.0" now have similar conversion
              markup.</xd:a>
               </xd:li>
               <xd:li>2013-05-01 - glp:note/inlineobject to: Removed instructions for section "Pre-Release
            4.0" because according to latest Apollo markup, section "Release 4.0 and after" and
            section "Pre-Release 4.0" now have similar conversion markup.</xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-dispformula-LxAdv-formula_ref.inlineobject.dita">2013-05-01 - dispformula/inlineobject to formula/ref:inlineobject: Removed
              instructions for section "Pre-Release 4.0" because according to latest Apollo markup,
              section "Release 4.0 and after" and section "Pre-Release 4.0" now have similar
              conversion markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-p_blockquote-LxAdv-p_figure_ref.inlineobject.dita">2013-05-01 - p/blockquote/inlineobject to p/figure/ref:inlineobject: Removed
              instructions for section "Pre-Release 4.0" because according to latest Apollo markup,
              section "Release 4.0 and after" and section "Pre-Release 4.0" now have similar
              conversion markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-bodytext-LxAdv-bodytext_p_text_figure_ref.inlineobject.dita">2013-05-01 - bodytext/inlineobject to bodytext/p/text/figure/ref:inlineobject:
              Removed instructions for section "Pre-Release 4.0" because according to latest Apollo
              markup, section "Release 4.0 and after" and section "Pre-Release 4.0" now have similar
              conversion markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_link-LxAdv-ref.lnlink.dita">2013-05-01 - link to
              ref:lnlink/@service="ATTACHMENT": Updated instructions and target example per latest
              Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_bodytext-link-LxAdv-seclaw.bodytext-p-text-ref.lnlink.dita">2013-05-01 - bodytext/link to seclaw:bodytext/p/text/ref:lnlink: Updated instructions
              and target example per latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_leg.histnote-Chof-p-LxAdv-note.dita">2013-05-01
              - p/leg:histnote to note[@notetype="historical"]: Updated instructions and target
              example per latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_p-limited_remotelink-LxAdv-p_text_ref.lnlink.dita">2013-05-01 - p-limited/emph to p/text/emph: Removed instructions for section
              "Pre-Release 4.0" because according to latest Apollo markup, section "Release 4.0 and
              after" and section "Pre-Release 4.0" now have similar conversion markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2013-05-01 - remotelink to ref:crossreference: Removed instructions for section
              "Pre-Release 4.0" because according to latest Apollo markup, section "Release 4.0 and
              after" and section "Pre-Release 4.0" now have similar conversion markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2013-05-01 - remotelink to ref:crossreference: "Instruction added for
                <xd:i>ci:cite/ci:content/remotelink</xd:i> specifying that the
                <xd:i>remotelink</xd:i> is to be converted to
                <xd:b>ref:crossreference</xd:b> but the containing elements' start-tags
              and end-tags (<xd:i>ci:cite</xd:i> and <xd:i>ci:content</xd:i>)
              are dropped", has been removed from the instructions and now
                <xd:i>remotelink</xd:i> will be converted to the resulting mapping where
              it is. For more details you can see example: Source XML 10:
                <xd:i>remotelink</xd:i> as a child of
                <xd:i>ci:cite/ci:content</xd:i>
                  </xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_blockquote-LxAdv-blockquote.dita">2013-04-30 -
              blockquote to blockquote: Updated target sample according to latest Apollo
              markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_figure-LxAdv-figure.dita">2013-04-30 - figure to
              figure: Updated target sample according to latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_glp.note-Chof-figure-LxAdv-figure.dita">2013-04-30 - (Legislation &amp; Regulation) figure/glp:note to figure: Updated target
              sample according to latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_h-Chof-figure-glp.note-LxAdv-figure-note-bodytext-h.dita">2013-04-30 - (Commentary &amp; Regulatroy) figure/glp:note/h to
              figure/note/bodytext/h: Updated target sample according to latest Apollo
              markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-LxAdv-ref.inlineobject.dita">2013-04-30 - inlineobject to ref:inlineobject: Updated target sample according to
              latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-remotelink-LxAdv-ref.crossreference_ref.content_ref.inlineobject.dita">2013-04-30 - inlineobject Child of remotelink to ref:inlineobject: Updated target
              sample according to latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-LxAdv-figure_ref.inlineobject.dita">2013-04-30 - inlineobject to figure/ref:inlineobject: Updated target sample according
              to latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-h-LxAdv-figure_ref.inlineobject.dita">2013-04-30 - h/inlineobject to figure/ref:inlineobject: Updated target sample
              according to latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-emph-LxAdv-figure_ref.inlinobject.dita">2013-04-30 - emph/inlineobject to figure/ref:inlineobject: Updated target sample
              according to latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-sub-LxAdv-figure_ref.inlineobject.dita">2013-04-30 - sub/inlineobject to figure/ref:inlineobject: Updated target sample
              according to latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>2013-04-30 - glp:note/inlineobject to: Updated target sample according to latest
            Apollo markup.</xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-dispformula-LxAdv-formula_ref.inlineobject.dita">2013-04-30 - dispformula/inlineobject to formula/ref:inlineobject: Updated target
              sample according to latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-p_blockquote-LxAdv-p_figure_ref.inlineobject.dita">2013-04-30 - p/blockquote/inlineobject to p/figure/ref:inlineobject: Updated target
              sample according to latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_inlineobject-Chof-bodytext-LxAdv-bodytext_p_text_figure_ref.inlineobject.dita">2013-04-30 - bodytext/inlineobject to bodytext/p/text/figure/ref:inlineobject:
              Updated target sample according to latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_p-limited_remotelink-LxAdv-p_text_ref.lnlink.dita">2013-04-30 - p-limited/emph to p/text/emph: Updated target sample according to latest
              Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_remotelink-LxAdv-ref.crossreference.dita">2013-04-30 - remotelink to ref:crossreference: Updated target sample according to
              latest Apollo markup.</xd:a>
               </xd:li>
               <xd:li>
                  <xd:a href="../../common_newest/Rosetta_ci.cite-LxAdv-lnci.cite.dita">2013-04-24 -
              ci.cite to lnci.cite: Added a mapping for <xd:i>ci:procphrase</xd:i> to
                <xd:i>lnci:procphrase</xd:i>
                  </xd:a>
               </xd:li>
            </xd:ul>
         </xd:p>
         <xd:p>
            <xd:b>seclaw 6.1 PROD</xd:b>
         </xd:p>
         <xd:p>2013-04-24<xd:ul>
               <xd:li>Created</xd:li>
            </xd:ul>
         </xd:p>
      </xd:desc>
   </xd:doc>
   <!--  @@@ This file has been autogenerated.  Remove this comment after manual development complete! @@@  -->
   <!--    Original DITA file location:  DITA\ConversionInstructions\Rosetta\DITA-UK\UK15-PracticalGuidance\UK15PG_COMMENTARYDOC_changeLog.dita  -->
   <!--	<xsl:message>UK15PG_COMMENTARYDOC_changeLog.xsl requires manual development!</xsl:message> -->
   <!--		<xsl:include href="../../modules/nonamespace/Rosetta_url-Chof-ci.content-LxAdv-url.xsl"/>-->
</xsl:stylesheet>
